{
    "desc": "<p>A render object used as a placeholder when an error occurs.<\/p>\n<p>The box will be painted in the color given by the\n<a href=\"rendering\/RenderErrorBox\/backgroundColor.html\">RenderErrorBox.backgroundColor<\/a> static property.<\/p>\n<p>A message can be provided. To simplify the class and thus help reduce the\nlikelihood of this class itself being the source of errors, the message\ncannot be changed once the object has been created. If provided, the text\nwill be painted on top of the background, using the styles given by the\n<a href=\"rendering\/RenderErrorBox\/textStyle.html\">RenderErrorBox.textStyle<\/a> and <a href=\"rendering\/RenderErrorBox\/paragraphStyle.html\">RenderErrorBox.paragraphStyle<\/a> static\nproperties.<\/p>\n<p>Again to help simplify the class, this box tries to be 100000.0 pixels wide\nand high, to approximate being infinitely high but without using infinities.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "rendering\/RenderErrorBox-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderErrorBox",
    "shortname": "RenderErrorBox",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a RenderErrorBox render object.<\/p>\n<p>A message can optionally be provided. If a message is provided, an attempt\nwill be made to render the message when the box paints.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderErrorBox([ this.message = '' ]) {\n  try {\n    if (message != '') {\n      \/\/ This class is intentionally doing things using the low-level\n      \/\/ primitives to avoid depending on any subsystems that may have ended\n      \/\/ up in an unstable state -- after all, this class is mainly used when\n      \/\/ things have gone wrong.\n      \/\/\n      \/\/ Generally, the much better way to draw text in a RenderObject is to\n      \/\/ use the TextPainter class. If you're looking for code to crib from,\n      \/\/ see the paragraph.dart file and the RenderParagraph class.\n      final ui.ParagraphBuilder builder = ui.ParagraphBuilder(paragraphStyle);\n      builder.pushStyle(textStyle);\n      builder.addText(\n        '$message$_kLine$message$_kLine$message$_kLine$message$_kLine$message$_kLine$message$_kLine'\n        '$message$_kLine$message$_kLine$message$_kLine$message$_kLine$message$_kLine$message'\n      );\n      _paragraph = builder.build();\n    }\n  } catch (e) {\n    \/\/ Intentionally left empty.\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/RenderErrorBox.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": [
                {
                    "name": "message",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderBox\/performLayout.html\">performLayout<\/a>. Should return the\nsmallest height beyond which increasing the height never decreases the\npreferred width. The preferred width is the value that would be returned\nby <a href=\"rendering\/RenderBox\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for that height.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderBox\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for the same width.<\/p>\n<p>Otherwise, the width argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderBox\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a>.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderBox\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicHeight(double width) {\n  return _kMaxHeight;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/computeMaxIntrinsicHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderBox\/performLayout.html\">performLayout<\/a>. This should return\nthe smallest width beyond which increasing the width never decreases the\npreferred height. The preferred height is the value that would be returned\nby <a href=\"rendering\/RenderBox\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for that width.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderBox\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for the same height.<\/p>\n<p>Otherwise, the height argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderBox\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderBox\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicWidth(double height) {\n  return _kMaxWidth;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/computeMaxIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) =&gt; true;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/hitTestSelf.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  try {\n    context.canvas.drawRect(offset &amp; size, Paint() .. color = backgroundColor);\n    double width;\n    if (_paragraph != null) {\n      \/\/ See the comment in the RenderErrorBox constructor. This is not the\n      \/\/ code you want to be copying and pasting. :-)\n      if (parent is RenderBox) {\n        final RenderBox parentBox = parent;\n        width = parentBox.size.width;\n      } else {\n        width = size.width;\n      }\n      _paragraph.layout(ui.ParagraphConstraints(width: width));\n\n      context.canvas.drawParagraph(_paragraph, offset);\n    }\n  } catch (e) {\n    \/\/ Intentionally left empty.\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Updates the render objects size using only the constraints.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>Subclasses that set <a href=\"rendering\/RenderErrorBox\/sizedByParent.html\">sizedByParent<\/a> to true should override this method\nto compute their size.<\/p>\n<p>This function is called only if <a href=\"rendering\/RenderErrorBox\/sizedByParent.html\">sizedByParent<\/a> is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performResize() {\n  size = constraints.constrain(const Size(_kMaxWidth, _kMaxHeight));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderErrorBox\/performResize.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when painting the background of <a href=\"rendering\/RenderErrorBox-class.html\">RenderErrorBox<\/a> objects.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Color backgroundColor = const Color(0xF0900000)\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderErrorBox\/backgroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        },
        {
            "desc": "<p>The message to attempt to display at paint time.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderErrorBox\/message.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        },
        {
            "desc": "<p>The paragraph style to use when painting <a href=\"rendering\/RenderErrorBox-class.html\">RenderErrorBox<\/a> objects.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static ui.ParagraphStyle paragraphStyle = ui.ParagraphStyle(\n  height: 1.0,\n)\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderErrorBox\/paragraphStyle.html",
            "isDeprecated": "0",
            "type": "dart:ui.ParagraphStyle",
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        },
        {
            "desc": "<p>Whether the constraints are the only input to the sizing algorithm (in\nparticular, child nodes have no impact).<\/p>\n<p>Returning false is always correct, but returning true can be more\nefficient when computing the size of this render object because we don't\nneed to recompute the size if the constraints don't change.<\/p>\n<p>Typically, subclasses will always return the same value. If the value can\nchange, then, when it does change, the subclass should make sure to call\n<a href=\"rendering\/RenderObject\/markNeedsLayoutForSizedByParentChange.html\">markNeedsLayoutForSizedByParentChange<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get sizedByParent =&gt; true;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderErrorBox\/sizedByParent.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        },
        {
            "desc": "<p>The text style to use when painting <a href=\"rendering\/RenderErrorBox-class.html\">RenderErrorBox<\/a> objects.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static ui.TextStyle textStyle = ui.TextStyle(\n  color: const Color(0xFFFFFF66),\n  fontFamily: 'monospace',\n  fontSize: 14.0,\n  fontWeight: FontWeight.bold,\n)\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderErrorBox\/textStyle.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextStyle",
            "memberOf": "rendering.RenderErrorBox",
            "params": []
        }
    ]
}