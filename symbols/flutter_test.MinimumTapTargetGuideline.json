{
    "desc": "<p>A guideline which enforces that all tapable semantics nodes have a minimum\nsize.<\/p>\n<p>Each platform defines its own guidelines for minimum tap areas.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "flutter_test\/MinimumTapTargetGuideline-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.MinimumTapTargetGuideline",
    "shortname": "MinimumTapTargetGuideline",
    "extends": [
        "flutter_test.AccessibilityGuideline",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFutureOr&lt;Evaluation&gt; evaluate(WidgetTester tester) {\n  final SemanticsNode root = tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n  Evaluation traverse(SemanticsNode node) {\n    Evaluation result = const Evaluation.pass();\n    node.visitChildren((SemanticsNode child) {\n      result += traverse(child);\n      return true;\n    });\n    if (node.isMergedIntoParent)\n      return result;\n    final SemanticsData data = node.getSemanticsData();\n    \/\/ Skip node if it has no actions, or is marked as hidden.\n    if ((!data.hasAction(ui.SemanticsAction.longPress)\n      &amp;&amp; !data.hasAction(ui.SemanticsAction.tap))\n      || data.hasFlag(ui.SemanticsFlag.isHidden))\n      return result;\n    Rect paintBounds = node.rect;\n    SemanticsNode current = node;\n    while (current != null) {\n      if (current.transform != null)\n        paintBounds = MatrixUtils.transformRect(current.transform, paintBounds);\n      current = current.parent;\n    }\n    \/\/ skip node if it is touching the edge of the screen, since it might\n    \/\/ be partially scrolled offscreen.\n    const double delta = 0.001;\n    if (paintBounds.left &lt;= delta\n      || paintBounds.top &lt;= delta\n      || (paintBounds.bottom - tester.binding.window.physicalSize.height).abs() &lt;= delta\n      || (paintBounds.right - tester.binding.window.physicalSize.width).abs() &lt;= delta)\n      return result;\n    \/\/ shrink by device pixel ratio.\n    final Size candidateSize = paintBounds.size \/ tester.binding.window.devicePixelRatio;\n    if (candidateSize.width &lt; size.width || candidateSize.height &lt; size.height)\n      result += Evaluation.fail(\n        '$node: expected tap target size of at least $size, but found $candidateSize\\n'\n        'See also: $link');\n    return result;\n  }\n  return traverse(root);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/MinimumTapTargetGuideline\/evaluate.html",
            "isDeprecated": "0",
            "type": "dart:async.FutureOr<flutter_test.Evaluation>",
            "name": "evaluate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.MinimumTapTargetGuideline",
            "params": [
                {
                    "name": "tester",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "flutter_test.WidgetTester"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get description =&gt; 'Tappable objects should be at least $size';<\/code><\/pre>\n        ",
            "href": "flutter_test\/MinimumTapTargetGuideline\/description.html",
            "name": "description",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "flutter_test.MinimumTapTargetGuideline",
            "params": []
        },
        {
            "desc": "<p>A link describing the tap target guidelines for a platform.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String link\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/MinimumTapTargetGuideline\/link.html",
            "name": "link",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "flutter_test.MinimumTapTargetGuideline",
            "params": []
        },
        {
            "desc": "<p>The minimum allowed size of a tapable node.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size size\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/MinimumTapTargetGuideline\/size.html",
            "name": "size",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "memberOf": "flutter_test.MinimumTapTargetGuideline",
            "params": []
        }
    ]
}