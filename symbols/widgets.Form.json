{
    "name": "widgets.Form",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [
        {
            "name": "onChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>Called when one of the form fields changes.<\/p>\n<p>In addition to this callback being invoked, all the form fields themselves\nwill rebuild.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Form\/onChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onChanged\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onWillPop",
            "type": "widgets.WillPopCallback",
            "desc": "<p>Enables the form to veto attempts by the user to dismiss the <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>\nthat contains the form.<\/p>\n<p>If the callback returns a Future that resolves to false, the form's route\nwill not be popped.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WillPopScope-class.html\">WillPopScope<\/a>, another widget that provides a way to intercept the\nback button.<\/li><\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Form\/onWillPop.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WillPopCallback onWillPop\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "Form",
            "type": "",
            "desc": "<p>Creates a container for form fields.<\/p>\n<p>The <code>child<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Form",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "autovalidate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onWillPop",
                    "type": "widgets.WillPopCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Form\/Form.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Form({\n  Key key,\n  @required this.child,\n  this.autovalidate = false,\n  this.onWillPop,\n  this.onChanged,\n}) : assert(child != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "widgets.FormState",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Form\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Form",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Form\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFormState createState() =&gt; FormState();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "of",
            "type": "widgets.FormState",
            "desc": "<p>Returns the closest <a href=\"widgets\/FormState-class.html\">FormState<\/a> which encloses the given context.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">FormState form = Form.of(context);\nform.save();\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "widgets.Form",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Form\/of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FormState of(BuildContext context) {\n  final _FormScope scope = context.inheritFromWidgetOfExactType(_FormScope);\n  return scope?._formState;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "autovalidate",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>If true, form fields will validate and update their error text\nimmediately after every change. Otherwise, you must call\n<a href=\"widgets\/FormState\/validate.html\">FormState.validate<\/a> to validate.<\/p>\n        ",
            "memberOf": "widgets.Form",
            "isConstant": false,
            "href": "widgets\/Form\/autovalidate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autovalidate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This is the root of the widget hierarchy that contains this form.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "widgets.Form",
            "isConstant": false,
            "href": "widgets\/Form\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.FormState"
    ],
    "realImplementors": [
        "widgets.FormState"
    ],
    "cn": [],
    "href": "widgets\/Form-class.html",
    "desc": "<p>An optional container for grouping together multiple form field widgets\n(e.g. <a href=\"material\/TextField-class.html\">TextField<\/a> widgets).<\/p>\n<p>Each individual form field should be wrapped in a <a href=\"widgets\/FormField-class.html\">FormField<\/a> widget, with\nthe <a href=\"widgets\/Form-class.html\">Form<\/a> widget as a common ancestor of all of those. Call methods on\n<a href=\"widgets\/FormState-class.html\">FormState<\/a> to save, reset, or validate each <a href=\"widgets\/FormField-class.html\">FormField<\/a> that is a\ndescendant of this <a href=\"widgets\/Form-class.html\">Form<\/a>. To obtain the <a href=\"widgets\/FormState-class.html\">FormState<\/a>, you may use <a href=\"widgets\/Form\/of.html\">Form.of<\/a>\nwith a context whose ancestor is the <a href=\"widgets\/Form-class.html\">Form<\/a>, or pass a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> to the\n<a href=\"widgets\/Form-class.html\">Form<\/a> constructor and call <a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example shows a <a href=\"widgets\/Form-class.html\">Form<\/a> with one <a href=\"material\/TextFormField-class.html\">TextFormField<\/a> and a <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>. A\n<a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> is used here to identify the <a href=\"widgets\/Form-class.html\">Form<\/a> and validate input.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">final _formKey = GlobalKey&lt;FormState&gt;();\n\n@override\nWidget build(BuildContext context) {\n  return Form(\n    key: _formKey,\n    child: Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: &lt;Widget&gt;[\n        TextFormField(\n          validator: (value) {\n            if (value.isEmpty) {\n              return 'Please enter some text';\n            }\n          },\n        ),\n        Padding(\n          padding: const EdgeInsets.symmetric(vertical: 16.0),\n          child: RaisedButton(\n            onPressed: () {\n              \/\/ Validate will return true if the form is valid, or false if\n              \/\/ the form is invalid.\n              if (_formKey.currentState.validate()) {\n                \/\/ Process data.\n              }\n            },\n            child: Text('Submit'),\n          ),\n        ),\n      ],\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=widgets.Form.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for widgets.Form.1\n\n\/\/ This example shows a [Form] with one [TextFormField] and a [RaisedButton]. A\n\/\/ [GlobalKey] is used here to identify the [Form] and validate input.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatefulWidget(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  final _formKey = GlobalKey&lt;FormState&gt;();\n\n  @override\n  Widget build(BuildContext context) {\n    return Form(\n      key: _formKey,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: &lt;Widget&gt;[\n          TextFormField(\n            validator: (value) {\n              if (value.isEmpty) {\n                return 'Please enter some text';\n              }\n            },\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: 16.0),\n            child: RaisedButton(\n              onPressed: () {\n                \/\/ Validate will return true if the form is valid, or false if\n                \/\/ the form is invalid.\n                if (_formKey.currentState.validate()) {\n                  \/\/ Process data.\n                }\n              },\n              child: Text('Submit'),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>, a key that is unique across the entire app.<\/li>\n<li>\n<a href=\"widgets\/FormField-class.html\">FormField<\/a>, a single form field widget that maintains the current state.<\/li>\n<li>\n<a href=\"material\/TextFormField-class.html\">TextFormField<\/a>, a convenience widget that wraps a <a href=\"material\/TextField-class.html\">TextField<\/a> widget in a <a href=\"widgets\/FormField-class.html\">FormField<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Form"
}