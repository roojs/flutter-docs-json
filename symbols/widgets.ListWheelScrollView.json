{
    "desc": "<p>A box in which children on a wheel can be scrolled.<\/p>\n<p>This widget is similar to a <a href=\"widgets\/ListView-class.html\">ListView<\/a> but with the restriction that all\nchildren must be the same size along the scrolling axis.<\/p>\n<p>When the list is at the zero scroll offset, the first child is aligned with\nthe middle of the viewport. When the list is at the final scroll offset,\nthe last child is aligned with the middle of the viewport<\/p>\n<p>The children are rendered as if rotating on a wheel instead of scrolling on\na plane.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ListWheelScrollView-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ListWheelScrollView",
    "shortname": "ListWheelScrollView",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>On optional listener that's called when the centered item changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onSelectedItemChanged\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/onSelectedItemChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.int>",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Constructs a list in which children are scrolled a wheel. Its children\nare passed to a delegate and lazily built during layout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListWheelScrollView({\n  Key key,\n  this.controller,\n  this.physics,\n  this.diameterRatio = RenderListWheelViewport.defaultDiameterRatio,\n  this.perspective = RenderListWheelViewport.defaultPerspective,\n  this.offAxisFraction = 0.0,\n  this.useMagnifier = false,\n  this.magnification = 1.0,\n  @required this.itemExtent,\n  this.onSelectedItemChanged,\n  this.clipToSize = true,\n  this.renderChildrenOutsideViewport = false,\n  @required List&lt;Widget&gt; children,\n}) : assert(children != null),\n     assert(diameterRatio != null),\n     assert(diameterRatio &gt; 0.0, RenderListWheelViewport.diameterRatioZeroMessage),\n     assert(perspective != null),\n     assert(perspective &gt; 0),\n     assert(perspective &lt;= 0.01, RenderListWheelViewport.perspectiveTooHighMessage),\n     assert(magnification &gt; 0),\n     assert(itemExtent != null),\n     assert(itemExtent &gt; 0),\n     assert(clipToSize != null),\n     assert(renderChildrenOutsideViewport != null),\n     assert(\n       !renderChildrenOutsideViewport || !clipToSize,\n       RenderListWheelViewport.clipToSizeAndRenderChildrenOutsideViewportConflict,\n     ),\n     childDelegate = ListWheelChildListDelegate(children: children),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelScrollView\/ListWheelScrollView.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ListWheelScrollView",
            "params": [
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "clipToSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "controller",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.ScrollController"
                },
                {
                    "name": "diameterRatio",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "itemExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "magnification",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "offAxisFraction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "onSelectedItemChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.int>"
                },
                {
                    "name": "perspective",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "physics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                },
                {
                    "name": "renderChildrenOutsideViewport",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "useMagnifier",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/ListWheelScrollView\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ListWheelScrollViewState createState() =&gt; _ListWheelScrollViewState();<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelScrollView\/createState.html",
            "isDeprecated": "0",
            "type": "<_ListWheelScrollViewState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>A delegate that helps lazily instantiating child.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ListWheelChildDelegate childDelegate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/childDelegate.html",
            "isDeprecated": "0",
            "type": "widgets.ListWheelChildDelegate",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Whether to clip painted children to the inside of this viewport.<\/p>\n<p>Defaults to <code>true<\/code>. Must not be null.<\/p>\n<p>If this is false and <a href=\"widgets\/ListWheelScrollView\/renderChildrenOutsideViewport.html\">renderChildrenOutsideViewport<\/a> is false, the\nfirst and last children may be painted partly outside of this scroll view.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool clipToSize\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/clipToSize.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Typically a <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> used to control the current item.<\/p>\n<p>A <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> can be used to read the currently\nselected\/centered child item and can be used to change the current item.<\/p>\n<p>If none is provided, a new <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> is implicitly\ncreated.<\/p>\n<p>If a <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> is used instead of <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a>,\n<a href=\"widgets\/ScrollNotification\/metrics.html\">ScrollNotification.metrics<\/a> will no longer provide <a href=\"widgets\/FixedExtentMetrics-class.html\">FixedExtentMetrics<\/a>\nto indicate the current item index and <a href=\"widgets\/ListWheelScrollView\/onSelectedItemChanged.html\">onSelectedItemChanged<\/a> will not\nwork.<\/p>\n<p>To read the current selected item only when the value changes, use\n<a href=\"widgets\/ListWheelScrollView\/onSelectedItemChanged.html\">onSelectedItemChanged<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController controller\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/controller.html",
            "isDeprecated": "0",
            "type": "widgets.ScrollController",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>A ratio between the diameter of the cylinder and the viewport's size\nin the main axis.<\/p>\n<p>A value of 1 means the cylinder has the same diameter as the viewport's\nsize.<\/p>\n<p>A value smaller than 1 means items at the edges of the cylinder are\nentirely contained inside the viewport.<\/p>\n<p>A value larger than 1 means angles less than \u00b1<a href=\"dart-math\/pi-constant.html\">pi<\/a> \/ 2 from the\ncenter of the cylinder are visible.<\/p>\n<p>The same number of children will be visible in the viewport regardless of\nthe <a href=\"widgets\/ListWheelScrollView\/diameterRatio.html\">diameterRatio<\/a>. The number of children visible is based on the\nviewport's length along the main axis divided by the children's\n<a href=\"widgets\/ListWheelScrollView\/itemExtent.html\">itemExtent<\/a>. Then the children are evenly distributed along the visible\nangles up to \u00b1<a href=\"dart-math\/pi-constant.html\">pi<\/a> \/ 2.<\/p>\n<p>Just as it's impossible to stretch a paper to cover the an entire\nhalf of a cylinder's surface where the cylinder has the same diameter\nas the paper's length, choosing a <a href=\"widgets\/ListWheelScrollView\/diameterRatio.html\">diameterRatio<\/a> smaller than <a href=\"dart-math\/pi-constant.html\">pi<\/a>\nwill leave same gaps between the children.<\/p>\n<p>Defaults to an arbitrary but aesthetically reasonable number of 2.0.<\/p>\n<p>Must not be null and must be positive.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double diameterRatio\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/diameterRatio.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Size of each child in the main axis. Must not be null and must be\npositive.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double itemExtent\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/itemExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>null<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double magnification\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/magnification.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>How much the wheel is horizontally off-center, as a fraction of its width.\nThis property creates the visual effect of looking at a vertical wheel from\nits side where its vanishing points at the edge curves to one side instead\nof looking at the wheel head-on.<\/p>\n<p>The value is horizontal distance between the wheel's center and the vertical\nvanishing line at the edges of the wheel, represented as a fraction of the\nwheel's width.<\/p>\n<p>The value <code>0.0<\/code> means the wheel is looked at head-on and its vanishing\nline runs through the center of the wheel. Negative values means moving\nthe wheel to the left of the observer, thus the edges curve to the right.\nPositive values means moving the wheel to the right of the observer,\nthus the edges curve to the left.<\/p>\n<p>The visual effect causes the wheel's edges to curve rather than moving\nthe center. So a value of <code>0.5<\/code> means the edges' vanishing line will touch\nthe wheel's size's left edge.<\/p>\n<p>Defaults to 0.0, which means looking at the wheel head-on.\nThe visual effect can be unaesthetic if this value is too far from the\nrange <code>-0.5, 0.5<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double offAxisFraction\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/offAxisFraction.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Perspective of the cylindrical projection.<\/p>\n<p>A number between 0 and 0.01 where 0 means looking at the cylinder from\ninfinitely far with an infinitely small field of view and 1 means looking\nat the cylinder from infinitely close with an infinitely large field of\nview (which cannot be rendered).<\/p>\n<p>Defaults to an arbitrary but aesthetically reasonable number of 0.003.\nA larger number brings the vanishing point closer and a smaller number\npushes the vanishing point further.<\/p>\n<p>Must not be null and must be positive.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double perspective\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/perspective.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>How the scroll view should respond to user input.<\/p>\n<p>For example, determines how the scroll view continues to animate after the\nuser stops dragging the scroll view.<\/p>\n<p>Defaults to matching platform conventions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/physics.html",
            "isDeprecated": "0",
            "type": "widgets.ScrollPhysics",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Whether to paint children inside the viewport only.<\/p>\n<p>If false, every child will be painted. However the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> is still\nthe size of the viewport and detects gestures inside only.<\/p>\n<p>Defaults to <code>false<\/code>. Must not be null. Cannot be true if <a href=\"widgets\/ListWheelScrollView\/clipToSize.html\">clipToSize<\/a>\nis also true since children outside the viewport will be clipped, and\ntherefore cannot render children outside the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool renderChildrenOutsideViewport\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/renderChildrenOutsideViewport.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        },
        {
            "desc": "<p>Whether to use the magnifier for the center item of the wheel.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool useMagnifier\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelScrollView\/useMagnifier.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.ListWheelScrollView",
            "params": []
        }
    ]
}