{
    "desc": "<p>The current state of a <a href=\"widgets\/FormField-class.html\">FormField<\/a>. Passed to the <a href=\"widgets\/FormFieldBuilder.html\">FormFieldBuilder<\/a> method\nfor use in constructing the form field's widget.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/FormFieldState-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FormFieldState",
    "shortname": "FormFieldState",
    "extends": [
        "widgets.FormField",
        "widgets.State",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "widgets\/FormFieldState\/FormFieldState.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method in a number of different situations:<\/p>\n<ul>\n<li>After calling <a href=\"widgets\/FormFieldState\/initState.html\">initState<\/a>.<\/li>\n<li>After calling <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>.<\/li>\n<li>After receiving a call to <a href=\"widgets\/State\/setState.html\">setState<\/a>.<\/li>\n<li>After a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes (e.g., an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by the previous <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> changes).<\/li>\n<li>After calling <a href=\"widgets\/FormFieldState\/deactivate.html\">deactivate<\/a> and then reinserting the <a href=\"widgets\/State-class.html\">State<\/a> object into\nthe tree at another location.<\/li>\n<\/ul>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor, the\ngiven <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, and the internal state of this <a href=\"widgets\/State-class.html\">State<\/a> object.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. The\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is always the same as the <code>context<\/code> property of\nthis <a href=\"widgets\/State-class.html\">State<\/a> object and will remain the same for the lifetime of this\nobject. The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is provided redundantly here so that\nthis method matches the signature for a <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<h3 id=\"why-is-the-build-method-on-state-and-not-statefulwidget\">Why is the <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> method on <a href=\"widgets\/State-class.html\">State<\/a>, and not <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>?<\/h3>\n<p>Putting a <code>Widget build(BuildContext context)<\/code> method on <a href=\"widgets\/State-class.html\">State<\/a> rather\nputting a <code>Widget build(BuildContext context, State state)<\/code> method on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> gives developers more flexibility when subclassing\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<p>For example, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> is a subclass of <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that\nintroduces an abstract <code>Widget build(BuildContext context)<\/code> method for its\nsubclasses to implement. If <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> already had a <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> method\nthat took a <a href=\"widgets\/State-class.html\">State<\/a> argument, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> would be forced to provide\nits <a href=\"widgets\/State-class.html\">State<\/a> object to subclasses even though its <a href=\"widgets\/State-class.html\">State<\/a> object is an\ninternal implementation detail of <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>.<\/p>\n<p>Conceptually, <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> could also be implemented as a subclass of\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> in a similar manner. If the <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> method were on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> rather than <a href=\"widgets\/State-class.html\">State<\/a>, that would not be possible anymore.<\/p>\n<p>Putting the <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> function on <a href=\"widgets\/State-class.html\">State<\/a> rather than <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> also\nhelps avoid a category of bugs related to closures implicitly capturing\n<code>this<\/code>. If you defined a closure in a <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> function on a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, that closure would implicitly capture <code>this<\/code>, which is\nthe current widget instance, and would have the (immutable) fields of that\ninstance in scope:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButton extends StatefulWidget {\n  ...\n  final Color color;\n\n  @override\n  Widget build(BuildContext context, MyButtonState state) {\n    ... () { print(\"color: $color\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>For example, suppose the parent builds <code>MyButton<\/code> with <code>color<\/code> being blue,\nthe <code>$color<\/code> in the print function refers to blue, as expected. Now,\nsuppose the parent rebuilds <code>MyButton<\/code> with green. The closure created by\nthe first build still implicitly refers to the original widget and the\n<code>$color<\/code> still prints blue even through the widget has been updated to\ngreen.<\/p>\n<p>In contrast, with the <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> function on the <a href=\"widgets\/State-class.html\">State<\/a> object, closures\ncreated during <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> implicitly capture the <a href=\"widgets\/State-class.html\">State<\/a> instance instead of\nthe widget instance:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButtonState extends State&lt;MyButton&gt; {\n  ...\n  @override\n  Widget build(BuildContext context) {\n    ... () { print(\"color: ${widget.color}\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>Now when the parent rebuilds <code>MyButton<\/code> with green, the closure created by\nthe first build still refers to <a href=\"widgets\/State-class.html\">State<\/a> object, which is preserved across\nrebuilds, but the framework has updated that <a href=\"widgets\/State-class.html\">State<\/a> object's <a href=\"widgets\/State\/widget.html\">widget<\/a>\nproperty to refer to the new <code>MyButton<\/code> instance and <code>${widget.color}<\/code>\nprints green, as expected.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  \/\/ Only autovalidate if the widget is also enabled\n  if (widget.autovalidate &amp;&amp; widget.enabled)\n    _validate();\n  Form.of(context)?._register(this);\n  return widget.builder(this);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is removed from the tree.<\/p>\n<p>The framework calls this method whenever it removes this <a href=\"widgets\/State-class.html\">State<\/a> object\nfrom the tree. In some cases, the framework will reinsert the <a href=\"widgets\/State-class.html\">State<\/a>\nobject into another part of the tree (e.g., if the subtree containing this\n<a href=\"widgets\/State-class.html\">State<\/a> object is grafted from one location in the tree to another). If\nthat happens, the framework will ensure that it calls <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> to give the\n<a href=\"widgets\/State-class.html\">State<\/a> object a chance to adapt to its new location in the tree. If\nthe framework does reinsert this subtree, it will do so before the end of\nthe animation frame in which the subtree was removed from the tree. For\nthis reason, <a href=\"widgets\/State-class.html\">State<\/a> objects can defer releasing most resources until the\nframework calls their <a href=\"widgets\/State\/dispose.html\">dispose<\/a> method.<\/p>\n<p>Subclasses should override this method to clean up any links between\nthis object and other elements in the tree (e.g. if you have provided an\nancestor with a pointer to a descendant's <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>).<\/p>\n<p>If you override this, make sure to end your method with a call to\nsuper.deactivate().<\/p>\n<p>See also <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, which is called after <a href=\"widgets\/FormFieldState\/deactivate.html\">deactivate<\/a> if the widget is\nremoved from the tree permanently.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid deactivate() {\n  Form.of(context)?._unregister(this);\n  super.deactivate();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/deactivate.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>Updates this field's state to the new value. Useful for responding to\nchild widget changes, e.g. <a href=\"material\/Slider-class.html\">Slider<\/a>'s <a href=\"material\/Slider\/onChanged.html\">Slider.onChanged<\/a> argument.<\/p>\n<p>Triggers the <a href=\"widgets\/Form\/onChanged.html\">Form.onChanged<\/a> callback and, if the <a href=\"widgets\/Form\/autovalidate.html\">Form.autovalidate<\/a>\nfield is set, revalidates all the fields of the form.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChange(T value) {\n  setState(() {\n    _value = value;\n  });\n  Form.of(context)?._fieldDidChange();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/didChange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is inserted into the tree.<\/p>\n<p>The framework will call this method exactly once for each <a href=\"widgets\/State-class.html\">State<\/a> object\nit creates.<\/p>\n<p>Override this method to perform initialization that depends on the\nlocation at which this object was inserted into the tree (i.e., <a href=\"widgets\/State\/context.html\">context<\/a>)\nor on the widget used to configure this object (i.e., <a href=\"widgets\/State\/widget.html\">widget<\/a>).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/FormFieldState\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/FormFieldState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/State\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/FormFieldState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, unsubscribe from the object.\nYou cannot use <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this\nmethod. However, <a href=\"widgets\/State\/didChangeDependencies.html\">didChangeDependencies<\/a> will be called immediately\nfollowing this method, and <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> can\nbe used there.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.initState().<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initState() {\n  super.initState();\n  _value = widget.initialValue;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/initState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>Resets the field to its initial value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset() {\n  setState(() {\n    _value = widget.initialValue;\n    _errorText = null;\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/reset.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>Calls the <a href=\"widgets\/FormField-class.html\">FormField<\/a>'s onSaved method with the current value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void save() {\n  if (widget.onSaved != null)\n    widget.onSaved(value);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/save.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>Sets the value associated with this form field.<\/p>\n<p>This method should be only be called by subclasses that need to update\nthe form field value due to state changes identified during the widget\nbuild phase, when calling <code>setState<\/code> is prohibited. In all other cases,\nthe value should be set by a call to <a href=\"widgets\/FormFieldState\/didChange.html\">didChange<\/a>, which ensures that\n<code>setState<\/code> is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid setValue(T value) {\n  _value = value;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/setValue.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Calls <a href=\"widgets\/FormField\/validator.html\">FormField.validator<\/a> to set the <a href=\"widgets\/FormFieldState\/errorText.html\">errorText<\/a>. Returns true if there\nwere no errors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool validate() {\n  setState(() {\n    _validate();\n  });\n  return !hasError;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FormFieldState\/validate.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FormFieldState",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The current validation error returned by the <a href=\"widgets\/FormField\/validator.html\">FormField.validator<\/a>\ncallback, or null if no errors have been triggered. This only updates when\n<a href=\"widgets\/FormFieldState\/validate.html\">validate<\/a> is called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get errorText =&gt; _errorText;<\/code><\/pre>\n        ",
            "href": "widgets\/FormFieldState\/errorText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.FormFieldState",
            "params": []
        },
        {
            "desc": "<p>True if this field has any validation errors.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasError =&gt; _errorText != null;<\/code><\/pre>\n        ",
            "href": "widgets\/FormFieldState\/hasError.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.FormFieldState",
            "params": []
        }
    ]
}