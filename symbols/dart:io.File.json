{
    "desc": "<p>A reference to a file on the file system.<\/p>\n<p>A File instance is an object that holds a <a href=\"dart-io\/File\/path.html\">path<\/a> on which operations can\nbe performed.\nYou can get the parent directory of the file using the getter <a href=\"dart-io\/FileSystemEntity\/parent.html\">parent<\/a>,\na property inherited from <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Create a new File object with a pathname to access the specified file on the\nfile system from your program.<\/p>\n<pre class=\"language-dart\"><code>var myFile = new File('file.txt');\n<\/code><\/pre>\n<p>The File class contains methods for manipulating files and their contents.\nUsing methods in this class, you can open and close files, read to and write\nfrom them, create and delete them, and check for their existence.<\/p>\n<p>When reading or writing a file, you can use streams (with <a href=\"dart-io\/File\/openRead.html\">openRead<\/a>),\nrandom access operations (with <a href=\"dart-io\/File\/open.html\">open<\/a>),\nor convenience methods such as <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a>,<\/p>\n<p>Most methods in this class occur in synchronous and asynchronous pairs,\nfor example, <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a> and <a href=\"dart-io\/File\/readAsStringSync.html\">readAsStringSync<\/a>.\nUnless you have a specific reason for using the synchronous version\nof a method, prefer the asynchronous version to avoid blocking your program.<\/p>\n<h2 id=\"if-path-is-a-link\">If path is a link<\/h2>\n<p>If <a href=\"dart-io\/File\/path.html\">path<\/a> is a symbolic link, rather than a file,\nthen the methods of File operate on the ultimate target of the\nlink, except for <a href=\"dart-io\/FileSystemEntity\/delete.html\">delete<\/a> and <a href=\"dart-io\/FileSystemEntity\/deleteSync.html\">deleteSync<\/a>, which operate on\nthe link.<\/p>\n<h2 id=\"read-from-a-file\">Read from a file<\/h2>\n<p>The following code sample reads the entire contents from a file as a string\nusing the asynchronous <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a> method:<\/p>\n<pre class=\"language-dart\"><code>import 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  new File('file.txt').readAsString().then((String contents) {\n    print(contents);\n  });\n}\n<\/code><\/pre>\n<p>A more flexible and useful way to read a file is with a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.\nOpen the file with <a href=\"dart-io\/File\/openRead.html\">openRead<\/a>, which returns a stream that\nprovides the data in the file as chunks of bytes.\nListen to the stream for data and process as needed.\nYou can use various transformers in succession to manipulate the\ndata into the required format or to prepare it for output.<\/p>\n<p>You might want to use a stream to read large files,\nto manipulate the data with transformers,\nor for compatibility with another API, such as <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a>s.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\nimport 'dart:convert';\nimport 'dart:async';\n\nmain() {\n  final file = new File('file.txt');\n  Stream&lt;List&lt;int&gt;&gt; inputStream = file.openRead();\n\n  inputStream\n    .transform(utf8.decoder)       \/\/ Decode bytes to UTF-8.\n    .transform(new LineSplitter()) \/\/ Convert stream to individual lines.\n    .listen((String line) {        \/\/ Process results.\n        print('$line: ${line.length} bytes');\n      },\n      onDone: () { print('File is now closed.'); },\n      onError: (e) { print(e.toString()); });\n}\n<\/code><\/pre>\n<h2 id=\"write-to-a-file\">Write to a file<\/h2>\n<p>To write a string to a file, use the <a href=\"dart-io\/File\/writeAsString.html\">writeAsString<\/a> method:<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  final filename = 'file.txt';\n  new File(filename).writeAsString('some content')\n    .then((File file) {\n      \/\/ Do something with the file.\n    });\n}\n<\/code><\/pre>\n<p>You can also write to a file using a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>. Open the file with\n<a href=\"dart-io\/File\/openWrite.html\">openWrite<\/a>, which returns an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> to which you can write data.\nBe sure to close the sink with the <a href=\"dart-io\/IOSink\/close.html\">IOSink.close<\/a> method.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  var file = new File('file.txt');\n  var sink = file.openWrite();\n  sink.write('FILE ACCESSED ${new DateTime.now()}\\n');\n\n  \/\/ Close the IOSink to free system resources.\n  sink.close();\n}\n<\/code><\/pre>\n<h2 id=\"the-use-of-futures\">The use of Futures<\/h2>\n<p>To avoid unintentional blocking of the program,\nseveral methods use a <a href=\"dart-async\/Future-class.html\">Future<\/a> to return a value. For example,\nthe <a href=\"dart-io\/File\/length.html\">length<\/a> method, which gets the length of a file, returns a Future.\nUse <code>then<\/code> to register a callback function, which is called when\nthe value is ready.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  final file = new File('file.txt');\n\n  file.length().then((len) {\n    print(len);\n  });\n}\n<\/code><\/pre>\n<p>In addition to length, the <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a>, <a href=\"dart-io\/File\/lastModified.html\">lastModified<\/a>, <a href=\"dart-io\/FileSystemEntity\/stat.html\">stat<\/a>, and\nother methods, return Futures.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#files-directories-and-symlinks\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the Directory class and the related <a href=\"dart-io\/File-class.html\">File<\/a> class.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#dartio---io-for-command-line-apps\">I\/O for Command-Line\nApps<\/a>\na section from <em>A Tour of the Dart Libraries<\/em> covers files and directories.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/tutorials\/cmdline\/\">Write Command-Line Apps<\/a>,\na tutorial about writing command-line apps, includes information about\nfiles and directories.<\/p>\n<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/File-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "dart:io",
    "name": "dart:io.File",
    "shortname": "File",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"dart-io\/File-class.html\">File<\/a> object.<\/p>\n<p>If <code>path<\/code> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <code>path<\/code> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory File(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _File(path);\n  }\n  return overrides.createFile(path);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/File.html",
            "isDeprecated": false,
            "type": "",
            "name": "File",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "path",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"dart-io\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; copy(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/copy.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.File>",
            "name": "copy",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "newPath",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously copy this file. Returns a <a href=\"dart-io\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File copySync(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/copySync.html",
            "isDeprecated": false,
            "type": "dart:io.File",
            "name": "copySync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "newPath",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"dart-io\/File\/create.html\">create<\/a>. Calling <a href=\"dart-io\/File\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/create.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.File>",
            "name": "create",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "recursive",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Synchronously create the file. Existing files are left untouched\nby <a href=\"dart-io\/File\/createSync.html\">createSync<\/a>. Calling <a href=\"dart-io\/File\/createSync.html\">createSync<\/a> on an existing file might fail\nif there are restrictive permissions on the file.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created\nonly if all directories in the path exist.\nIf <code>recursive<\/code> is true, all non-existing path components are created.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync({bool recursive: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/createSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "createSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "recursive",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last accessed, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;DateTime&gt; lastAccessed();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/lastAccessed.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.DateTime>",
            "name": "lastAccessed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns the date and time when the file was last accessed,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime lastAccessedSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/lastAccessedSync.html",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "name": "lastAccessedSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last modified, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;DateTime&gt; lastModified();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/lastModified.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.DateTime>",
            "name": "lastModified",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns the date and time when the file was last modified,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime lastModifiedSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/lastModifiedSync.html",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "name": "lastModifiedSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Get the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; length();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/length.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.int>",
            "name": "length",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Synchronously get the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lengthSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/lengthSync.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "lengthSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Open the file for random access operations. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with the opened\nrandom access file. <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using the\n<a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>Files can be opened in three modes:<\/p>\n<p><a href=\"dart-io\/FileMode\/read-constant.html\">FileMode.read<\/a>: open the file for reading.<\/p>\n<p><a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: open the file for both reading and writing and\ntruncate the file to length zero. If the file does not exist the\nfile is created.<\/p>\n<p><a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: same as <a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a> except that the file is\nnot truncated.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; open({FileMode mode: FileMode.read});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/open.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "name": "open",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Create a new independent <a href=\"dart-async\/Stream-class.html\">Stream<\/a> for the contents of this file.<\/p>\n<p>If <code>start<\/code> is present, the file will be read from byte-offset <code>start<\/code>.\nOtherwise from the beginning (index 0).<\/p>\n<p>If <code>end<\/code> is present, only up to byte-index <code>end<\/code> will be read. Otherwise,\nuntil end of file.<\/p>\n<p>In order to make sure that system resources are freed, the stream\nmust be read to completion or the subscription on the stream must\nbe cancelled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; openRead([int start, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/openRead.html",
            "isDeprecated": false,
            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
            "name": "openRead",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously open the file for random access operations. The\nresult is a <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> on which random access operations\ncan be performed. Opened <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using\nthe <a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>See <a href=\"dart-io\/File\/open.html\">open<\/a> for information on the <code>mode<\/code> argument.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RandomAccessFile openSync({FileMode mode: FileMode.read});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/openSync.html",
            "isDeprecated": false,
            "type": "dart:io.RandomAccessFile",
            "name": "openSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Creates a new independent <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for the file. The\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> must be closed when no longer used, to free\nsystem resources.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for a file can be opened in two modes:<\/p>\n<ul>\n<li>\n<a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: truncates the file to length zero.<\/li>\n<li>\n<a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: sets the initial write position to the end\nof the file.<\/li>\n<\/ul>\n<p> When writing strings through the returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> the encoding\n specified using <code>encoding<\/code> will be used. The returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>\n has an <code>encoding<\/code> property which can be changed after the\n <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> has been created.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IOSink openWrite({FileMode mode: FileMode.write, Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/openWrite.html",
            "isDeprecated": false,
            "type": "dart:io.IOSink",
            "name": "openWrite",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Read the entire file contents as a list of bytes. Returns a\n<code>Future&lt;List&lt;int&gt;&gt;<\/code> that completes with the list of bytes that\nis the contents of the file.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;int&gt;&gt; readAsBytes();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsBytes.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.List<dart:core.int>>",
            "name": "readAsBytes",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Synchronously read the entire file contents as a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readAsBytesSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsBytesSync.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.int>",
            "name": "readAsBytesSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Read the entire file contents as lines of text using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;List&lt;String&gt;&gt;<\/code> that completes with the lines\nonce the file contents has been read.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;String&gt;&gt; readAsLines({Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsLines.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.List<dart:core.String>>",
            "name": "readAsLines",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Synchronously read the entire file contents as lines of text\nusing the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; readAsLinesSync({Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsLinesSync.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.String>",
            "name": "readAsLinesSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Read the entire file contents as a string using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;String&gt;<\/code> that completes with the string once\nthe file contents has been read.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; readAsString({Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsString.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.String>",
            "name": "readAsString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Synchronously read the entire file contents as a string using the\ngiven <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String readAsStringSync({Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/readAsStringSync.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "readAsStringSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Renames this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"dart-io\/File-class.html\">File<\/a> instance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; rename(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/rename.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.File>",
            "name": "rename",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "newPath",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously renames this file. Returns a <a href=\"dart-io\/File-class.html\">File<\/a>\ninstance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File renameSync(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/renameSync.html",
            "isDeprecated": false,
            "type": "dart:io.File",
            "name": "renameSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "newPath",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Modifies the time the file was last accessed.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future setLastAccessed(DateTime time);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/setLastAccessed.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "setLastAccessed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "time",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Synchronously modifies the time the file was last accessed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setLastAccessedSync(DateTime time);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/setLastAccessedSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setLastAccessedSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "time",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Modifies the time the file was last modified.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future setLastModified(DateTime time);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/setLastModified.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "setLastModified",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "time",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Synchronously modifies the time the file was last modified.<\/p>\n<p>If the attributes cannot be set, throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setLastModifiedSync(DateTime time);<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/setLastModifiedSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setLastModifiedSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "time",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"dart-io\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; writeAsBytes(List&lt;int&gt; bytes,\n    {FileMode mode: FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/writeAsBytes.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.File>",
            "name": "writeAsBytes",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "bytes",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "flush",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Synchronously write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it and closes the file.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsBytesSync.html\">writeAsBytesSync<\/a> creates the file for writing and truncates\nthe file if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAsBytesSync(List&lt;int&gt; bytes,\n    {FileMode mode: FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/writeAsBytesSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "writeAsBytesSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "bytes",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "flush",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"dart-io\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; writeAsString(String contents,\n    {FileMode mode: FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/writeAsString.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.File>",
            "name": "writeAsString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "contents",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "flush",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Synchronously write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsStringSync.html\">writeAsStringSync<\/a> creates the file for writing and\ntruncates the file if it already exists. In order to append the bytes\nto an existing file, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode\nparameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAsStringSync(String contents,\n    {FileMode mode: FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/File\/writeAsStringSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "writeAsStringSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.File",
            "params": [
                {
                    "name": "contents",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "encoding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "flush",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a <a href=\"dart-io\/File-class.html\">File<\/a> instance whose path is the absolute path to <a href=\"dart-io\/File-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">File get absolute;<\/code><\/pre>\n        ",
            "href": "dart-io\/File\/absolute.html",
            "name": "absolute",
            "isDeprecated": false,
            "type": "dart:io.File",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:io.File",
            "params": []
        },
        {
            "desc": "<p>Get the path of the file.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
            "href": "dart-io\/File\/path.html",
            "name": "path",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:io.File",
            "params": []
        }
    ]
}