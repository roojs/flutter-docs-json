{
    "desc": "<p>An instant in time, such as July 20, 1969, 8:18pm GMT.<\/p>\n<p>DateTimes can represent time values that are at a distance of at most\n100,000,000 days from epoch (1970-01-01 UTC): -271821-04-20 to 275760-09-13.<\/p>\n<p>Create a DateTime object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\nNote that hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar berlinWallFell = new DateTime.utc(1989, 11, 9);\nvar moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");  \/\/ 8:18pm\n<\/code><\/pre>\n<p>A DateTime object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.<\/p>\n<p>Once created, neither the value nor the time zone\nof a DateTime object may be changed.<\/p>\n<p>You can use properties to get\nthe individual units of a DateTime object.<\/p>\n<pre class=\"language-dart\"><code>assert(berlinWallFell.month == 11);\nassert(moonLanding.hour == 20);\n<\/code><\/pre>\n<p>For convenience and readability,\nthe DateTime class provides a constant for each day and month\nname - for example, <a href=\"dart-core\/DateTime\/august-constant.html\">august<\/a> and <a href=\"dart-core\/DateTime\/friday-constant.html\">friday<\/a>.\nYou can use these constants to improve code readability:<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime.utc(1989, DateTime.november, 9);\nassert(berlinWallFell.weekday == DateTime.thursday);\n<\/code><\/pre>\n<p>Day and month values begin at 1, and the week starts on Monday.\nThat is, the constants <a href=\"dart-core\/DateTime\/january-constant.html\">january<\/a> and <a href=\"dart-core\/DateTime\/monday-constant.html\">monday<\/a> are both 1.<\/p>\n<h2 id=\"working-with-utc-and-local-time\">Working with UTC and local time<\/h2>\n<p>A DateTime object is in the local time zone\nunless explicitly created in the UTC time zone.<\/p>\n<pre class=\"language-dart\"><code>var dDay = new DateTime.utc(1944, 6, 6);\n<\/code><\/pre>\n<p>Use <a href=\"dart-core\/DateTime\/isUtc.html\">isUtc<\/a> to determine whether a DateTime object is based in UTC.\nUse the methods <a href=\"dart-core\/DateTime\/toLocal.html\">toLocal<\/a> and <a href=\"dart-core\/DateTime\/toUtc.html\">toUtc<\/a>\nto get the equivalent date\/time value specified in the other time zone.\nUse <a href=\"dart-core\/DateTime\/timeZoneName.html\">timeZoneName<\/a> to get an abbreviated name of the time zone\nfor the DateTime object.\nTo find the difference\nbetween UTC and the time zone of a DateTime object\ncall <a href=\"dart-core\/DateTime\/timeZoneOffset.html\">timeZoneOffset<\/a>.<\/p>\n<h2 id=\"comparing-datetime-objects\">Comparing DateTime objects<\/h2>\n<p>The DateTime class contains several handy methods,\nsuch as <a href=\"dart-core\/DateTime\/isAfter.html\">isAfter<\/a>, <a href=\"dart-core\/DateTime\/isBefore.html\">isBefore<\/a>, and <a href=\"dart-core\/DateTime\/isAtSameMomentAs.html\">isAtSameMomentAs<\/a>,\nfor comparing DateTime objects.<\/p>\n<pre class=\"language-dart\"><code>assert(berlinWallFell.isAfter(moonLanding) == true);\nassert(berlinWallFell.isBefore(moonLanding) == false);\n<\/code><\/pre>\n<h2 id=\"using-datetime-with-duration\">Using DateTime with Duration<\/h2>\n<p>Use the <a href=\"dart-core\/DateTime\/add.html\">add<\/a> and <a href=\"dart-core\/DateTime\/subtract.html\">subtract<\/a> methods with a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> object\nto create a new DateTime object based on another.\nFor example, to find the date that is sixty days (24 * 60 hours) after today,\nwrite:<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar sixtyDaysFromNow = now.add(new Duration(days: 60));\n<\/code><\/pre>\n<p>To find out how much time is between two DateTime objects use\n<a href=\"dart-core\/DateTime\/difference.html\">difference<\/a>, which returns a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> object:<\/p>\n<pre class=\"language-dart\"><code>var difference = berlinWallFell.difference(moonLanding);\nassert(difference.inDays == 7416);\n<\/code><\/pre>\n<p>The difference between two dates in different time zones\nis just the number of nanoseconds between the two points in time.\nIt doesn't take calendar days into account.\nThat means that the difference between two midnights in local time may be\nless than 24 hours times the number of days between them,\nif there is a daylight saving change in between.\nIf the difference above is calculated using Australian local time, the\ndifference is 7415 days and 23 hours, which is only 7415 whole days as\nreported by <code>inDays<\/code>.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<p>See <a href=\"dart-core\/Duration-class.html\">Duration<\/a> to represent a span of time.\nSee <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> to measure timespans.<\/p>\n<p>The DateTime class does not provide internationalization.\nTo internationalize your code, use\nthe <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">intl<\/a> package.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/DateTime-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.DateTime",
    "shortname": "DateTime",
    "extends": [],
    "realImplementors": [
        "quiver.async.Metronome"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Constructs a <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance specified in the local time zone.<\/p>\n<p>For example,\nto create a new DateTime object representing the 7th of September 2017,\n5:30pm<\/p>\n<pre class=\"language-dart\"><code>var dentistAppointment = new DateTime(2017, 9, 7, 17, 30);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime(int year,\n    [int month = 1,\n    int day = 1,\n    int hour = 0,\n    int minute = 0,\n    int second = 0,\n    int millisecond = 0,\n    int microsecond = 0])\n    : this._internal(year, month, day, hour, minute, second, millisecond,\n          microsecond, false);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/DateTime.html",
            "isDeprecated": "0",
            "type": "",
            "name": "DateTime",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "day",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "hour",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "microsecond",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "millisecond",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "minute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "month",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "second",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "year",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance with <code>duration<\/code> added to <a href=\"dart-core\/DateTime-class.html\">this<\/a>.<\/p>\n<pre class=\"language-dart\"><code>var today = new DateTime.now();\nvar fiftyDaysFromNow = today.add(new Duration(days: 50));\n<\/code><\/pre>\n<p>Notice that the duration being added is actually 50 * 24 * 60 * 60\nseconds. If the resulting <code>DateTime<\/code> has a different daylight saving offset\nthan <code>this<\/code>, then the result won't have the same time-of-day as <code>this<\/code>, and\nmay not even hit the calendar date 50 days later.<\/p>\n<p>Be careful when working with dates in local time.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external DateTime add(Duration duration);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/add.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Compares this DateTime object to <code>other<\/code>,\nreturning zero if the values are equal.<\/p>\n<p>Returns a negative value if this DateTime <a href=\"dart-core\/DateTime\/isBefore.html\">isBefore<\/a> <code>other<\/code>. It returns 0\nif it <a href=\"dart-core\/DateTime\/isAtSameMomentAs.html\">isAtSameMomentAs<\/a> <code>other<\/code>, and returns a positive value otherwise\n(when this <a href=\"dart-core\/DateTime\/isAfter.html\">isAfter<\/a> <code>other<\/code>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external int compareTo(DateTime other);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/compareTo.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "name": "compareTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> with the difference between <a href=\"dart-core\/DateTime-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime.utc(1989, DateTime.november, 9);\nvar dDay = new DateTime.utc(1944, DateTime.june, 6);\n\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n<\/code><\/pre>\n<p>The difference is measured in seconds and fractions of seconds.\nThe difference above counts the number of fractional seconds between\nmidnight at the beginning of those dates.\nIf the dates above had been in local time, not UTC, then the difference\nbetween two midnights may not be a multiple of 24 hours due to daylight\nsaving differences.<\/p>\n<p>For example, in Australia, similar code using local time instead of UTC:<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime(1989, DateTime.november, 9);\nvar dDay = new DateTime(1944, DateTime.june, 6);\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n<\/code><\/pre>\n<p>will fail because the difference is actually 16591 days and 23 hours, and\n<a href=\"dart-core\/Duration\/inDays.html\">Duration.inDays<\/a> only returns the number of whole days.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Duration difference(DateTime other);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/difference.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "name": "difference",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs after <code>other<\/code>.<\/p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar later = now.add(const Duration(seconds: 5));\nassert(later.isAfter(now));\nassert(!now.isBefore(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(later.isAfter(now.toUtc()));\nassert(later.toUtc().isAfter(now));\n\nassert(!now.toUtc().isBefore(now));\nassert(!now.isBefore(now.toUtc()));\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isAfter(DateTime other);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/isAfter.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "isAfter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs at the same moment as <code>other<\/code>.<\/p>\n<p>The comparison is independent of whether the time is in UTC or in the local\ntime zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar later = now.add(const Duration(seconds: 5));\nassert(!later.isAtSameMomentAs(now));\nassert(now.isAtSameMomentAs(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(!later.isAtSameMomentAs(now.toUtc()));\nassert(!later.toUtc().isAtSameMomentAs(now));\n\nassert(now.toUtc().isAtSameMomentAs(now));\nassert(now.isAtSameMomentAs(now.toUtc()));\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isAtSameMomentAs(DateTime other);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/isAtSameMomentAs.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "isAtSameMomentAs",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs before <code>other<\/code>.<\/p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar earlier = now.subtract(const Duration(seconds: 5));\nassert(earlier.isBefore(now));\nassert(!now.isBefore(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(earlier.isBefore(now.toUtc()));\nassert(earlier.toUtc().isBefore(now));\n\nassert(!now.toUtc().isBefore(now));\nassert(!now.isBefore(now.toUtc()));\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isBefore(DateTime other);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/isBefore.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "isBefore",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Constructs a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance based on <code>formattedString<\/code>.<\/p>\n<p>The <code>formattedString<\/code> must not be <code>null<\/code>.\nThrows a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the input string cannot be parsed.<\/p>\n<p>The function parses a subset of ISO 8601\nwhich includes the subset accepted by RFC 3339.<\/p>\n<p>The accepted inputs are currently:<\/p>\n<ul>\n<li>A date: A signed four-to-six digit year, two digit month and\ntwo digit day, optionally separated by <code>-<\/code> characters.\nExamples: \"19700101\", \"-0004-12-24\", \"81030-04-01\".<\/li>\n<li>An optional time part, separated from the date by either <code>T<\/code> or a space.\nThe time part is a two digit hour,\nthen optionally a two digit minutes value,\nthen optionally a two digit seconds value, and\nthen optionally a '.' or ',' followed by a one-to-six digit second fraction.\nThe minutes and seconds may be separated from the previous parts by a\n':'.\nExamples: \"12\", \"12:30:24.124\", \"12:30:24,124\", \"123010.50\".<\/li>\n<li>An optional time-zone offset part,\npossibly separated from the previous by a space.\nThe time zone is either 'z' or 'Z', or it is a signed two digit hour\npart and an optional two digit minute part. The sign must be either\n\"+\" or \"-\", and can not be omitted.\nThe minutes may be separated from the hours by a ':'.\nExamples: \"Z\", \"-10\", \"01:30\", \"1130\".<\/li>\n<\/ul>\n<p>This includes the output of both <a href=\"dart-core\/DateTime\/toString.html\">toString<\/a> and <a href=\"dart-core\/DateTime\/toIso8601String.html\">toIso8601String<\/a>, which\nwill be parsed back into a <code>DateTime<\/code> object with the same time as the\noriginal.<\/p>\n<p>The result is always in either local time or UTC.\nIf a time zone offset other than UTC is specified,\nthe time is converted to the equivalent UTC time.<\/p>\n<p>Examples of accepted strings:<\/p>\n<ul>\n<li><code>\"2012-02-27 13:27:00\"<\/code><\/li>\n<li><code>\"2012-02-27 13:27:00.123456z\"<\/code><\/li>\n<li><code>\"2012-02-27 13:27:00,123456z\"<\/code><\/li>\n<li><code>\"20120227 13:27:00\"<\/code><\/li>\n<li><code>\"20120227T132700\"<\/code><\/li>\n<li><code>\"20120227\"<\/code><\/li>\n<li><code>\"+20120227\"<\/code><\/li>\n<li><code>\"2012-02-27T14Z\"<\/code><\/li>\n<li><code>\"2012-02-27T14+00:00\"<\/code><\/li>\n<li>\n<code>\"-123450101 00:00:00 Z\"<\/code>: in the year -12345.<\/li>\n<li>\n<code>\"2002-02-27T14:00:00-0500\"<\/code>: Same as <code>\"2002-02-27T19:00:00Z\"<\/code>\n<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(lrn): restrict incorrect values like  2003-02-29T50:70:80.\n\/\/ Or not, that may be a breaking change.\nstatic DateTime parse(String formattedString) {\n  var re = _parseFormat;\n  Match match = re.firstMatch(formattedString);\n  if (match != null) {\n    int parseIntOrZero(String matched) {\n      if (matched == null) return 0;\n      return int.parse(matched);\n    }\n\n    \/\/ Parses fractional second digits of '.(\\d{1,6})' into the combined\n    \/\/ microseconds.\n    int parseMilliAndMicroseconds(String matched) {\n      if (matched == null) return 0;\n      int length = matched.length;\n      assert(length &gt;= 1);\n      assert(length &lt;= 6);\n\n      int result = 0;\n      for (int i = 0; i &lt; 6; i++) {\n        result *= 10;\n        if (i &lt; matched.length) {\n          result += matched.codeUnitAt(i) ^ 0x30;\n        }\n      }\n      return result;\n    }\n\n    int years = int.parse(match[1]);\n    int month = int.parse(match[2]);\n    int day = int.parse(match[3]);\n    int hour = parseIntOrZero(match[4]);\n    int minute = parseIntOrZero(match[5]);\n    int second = parseIntOrZero(match[6]);\n    bool addOneMillisecond = false;\n    int milliAndMicroseconds = parseMilliAndMicroseconds(match[7]);\n    int millisecond =\n        milliAndMicroseconds ~\/ Duration.microsecondsPerMillisecond;\n    int microsecond =\n        milliAndMicroseconds.remainder(Duration.microsecondsPerMillisecond);\n    bool isUtc = false;\n    if (match[8] != null) {\n      \/\/ timezone part\n      isUtc = true;\n      if (match[9] != null) {\n        \/\/ timezone other than 'Z' and 'z'.\n        int sign = (match[9] == '-') ? -1 : 1;\n        int hourDifference = int.parse(match[10]);\n        int minuteDifference = parseIntOrZero(match[11]);\n        minuteDifference += 60 * hourDifference;\n        minute -= sign * minuteDifference;\n      }\n    }\n    int value = _brokenDownDateToValue(years, month, day, hour, minute,\n        second, millisecond, microsecond, isUtc);\n    if (value == null) {\n      throw new FormatException(\"Time out of range\", formattedString);\n    }\n    return new DateTime._withValue(value, isUtc: isUtc);\n  } else {\n    throw new FormatException(\"Invalid date format\", formattedString);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/parse.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "parse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "formattedString",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance with <code>duration<\/code> subtracted from <a href=\"dart-core\/DateTime-class.html\">this<\/a>.<\/p>\n<pre class=\"language-dart\"><code>DateTime today = new DateTime.now();\nDateTime fiftyDaysAgo = today.subtract(new Duration(days: 50));\n<\/code><\/pre>\n<p>Notice that the duration being subtracted is actually 50 * 24 * 60 * 60\nseconds. If the resulting <code>DateTime<\/code> has a different daylight saving offset\nthan <code>this<\/code>, then the result won't have the same time-of-day as <code>this<\/code>, and\nmay not even hit the calendar date 50 days earlier.<\/p>\n<p>Be careful when working with dates in local time.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external DateTime subtract(Duration duration);<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/subtract.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "subtract",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Returns an ISO-8601 full-precision extended format representation.<\/p>\n<p>The format is <code>yyyy-MM-ddTHH:mm:ss.mmmuuuZ<\/code> for UTC time, and\n<code>yyyy-MM-ddTHH:mm:ss.mmmuuu<\/code> (no trailing \"Z\") for local\/non-UTC time,\nwhere:<\/p>\n<ul>\n<li>\n<code>yyyy<\/code> is a, possibly negative, four digit representation of the year,\nif the year is in the range -9999 to 9999,\notherwise it is a signed six digit representation of the year.<\/li>\n<li>\n<code>MM<\/code> is the month in the range 01 to 12,<\/li>\n<li>\n<code>dd<\/code> is the day of the month in the range 01 to 31,<\/li>\n<li>\n<code>HH<\/code> are hours in the range 00 to 23,<\/li>\n<li>\n<code>mm<\/code> are minutes in the range 00 to 59,<\/li>\n<li>\n<code>ss<\/code> are seconds in the range 00 to 59 (no leap seconds),<\/li>\n<li>\n<code>mmm<\/code> are milliseconds in the range 000 to 999, and<\/li>\n<li>\n<code>uuu<\/code> are microseconds in the range 001 to 999. If <a href=\"dart-core\/DateTime\/microsecond.html\">microsecond<\/a> equals\n0, then this part is omitted.<\/li>\n<\/ul>\n<p>The resulting string can be parsed back using <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toIso8601String() {\n  String y =\n      (year &gt;= -9999 &amp;&amp; year &lt;= 9999) ? _fourDigits(year) : _sixDigits(year);\n  String m = _twoDigits(month);\n  String d = _twoDigits(day);\n  String h = _twoDigits(hour);\n  String min = _twoDigits(minute);\n  String sec = _twoDigits(second);\n  String ms = _threeDigits(millisecond);\n  String us = microsecond == 0 ? \"\" : _threeDigits(microsecond);\n  if (isUtc) {\n    return \"$y-$m-${d}T$h:$min:$sec.$ms${us}Z\";\n  } else {\n    return \"$y-$m-${d}T$h:$min:$sec.$ms$us\";\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/toIso8601String.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toIso8601String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>Returns this DateTime value in the local time zone.<\/p>\n<p>Returns <a href=\"dart-core\/DateTime-class.html\">this<\/a> if it is already in the local time zone.\nOtherwise this method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>new DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch,\n                                        isUtc: false)\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime toLocal() {\n  if (isUtc) {\n    return new DateTime._withValue(_value, isUtc: false);\n  }\n  return this;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/toLocal.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "toLocal",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>Returns a human-readable string for this instance.<\/p>\n<p>The returned string is constructed for the time zone of this instance.\nThe <code>toString()<\/code> method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">intl<\/a> package\nat the pub shared packages repo.<\/p>\n<p>The resulting string can be parsed back using <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String y = _fourDigits(year);\n  String m = _twoDigits(month);\n  String d = _twoDigits(day);\n  String h = _twoDigits(hour);\n  String min = _twoDigits(minute);\n  String sec = _twoDigits(second);\n  String ms = _threeDigits(millisecond);\n  String us = microsecond == 0 ? \"\" : _threeDigits(microsecond);\n  if (isUtc) {\n    return \"$y-$m-$d $h:$min:$sec.$ms${us}Z\";\n  } else {\n    return \"$y-$m-$d $h:$min:$sec.$ms$us\";\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>Returns this DateTime value in the UTC time zone.<\/p>\n<p>Returns <a href=\"dart-core\/DateTime-class.html\">this<\/a> if it is already in UTC.\nOtherwise this method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>new DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch,\n                                        isUtc: true)\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime toUtc() {\n  if (isUtc) return this;\n  return new DateTime._withValue(_value, isUtc: true);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/toUtc.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "toUtc",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>Constructs a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance based on <code>formattedString<\/code>.<\/p>\n<p>Works like <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a> except that this function returns <code>null<\/code>\nwhere <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a> would throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static DateTime tryParse(String formattedString) {\n  \/\/ TODO: Optimize to avoid throwing.\n  try {\n    return parse(formattedString);\n  } on FormatException {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/DateTime\/tryParse.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "tryParse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.DateTime",
            "params": [
                {
                    "name": "formattedString",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The day of the month <code>1..31<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.day == 20);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get day;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/day.html",
            "name": "day",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/DateTime\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; (_value ^ (_value &gt;&gt; 30)) &amp; 0x3FFFFFFF;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The hour of the day, expressed as in a 24-hour clock <code>0..23<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.hour == 20);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hour;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/hour.html",
            "name": "hour",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>True if this <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> is set to UTC time.<\/p>\n<pre class=\"language-dart\"><code>var dDay = new DateTime.utc(1944, 6, 6);\nassert(dDay.isUtc);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isUtc\n\n<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/isUtc.html",
            "name": "isUtc",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The microsecond <code>0...999<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.microsecond == 0);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get microsecond;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/microsecond.html",
            "name": "microsecond",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The number of microseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).<\/p>\n<p>This value is independent of the time zone.<\/p>\n<p>This value is at most\n8,640,000,000,000,000,000us (100,000,000 days) from the Unix epoch.\nIn other words: <code>microsecondsSinceEpoch.abs() &lt;= 8640000000000000000<\/code>.<\/p>\n<p>Note that this value does not fit into 53 bits (the size of a IEEE double).\nA JavaScript number is not able to hold this value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get microsecondsSinceEpoch;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/microsecondsSinceEpoch.html",
            "name": "microsecondsSinceEpoch",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The millisecond <code>0...999<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.millisecond == 0);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get millisecond;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/millisecond.html",
            "name": "millisecond",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).<\/p>\n<p>This value is independent of the time zone.<\/p>\n<p>This value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: <code>millisecondsSinceEpoch.abs() &lt;= 8640000000000000<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get millisecondsSinceEpoch;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/millisecondsSinceEpoch.html",
            "name": "millisecondsSinceEpoch",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The minute <code>0...59<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.minute == 18);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get minute;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/minute.html",
            "name": "minute",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The month <code>1..12<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.month == 7);\nassert(moonLanding.month == DateTime.july);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get month;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/month.html",
            "name": "month",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The second <code>0...59<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.second == 4);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get second;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/second.html",
            "name": "second",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The time zone name.<\/p>\n<p>This value is provided by the operating system and may be an\nabbreviation or a full name.<\/p>\n<p>In the browser or on Unix-like systems commonly returns abbreviations,\nsuch as \"CET\" or \"CEST\". On Windows returns the full name, for example\n\"Pacific Standard Time\".<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external String get timeZoneName;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/timeZoneName.html",
            "name": "timeZoneName",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The time zone offset, which\nis the difference between local time and UTC.<\/p>\n<p>The offset is positive for time zones east of UTC.<\/p>\n<p>Note, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external Duration get timeZoneOffset;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/timeZoneOffset.html",
            "name": "timeZoneOffset",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The day of the week <a href=\"dart-core\/DateTime\/monday-constant.html\">monday<\/a>..<a href=\"dart-core\/DateTime\/sunday-constant.html\">sunday<\/a>.<\/p>\n<p>In accordance with ISO 8601\na week starts with Monday, which has the value 1.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.weekday == 7);\nassert(moonLanding.weekday == DateTime.sunday);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get weekday;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/weekday.html",
            "name": "weekday",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        },
        {
            "desc": "<p>The year.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.year == 1969);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get year;<\/code><\/pre>\n        ",
            "href": "dart-core\/DateTime\/year.html",
            "name": "year",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.DateTime",
            "params": []
        }
    ]
}