{
    "desc": "<p>A box in which a single widget can be scrolled.<\/p>\n<p>This widget is useful when you have a single box that will normally be\nentirely visible, for example a clock face in a time picker, but you need to\nmake sure it can be scrolled if the container gets too small in one axis\n(the scroll direction).<\/p>\n<p>It is also useful if you need to shrink-wrap in both axes (the main\nscrolling direction as well as the cross axis), as one might see in a dialog\nor pop-up menu. In that case, you might pair the <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>\nwith a <a href=\"widgets\/ListBody-class.html\">ListBody<\/a> child.<\/p>\n<p>When you have a list of children and do not require cross-axis\nshrink-wrapping behavior, for example a scrolling list that is always the\nwidth of the screen, consider <a href=\"widgets\/ListView-class.html\">ListView<\/a>, which is vastly more efficient\nthat a <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> containing a <a href=\"widgets\/ListBody-class.html\">ListBody<\/a> or <a href=\"widgets\/Column-class.html\">Column<\/a> with\nmany children.<\/p>\n<h2 id=\"sample-code-using-singlechildscrollview-with-a-column\">Sample code: Using <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> with a <a href=\"widgets\/Column-class.html\">Column<\/a>\n<\/h2>\n<p>Sometimes a layout is designed around the flexible properties of a\n<a href=\"widgets\/Column-class.html\">Column<\/a>, but there is the concern that in some cases, there might not\nbe enough room to see the entire contents. This could be because some\ndevices have unusually small screens, or because the application can\nbe used in landscape mode where the aspect ratio isn't what was\noriginally envisioned, or because the application is being shown in a\nsmall window in split-screen mode. In any case, as a result, it might\nmake sense to wrap the layout in a <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>.<\/p>\n<p>Simply doing so, however, usually results in a conflict between the <a href=\"widgets\/Column-class.html\">Column<\/a>,\nwhich typically tries to grow as big as it can, and the <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>,\nwhich provides its children with an infinite amount of space.<\/p>\n<p>To resolve this apparent conflict, there are a couple of techniques, as\ndiscussed below. These techniques should only be used when the content is\nnormally expected to fit on the screen, so that the lazy instantiation of\na sliver-based <a href=\"widgets\/ListView-class.html\">ListView<\/a> or <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> is not expected to provide\nany performance benefit. If the viewport is expected to usually contain\ncontent beyond the dimensions of the screen, then <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>\nwould be very expensive.<\/p>\n<h3 id=\"centering-spacing-or-aligning-fixed-height-content\">Centering, spacing, or aligning fixed-height content<\/h3>\n<p>If the content has fixed (or intrinsic) dimensions but needs to be spaced out,\ncentered, or otherwise positioned using the <a href=\"widgets\/Flex-class.html\">Flex<\/a> layout model of a <a href=\"widgets\/Column-class.html\">Column<\/a>,\nthe following technique can be used to provide the <a href=\"widgets\/Column-class.html\">Column<\/a> with a minimum\ndimension while allowing it to shrink-wrap the contents when there isn't enough\nroom to apply these spacing or alignment needs.<\/p>\n<p>A <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> is used to obtain the size of the viewport (implicitly via\nthe constraints that the <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> sees, since viewports\ntypically grow to fit their maximum height constraint). Then, inside the\nscroll view, a <a href=\"widgets\/ConstrainedBox-class.html\">ConstrainedBox<\/a> is used to set the minimum height of the\n<a href=\"widgets\/Column-class.html\">Column<\/a>.<\/p>\n<p>The <a href=\"widgets\/Column-class.html\">Column<\/a> has no <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> children, so rather than take on the infinite\nheight from its <a href=\"rendering\/BoxConstraints\/maxHeight.html\">BoxConstraints.maxHeight<\/a>, (the viewport provides no maximum height\nconstraint), it automatically tries to shrink to fit its children. It cannot\nbe smaller than its <a href=\"rendering\/BoxConstraints\/minHeight.html\">BoxConstraints.minHeight<\/a>, though, and It therefore\nbecomes the bigger of the minimum height provided by the\n<a href=\"widgets\/ConstrainedBox-class.html\">ConstrainedBox<\/a> and the sum of the heights of the children.<\/p>\n<p>If the children aren't enough to fit that minimum size, the <a href=\"widgets\/Column-class.html\">Column<\/a> ends up\nwith some remaining space to allocate as specified by its\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">Column.mainAxisAlignment<\/a> argument.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nIn this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n<p>When using this technique, <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> and <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint.\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return LayoutBuilder(\n    builder: (BuildContext context, BoxConstraints viewportConstraints) {\n      return SingleChildScrollView(\n        child: ConstrainedBox(\n          constraints: BoxConstraints(\n            minHeight: viewportConstraints.maxHeight,\n          ),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: &lt;Widget&gt;[\n              Container(\n                \/\/ A fixed-height child.\n                color: const Color(0xff808000), \/\/ Yellow\n                height: 120.0,\n              ),\n              Container(\n                \/\/ Another fixed-height child.\n                color: const Color(0xff008000), \/\/ Green\n                height: 120.0,\n              ),\n            ],\n          ),\n        ),\n      );\n    },\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=widgets.SingleChildScrollView.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for widgets.SingleChildScrollView.1\n\n\/\/ In this example, the children are spaced out equally, unless there's no more\n\/\/ room, in which case they stack vertically and scroll.\n\/\/\n\/\/ When using this technique, [Expanded] and [Flexible] are not useful, because\n\/\/ in both cases the \"available space\" is infinite (since this is in a viewport).\n\/\/ The next section describes a technique for providing a maximum height constraint.\n\nimport 'package:flutter\/widgets.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      title: 'Flutter Code Sample',\n      builder: (BuildContext context, Widget navigator) {\n        return MyStatelessWidget();\n      },\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (BuildContext context, BoxConstraints viewportConstraints) {\n        return SingleChildScrollView(\n          child: ConstrainedBox(\n            constraints: BoxConstraints(\n              minHeight: viewportConstraints.maxHeight,\n            ),\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              mainAxisAlignment: MainAxisAlignment.spaceAround,\n              children: &lt;Widget&gt;[\n                Container(\n                  \/\/ A fixed-height child.\n                  color: const Color(0xff808000), \/\/ Yellow\n                  height: 120.0,\n                ),\n                Container(\n                  \/\/ Another fixed-height child.\n                  color: const Color(0xff008000), \/\/ Green\n                  height: 120.0,\n                ),\n              ],\n            ),\n          ),\n        );\n      },\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"expanding-content-to-fit-the-viewport\">Expanding content to fit the viewport<\/h3>\n<p>The following example builds on the previous one. In addition to providing a\nminimum dimension for the child <a href=\"widgets\/Column-class.html\">Column<\/a>, an <a href=\"widgets\/IntrinsicHeight-class.html\">IntrinsicHeight<\/a> widget is used\nto force the column to be exactly as big as its contents. This constraint\ncombines with the <a href=\"widgets\/ConstrainedBox-class.html\">ConstrainedBox<\/a> constraints discussed previously to ensure\nthat the column becomes either as big as viewport, or as big as the contents,\nwhichever is biggest.<\/p>\n<p>Both constraints must be used to get the desired effect. If only the\n<a href=\"widgets\/IntrinsicHeight-class.html\">IntrinsicHeight<\/a> was specified, then the column would not grow to fit the\nentire viewport when its children were smaller than the whole screen. If only\nthe size of the viewport was used, then the <a href=\"widgets\/Column-class.html\">Column<\/a> would overflow if the\nchildren were bigger than the viewport.<\/p>\n<p>The widget that is to grow to fit the remaining space so provided is wrapped\nin an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> widget.<\/p>\n<p>This technique is quite expensive, as it more or less requires that the contents\nof the viewport be laid out twice (once to find their intrinsic dimensions, and\nonce to actually lay them out). The number of widgets within the column should\ntherefore be kept small. Alternatively, subsets of the children that have known\ndimensions can be wrapped in a <a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a> that has tight vertical constraints,\nso that the intrinsic sizing algorithm can short-circuit the computation when it\nreaches those parts of the subtree.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nIn this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return LayoutBuilder(\n    builder: (BuildContext context, BoxConstraints viewportConstraints) {\n      return SingleChildScrollView(\n        child: ConstrainedBox(\n          constraints: BoxConstraints(\n            minHeight: viewportConstraints.maxHeight,\n          ),\n          child: IntrinsicHeight(\n            child: Column(\n              children: &lt;Widget&gt;[\n                Container(\n                  \/\/ A fixed-height child.\n                  color: const Color(0xff808000), \/\/ Yellow\n                  height: 120.0,\n                ),\n                Expanded(\n                  \/\/ A flexible child that will grow to fit the viewport but\n                  \/\/ still be at least as big as necessary to fit its contents.\n                  child: Container(\n                    color: const Color(0xff800000), \/\/ Red\n                    height: 120.0,\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      );\n    },\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=widgets.SingleChildScrollView.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for widgets.SingleChildScrollView.2\n\n\/\/ In this example, the column becomes either as big as viewport, or as big as\n\/\/ the contents, whichever is biggest.\n\nimport 'package:flutter\/widgets.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      title: 'Flutter Code Sample',\n      builder: (BuildContext context, Widget navigator) {\n        return MyStatelessWidget();\n      },\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (BuildContext context, BoxConstraints viewportConstraints) {\n        return SingleChildScrollView(\n          child: ConstrainedBox(\n            constraints: BoxConstraints(\n              minHeight: viewportConstraints.maxHeight,\n            ),\n            child: IntrinsicHeight(\n              child: Column(\n                children: &lt;Widget&gt;[\n                  Container(\n                    \/\/ A fixed-height child.\n                    color: const Color(0xff808000), \/\/ Yellow\n                    height: 120.0,\n                  ),\n                  Expanded(\n                    \/\/ A flexible child that will grow to fit the viewport but\n                    \/\/ still be at least as big as necessary to fit its contents.\n                    child: Container(\n                      color: const Color(0xff800000), \/\/ Red\n                      height: 120.0,\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which handles multiple children in a scrolling list.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, which handles multiple children in a scrolling grid.<\/li>\n<li>\n<a href=\"widgets\/PageView-class.html\">PageView<\/a>, for a scrollable that works page by page.<\/li>\n<li>\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, which handles arbitrary scrolling effects.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/SingleChildScrollView-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.SingleChildScrollView",
    "shortname": "SingleChildScrollView",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a box in which a single widget can be scrolled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SingleChildScrollView({\n  Key key,\n  this.scrollDirection = Axis.vertical,\n  this.reverse = false,\n  this.padding,\n  bool primary,\n  this.physics,\n  this.controller,\n  this.child,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(scrollDirection != null),\n     assert(dragStartBehavior != null),\n     assert(!(controller != null &amp;&amp; primary == true),\n        'Primary ScrollViews obtain their ScrollController via inheritance from a PrimaryScrollController widget. '\n        'You cannot both set primary to true and pass an explicit controller.'\n     ),\n     primary = primary ?? controller == null &amp;&amp; identical(scrollDirection, Axis.vertical),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildScrollView\/SingleChildScrollView.html",
            "isDeprecated": false,
            "type": "",
            "name": "SingleChildScrollView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "controller",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollController"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "padding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "physics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                },
                {
                    "name": "primary",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "reverse",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "scrollDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/SingleChildScrollView\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final AxisDirection axisDirection = _getDirection(context);\n  Widget contents = child;\n  if (padding != null)\n    contents = Padding(padding: padding, child: contents);\n  final ScrollController scrollController = primary\n      ? PrimaryScrollController.of(context)\n      : controller;\n  final Scrollable scrollable = Scrollable(\n    dragStartBehavior: dragStartBehavior,\n    axisDirection: axisDirection,\n    controller: scrollController,\n    physics: physics,\n    viewportBuilder: (BuildContext context, ViewportOffset offset) {\n      return _SingleChildViewport(\n        axisDirection: axisDirection,\n        offset: offset,\n        child: contents,\n      );\n    },\n  );\n  return primary &amp;&amp; scrollController != null\n    ? PrimaryScrollController.none(child: scrollable)\n    : scrollable;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildScrollView\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget that scrolls.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>An object that can be used to control the position to which this scroll\nview is scrolled.<\/p>\n<p>Must be null if <a href=\"widgets\/SingleChildScrollView\/primary.html\">primary<\/a> is true.<\/p>\n<p>A <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> serves several purposes. It can be used to control\nthe initial scroll position (see <a href=\"widgets\/ScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a>).\nIt can be used to control whether the scroll view should automatically\nsave and restore its scroll position in the <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a> (see\n<a href=\"widgets\/ScrollController\/keepScrollOffset.html\">ScrollController.keepScrollOffset<\/a>). It can be used to read the current\nscroll position (see <a href=\"widgets\/ScrollController\/offset.html\">ScrollController.offset<\/a>), or change it (see\n<a href=\"widgets\/ScrollController\/animateTo.html\">ScrollController.animateTo<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController controller\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "widgets.ScrollController",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/SingleChildScrollView\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>The amount of space by which to inset the child.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/padding.html",
            "name": "padding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>How the scroll view should respond to user input.<\/p>\n<p>For example, determines how the scroll view continues to animate after the\nuser stops dragging the scroll view.<\/p>\n<p>Defaults to matching platform conventions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/physics.html",
            "name": "physics",
            "isDeprecated": false,
            "type": "widgets.ScrollPhysics",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>Whether this is the primary scroll view associated with the parent\n<a href=\"widgets\/PrimaryScrollController-class.html\">PrimaryScrollController<\/a>.<\/p>\n<p>On iOS, this identifies the scroll view that will scroll to top in\nresponse to a tap in the status bar.<\/p>\n<p>Defaults to true when <a href=\"widgets\/SingleChildScrollView\/scrollDirection.html\">scrollDirection<\/a> is vertical and <a href=\"widgets\/SingleChildScrollView\/controller.html\">controller<\/a> is\nnot specified.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool primary\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/primary.html",
            "name": "primary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>Whether the scroll view scrolls in the reading direction.<\/p>\n<p>For example, if the reading direction is left-to-right and\n<a href=\"widgets\/SingleChildScrollView\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the scroll view scrolls from\nleft to right when <a href=\"widgets\/SingleChildScrollView\/reverse.html\">reverse<\/a> is false and from right to left when\n<a href=\"widgets\/SingleChildScrollView\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Similarly, if <a href=\"widgets\/SingleChildScrollView\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, then the scroll view\nscrolls from top to bottom when <a href=\"widgets\/SingleChildScrollView\/reverse.html\">reverse<\/a> is false and from bottom to top\nwhen <a href=\"widgets\/SingleChildScrollView\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool reverse\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/reverse.html",
            "name": "reverse",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        },
        {
            "desc": "<p>The axis along which the scroll view scrolls.<\/p>\n<p>Defaults to <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis scrollDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildScrollView\/scrollDirection.html",
            "name": "scrollDirection",
            "isDeprecated": false,
            "type": "painting.Axis",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.SingleChildScrollView",
            "params": []
        }
    ]
}