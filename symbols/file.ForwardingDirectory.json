{
    "desc": "<p>A directory that forwards all methods and properties to a delegate.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-file_file\/ForwardingDirectory-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "file",
    "name": "file.ForwardingDirectory",
    "shortname": "ForwardingDirectory",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "package-file_file\/ForwardingDirectory\/ForwardingDirectory.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": []
        },
        {
            "desc": "<p>Creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; create({bool recursive: false}) async =&gt;\n    wrap(await delegate.create(recursive: recursive));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/create.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.Directory>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Synchronously creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>If the directory cannot be created an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync({bool recursive: false}) =&gt;\n    delegate.createSync(recursive: recursive);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/createSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a temporary directory in this directory. Additional random\ncharacters are appended to <code>prefix<\/code> to produce a unique directory\nname. If <code>prefix<\/code> is missing or null, the empty string is used\nfor <code>prefix<\/code>.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with the newly\ncreated temporary directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; createTemp([String prefix]) async =&gt;\n    wrap(await delegate.createTemp(prefix));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/createTemp.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.Directory>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously creates a temporary directory in this directory.\nAdditional random characters are appended to <code>prefix<\/code> to produce\na unique directory name. If <code>prefix<\/code> is missing or null, the empty\nstring is used for <code>prefix<\/code>.<\/p>\n<p>Returns the newly created temporary directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory createTempSync([String prefix]) =&gt;\n    wrap(delegate.createTempSync(prefix));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/createTempSync.html",
            "isDeprecated": "0",
            "type": "file.Directory",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a symbolic link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>The result is a stream of <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects\nfor the directories, files, and links.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;FileSystemEntity&gt; list({\n  bool recursive: false,\n  bool followLinks: true,\n}) =&gt;\n    delegate.list(recursive: recursive, followLinks: followLinks).map(_wrap);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/list.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream<file.FileSystemEntity>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "followLinks",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>Returns a <a href=\"dart-core\/List-class.html\">List<\/a> containing <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects for the\ndirectories, files, and links.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;FileSystemEntity&gt; listSync({\n  bool recursive: false,\n  bool followLinks: true,\n}) =&gt;\n    delegate\n        .listSync(recursive: recursive, followLinks: followLinks)\n        .map(_wrap)\n        .toList();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/listSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<file.FileSystemEntity>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "followLinks",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT wrap(io.Directory delegate) =&gt; wrapDirectory(delegate);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingDirectory\/wrap.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingDirectory",
            "params": [
                {
                    "name": "delegate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.Directory"
                }
            ]
        }
    ],
    "props": []
}