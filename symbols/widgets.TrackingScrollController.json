{
    "name": "widgets.TrackingScrollController",
    "extends": [
        "widgets.ScrollController",
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "TrackingScrollController",
            "type": "",
            "desc": "<p>Creates a scroll controller that continually updates its\n<code>initialScrollOffset<\/code> to match the last scroll notification it received.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TrackingScrollController",
            "sig": "",
            "params": [
                {
                    "name": "initialScrollOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "keepScrollOffset",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/TrackingScrollController\/TrackingScrollController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TrackingScrollController({\n  double initialScrollOffset = 0.0,\n  bool keepScrollOffset = true,\n  String debugLabel,\n}) : super(initialScrollOffset: initialScrollOffset,\n           keepScrollOffset: keepScrollOffset,\n           debugLabel: debugLabel);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "attach",
            "type": "",
            "desc": "<p>Register the given position with this controller.<\/p>\n<p>After this function returns, the <a href=\"widgets\/ScrollController\/animateTo.html\">animateTo<\/a> and <a href=\"widgets\/ScrollController\/jumpTo.html\">jumpTo<\/a> methods on this\ncontroller will manipulate the given position.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TrackingScrollController",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollPosition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TrackingScrollController\/attach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(ScrollPosition position) {\n  super.attach(position);\n  assert(!_positionToListener.containsKey(position));\n  _positionToListener[position] = () {\n    _lastUpdated = position;\n    _lastUpdatedOffset = position.pixels;\n  };\n  position.addListener(_positionToListener[position]);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "detach",
            "type": "",
            "desc": "<p>Unregister the given position with this controller.<\/p>\n<p>After this function returns, the <a href=\"widgets\/ScrollController\/animateTo.html\">animateTo<\/a> and <a href=\"widgets\/ScrollController\/jumpTo.html\">jumpTo<\/a> methods on this\ncontroller will not manipulate the given position.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TrackingScrollController",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollPosition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TrackingScrollController\/detach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach(ScrollPosition position) {\n  super.detach(position);\n  assert(_positionToListener.containsKey(position));\n  position.removeListener(_positionToListener[position]);\n  _positionToListener.remove(position);\n  if (_lastUpdated == position)\n    _lastUpdated = null;\n  if (_positionToListener.isEmpty)\n    _lastUpdatedOffset = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TrackingScrollController",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TrackingScrollController\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  for (ScrollPosition position in positions) {\n    assert(_positionToListener.containsKey(position));\n    position.removeListener(_positionToListener[position]);\n  }\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "initialScrollOffset",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Returns the scroll offset of the <a href=\"widgets\/TrackingScrollController\/mostRecentlyUpdatedPosition.html\">mostRecentlyUpdatedPosition<\/a> or, if that\nis null, the initial scroll offset provided to the constructor.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/TrackingScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a>, which this overrides.<\/li><\/ul>",
            "memberOf": "widgets.TrackingScrollController",
            "isConstant": false,
            "href": "widgets\/TrackingScrollController\/initialScrollOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get initialScrollOffset =&gt; _lastUpdatedOffset ?? super.initialScrollOffset;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "mostRecentlyUpdatedPosition",
            "type": "widgets.ScrollPosition",
            "types": [],
            "desc": "<p>The last <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> to change. Returns null if there aren't any\nattached scroll positions, or there hasn't been any scrolling yet, or the\nlast <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> to change has since been removed.<\/p>\n        ",
            "memberOf": "widgets.TrackingScrollController",
            "isConstant": false,
            "href": "widgets\/TrackingScrollController\/mostRecentlyUpdatedPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ScrollPosition get mostRecentlyUpdatedPosition =&gt; _lastUpdated;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/TrackingScrollController-class.html",
    "desc": "<p>A <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> whose <a href=\"widgets\/TrackingScrollController\/initialScrollOffset.html\">initialScrollOffset<\/a> tracks its most recently\nupdated <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>.<\/p>\n<p>This class can be used to synchronize the scroll offset of two or more\nlazily created scroll views that share a single <a href=\"widgets\/TrackingScrollController-class.html\">TrackingScrollController<\/a>.\nIt tracks the most recently updated scroll position and reports it as its\n<code>initialScrollOffset<\/code>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this example each <a href=\"widgets\/PageView-class.html\">PageView<\/a> page contains a <a href=\"widgets\/ListView-class.html\">ListView<\/a> and all three\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>'s share a <a href=\"widgets\/TrackingScrollController-class.html\">TrackingScrollController<\/a>. The scroll offsets of all\nthree list views will track each other, to the extent that's possible given\nthe different list lengths.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">PageView(\n  children: &lt;Widget&gt;[\n    ListView(\n      controller: _trackingScrollController,\n      children: List&lt;Widget&gt;.generate(100, (int i) =&gt; Text('page 0 item $i')).toList(),\n    ),\n    ListView(\n      controller: _trackingScrollController,\n      children: List&lt;Widget&gt;.generate(200, (int i) =&gt; Text('page 1 item $i')).toList(),\n    ),\n    ListView(\n     controller: _trackingScrollController,\n     children: List&lt;Widget&gt;.generate(300, (int i) =&gt; Text('page 2 item $i')).toList(),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>In this example the <code>_trackingController<\/code> would have been created by the\nstateful widget that built the widget tree.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TrackingScrollController"
}