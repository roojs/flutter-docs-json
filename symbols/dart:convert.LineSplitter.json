{
    "desc": "<p>A <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> that splits a <a href=\"dart-core\/String-class.html\">String<\/a> into individual lines.<\/p>\n<p>A line is terminated by either a CR (U+000D), a LF (U+000A), a\nCR+LF sequence (DOS line ending),\nand a final non-empty line can be ended by the end of the string.<\/p>\n<p>The returned lines do not contain the line terminators.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-convert\/LineSplitter-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:convert",
    "name": "dart:convert.LineSplitter",
    "shortname": "LineSplitter",
    "extends": [
        "dart:core.String",
        "dart:core.String",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LineSplitter();<\/code><\/pre>\n    ",
            "href": "dart-convert\/LineSplitter\/LineSplitter.html",
            "isDeprecated": false,
            "type": "",
            "name": "LineSplitter",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.LineSplitter",
            "params": []
        },
        {
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;String&gt; stream) {\n  return Stream&lt;String&gt;.eventTransformed(\n      stream, (EventSink&lt;String&gt; sink) =&gt; _LineSplitterEventSink(sink));\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/LineSplitter\/bind.html",
            "isDeprecated": false,
            "type": "dart:async.Stream<dart:core.String>",
            "name": "bind",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.LineSplitter",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.String>"
                }
            ]
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; convert(String data) {\n  var lines = &lt;String&gt;[];\n  var end = data.length;\n  var sliceStart = 0;\n  var char = 0;\n  for (var i = 0; i &lt; end; i++) {\n    var previousChar = char;\n    char = data.codeUnitAt(i);\n    if (char != _CR) {\n      if (char != _LF) continue;\n      if (previousChar == _CR) {\n        sliceStart = i + 1;\n        continue;\n      }\n    }\n    lines.add(data.substring(sliceStart, i));\n    sliceStart = i + 1;\n  }\n  if (sliceStart &lt; end) {\n    lines.add(data.substring(sliceStart, end));\n  }\n  return lines;\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/LineSplitter\/convert.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.String>",
            "name": "convert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.LineSplitter",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Split <code>lines<\/code> into individual lines.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only split the contents of\n<code>lines.substring(start, end)<\/code>. The <code>start<\/code> and <code>end<\/code> values must\nspecify a valid sub-range of <code>lines<\/code>\n(<code>0 &lt;= start &lt;= end &lt;= lines.length<\/code>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;String&gt; split(String lines, [int start = 0, int end]) sync* {\n  end = RangeError.checkValidRange(start, end, lines.length);\n  var sliceStart = start;\n  var char = 0;\n  for (var i = start; i &lt; end; i++) {\n    var previousChar = char;\n    char = lines.codeUnitAt(i);\n    if (char != _CR) {\n      if (char != _LF) continue;\n      if (previousChar == _CR) {\n        sliceStart = i + 1;\n        continue;\n      }\n    }\n    yield lines.substring(sliceStart, i);\n    sliceStart = i + 1;\n  }\n  if (sliceStart &lt; end) {\n    yield lines.substring(sliceStart, end);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/LineSplitter\/split.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable<dart:core.String>",
            "name": "split",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.LineSplitter",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "lines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  return _LineSplitterSink(\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/LineSplitter\/startChunkedConversion.html",
            "isDeprecated": false,
            "type": "dart:convert.StringConversionSink",
            "name": "startChunkedConversion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.LineSplitter",
            "params": [
                {
                    "name": "sink",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Sink<dart:core.String>"
                }
            ]
        }
    ],
    "props": []
}