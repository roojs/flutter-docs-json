{
    "desc": "<p>A convenience widget for drawing images and other decorations on <a href=\"material\/Material-class.html\">Material<\/a>\nwidgets, so that <a href=\"material\/InkWell-class.html\">InkWell<\/a> and <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> splashes will render over them.<\/p>\n<p>Ink splashes and highlights, as rendered by <a href=\"material\/InkWell-class.html\">InkWell<\/a> and <a href=\"material\/InkResponse-class.html\">InkResponse<\/a>,\ndraw on the actual underlying <a href=\"material\/Material-class.html\">Material<\/a>, under whatever widgets are drawn\nover the material (such as <a href=\"widgets\/Text-class.html\">Text<\/a> and <a href=\"widgets\/Icon-class.html\">Icon<\/a>s). If an opaque image is drawn\nover the <a href=\"material\/Material-class.html\">Material<\/a> (maybe using a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a>), these ink\neffects will not be visible, as they will be entirely obscured by the opaque\ngraphics drawn above the <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>This widget draws the given <a href=\"painting\/Decoration-class.html\">Decoration<\/a> directly on the <a href=\"material\/Material-class.html\">Material<\/a>, in the\nsame way that <a href=\"material\/InkWell-class.html\">InkWell<\/a> and <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> draw there. This allows the\nsplashes to be drawn above the otherwise opaque graphics.<\/p>\n<p>An alternative solution is to use a <a href=\"material\/MaterialType-class.html\">MaterialType.transparency<\/a> material\nabove the opaque graphics, so that the ink responses from <a href=\"material\/InkWell-class.html\">InkWell<\/a>s and\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a>s will be drawn on the transparent material on top of the\nopaque graphics, rather than under the opaque graphics on the underlying\n<a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<h2 id=\"limitations\">Limitations<\/h2>\n<p>This widget is subject to the same limitations as other ink effects, as\ndescribed in the documentation for <a href=\"material\/Material-class.html\">Material<\/a>. Most notably, the position of\nan <a href=\"material\/Ink-class.html\">Ink<\/a> widget must not change during the lifetime of the <a href=\"material\/Material-class.html\">Material<\/a> object\nunless a <a href=\"widgets\/LayoutChangedNotification-class.html\">LayoutChangedNotification<\/a> is dispatched each frame that the\nposition changes. This is done automatically for <a href=\"widgets\/ListView-class.html\">ListView<\/a> and other\nscrolling widgets, but is not done for animated transitions such as\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a>.<\/p>\n<p>Additionally, if multiple <a href=\"material\/Ink-class.html\">Ink<\/a> widgets paint on the same <a href=\"material\/Material-class.html\">Material<\/a> in the\nsame location, their relative order is not guaranteed. The decorations will\nbe painted in the order that they were added to the material, which\ngenerally speaking will match the order they are given in the widget tree,\nbut this order may appear to be somewhat random in more dynamic situations.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how a <a href=\"material\/Material-class.html\">Material<\/a> widget can have a yellow rectangle drawn\non it using <a href=\"material\/Ink-class.html\">Ink<\/a>, while still having ink effects over the yellow rectangle:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Material(\n  color: Colors.teal[900],\n  child: Center(\n    child: Ink(\n      color: Colors.yellow,\n      width: 200.0,\n      height: 100.0,\n      child: InkWell(\n        onTap: () { \/* ... *\/ },\n        child: Center(\n          child: Text('YELLOW'),\n        )\n      ),\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following example shows how an image can be printed on a <a href=\"material\/Material-class.html\">Material<\/a>\nwidget with an <a href=\"material\/InkWell-class.html\">InkWell<\/a> above it:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Material(\n  color: Colors.grey[800],\n  child: Center(\n    child: Ink.image(\n      image: AssetImage('cat.jpeg'),\n      fit: BoxFit.cover,\n      width: 300.0,\n      height: 200.0,\n      child: InkWell(\n        onTap: () { \/* ... *\/ },\n        child: Align(\n          alignment: Alignment.topLeft,\n          child: Padding(\n            padding: const EdgeInsets.all(10.0),\n            child: Text('KITTEN', style: TextStyle(fontWeight: FontWeight.w900, color: Colors.white)),\n          ),\n        )\n      ),\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Container-class.html\">Container<\/a>, a more generic form of this widget which paints itself,\nrather that deferring to the nearest <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/li>\n<li>\n<a href=\"material\/InkDecoration-class.html\">InkDecoration<\/a>, the <a href=\"material\/InkFeature-class.html\">InkFeature<\/a> subclass used by this widget to paint\non <a href=\"material\/Material-class.html\">Material<\/a> widgets.<\/li>\n<li>\n<a href=\"material\/InkWell-class.html\">InkWell<\/a> and <a href=\"material\/InkResponse-class.html\">InkResponse<\/a>, which also draw on <a href=\"material\/Material-class.html\">Material<\/a> widgets.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Ink-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Ink",
    "shortname": "Ink",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Paints a decoration (which can be a simple color) on a <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>The <code>height<\/code> and <code>width<\/code> values include the <code>padding<\/code>.<\/p>\n<p>The <code>color<\/code> argument is a shorthand for <code>decoration: new\nBoxDecoration(color: color)<\/code>, which means you cannot supply both a <code>color<\/code>\nand a <code>decoration<\/code> argument. If you want to have both a <code>color<\/code> and a\n<code>decoration<\/code>, you can pass the color as the <code>color<\/code> argument to the\n<code>BoxDecoration<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Ink({\n  Key key,\n  this.padding,\n  Color color,\n  Decoration decoration,\n  this.width,\n  this.height,\n  this.child,\n}) : assert(padding == null || padding.isNonNegative),\n     assert(decoration == null || decoration.debugAssertIsValid()),\n     assert(color == null || decoration == null,\n       'Cannot provide both a color and a decoration\\n'\n       'The color argument is just a shorthand for \"decoration: new BoxDecoration(color: color)\".'\n     ),\n     decoration = decoration ?? (color != null ? BoxDecoration(color: color) : null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Ink\/Ink.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Ink",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "decoration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Decoration"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Ink\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_InkState createState() =&gt; _InkState();<\/code><\/pre>\n    ",
            "href": "material\/Ink\/createState.html",
            "isDeprecated": "0",
            "type": "<_InkState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Ink",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/Ink\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Decoration&gt;('bg', decoration, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "material\/Ink\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Ink",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The <a href=\"material\/Ink\/child.html\">child<\/a> contained by the container.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Ink\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.Ink",
            "params": []
        },
        {
            "desc": "<p>The decoration to paint on the nearest ancestor <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>A shorthand for specifying just a solid color is available in the\nconstructor: set the <code>color<\/code> argument instead of the <code>decoration<\/code>\nargument.<\/p>\n<p>A shorthand for specifying just an image is also available using the <a href=\"material\/Ink\/Ink.image.html\">new\nInk.image<\/a> constructor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Decoration decoration\n\n<\/code><\/pre>\n        ",
            "href": "material\/Ink\/decoration.html",
            "isDeprecated": "0",
            "type": "painting.Decoration",
            "memberOf": "material.Ink",
            "params": []
        },
        {
            "desc": "<p>A height to apply to the <a href=\"material\/Ink\/decoration.html\">decoration<\/a> and the <a href=\"material\/Ink\/child.html\">child<\/a>. The height includes\nany <a href=\"material\/Ink\/padding.html\">padding<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "href": "material\/Ink\/height.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.Ink",
            "params": []
        },
        {
            "desc": "<p>Empty space to inscribe inside the <a href=\"material\/Ink\/decoration.html\">decoration<\/a>. The <a href=\"material\/Ink\/child.html\">child<\/a>, if any, is\nplaced inside this padding.<\/p>\n<p>This padding is in addition to any padding inherent in the <a href=\"material\/Ink\/decoration.html\">decoration<\/a>;\nsee <a href=\"material\/Ink\/padding.html\">Decoration.padding<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/Ink\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.Ink",
            "params": []
        },
        {
            "desc": "<p>A width to apply to the <a href=\"material\/Ink\/decoration.html\">decoration<\/a> and the <a href=\"material\/Ink\/child.html\">child<\/a>. The width includes\nany <a href=\"material\/Ink\/padding.html\">padding<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "href": "material\/Ink\/width.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.Ink",
            "params": []
        }
    ]
}