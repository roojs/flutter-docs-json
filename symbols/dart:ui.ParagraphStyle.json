{
    "name": "dart:ui.ParagraphStyle",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/ParagraphStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.ParagraphStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/ParagraphStyle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ParagraphStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily ||\n      _fontSize != typedOther._fontSize ||\n      _height != typedOther._height ||\n      _strutStyle != typedOther._strutStyle ||\n      _ellipsis != typedOther._ellipsis ||\n      _locale != typedOther._locale)\n   return false;\n  for (int index = 0; index &lt; _encoded.length; index += 1) {\n    if (_encoded[index] != typedOther._encoded[index])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ParagraphStyle",
            "type": "",
            "desc": "<p>Creates a new ParagraphStyle object.<\/p>\n<ul>\n<li>\n<p><code>textAlign<\/code>: The alignment of the text within the lines of the\nparagraph. If the last line is ellipsized (see <code>ellipsis<\/code> below), the\nalignment is applied to that line after it has been truncated but before\nthe ellipsis has been added.<\/p>\n<\/li>\n<li>\n<p><code>textDirection<\/code>: The directionality of the text, left-to-right (e.g.\nNorwegian) or right-to-left (e.g. Hebrew). This controls the overall\ndirectionality of the paragraph, as well as the meaning of\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a> in the <code>textAlign<\/code> field.<\/p>\n<\/li>\n<li>\n<p><code>maxLines<\/code>: The maximum number of lines painted. Lines beyond this\nnumber are silently dropped. For example, if <code>maxLines<\/code> is 1, then only\none line is rendered. If <code>maxLines<\/code> is null, but <code>ellipsis<\/code> is not null,\nthen lines after the first one that overflows the width constraints are\ndropped. The width constraints are those set in the\n<a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> object passed to the <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> method.<\/p>\n<\/li>\n<li>\n<p><code>fontFamily<\/code>: The name of the font family to apply when painting the text,\nin the absence of a <code>textStyle<\/code> being attached to the span.<\/p>\n<\/li>\n<li>\n<p><code>fontSize<\/code>: The fallback size of glyphs (in logical pixels) to\nuse when painting the text. This is used when there is no <a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>height<\/code>: The height of the spans as a multiplier of the font size. The\nfallback height to use when no height is provided in through\n<a href=\"painting\/TextStyle\/height.html\">TextStyle.height<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>fontWeight<\/code>: The typeface thickness to use when painting the text\n(e.g., bold).<\/p>\n<\/li>\n<li>\n<p><code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g.,\nitalics).<\/p>\n<\/li>\n<li>\n<p><code>strutStyle<\/code>: The properties of the strut. Strut defines a set of minimum\nvertical line height related metrics and can be used to obtain more\nadvanced line spacing behavior.<\/p>\n<\/li>\n<li>\n<p><code>ellipsis<\/code>: String used to ellipsize overflowing text. If <code>maxLines<\/code> is\nnot null, then the <code>ellipsis<\/code>, if any, is applied to the last rendered\nline, if that line overflows the width constraints. If <code>maxLines<\/code> is\nnull, then the <code>ellipsis<\/code> is applied to the first line that overflows\nthe width constraints, and subsequent lines are dropped. The width\nconstraints are those set in the <a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> object passed to\nthe <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> method. The empty string and the null value are\nconsidered equivalent and turn off this behavior.<\/p>\n<\/li>\n<li>\n<p><code>locale<\/code>: The locale used to select region-specific glyphs.<\/p>\n<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "dart:ui.ParagraphStyle",
            "sig": "",
            "params": [
                {
                    "name": "textAlign",
                    "type": "dart:ui.TextAlign",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxLines",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "strutStyle",
                    "type": "dart:ui.StrutStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ellipsis",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/ParagraphStyle\/ParagraphStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/   See: https:\/\/github.com\/flutter\/flutter\/issues\/9819\n\/\/\/\n\/\/\/ * `textDirection`: The directionality of the text, left-to-right (e.g.\n\/\/\/   Norwegian) or right-to-left (e.g. Hebrew). This controls the overall\n\/\/\/   directionality of the paragraph, as well as the meaning of\n\/\/\/   [TextAlign.start] and [TextAlign.end] in the `textAlign` field.\n\/\/\/\n\/\/\/ * `maxLines`: The maximum number of lines painted. Lines beyond this\n\/\/\/   number are silently dropped. For example, if `maxLines` is 1, then only\n\/\/\/   one line is rendered. If `maxLines` is null, but `ellipsis` is not null,\n\/\/\/   then lines after the first one that overflows the width constraints are\n\/\/\/   dropped. The width constraints are those set in the\n\/\/\/   [ParagraphConstraints] object passed to the [Paragraph.layout] method.\n\/\/\/\n\/\/\/ * `fontFamily`: The name of the font family to apply when painting the text,\n\/\/\/   in the absence of a `textStyle` being attached to the span.\n\/\/\/\n\/\/\/ * `fontSize`: The fallback size of glyphs (in logical pixels) to\n\/\/\/   use when painting the text. This is used when there is no [TextStyle].\n\/\/\/\n\/\/\/ * `height`: The height of the spans as a multiplier of the font size. The\n\/\/\/   fallback height to use when no height is provided in through\n\/\/\/   [TextStyle.height].\n\/\/\/\n\/\/\/ * `fontWeight`: The typeface thickness to use when painting the text\n\/\/\/   (e.g., bold).\n\/\/\/\n\/\/\/ * `fontStyle`: The typeface variant to use when drawing the letters (e.g.,\n\/\/\/   italics).\n\/\/\/\n\/\/\/ * `strutStyle`: The properties of the strut. Strut defines a set of minimum\n\/\/\/   vertical line height related metrics and can be used to obtain more\n\/\/\/   advanced line spacing behavior.\n\/\/\/\n\/\/\/ * `ellipsis`: String used to ellipsize overflowing text. If `maxLines` is\n\/\/\/   not null, then the `ellipsis`, if any, is applied to the last rendered\n\/\/\/   line, if that line overflows the width constraints. If `maxLines` is\n\/\/\/   null, then the `ellipsis` is applied to the first line that overflows\n\/\/\/   the width constraints, and subsequent lines are dropped. The width\n\/\/\/   constraints are those set in the [ParagraphConstraints] object passed to\n\/\/\/   the [Paragraph.layout] method. The empty string and the null value are\n\/\/\/   considered equivalent and turn off this behavior.\n\/\/\/\n\/\/\/ * `locale`: The locale used to select region-specific glyphs.\nParagraphStyle({\n  TextAlign textAlign,\n  TextDirection textDirection,\n  int maxLines,\n  String fontFamily,\n  double fontSize,\n  double height,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  StrutStyle strutStyle,\n  String ellipsis,\n  Locale locale,\n}) : _encoded = _encodeParagraphStyle(\n       textAlign,\n       textDirection,\n       maxLines,\n       fontFamily,\n       fontSize,\n       height,\n       fontWeight,\n       fontStyle,\n       strutStyle,\n       ellipsis,\n       locale,\n     ),\n     _fontFamily = fontFamily,\n     _fontSize = fontSize,\n     _height = height,\n     _strutStyle = strutStyle,\n     _ellipsis = ellipsis,\n     _locale = locale;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.ParagraphStyle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/ParagraphStyle\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType('\n           'textAlign: ${     _encoded[0] &amp; 0x002 == 0x002 ? TextAlign.values[_encoded[1]]     : \"unspecified\"}, '\n           'textDirection: ${ _encoded[0] &amp; 0x004 == 0x004 ? TextDirection.values[_encoded[2]] : \"unspecified\"}, '\n           'fontWeight: ${    _encoded[0] &amp; 0x008 == 0x008 ? FontWeight.values[_encoded[3]]    : \"unspecified\"}, '\n           'fontStyle: ${     _encoded[0] &amp; 0x010 == 0x010 ? FontStyle.values[_encoded[4]]     : \"unspecified\"}, '\n           'maxLines: ${      _encoded[0] &amp; 0x020 == 0x020 ? _encoded[5]                       : \"unspecified\"}, '\n           'fontFamily: ${    _encoded[0] &amp; 0x040 == 0x040 ? _fontFamily                       : \"unspecified\"}, '\n           'fontSize: ${      _encoded[0] &amp; 0x080 == 0x080 ? _fontSize                         : \"unspecified\"}, '\n           'height: ${        _encoded[0] &amp; 0x100 == 0x100 ? \"${_height}x\"                     : \"unspecified\"}, '\n           'ellipsis: ${      _encoded[0] &amp; 0x200 == 0x200 ? \"\\\"$_ellipsis\\\"\"                  : \"unspecified\"}, '\n           'locale: ${        _encoded[0] &amp; 0x400 == 0x400 ? _locale                           : \"unspecified\"}'\n         ')';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/ParagraphStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.ParagraphStyle",
            "isConstant": false,
            "href": "dart-ui\/ParagraphStyle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded), _fontFamily, _fontSize, _height, _ellipsis, _locale);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/ParagraphStyle-class.html",
    "desc": "<p>An opaque object that determines the configuration used by\n<a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a> to position lines within a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> of text.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ParagraphStyle"
}