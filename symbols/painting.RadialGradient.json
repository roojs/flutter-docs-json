{
    "desc": "<p>A 2D radial gradient.<\/p>\n<p>This class is used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to represent radial gradients. This\nabstracts out the arguments to the <a href=\"dart-ui\/Gradient\/Gradient.radial.html\">new ui.Gradient.radial<\/a> constructor from\nthe <code>dart:ui<\/code> library.<\/p>\n<p>A normal radial gradient has a <a href=\"painting\/RadialGradient\/center.html\">center<\/a> and a <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>. The <a href=\"painting\/RadialGradient\/center.html\">center<\/a> point\ncorresponds to 0.0, and the ring at <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a> from the center corresponds\nto 1.0. These lengths are expressed in fractions, so that the same gradient\ncan be reused with varying sized boxes without changing the parameters.\n(This contrasts with <a href=\"dart-ui\/Gradient\/Gradient.radial.html\">new ui.Gradient.radial<\/a>, whose arguments are expressed\nin logical pixels.)<\/p>\n<p>It is also possible to create a two-point (or focal pointed) radial gradient\n(which is sometimes referred to as a two point conic gradient, but is not the\nsame as a CSS conic gradient which corresponds to a <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>). A <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a>\npoint and <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> can be specified similarly to <a href=\"painting\/RadialGradient\/center.html\">center<\/a> and <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>,\nwhich will make the rendered gradient appear to be pointed or directed in the\ndirection of the <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> point. This is only important if <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> and <a href=\"painting\/RadialGradient\/center.html\">center<\/a>\nare not equal or <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0 (as this case is visually identical to a\nnormal radial gradient).  One important case to avoid is having <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> and\n<a href=\"painting\/RadialGradient\/center.html\">center<\/a> both resolve to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> when <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0. In such a case,\na valid shader cannot be created by the framework.<\/p>\n<p>The <a href=\"painting\/Gradient\/colors.html\">colors<\/a> are described by a list of <a href=\"dart-ui\/Color-class.html\">Color<\/a> objects. There must be at\nleast two colors. The <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list, if specified, must have the same length\nas <a href=\"painting\/Gradient\/colors.html\">colors<\/a>. It specifies fractions of the radius between 0.0 and 1.0,\ngiving concentric rings for each color stop. If it is null, a uniform\ndistribution is assumed.<\/p>\n<p>The region of the canvas beyond <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a> from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a> is colored\naccording to <a href=\"painting\/RadialGradient\/tileMode.html\">tileMode<\/a>.<\/p>\n<p>Typically this class is used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which does the painting.\nTo use a <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> to paint on a canvas directly, see <a href=\"painting\/RadialGradient\/createShader.html\">createShader<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis function draws a gradient that looks like a sun in a blue sky.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void paintSky(Canvas canvas, Rect rect) {\n  var gradient = RadialGradient(\n    center: const Alignment(0.7, -0.6), \/\/ near the top right\n    radius: 0.2,\n    colors: [\n      const Color(0xFFFFFF00), \/\/ yellow sun\n      const Color(0xFF0099FF), \/\/ blue sky\n    ],\n    stops: [0.4, 1.0],\n  );\n  \/\/ rect is the area we are painting over\n  var paint = Paint()\n    ..shader = gradient.createShader(rect);\n  canvas.drawRect(rect, paint);\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>, which displays a gradient in parallel lines, and has an\nexample which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>, which displays a gradient in a sweeping arc around a\ncenter point.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which can take a <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> in its\n<a href=\"painting\/BoxDecoration\/gradient.html\">BoxDecoration.gradient<\/a> property.<\/li>\n<li>\n<a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, which shows how to use the above sample code in a custom\npainter.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/RadialGradient-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.RadialGradient",
    "shortname": "RadialGradient",
    "extends": [
        "painting.Gradient",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a radial gradient.<\/p>\n<p>The <code>colors<\/code> argument must not be null. If <code>stops<\/code> is non-null, it must\nhave the same length as <code>colors<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RadialGradient({\n  this.center = Alignment.center,\n  this.radius = 0.5,\n  @required List&lt;Color&gt; colors,\n  List&lt;double&gt; stops,\n  this.tileMode = TileMode.clamp,\n  this.focal,\n  this.focalRadius = 0.0,\n}) : assert(center != null),\n     assert(radius != null),\n     assert(tileMode != null),\n     assert(focalRadius != null),\n     super(colors: colors, stops: stops);<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/RadialGradient.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "center",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "colors",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<dart:ui.Color>"
                },
                {
                    "name": "focal",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "focalRadius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "stops",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.double>"
                },
                {
                    "name": "tileMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TileMode"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShader createShader(Rect rect, { TextDirection textDirection }) {\n  return ui.Gradient.radial(\n    center.resolve(textDirection).withinRect(rect),\n    radius * rect.shortestSide,\n    colors, _impliedStops(), tileMode,\n    null, \/\/ transform\n    focal == null  ? null : focal.resolve(textDirection).withinRect(rect),\n    focalRadius * rect.shortestSide,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/createShader.html",
            "isDeprecated": "0",
            "type": "dart:ui.Shader",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>s.<\/p>\n<p>If either gradient is null, this function linearly interpolates from a\na gradient that matches the other gradient in <a href=\"painting\/RadialGradient\/center.html\">center<\/a>, <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>, <a href=\"painting\/Gradient\/stops.html\">stops<\/a> and\n<a href=\"painting\/RadialGradient\/tileMode.html\">tileMode<\/a> and with the same <a href=\"painting\/Gradient\/colors.html\">colors<\/a> but transparent (using <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>).<\/p>\n<p>If neither gradient is null, they must have the same number of <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents a position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RadialGradient lerp(RadialGradient a, RadialGradient b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  final _ColorsAndStops interpolated = _interpolateColorsAndStops(\n      a.colors,\n      a._impliedStops(),\n      b.colors,\n      b._impliedStops(),\n      t,\n  );\n  return RadialGradient(\n    center: AlignmentGeometry.lerp(a.center, b.center, t),\n    radius: math.max(0.0, ui.lerpDouble(a.radius, b.radius, t)),\n    colors: interpolated.colors,\n    stops: interpolated.stops,\n    tileMode: t &lt; 0.5 ? a.tileMode : b.tileMode, \/\/ TODO(ianh): interpolate tile mode\n    focal: AlignmentGeometry.lerp(a.focal, b.focal, t),\n    focalRadius: math.max(0.0, ui.lerpDouble(a.focalRadius, b.focalRadius, t)),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/lerp.html",
            "isDeprecated": "0",
            "type": "painting.RadialGradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.RadialGradient"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.RadialGradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/RadialGradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/RadialGradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/RadialGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null || (a is RadialGradient))\n    return RadialGradient.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/lerpFrom.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/RadialGradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/RadialGradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/RadialGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpTo(Gradient b, double t) {\n  if (b == null || (b is RadialGradient))\n    return RadialGradient.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/lerpTo.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> with its colors scaled by the given factor.<\/p>\n<p>Since the alpha component of the Color is what is scaled, a factor\nof 0.0 or less results in a gradient that is fully transparent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRadialGradient scale(double factor) {\n  return RadialGradient(\n    center: center,\n    radius: radius,\n    colors: colors.map&lt;Color&gt;((Color color) =&gt; Color.lerp(null, color, factor)).toList(),\n    stops: stops,\n    tileMode: tileMode,\n    focal: focal,\n    focalRadius: focalRadius,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/scale.html",
            "isDeprecated": "0",
            "type": "painting.RadialGradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": [
                {
                    "name": "factor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($center, $radius, $colors, $stops, $tileMode, $focal, $focalRadius)';\n}<\/code><\/pre>\n    ",
            "href": "painting\/RadialGradient\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.RadialGradient",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The center of the gradient, as an offset into the (-1.0, -1.0) x (1.0, 1.0)\nsquare describing the gradient which will be mapped onto the paint box.<\/p>\n<p>For example, an alignment of (0.0, 0.0) will place the radial\ngradient in the center of the box.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the left in\nleft-to-right contexts and the right in right-to-left contexts. If a\ntext-direction-dependent value is provided here, then the <a href=\"painting\/RadialGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry center\n\n<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/center.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "painting.RadialGradient",
            "params": []
        },
        {
            "desc": "<p>The focal point of the gradient.  If specified, the gradient will appear\nto be focused along the vector from <a href=\"painting\/RadialGradient\/center.html\">center<\/a> to focal.<\/p>\n<p>See <a href=\"painting\/RadialGradient\/center.html\">center<\/a> for a description of how the coordinates are mapped.<\/p>\n<p>If this value is specified and <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0, care should be taken\nto ensure that either this value or <a href=\"painting\/RadialGradient\/center.html\">center<\/a> will not both resolve to\n<a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>, which would fail to create a valid gradient.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry focal\n\n<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/focal.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "painting.RadialGradient",
            "params": []
        },
        {
            "desc": "<p>The radius of the focal point of gradient, as a fraction of the shortest\nside of the paint box.<\/p>\n<p>For example, if a radial gradient is painted on a box that is\n100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0\nwill place the 1.0 stop at 100.0 pixels from the <code>focus<\/code>.<\/p>\n<p>If this value is specified and is greater than 0.0, either <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> or\n<a href=\"painting\/RadialGradient\/center.html\">center<\/a> must not resolve to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>, which would fail to create\na valid gradient.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double focalRadius\n\n<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/focalRadius.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.RadialGradient",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/RadialGradient\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(center, radius, tileMode, hashList(colors), hashList(stops), focal, focalRadius);<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "painting.RadialGradient",
            "params": []
        },
        {
            "desc": "<p>The radius of the gradient, as a fraction of the shortest side\nof the paint box.<\/p>\n<p>For example, if a radial gradient is painted on a box that is\n100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0\nwill place the 1.0 stop at 100.0 pixels from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radius\n\n<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/radius.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.RadialGradient",
            "params": []
        },
        {
            "desc": "<p>How this gradient should tile the plane beyond the outer ring at <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>\npixels from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a>.<\/p>\n<p>For details, see <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radial.png\"><\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radialWithFocal.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radialWithFocal.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radialWithFocal.png\"><\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TileMode tileMode\n\n<\/code><\/pre>\n        ",
            "href": "painting\/RadialGradient\/tileMode.html",
            "isDeprecated": "0",
            "type": "dart:ui.TileMode",
            "memberOf": "painting.RadialGradient",
            "params": []
        }
    ]
}