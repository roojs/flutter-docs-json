{
    "desc": "<p>A widget that detects gestures.<\/p>\n<p>Attempts to recognize gestures that correspond to its non-null callbacks.<\/p>\n<p>If this widget has a child, it defers to that child for its sizing behavior.\nIf it does not have a child, it grows to fit the parent instead.<\/p>\n<p>By default a GestureDetector with an invisible child ignores touches;\nthis behavior can be controlled with <a href=\"widgets\/GestureDetector\/behavior.html\">behavior<\/a>.<\/p>\n<p>GestureDetector also listens for accessibility events and maps\nthem to the callbacks. To ignore accessibility events, set\n<a href=\"widgets\/GestureDetector\/excludeFromSemantics.html\">excludeFromSemantics<\/a> to true.<\/p>\n<p>See <a href=\"http:\/\/flutter.io\/gestures\/\">flutter.io\/gestures\/<\/a> for additional information.<\/p>\n<p>Material design applications typically react to touches with ink splash\neffects. The <a href=\"material\/InkWell-class.html\">InkWell<\/a> class implements this effect and can be used in place\nof a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> for handling taps.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example makes a rectangle react to being tapped by setting the\n<code>_lights<\/code> field:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">GestureDetector(\n  onTap: () {\n    setState(() { _lights = true; });\n  },\n  child: Container(\n    color: Colors.yellow,\n    child: Text('TURN LIGHTS ON'),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"debugging\">Debugging<\/h2>\n<p>To see how large the hit test box of a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> is for debugging\npurposes, set <a href=\"rendering\/debugPaintPointersEnabled.html\">debugPaintPointersEnabled<\/a> to true.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/GestureDetector-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.GestureDetector",
    "shortname": "GestureDetector",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The user has tapped the screen at the same location twice in quick\nsuccession.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onDoubleTap\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onDoubleTap.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapCallback",
            "name": "onDoubleTap",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer is no longer in contact with the screen.<\/p>\n<p>Note that this callback will only be fired on devices with pressure\ndetecting screens.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressEndCallback onForcePressEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onForcePressEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureForcePressEndCallback",
            "name": "onForcePressEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer is in contact with the screen and has pressed with the maximum\nforce. The amount of force is at least\n<a href=\"gestures\/ForcePressGestureRecognizer\/peakPressure.html\">ForcePressGestureRecognizer.peakPressure<\/a>.<\/p>\n<p>Note that this callback will only be fired on devices with pressure\ndetecting screens.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressPeakCallback onForcePressPeak\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onForcePressPeak.html",
            "isDeprecated": false,
            "type": "gestures.GestureForcePressPeakCallback",
            "name": "onForcePressPeak",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer is in contact with the screen and has pressed with sufficient\nforce to initiate a force press. The amount of force is at least\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a>.<\/p>\n<p>Note that this callback will only be fired on devices with pressure\ndetecting screens.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressStartCallback onForcePressStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onForcePressStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureForcePressStartCallback",
            "name": "onForcePressStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer is in contact with the screen, has previously passed the\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a> and is either moving on the\nplane of the screen, pressing the screen with varying forces or both\nsimultaneously.<\/p>\n<p>Note that this callback will only be fired on devices with pressure\ndetecting screens.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressUpdateCallback onForcePressUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onForcePressUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureForcePressUpdateCallback",
            "name": "onForcePressUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer that previously triggered <a href=\"widgets\/GestureDetector\/onHorizontalDragDown.html\">onHorizontalDragDown<\/a> did not\ncomplete.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragCancelCallback onHorizontalDragCancel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onHorizontalDragCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragCancelCallback",
            "name": "onHorizontalDragCancel",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and might begin to move horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragDownCallback onHorizontalDragDown\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onHorizontalDragDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragDownCallback",
            "name": "onHorizontalDragDown",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that was previously in contact with the screen and moving\nhorizontally is no longer in contact with the screen and was moving at a\nspecific velocity when it stopped contacting the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragEndCallback onHorizontalDragEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onHorizontalDragEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragEndCallback",
            "name": "onHorizontalDragEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and has begun to move horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragStartCallback onHorizontalDragStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onHorizontalDragStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragStartCallback",
            "name": "onHorizontalDragStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that is in contact with the screen and moving horizontally has\nmoved in the horizontal direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragUpdateCallback onHorizontalDragUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onHorizontalDragUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragUpdateCallback",
            "name": "onHorizontalDragUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>Called when a long press gesture has been recognized.<\/p>\n<p>Triggered when a pointer has remained in contact with the screen at the\nsame location for a long period of time.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/onLongPressStart.html\">onLongPressStart<\/a>, which has the same timing but has data for the\npress location.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressCallback onLongPress\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onLongPress.html",
            "isDeprecated": false,
            "type": "gestures.GestureLongPressCallback",
            "name": "onLongPress",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that has triggered a long-press has stopped contacting the screen.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/onLongPressUp.html\">onLongPressUp<\/a>, which has the same timing but without the location data.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressEndCallback onLongPressEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onLongPressEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureLongPressEndCallback",
            "name": "onLongPressEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has been drag-moved after a long press.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressMoveUpdateCallback onLongPressMoveUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onLongPressMoveUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureLongPressMoveUpdateCallback",
            "name": "onLongPressMoveUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>Callback for long press start with gesture location.<\/p>\n<p>Triggered when a pointer has remained in contact with the screen at the\nsame location for a long period of time.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/onLongPress.html\">onLongPress<\/a>, which has the same timing but without the location data.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressStartCallback onLongPressStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onLongPressStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureLongPressStartCallback",
            "name": "onLongPressStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that has triggered a long-press has stopped contacting the screen.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/onLongPressEnd.html\">onLongPressEnd<\/a>, which has the same timing but has data for the up\ngesture location.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressUpCallback onLongPressUp\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onLongPressUp.html",
            "isDeprecated": false,
            "type": "gestures.GestureLongPressUpCallback",
            "name": "onLongPressUp",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer that previously triggered <a href=\"widgets\/GestureDetector\/onPanDown.html\">onPanDown<\/a> did not complete.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragCancelCallback onPanCancel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onPanCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragCancelCallback",
            "name": "onPanCancel",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and might begin to move.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragDownCallback onPanDown\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onPanDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragDownCallback",
            "name": "onPanDown",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that was previously in contact with the screen and moving\nis no longer in contact with the screen and was moving at a specific\nvelocity when it stopped contacting the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragEndCallback onPanEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onPanEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragEndCallback",
            "name": "onPanEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and has begun to move.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragStartCallback onPanStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onPanStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragStartCallback",
            "name": "onPanStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that is in contact with the screen and moving has moved again.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragUpdateCallback onPanUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onPanUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragUpdateCallback",
            "name": "onPanUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointers are no longer in contact with the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureScaleEndCallback onScaleEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onScaleEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleEndCallback",
            "name": "onScaleEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointers in contact with the screen have established a focal point and\ninitial scale of 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureScaleStartCallback onScaleStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onScaleStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleStartCallback",
            "name": "onScaleStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointers in contact with the screen have indicated a new focal point\nand\/or scale.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureScaleUpdateCallback onScaleUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onScaleUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleUpdateCallback",
            "name": "onScaleUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A tap has occurred.<\/p>\n<p>This triggers when the tap gesture wins. If the tap gesture did not win,\n<a href=\"widgets\/GestureDetector\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/onTapUp.html\">onTapUp<\/a>, which is called at the same time but includes details\nregarding the pointer position.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onTap\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onTap.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapCallback",
            "name": "onTap",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer that previously triggered <a href=\"widgets\/GestureDetector\/onTapDown.html\">onTapDown<\/a> will not end up causing\na tap.<\/p>\n<p>This is called after <a href=\"widgets\/GestureDetector\/onTapDown.html\">onTapDown<\/a>, and instead of <a href=\"widgets\/GestureDetector\/onTapUp.html\">onTapUp<\/a> and <a href=\"widgets\/GestureDetector\/onTap.html\">onTap<\/a>, if\nthe tap gesture did not win.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCancelCallback onTapCancel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onTapCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapCancelCallback",
            "name": "onTapCancel",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that might cause a tap has contacted the screen at a particular\nlocation.<\/p>\n<p>This is called after a short timeout, even if the winning gesture has not\nyet been selected. If the tap gesture wins, <a href=\"widgets\/GestureDetector\/onTapUp.html\">onTapUp<\/a> will be called,\notherwise <a href=\"widgets\/GestureDetector\/onTapCancel.html\">onTapCancel<\/a> will be called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onTapDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapDownCallback",
            "name": "onTapDown",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that will trigger a tap has stopped contacting the screen at a\nparticular location.<\/p>\n<p>This triggers immediately before <a href=\"widgets\/GestureDetector\/onTap.html\">onTap<\/a> in the case of the tap gesture\nwinning. If the tap gesture did not win, <a href=\"widgets\/GestureDetector\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapUpCallback onTapUp\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onTapUp.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapUpCallback",
            "name": "onTapUp",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The pointer that previously triggered <a href=\"widgets\/GestureDetector\/onVerticalDragDown.html\">onVerticalDragDown<\/a> did not\ncomplete.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragCancelCallback onVerticalDragCancel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onVerticalDragCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragCancelCallback",
            "name": "onVerticalDragCancel",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and might begin to move vertically.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragDownCallback onVerticalDragDown\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onVerticalDragDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragDownCallback",
            "name": "onVerticalDragDown",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that was previously in contact with the screen and moving\nvertically is no longer in contact with the screen and was moving at a\nspecific velocity when it stopped contacting the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragEndCallback onVerticalDragEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onVerticalDragEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragEndCallback",
            "name": "onVerticalDragEnd",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and has begun to move vertically.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragStartCallback onVerticalDragStart\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onVerticalDragStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragStartCallback",
            "name": "onVerticalDragStart",
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>A pointer that is in contact with the screen and moving vertically has\nmoved in the vertical direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragUpdateCallback onVerticalDragUpdate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/onVerticalDragUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragUpdateCallback",
            "name": "onVerticalDragUpdate",
            "memberOf": "widgets.GestureDetector",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that detects gestures.<\/p>\n<p>Pan and scale callbacks cannot be used simultaneously because scale is a\nsuperset of pan. Simply use the scale callbacks instead.<\/p>\n<p>Horizontal and vertical drag callbacks cannot be used simultaneously\nbecause a combination of a horizontal and vertical drag is a pan. Simply\nuse the pan callbacks instead.<\/p>\n<p>By default, gesture detectors contribute semantic information to the tree\nthat is used by assistive technology.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GestureDetector({\n  Key key,\n  this.child,\n  this.onTapDown,\n  this.onTapUp,\n  this.onTap,\n  this.onTapCancel,\n  this.onDoubleTap,\n  this.onLongPress,\n  this.onLongPressStart,\n  this.onLongPressMoveUpdate,\n  this.onLongPressUp,\n  this.onLongPressEnd,\n  this.onVerticalDragDown,\n  this.onVerticalDragStart,\n  this.onVerticalDragUpdate,\n  this.onVerticalDragEnd,\n  this.onVerticalDragCancel,\n  this.onHorizontalDragDown,\n  this.onHorizontalDragStart,\n  this.onHorizontalDragUpdate,\n  this.onHorizontalDragEnd,\n  this.onHorizontalDragCancel,\n  this.onForcePressStart,\n  this.onForcePressPeak,\n  this.onForcePressUpdate,\n  this.onForcePressEnd,\n  this.onPanDown,\n  this.onPanStart,\n  this.onPanUpdate,\n  this.onPanEnd,\n  this.onPanCancel,\n  this.onScaleStart,\n  this.onScaleUpdate,\n  this.onScaleEnd,\n  this.behavior,\n  this.excludeFromSemantics = false,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(excludeFromSemantics != null),\n     assert(dragStartBehavior != null),\n     assert(() {\n       final bool haveVerticalDrag = onVerticalDragStart != null || onVerticalDragUpdate != null || onVerticalDragEnd != null;\n       final bool haveHorizontalDrag = onHorizontalDragStart != null || onHorizontalDragUpdate != null || onHorizontalDragEnd != null;\n       final bool havePan = onPanStart != null || onPanUpdate != null || onPanEnd != null;\n       final bool haveScale = onScaleStart != null || onScaleUpdate != null || onScaleEnd != null;\n       if (havePan || haveScale) {\n         if (havePan &amp;&amp; haveScale) {\n           throw FlutterError(\n             'Incorrect GestureDetector arguments.\\n'\n             'Having both a pan gesture recognizer and a scale gesture recognizer is redundant; scale is a superset of pan. Just use the scale gesture recognizer.'\n           );\n         }\n         final String recognizer = havePan ? 'pan' : 'scale';\n         if (haveVerticalDrag &amp;&amp; haveHorizontalDrag) {\n           throw FlutterError(\n             'Incorrect GestureDetector arguments.\\n'\n             'Simultaneously having a vertical drag gesture recognizer, a horizontal drag gesture recognizer, and a $recognizer gesture recognizer '\n             'will result in the $recognizer gesture recognizer being ignored, since the other two will catch all drags.'\n           );\n         }\n       }\n       return true;\n     }()),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/GestureDetector\/GestureDetector.html",
            "isDeprecated": false,
            "type": "",
            "name": "GestureDetector",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.GestureDetector",
            "params": [
                {
                    "name": "behavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.HitTestBehavior"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "excludeFromSemantics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onDoubleTap",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureTapCallback"
                },
                {
                    "name": "onForcePressEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureForcePressEndCallback"
                },
                {
                    "name": "onForcePressPeak",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureForcePressPeakCallback"
                },
                {
                    "name": "onForcePressStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureForcePressStartCallback"
                },
                {
                    "name": "onForcePressUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureForcePressUpdateCallback"
                },
                {
                    "name": "onHorizontalDragCancel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragCancelCallback"
                },
                {
                    "name": "onHorizontalDragDown",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragDownCallback"
                },
                {
                    "name": "onHorizontalDragEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragEndCallback"
                },
                {
                    "name": "onHorizontalDragStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragStartCallback"
                },
                {
                    "name": "onHorizontalDragUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragUpdateCallback"
                },
                {
                    "name": "onLongPress",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureLongPressCallback"
                },
                {
                    "name": "onLongPressEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureLongPressEndCallback"
                },
                {
                    "name": "onLongPressMoveUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureLongPressMoveUpdateCallback"
                },
                {
                    "name": "onLongPressStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureLongPressStartCallback"
                },
                {
                    "name": "onLongPressUp",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureLongPressUpCallback"
                },
                {
                    "name": "onPanCancel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragCancelCallback"
                },
                {
                    "name": "onPanDown",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragDownCallback"
                },
                {
                    "name": "onPanEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragEndCallback"
                },
                {
                    "name": "onPanStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragStartCallback"
                },
                {
                    "name": "onPanUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragUpdateCallback"
                },
                {
                    "name": "onScaleEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureScaleEndCallback"
                },
                {
                    "name": "onScaleStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureScaleStartCallback"
                },
                {
                    "name": "onScaleUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureScaleUpdateCallback"
                },
                {
                    "name": "onTap",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureTapCallback"
                },
                {
                    "name": "onTapCancel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureTapCancelCallback"
                },
                {
                    "name": "onTapDown",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureTapDownCallback"
                },
                {
                    "name": "onTapUp",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureTapUpCallback"
                },
                {
                    "name": "onVerticalDragCancel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragCancelCallback"
                },
                {
                    "name": "onVerticalDragDown",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragDownCallback"
                },
                {
                    "name": "onVerticalDragEnd",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragEndCallback"
                },
                {
                    "name": "onVerticalDragStart",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragStartCallback"
                },
                {
                    "name": "onVerticalDragUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureDragUpdateCallback"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/GestureDetector\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final Map&lt;Type, GestureRecognizerFactory&gt; gestures = &lt;Type, GestureRecognizerFactory&gt;{};\n\n  if (onTapDown != null || onTapUp != null || onTap != null || onTapCancel != null) {\n    gestures[TapGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;TapGestureRecognizer&gt;(\n      () =&gt; TapGestureRecognizer(debugOwner: this),\n      (TapGestureRecognizer instance) {\n        instance\n          ..onTapDown = onTapDown\n          ..onTapUp = onTapUp\n          ..onTap = onTap\n          ..onTapCancel = onTapCancel;\n      },\n    );\n  }\n\n  if (onDoubleTap != null) {\n    gestures[DoubleTapGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;DoubleTapGestureRecognizer&gt;(\n      () =&gt; DoubleTapGestureRecognizer(debugOwner: this),\n      (DoubleTapGestureRecognizer instance) {\n        instance\n          ..onDoubleTap = onDoubleTap;\n      },\n    );\n  }\n\n  if (onLongPress != null ||\n      onLongPressUp != null ||\n      onLongPressStart != null ||\n      onLongPressMoveUpdate != null ||\n      onLongPressEnd != null) {\n    gestures[LongPressGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;LongPressGestureRecognizer&gt;(\n      () =&gt; LongPressGestureRecognizer(debugOwner: this),\n      (LongPressGestureRecognizer instance) {\n        instance\n          ..onLongPress = onLongPress\n          ..onLongPressStart = onLongPressStart\n          ..onLongPressMoveUpdate = onLongPressMoveUpdate\n          ..onLongPressEnd =onLongPressEnd\n          ..onLongPressUp = onLongPressUp;\n      },\n    );\n  }\n\n  if (onVerticalDragDown != null ||\n      onVerticalDragStart != null ||\n      onVerticalDragUpdate != null ||\n      onVerticalDragEnd != null ||\n      onVerticalDragCancel != null) {\n    gestures[VerticalDragGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;VerticalDragGestureRecognizer&gt;(\n      () =&gt; VerticalDragGestureRecognizer(debugOwner: this),\n      (VerticalDragGestureRecognizer instance) {\n        instance\n          ..onDown = onVerticalDragDown\n          ..onStart = onVerticalDragStart\n          ..onUpdate = onVerticalDragUpdate\n          ..onEnd = onVerticalDragEnd\n          ..onCancel = onVerticalDragCancel\n          ..dragStartBehavior = dragStartBehavior;\n      },\n    );\n  }\n\n  if (onHorizontalDragDown != null ||\n      onHorizontalDragStart != null ||\n      onHorizontalDragUpdate != null ||\n      onHorizontalDragEnd != null ||\n      onHorizontalDragCancel != null) {\n    gestures[HorizontalDragGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;HorizontalDragGestureRecognizer&gt;(\n      () =&gt; HorizontalDragGestureRecognizer(debugOwner: this),\n      (HorizontalDragGestureRecognizer instance) {\n        instance\n          ..onDown = onHorizontalDragDown\n          ..onStart = onHorizontalDragStart\n          ..onUpdate = onHorizontalDragUpdate\n          ..onEnd = onHorizontalDragEnd\n          ..onCancel = onHorizontalDragCancel\n          ..dragStartBehavior = dragStartBehavior;\n      },\n    );\n  }\n\n  if (onPanDown != null ||\n      onPanStart != null ||\n      onPanUpdate != null ||\n      onPanEnd != null ||\n      onPanCancel != null) {\n    gestures[PanGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;PanGestureRecognizer&gt;(\n      () =&gt; PanGestureRecognizer(debugOwner: this),\n      (PanGestureRecognizer instance) {\n        instance\n          ..onDown = onPanDown\n          ..onStart = onPanStart\n          ..onUpdate = onPanUpdate\n          ..onEnd = onPanEnd\n          ..onCancel = onPanCancel\n          ..dragStartBehavior = dragStartBehavior;\n      },\n    );\n  }\n\n  if (onScaleStart != null || onScaleUpdate != null || onScaleEnd != null) {\n    gestures[ScaleGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;ScaleGestureRecognizer&gt;(\n      () =&gt; ScaleGestureRecognizer(debugOwner: this),\n      (ScaleGestureRecognizer instance) {\n        instance\n          ..onStart = onScaleStart\n          ..onUpdate = onScaleUpdate\n          ..onEnd = onScaleEnd;\n      },\n    );\n  }\n\n  if (onForcePressStart != null ||\n      onForcePressPeak != null ||\n      onForcePressUpdate != null ||\n      onForcePressEnd != null) {\n    gestures[ForcePressGestureRecognizer] = GestureRecognizerFactoryWithHandlers&lt;ForcePressGestureRecognizer&gt;(\n      () =&gt; ForcePressGestureRecognizer(debugOwner: this),\n      (ForcePressGestureRecognizer instance) {\n        instance\n          ..onStart = onForcePressStart\n          ..onPeak = onForcePressPeak\n          ..onUpdate = onForcePressUpdate\n          ..onEnd = onForcePressEnd;\n      },\n    );\n  }\n\n  return RawGestureDetector(\n    gestures: gestures,\n    behavior: behavior,\n    excludeFromSemantics: excludeFromSemantics,\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/GestureDetector\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.GestureDetector",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/GestureDetector\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;DragStartBehavior&gt;('startBehavior', dragStartBehavior));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/GestureDetector\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.GestureDetector",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How this gesture detector should behave during hit testing.<\/p>\n<p>This defaults to <a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.deferToChild<\/a> if <a href=\"widgets\/GestureDetector\/child.html\">child<\/a> is not null and\n<a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.translucent<\/a> if child is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestBehavior behavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/behavior.html",
            "name": "behavior",
            "isDeprecated": false,
            "type": "rendering.HitTestBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, gesture drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>Only the <code>onStart<\/code> callbacks for the <a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>,\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a> and <a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a> are affected\nby this setting.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GestureDetector\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GestureDetector",
            "params": []
        },
        {
            "desc": "<p>Whether to exclude these gestures from the semantics tree. For\nexample, the long-press gesture for showing a tooltip is\nexcluded because the tooltip itself is included in the semantics\ntree directly and so having a gesture to show it would result in\nduplication of information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeFromSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GestureDetector\/excludeFromSemantics.html",
            "name": "excludeFromSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GestureDetector",
            "params": []
        }
    ]
}