{
    "name": "dart:core.ArgumentError",
    "extends": [
        "dart:core.Error",
        "dart:core.Object"
    ],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "ArgumentError",
            "type": "",
            "desc": "<p>The <code>message<\/code> describes the erroneous argument.<\/p>\n<p>Existing code may be using <code>message<\/code> to hold the invalid value.\nIf the <code>message<\/code> is not a <a href=\"dart-core\/String-class.html\">String<\/a>, it is assumed to be a value instead\nof a message.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/ArgumentError\/ArgumentError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nArgumentError([this.message])\n    : invalidValue = null,\n      _hasValue = false,\n      name = null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "checkNotNull",
            "type": "",
            "desc": "<p>Throws if <code>argument<\/code> is <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "sig": "",
            "params": [
                {
                    "name": "argument",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/ArgumentError\/checkNotNull.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nstatic void checkNotNull(Object argument, [String name]) {\n  if (argument == null) throw ArgumentError.notNull(name);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "ArgumentError.notNull",
            "type": "",
            "desc": "<p>Create an argument error for a <code>null<\/code> argument that must not be <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/ArgumentError\/ArgumentError.notNull.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ArgumentError.notNull([this.name])\n    : _hasValue = false,\n      message = \"Must not be null\",\n      invalidValue = null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/ArgumentError\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String nameString = \"\";\n  if (name != null) {\n    nameString = \" ($name)\";\n  }\n  var message = (this.message == null) ? \"\" : \": ${this.message}\";\n  String prefix = \"$_errorName$nameString$message\";\n  if (!_hasValue) return prefix;\n  \/\/ If we know the invalid value, we can try to describe the problem.\n  String explanation = _errorExplanation;\n  String errorValue = Error.safeToString(invalidValue);\n  return \"$prefix$explanation: $errorValue\";\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ArgumentError.value",
            "type": "",
            "desc": "<p>Creates error containing the invalid <code>value<\/code>.<\/p>\n<p>A message is built by suffixing the <code>message<\/code> argument with\nthe <code>name<\/code> argument (if provided) and the value. Example<\/p>\n<p>   \"Invalid argument (foo): null\"<\/p>\n<p>The <code>name<\/code> should match the argument name of the function, but if\nthe function is a method implementing an interface, and its argument\nnames differ from the interface, it might be more useful to use the\ninterface method's argument name (or just rename arguments to match).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/ArgumentError\/ArgumentError.value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nArgumentError.value(value, [this.name, this.message])\n    : invalidValue = value,\n      _hasValue = true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "invalidValue",
            "type": "",
            "types": [],
            "desc": "<p>The invalid value.<\/p>\n        ",
            "memberOf": "dart:core.ArgumentError",
            "isConstant": false,
            "href": "dart-core\/ArgumentError\/invalidValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final invalidValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "message",
            "type": "",
            "types": [],
            "desc": "<p>Message describing the problem.<\/p>\n        ",
            "memberOf": "dart:core.ArgumentError",
            "isConstant": false,
            "href": "dart-core\/ArgumentError\/message.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final message\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "name",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Name of the invalid argument, if available.<\/p>\n        ",
            "memberOf": "dart:core.ArgumentError",
            "isConstant": false,
            "href": "dart-core\/ArgumentError\/name.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "dart:core.IndexError",
        "dart:core.RangeError"
    ],
    "realImplementors": [
        "dart:core.IndexError",
        "dart:core.RangeError"
    ],
    "cn": [],
    "href": "dart-core\/ArgumentError-class.html",
    "desc": "<p>Error thrown when a function is passed an unacceptable argument.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ArgumentError"
}