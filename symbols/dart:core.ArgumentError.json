{
    "desc": "<p>Error thrown when a function is passed an unacceptable argument.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/ArgumentError-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.ArgumentError",
    "shortname": "ArgumentError",
    "extends": [
        "dart:core.Error",
        "dart:core.Object"
    ],
    "realImplementors": [
        "dart:core.IndexError",
        "dart:core.RangeError"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>The <code>message<\/code> describes the erroneous argument.<\/p>\n<p>Existing code may be using <code>message<\/code> to hold the invalid value.\nIf the <code>message<\/code> is not a <a href=\"dart-core\/String-class.html\">String<\/a>, it is assumed to be a value instead\nof a message.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nArgumentError([this.message])\n    : invalidValue = null,\n      _hasValue = false,\n      name = null;<\/code><\/pre>\n    ",
            "href": "dart-core\/ArgumentError\/ArgumentError.html",
            "isDeprecated": false,
            "type": "",
            "name": "ArgumentError",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "params": [
                {
                    "name": "message",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Throws if <code>argument<\/code> is <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nstatic void checkNotNull(Object argument, [String name]) {\n  if (argument == null) throw ArgumentError.notNull(name);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/ArgumentError\/checkNotNull.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "checkNotNull",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "params": [
                {
                    "name": "argument",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "name",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String nameString = \"\";\n  if (name != null) {\n    nameString = \" ($name)\";\n  }\n  var message = (this.message == null) ? \"\" : \": ${this.message}\";\n  String prefix = \"$_errorName$nameString$message\";\n  if (!_hasValue) return prefix;\n  \/\/ If we know the invalid value, we can try to describe the problem.\n  String explanation = _errorExplanation;\n  String errorValue = Error.safeToString(invalidValue);\n  return \"$prefix$explanation: $errorValue\";\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/ArgumentError\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.ArgumentError",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Name of the invalid argument, if available.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "href": "dart-core\/ArgumentError\/name.html",
            "name": "name",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "dart:core.ArgumentError",
            "params": []
        }
    ]
}