{
    "desc": "<p>Applies a theme to descendant widgets.<\/p>\n<p>A theme describes the colors and typographic choices of an application.<\/p>\n<p>Descendant widgets obtain the current theme's <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> object using\n<a href=\"material\/Theme\/of.html\">Theme.of<\/a>. When a widget uses <a href=\"material\/Theme\/of.html\">Theme.of<\/a>, it is automatically rebuilt if\nthe theme later changes, so that the changes can be applied.<\/p>\n<p>The <a href=\"material\/Theme-class.html\">Theme<\/a> widget implies an <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> widget, set to the value of the\n<a href=\"material\/ThemeData\/iconTheme.html\">ThemeData.iconTheme<\/a> of the <a href=\"material\/Theme\/data.html\">data<\/a> for the <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which describes the actual configuration of a theme.<\/li>\n<li>\n<a href=\"material\/AnimatedTheme-class.html\">AnimatedTheme<\/a>, which animates the <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> when it changes rather\nthan changing the theme all at once.<\/li>\n<li>\n<a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>, which includes an <a href=\"material\/AnimatedTheme-class.html\">AnimatedTheme<\/a> widget configured via\nthe <a href=\"material\/MaterialApp\/theme.html\">MaterialApp.theme<\/a> argument.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Theme-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Theme",
    "shortname": "Theme",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Applies the given theme <code>data<\/code> to <code>child<\/code>.<\/p>\n<p>The <code>data<\/code> and <code>child<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Theme({\n  Key key,\n  @required this.data,\n  this.isMaterialAppTheme = false,\n  @required this.child,\n}) : assert(child != null),\n     assert(data != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Theme\/Theme.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Theme",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ThemeData"
                },
                {
                    "name": "isMaterialAppTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/Theme\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return _InheritedTheme(\n    theme: this,\n    child: IconTheme(\n      data: data.iconTheme,\n      child: CupertinoTheme(\n        \/\/ We're using a MaterialBasedCupertinoThemeData here instead of a\n        \/\/ CupertinoThemeData because it defers some properties to the Material\n        \/\/ ThemeData.\n        data: MaterialBasedCupertinoThemeData(\n          materialTheme: data,\n        ),\n        child: child,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Theme\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Theme",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/Theme\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;ThemeData&gt;('data', data, showName: false));\n}<\/code><\/pre>\n    ",
            "href": "material\/Theme\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Theme",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The data from the closest <a href=\"material\/Theme-class.html\">Theme<\/a> instance that encloses the given\ncontext.<\/p>\n<p>If the given context is enclosed in a <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget providing\n<a href=\"material\/MaterialLocalizations-class.html\">MaterialLocalizations<\/a>, the returned data is localized according to the\nnearest available <a href=\"material\/MaterialLocalizations-class.html\">MaterialLocalizations<\/a>.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/ThemeData.fallback.html\">new ThemeData.fallback<\/a> if there is no <a href=\"material\/Theme-class.html\">Theme<\/a> in the given\nbuild context.<\/p>\n<p>If <code>shadowThemeOnly<\/code> is true and the closest <a href=\"material\/Theme-class.html\">Theme<\/a> ancestor was\ninstalled by the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> \u2014 in other words if the closest <a href=\"material\/Theme-class.html\">Theme<\/a>\nancestor does not shadow the application's theme \u2014 then this returns null.\nThis argument should be used in situations where its useful to wrap a\nroute's widgets with a <a href=\"material\/Theme-class.html\">Theme<\/a>, but only when the application's overall\ntheme is being shadowed by a <a href=\"material\/Theme-class.html\">Theme<\/a> widget that is deeper in the tree.\nSee <a href=\"material\/Theme\/isMaterialAppTheme.html\">isMaterialAppTheme<\/a>.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return Text(\n    'Example',\n    style: Theme.of(context).textTheme.title,\n  );\n}\n<\/code><\/pre>\n<p>When the <a href=\"material\/Theme-class.html\">Theme<\/a> is actually created in the same <code>build<\/code> function\n(possibly indirectly, e.g. as part of a <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>), the <code>context<\/code>\nargument to the <code>build<\/code> function can't be used to find the <a href=\"material\/Theme-class.html\">Theme<\/a> (since\nit's \"above\" the widget being returned). In such cases, the following\ntechnique with a <a href=\"widgets\/Builder-class.html\">Builder<\/a> can be used to provide a new scope with a\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> that is \"under\" the <a href=\"material\/Theme-class.html\">Theme<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    theme: ThemeData.light(),\n    body: Builder(\n      \/\/ Create an inner BuildContext so that we can refer to\n      \/\/ the Theme with Theme.of().\n      builder: (BuildContext context) {\n        return Center(\n          child: Text(\n            'Example',\n            style: Theme.of(context).textTheme.title,\n          ),\n        );\n      },\n    ),\n  );\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ThemeData of(BuildContext context, { bool shadowThemeOnly = false }) {\n  final _InheritedTheme inheritedTheme = context.inheritFromWidgetOfExactType(_InheritedTheme);\n  if (shadowThemeOnly) {\n    if (inheritedTheme == null || inheritedTheme.theme.isMaterialAppTheme)\n      return null;\n    return inheritedTheme.theme.data;\n  }\n\n  final MaterialLocalizations localizations = MaterialLocalizations.of(context);\n  final ScriptCategory category = localizations?.scriptCategory ?? ScriptCategory.englishLike;\n  final ThemeData theme = inheritedTheme?.theme?.data ?? _kFallbackTheme;\n  return ThemeData.localize(theme, theme.typography.geometryThemeFor(category));\n}<\/code><\/pre>\n    ",
            "href": "material\/Theme\/of.html",
            "isDeprecated": "0",
            "type": "material.ThemeData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Theme",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "shadowThemeOnly",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Theme\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.Theme",
            "params": []
        },
        {
            "desc": "<p>Specifies the color and typography values for descendant widgets.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ThemeData data\n\n<\/code><\/pre>\n        ",
            "href": "material\/Theme\/data.html",
            "isDeprecated": "0",
            "type": "material.ThemeData",
            "memberOf": "material.Theme",
            "params": []
        },
        {
            "desc": "<p>True if this theme was installed by the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>.<\/p>\n<p>When an app uses the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> to push a route, the route's widgets\nwill only inherit from the app's theme, even though the widget that\ntriggered the push may inherit from a theme that \"shadows\" the app's\ntheme because it's deeper in the widget tree. Apps can find the shadowing\ntheme with <code>Theme.of(context, shadowThemeOnly: true)<\/code> and pass it along\nto the class that creates a route's widgets. Material widgets that push\nroutes, like <a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a> and <a href=\"material\/DropdownButton-class.html\">DropdownButton<\/a>, do this.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isMaterialAppTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/Theme\/isMaterialAppTheme.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.Theme",
            "params": []
        }
    ]
}