{
    "desc": "<p>A named channel for communicating with platform plugins using asynchronous\nmethod calls.<\/p>\n<p>Method calls are encoded into binary before being sent, and binary results\nreceived are decoded into Dart values. The <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> used must be\ncompatible with the one used by the platform plugin. This can be achieved\nby creating a method channel counterpart of this channel on the\nplatform side. The Dart type of arguments and results is <code>dynamic<\/code>,\nbut only values supported by the specified <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> can be used.\nThe use of unsupported values should be considered programming errors, and\nwill result in exceptions being thrown. The null value is supported\nfor all codecs.<\/p>\n<p>The logical identity of the channel is given by its name. Identically named\nchannels will interfere with each other's communication.<\/p>\n<p>See: <a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/MethodChannel-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.MethodChannel",
    "shortname": "MethodChannel",
    "extends": [],
    "realImplementors": [
        "services.OptionalMethodChannel"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> with the specified <code>name<\/code>.<\/p>\n<p>The <code>codec<\/code> used will be <a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>, unless otherwise\nspecified.<\/p>\n<p>Neither <code>name<\/code> nor <code>codec<\/code> may be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MethodChannel(this.name, [this.codec = const StandardMethodCodec()]);<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/MethodChannel.html",
            "isDeprecated": false,
            "type": "",
            "name": "MethodChannel",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "codec",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.MethodCodec"
                },
                {
                    "name": "name",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed lists.<\/p>\n<p>Dart generics are reified, meaning that an untyped List<dynamic>\ncannot masquerade as a List<t>. Since invokeMethod can only return\ndynamic maps, we instead create a new typed list using <a href=\"dart-core\/List\/cast.html\">List.cast<\/a>.<\/t><\/dynamic><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;T&gt;&gt; invokeListMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  final List&lt;dynamic&gt; result = await invokeMethod&lt;List&lt;dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;T&gt;();\n}<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/invokeListMethod.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.List>",
            "name": "invokeListMethod",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "arguments",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "method",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed maps.<\/p>\n<p>Dart generics are reified, meaning that an untyped Map&lt;dynamic, dynamic&gt;\ncannot masquerade as a Map&lt;K, V&gt;. Since invokeMethod can only return\ndynamic maps, we instead create a new typed map using <a href=\"dart-core\/Map\/cast.html\">Map.cast<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Map&lt;K, V&gt;&gt; invokeMapMethod&lt;K, V&gt;(String method, [ dynamic arguments ]) async {\n  final Map&lt;dynamic, dynamic&gt; result = await invokeMethod&lt;Map&lt;dynamic, dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;K, V&gt;();\n}<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/invokeMapMethod.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.Map>",
            "name": "invokeMapMethod",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "arguments",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "method",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Invokes a <code>method<\/code> on this channel with the specified <code>arguments<\/code>.<\/p>\n<p>The static type of <code>arguments<\/code> is <code>dynamic<\/code>, but only values supported by\nthe <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this channel can be used. The same applies to the returned\nresult. The values supported by the default codec and their platform-specific\ncounterparts are documented with <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>.<\/p>\n<p>The generic argument <code>T<\/code> of the method can be inferred by the surrounding\ncontext, or provided explicitly. If it does not match the returned type of\nthe channel, a <a href=\"dart-core\/TypeError-class.html\">TypeError<\/a> will be thrown at runtime. <code>T<\/code> cannot be a class\nwith generics other than <code>dynamic<\/code>. For example, <code>Map&lt;String, String&gt;<\/code>\nis not supported but <code>Map&lt;dynamic, dynamic&gt;<\/code> or <code>Map<\/code> is.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which completes to one of the following:<\/p>\n<ul>\n<li>a result (possibly null), on successful invocation;<\/li>\n<li>a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if the invocation failed in the platform plugin;<\/li>\n<li>a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, if the method has not been implemented by a\nplatform plugin.<\/li>\n<\/ul>\n<p>The following code snippets demonstrate how to invoke platform methods\nin Dart using a MethodChannel and how to implement those methods in Java\n(for Android) and Objective-C (for iOS).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe code might be packaged up as a musical plugin, see\n<a href=\"https:\/\/flutter.io\/developing-packages\/\">flutter.io\/developing-packages\/<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Music {\n  static const MethodChannel _channel = MethodChannel('music');\n\n  static Future&lt;bool&gt; isLicensed() async {\n    \/\/ invokeMethod returns a Future&lt;T&gt; which can be inferred as bool\n    \/\/ in this context.\n    return _channel.invokeMethod('isLicensed');\n  }\n\n  static Future&lt;List&lt;Song&gt;&gt; songs() async {\n    \/\/ invokeMethod here returns a Future&lt;dynamic&gt; that completes to a\n    \/\/ List&lt;dynamic&gt; with Map&lt;dynamic, dynamic&gt; entries. Post-processing\n    \/\/ code thus cannot assume e.g. List&lt;Map&lt;String, String&gt;&gt; even though\n    \/\/ the actual values involved would support such a typed container.\n    \/\/ The correct type cannot be inferred with any value of `T`.\n    final List&lt;dynamic&gt; songs = await _channel.invokeMethod('getSongs');\n    return songs.map(Song.fromJson).toList();\n  }\n\n  static Future&lt;void&gt; play(Song song, double volume) async {\n    \/\/ Errors occurring on the platform side cause invokeMethod to throw\n    \/\/ PlatformExceptions.\n    try {\n      return _channel.invokeMethod('play', &lt;String, dynamic&gt;{\n        'song': song.id,\n        'volume': volume,\n      });\n    } on PlatformException catch (e) {\n      throw 'Unable to play ${song.title}: ${e.message}';\n    }\n  }\n}\n\nclass Song {\n  Song(this.id, this.title, this.artist);\n\n  final String id;\n  final String title;\n  final String artist;\n\n  static Song fromJson(dynamic json) {\n    return Song(json['id'], json['title'], json['artist']);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nJava (for Android):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-java\" id=\"sample-code\"><code class=\"language-java\">\/\/ Assumes existence of an Android MusicApi.\npublic class MusicPlugin implements MethodCallHandler {\n  @Override\n  public void onMethodCall(MethodCall call, Result result) {\n    switch (call.method) {\n      case \"isLicensed\":\n        result.success(MusicApi.checkLicense());\n        break;\n      case \"getSongs\":\n        final List&lt;MusicApi.Track&gt; tracks = MusicApi.getTracks();\n        final List&lt;Object&gt; json = ArrayList&lt;&gt;(tracks.size());\n        for (MusicApi.Track track : tracks) {\n          json.add(track.toJson()); \/\/ Map&lt;String, Object&gt; entries\n        }\n        result.success(json);\n        break;\n      case \"play\":\n        final String song = call.argument(\"song\");\n        final double volume = call.argument(\"volume\");\n        try {\n          MusicApi.playSongAtVolume(song, volume);\n          result.success(null);\n        } catch (MusicalException e) {\n          result.error(\"playError\", e.getMessage(), null);\n        }\n        break;\n      default:\n        result.notImplemented();\n    }\n  }\n  \/\/ Other methods elided.\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nObjective-C (for iOS):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-objectivec\" id=\"sample-code\"><code class=\"language-objectivec\">@interface MusicPlugin : NSObject&lt;FlutterPlugin&gt;\n@end\n\n\/\/ Assumes existence of an iOS Broadway Play Api.\n@implementation MusicPlugin\n- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result {\n  if ([@\"isLicensed\" isEqualToString:call.method]) {\n    result([NSNumber numberWithBool:[BWPlayApi isLicensed]]);\n  } else if ([@\"getSongs\" isEqualToString:call.method]) {\n    NSArray* items = [BWPlayApi items];\n    NSMutableArray* json = [NSMutableArray arrayWithCapacity:items.count];\n    for (BWPlayItem* item in items) {\n      [json addObject:@{@\"id\":item.itemId, @\"title\":item.name, @\"artist\":item.artist}];\n    }\n    result(json);\n  } else if ([@\"play\" isEqualToString:call.method]) {\n    NSString* itemId = call.arguments[@\"song\"];\n    NSNumber* volume = call.arguments[@\"volume\"];\n    NSError* error = nil;\n    BOOL success = [BWPlayApi playItem:itemId volume:volume.doubleValue error:&amp;error];\n    if (success) {\n      result(nil);\n    } else {\n      result([FlutterError errorWithCode:[NSString stringWithFormat:@\"Error %ld\", error.code]\n                                 message:error.domain\n                                 details:error.localizedDescription]);\n    }\n  } else {\n    result(FlutterMethodNotImplemented);\n  }\n}\n\/\/ Other methods elided.\n@end<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/MethodChannel\/invokeListMethod.html\">invokeListMethod<\/a>, for automatically returning typed lists.<\/li>\n<li>\n<a href=\"services\/MethodChannel\/invokeMapMethod.html\">invokeMapMethod<\/a>, for automatically returning typed maps.<\/li>\n<li>\n<a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/JSONMethodCodec-class.html\">JSONMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"https:\/\/docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html\">docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html<\/a>\nfor how to access method call arguments on Android.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@optionalTypeArgs\nFuture&lt;T&gt; invokeMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  assert(method != null);\n  final ByteData result = await BinaryMessages.send(\n    name,\n    codec.encodeMethodCall(MethodCall(method, arguments)),\n  );\n  if (result == null) {\n    throw MissingPluginException('No implementation found for method $method on channel $name');\n  }\n  final T typedResult = codec.decodeEnvelope(result);\n  return typedResult;\n}<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/invokeMethod.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "invokeMethod",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "arguments",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "method",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets a callback for receiving method calls on this channel.<\/p>\n<p>The given callback will replace the currently registered callback for this\nchannel, if any. To remove the handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>If the future returned by the handler completes with a result, that value\nis sent back to the platform plugin caller wrapped in a success envelope\nas defined by the <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this channel. If the future completes with\na <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, the fields of that exception will be used to\npopulate an error envelope which is sent back instead. If the future\ncompletes with a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, an empty reply is sent\nsimilarly to what happens if no method call handler has been set.\nAny other exception results in an error envelope being sent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMethodCallHandler(Future&lt;dynamic&gt; handler(MethodCall call)) {\n  BinaryMessages.setMessageHandler(\n    name,\n    handler == null ? null : (ByteData message) =&gt; _handleAsMethodCall(message, handler),\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/setMethodCallHandler.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setMethodCallHandler",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "call",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.MethodCall"
                }
            ]
        },
        {
            "desc": "<p>Sets a mock callback for intercepting method invocations on this channel.<\/p>\n<p>The given callback will replace the currently registered mock callback for\nthis channel, if any. To remove the mock handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>Later calls to <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> will result in a successful result,\na <a href=\"services\/PlatformException-class.html\">PlatformException<\/a> or a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, determined by how\nthe future returned by the mock callback completes. The <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this\nchannel is used to encode and decode values and errors.<\/p>\n<p>This is intended for testing. Method calls intercepted in this manner are\nnot sent to platform plugins.<\/p>\n<p>The provided <code>handler<\/code> must return a <code>Future<\/code> that completes with the\nreturn value of the call. The value will be encoded using\n<a href=\"services\/MethodCodec\/encodeSuccessEnvelope.html\">MethodCodec.encodeSuccessEnvelope<\/a>, to act as if platform plugin had\nreturned that value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMockMethodCallHandler(Future&lt;dynamic&gt; handler(MethodCall call)) {\n  BinaryMessages.setMockMessageHandler(\n    name,\n    handler == null ? null : (ByteData message) =&gt; _handleAsMethodCall(message, handler),\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/MethodChannel\/setMockMethodCallHandler.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setMockMethodCallHandler",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.MethodChannel",
            "params": [
                {
                    "name": "call",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.MethodCall"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The message codec used by this channel, not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MethodCodec codec\n\n<\/code><\/pre>\n        ",
            "href": "services\/MethodChannel\/codec.html",
            "name": "codec",
            "isDeprecated": false,
            "type": "services.MethodCodec",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.MethodChannel",
            "params": []
        },
        {
            "desc": "<p>The logical channel on which communication happens, not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "href": "services\/MethodChannel\/name.html",
            "name": "name",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.MethodChannel",
            "params": []
        }
    ]
}