{
    "name": "dart:developer.Timeline",
    "extends": [],
    "memberOf": "dart:developer",
    "events": [],
    "methods": [
        {
            "name": "Timeline",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:developer.Timeline",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-developer\/Timeline\/Timeline.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "finishSync",
            "type": "",
            "desc": "<p>Finish the last synchronous operation that was started.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer.Timeline",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-developer\/Timeline\/finishSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void finishSync() {\n  if (!_hasTimeline) {\n    return;\n  }\n  if (_stack.length == 0) {\n    throw new StateError('Uneven calls to startSync and finishSync');\n  }\n  \/\/ Pop top item off of stack.\n  var block = _stack.removeLast();\n  if (block == null) {\n    \/\/ Dart stream was disabled when startSync was called.\n    return;\n  }\n  \/\/ Finish it.\n  block.finish();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "instantSync",
            "type": "",
            "desc": "<p>Emit an instant event.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer.Timeline",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arguments",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/Timeline\/instantSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void instantSync(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Stream is disabled.\n    return;\n  }\n  Map instantArguments;\n  if (arguments != null) {\n    instantArguments = new Map.from(arguments);\n  }\n  _reportInstantEvent(\n      _getTraceClock(), 'Dart', name, _argumentsAsJson(instantArguments));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "startSync",
            "type": "",
            "desc": "<p>Start a synchronous operation labeled <code>name<\/code>. Optionally takes\na <a href=\"dart-core\/Map-class.html\">Map<\/a> of <code>arguments<\/code>. This slice may also optionally be associated with\na <a href=\"dart-developer\/Flow-class.html\">Flow<\/a> event. This operation must be finished before\nreturning to the event queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer.Timeline",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arguments",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flow",
                    "type": "dart:developer.Flow",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/Timeline\/startSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void startSync(String name, {Map arguments, Flow flow}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Push a null onto the stack and return.\n    _stack.add(null);\n    return;\n  }\n  var block = new _SyncBlock._(name, _getTraceClock(), _getThreadCpuClock());\n  if (arguments != null) {\n    block._arguments = arguments;\n  }\n  if (flow != null) {\n    block.flow = flow;\n  }\n  _stack.add(block);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "timeSync",
            "type": "",
            "desc": "<p>A utility method to time a synchronous <code>function<\/code>. Internally calls\n<code>function<\/code> bracketed by calls to <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer.Timeline",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "function",
                    "type": "dart:developer.TimelineSyncFunction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arguments",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flow",
                    "type": "dart:developer.Flow",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/Timeline\/timeSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T timeSync&lt;T&gt;(String name, TimelineSyncFunction&lt;T&gt; function,\n    {Map arguments, Flow flow}) {\n  startSync(name, arguments: arguments, flow: flow);\n  try {\n    return function();\n  } finally {\n    finishSync();\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "now",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The current time stamp from the clock used by the timeline. Units are\nmicroseconds.<\/p>\n        ",
            "memberOf": "dart:developer.Timeline",
            "isConstant": false,
            "href": "dart-developer\/Timeline\/now.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get now =&gt; _getTraceClock();<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-developer\/Timeline-class.html",
    "desc": "<p>Add to the timeline.<\/p>\n<p><a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s methods add synchronous events to the timeline. When\ngenerating a timeline in Chrome's tracing format, using <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> generates\n\"Complete\" events. <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a> can be used\nexplicitly, or implicitly by wrapping a closure in <a href=\"dart-developer\/Timeline\/timeSync.html\">timeSync<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.startSync(\"Doing Something\");\ndoSomething();\nTimeline.finishSync();\n<\/code><\/pre>\n<p>Or:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.timeSync(\"Doing Something\", () {\n  doSomething();\n});\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Timeline"
}