{
    "name": "foundation.DoubleProperty",
    "extends": [
        "dart:core.double",
        "foundation.DiagnosticsProperty",
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "DoubleProperty",
            "type": "",
            "desc": "<p>If specified, <code>unit<\/code> describes the unit for the <code>value<\/code> (e.g. px).<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DoubleProperty",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifNull",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unit",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/DoubleProperty\/DoubleProperty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleProperty(\n  String name,\n  double value, {\n  String ifNull,\n  String unit,\n  String tooltip,\n  Object defaultValue = kNoDefaultValue,\n  bool showName = true,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  ifNull: ifNull,\n  unit: unit,\n  tooltip: tooltip,\n  defaultValue: defaultValue,\n  showName: showName,\n  level: level,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "DoubleProperty.lazy",
            "type": "",
            "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that is computed only when needed.<\/p>\n<p>Use if computing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> may throw an exception or is\nexpensive.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DoubleProperty",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "computeValue",
                    "type": "foundation.ComputePropertyValueCallback<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "foundation.ComputePropertyValueCallback",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "ifNull",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unit",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/DoubleProperty\/DoubleProperty.lazy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleProperty.lazy(\n  String name,\n  ComputePropertyValueCallback&lt;double&gt; computeValue, {\n  String ifNull,\n  bool showName = true,\n  String unit,\n  String tooltip,\n  Object defaultValue = kNoDefaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super.lazy(\n  name,\n  computeValue,\n  showName: showName,\n  ifNull: ifNull,\n  unit: unit,\n  tooltip: tooltip,\n  defaultValue: defaultValue,\n  level: level,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "numberToString",
            "type": "dart:core.String",
            "desc": "<p>String describing just the numeric <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> without a unit suffix.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DoubleProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/DoubleProperty\/numberToString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString numberToString() =&gt; value?.toStringAsFixed(1);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toJsonMap",
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation.DoubleProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/DoubleProperty\/toJsonMap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (unit != null)\n    json['unit'] = unit;\n\n  json['numberToString'] = numberToString();\n  return json;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Map",
                "dart:core.String",
                "dart:core.Object"
            ]
        },
        {
            "name": "valueToString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/DoubleProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DoubleProperty",
            "sig": "",
            "params": [
                {
                    "name": "parentConfiguration",
                    "type": "foundation.TextTreeConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/DoubleProperty\/valueToString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n\n  return unit != null ? '${numberToString()}$unit' : numberToString();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "unit",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Optional unit the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is measured in.<\/p>\n<p>Unit must be acceptable to display immediately after a number with no\nspaces. For example: 'physical pixels per logical pixel' should be a\n<a href=\"foundation\/DiagnosticsProperty\/tooltip.html\">tooltip<\/a> not a <a href=\"foundation\/DoubleProperty\/unit.html\">unit<\/a>.<\/p>\n        ",
            "memberOf": "foundation.DoubleProperty",
            "isConstant": false,
            "href": "foundation\/DoubleProperty\/unit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String unit\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "foundation.PercentProperty"
    ],
    "realImplementors": [
        "foundation.PercentProperty"
    ],
    "cn": [],
    "href": "foundation\/DoubleProperty-class.html",
    "desc": "<p>Property describing a <a href=\"dart-core\/double-class.html\">double<\/a> <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> with an optional <a href=\"foundation\/DoubleProperty\/unit.html\">unit<\/a> of measurement.<\/p>\n<p>Numeric formatting is optimized for debug message readability.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DoubleProperty"
}