{
    "desc": "<p>Variant of <a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a> for licenses that separate paragraphs with blank\nlines and that hard-wrap text within paragraphs. Lines that begin with one\nor more space characters are also assumed to introduce new paragraphs,\nunless they start with the same number of spaces as the previous line, in\nwhich case it's assumed they are a continuation of an indented paragraph.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nFor example, the BSD license in this format could be encoded as follows:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void initMyLibrary() {\n  LicenseRegistry.addLicense(() async* {\n    yield LicenseEntryWithLineBreaks(&lt;String&gt;['my_library'], '''\nCopyright 2016 The Sample Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and\/or other materials provided with the\ndistribution.\n   * Neither the name of Example Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.''');\n  });\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>This would result in a license with six <a href=\"foundation\/LicenseEntryWithLineBreaks\/paragraphs.html\">paragraphs<\/a>, the third, fourth, and\nfifth being indented one level.<\/p>\n<h2 id=\"performance-considerations\">Performance considerations<\/h2>\n<p>Computing the paragraphs is relatively expensive. Doing the work for one\nlicense per frame is reasonable; doing more at the same time is ill-advised.\nConsider doing all the work at once using <a href=\"foundation\/compute.html\">compute<\/a> to move the work to\nanother thread, or spreading the work across multiple frames using\n<code>scheduleTask<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/LicenseEntryWithLineBreaks-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.LicenseEntryWithLineBreaks",
    "shortname": "LicenseEntryWithLineBreaks",
    "extends": [
        "foundation.LicenseEntry",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a license entry for a license whose text is hard-wrapped within\nparagraphs and has paragraph breaks denoted by blank lines or with\nindented text.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LicenseEntryWithLineBreaks(this.packages, this.text);<\/code><\/pre>\n    ",
            "href": "foundation\/LicenseEntryWithLineBreaks\/LicenseEntryWithLineBreaks.html",
            "isDeprecated": "0",
            "type": "",
            "name": "LicenseEntryWithLineBreaks",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.LicenseEntryWithLineBreaks",
            "params": [
                {
                    "name": "packages",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.String>"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The names of the packages that this license entry applies to.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; packages\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/LicenseEntryWithLineBreaks\/packages.html",
            "name": "packages",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.String>",
            "memberOf": "foundation.LicenseEntryWithLineBreaks",
            "params": []
        },
        {
            "desc": "<p>The paragraphs of the license, each as a <a href=\"foundation\/LicenseParagraph-class.html\">LicenseParagraph<\/a> consisting of\na string and some formatting information. Paragraphs can include newline\ncharacters, but this is discouraged as it results in ugliness.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;LicenseParagraph&gt; get paragraphs sync* {\n  int lineStart = 0;\n  int currentPosition = 0;\n  int lastLineIndent = 0;\n  int currentLineIndent = 0;\n  int currentParagraphIndentation;\n  _LicenseEntryWithLineBreaksParserState state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n  final List&lt;String&gt; lines = &lt;String&gt;[];\n\n  void addLine() {\n    assert(lineStart &lt; currentPosition);\n    lines.add(text.substring(lineStart, currentPosition));\n  }\n\n  LicenseParagraph getParagraph() {\n    assert(lines.isNotEmpty);\n    assert(currentParagraphIndentation != null);\n    final LicenseParagraph result = LicenseParagraph(lines.join(' '), currentParagraphIndentation);\n    assert(result.text.trimLeft() == result.text);\n    assert(result.text.isNotEmpty);\n    lines.clear();\n    return result;\n  }\n\n  while (currentPosition &lt; text.length) {\n    switch (state) {\n      case _LicenseEntryWithLineBreaksParserState.beforeParagraph:\n        assert(lineStart == currentPosition);\n        switch (text[currentPosition]) {\n          case ' ':\n            lineStart = currentPosition + 1;\n            currentLineIndent += 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\t':\n            lineStart = currentPosition + 1;\n            currentLineIndent += 8;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\n':\n          case '\\f':\n            if (lines.isNotEmpty) {\n              yield getParagraph();\n            }\n            lastLineIndent = 0;\n            currentLineIndent = 0;\n            currentParagraphIndentation = null;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '[':\n            \/\/ This is a bit of a hack for the LGPL 2.1, which does something like this:\n            \/\/\n            \/\/   [this is a\n            \/\/    single paragraph]\n            \/\/\n            \/\/ ...near the top.\n            currentLineIndent += 1;\n            continue startParagraph;\n          startParagraph:\n          default:\n            if (lines.isNotEmpty &amp;&amp; currentLineIndent &gt; lastLineIndent) {\n              yield getParagraph();\n              currentParagraphIndentation = null;\n            }\n            \/\/ The following is a wild heuristic for guessing the indentation level.\n            \/\/ It happens to work for common variants of the BSD and LGPL licenses.\n            if (currentParagraphIndentation == null) {\n              if (currentLineIndent &gt; 10)\n                currentParagraphIndentation = LicenseParagraph.centeredIndent;\n              else\n                currentParagraphIndentation = currentLineIndent ~\/ 3;\n            }\n            state = _LicenseEntryWithLineBreaksParserState.inParagraph;\n        }\n        break;\n      case _LicenseEntryWithLineBreaksParserState.inParagraph:\n        switch (text[currentPosition]) {\n          case '\\n':\n            addLine();\n            lastLineIndent = currentLineIndent;\n            currentLineIndent = 0;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\f':\n            addLine();\n            yield getParagraph();\n            lastLineIndent = 0;\n            currentLineIndent = 0;\n            currentParagraphIndentation = null;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          default:\n            state = _LicenseEntryWithLineBreaksParserState.inParagraph;\n        }\n        break;\n    }\n    currentPosition += 1;\n  }\n  switch (state) {\n    case _LicenseEntryWithLineBreaksParserState.beforeParagraph:\n      if (lines.isNotEmpty) {\n        yield getParagraph();\n      }\n      break;\n    case _LicenseEntryWithLineBreaksParserState.inParagraph:\n      addLine();\n      yield getParagraph();\n      break;\n  }\n}<\/code><\/pre>\n        ",
            "href": "foundation\/LicenseEntryWithLineBreaks\/paragraphs.html",
            "name": "paragraphs",
            "isDeprecated": false,
            "type": "dart:core.Iterable<foundation.LicenseParagraph>",
            "memberOf": "foundation.LicenseEntryWithLineBreaks",
            "params": []
        },
        {
            "desc": "<p>The text of the license.<\/p>\n<p>The text will be split into paragraphs according to the following\nconventions:<\/p>\n<ul>\n<li>Lines starting with a different number of space characters than the\nprevious line start a new paragraph, with those spaces removed.<\/li>\n<li>Blank lines start a new paragraph.<\/li>\n<li>Other line breaks are replaced by a single space character.<\/li>\n<li>Leading spaces on a line are removed.<\/li>\n<\/ul>\n<p>For each paragraph, the algorithm attempts (using some rough heuristics)\nto identify how indented the paragraph is, or whether it is centered.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/LicenseEntryWithLineBreaks\/text.html",
            "name": "text",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "foundation.LicenseEntryWithLineBreaks",
            "params": []
        }
    ]
}