{
    "desc": "<p>A single-subscription <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> where the contents are provided later.<\/p>\n<p>It is generally recommended that you never create a <code>Future&lt;Stream&gt;<\/code>\nbecause you can just directly create a stream that doesn't do anything\nuntil it's ready to do so.\nThis class can be used to create such a stream.<\/p>\n<p>The <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> is a normal stream that you can listen to immediately,\nbut until either <a href=\"package-async_async\/StreamCompleter\/setSourceStream.html\">setSourceStream<\/a> or <a href=\"package-async_async\/StreamCompleter\/setEmpty.html\">setEmpty<\/a> is called,\nthe stream won't produce any events.<\/p>\n<p>The same effect can be achieved by using a <a href=\"dart-async\/StreamController-class.html\">StreamController<\/a>\nand adding the stream using <code>addStream<\/code> when both\nthe controller's stream is listened to and the source stream is ready.\nThis class attempts to shortcut some of the overhead when possible.\nFor example, if the <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> is only listened to\nafter the source stream has been set,\nthe listen is performed directly on the source stream.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/StreamCompleter-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.StreamCompleter",
    "shortname": "StreamCompleter",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "package-async_async\/StreamCompleter\/StreamCompleter.html",
            "isDeprecated": "0",
            "type": "",
            "name": "StreamCompleter",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.StreamCompleter",
            "params": []
        },
        {
            "desc": "<p>Convert a <code>Future&lt;Stream&gt;<\/code> to a <code>Stream<\/code>.<\/p>\n<p>This creates a stream using a stream completer,\nand sets the source stream to the result of the future when the\nfuture completes.<\/p>\n<p>If the future completes with an error, the returned stream will\ninstead contain just that error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Stream&lt;T&gt; fromFuture&lt;T&gt;(Future&lt;Stream&lt;T&gt;&gt; streamFuture) {\n  var completer = new StreamCompleter&lt;T&gt;();\n  streamFuture.then(completer.setSourceStream, onError: completer.setError);\n  return completer.stream;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamCompleter\/fromFuture.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream",
            "name": "fromFuture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.StreamCompleter",
            "params": [
                {
                    "name": "streamFuture",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Future<dart:async.Stream>"
                }
            ]
        },
        {
            "desc": "<p>Equivalent to setting an empty stream using <a href=\"package-async_async\/StreamCompleter\/setSourceStream.html\">setSourceStream<\/a>.<\/p>\n<p>Any one of <a href=\"package-async_async\/StreamCompleter\/setSourceStream.html\">setSourceStream<\/a>, <a href=\"package-async_async\/StreamCompleter\/setEmpty.html\">setEmpty<\/a>, and <a href=\"package-async_async\/StreamCompleter\/setError.html\">setError<\/a> may be called at\nmost once. Trying to call any of them again will fail.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setEmpty() {\n  if (_stream._isSourceStreamSet) {\n    throw new StateError(\"Source stream already set\");\n  }\n  _stream._setEmpty();\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamCompleter\/setEmpty.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setEmpty",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.StreamCompleter",
            "params": []
        },
        {
            "desc": "<p>Completes this to a stream that emits <code>error<\/code> and then closes.<\/p>\n<p>This is useful when the process of creating the data for the stream fails.<\/p>\n<p>Any one of <a href=\"package-async_async\/StreamCompleter\/setSourceStream.html\">setSourceStream<\/a>, <a href=\"package-async_async\/StreamCompleter\/setEmpty.html\">setEmpty<\/a>, and <a href=\"package-async_async\/StreamCompleter\/setError.html\">setError<\/a> may be called at\nmost once. Trying to call any of them again will fail.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setError(error, [StackTrace stackTrace]) {\n  setSourceStream(new Stream.fromFuture(new Future.error(error, stackTrace)));\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamCompleter\/setError.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.StreamCompleter",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "stackTrace",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.StackTrace"
                }
            ]
        },
        {
            "desc": "<p>Set a stream as the source of events for the <a href=\"package-async_async\/StreamCompleter-class.html\">StreamCompleter<\/a>'s\n<a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a>.<\/p>\n<p>The completer's <code>stream<\/code> will act exactly as <code>sourceStream<\/code>.<\/p>\n<p>If the source stream is set before <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> is listened to,\nthe listen call on <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> is forwarded directly to <code>sourceStream<\/code>.<\/p>\n<p>If <a href=\"package-async_async\/StreamCompleter\/stream.html\">stream<\/a> is listened to before setting the source stream,\nan intermediate subscription is created. It looks like a completely\nnormal subscription, and can be paused or canceled, but it won't\nproduce any events until a source stream is provided.<\/p>\n<p>If the <code>stream<\/code> subscription is canceled before a source stream is set,\nthe source stream will be listened to and immediately canceled again.<\/p>\n<p>Otherwise, when the source stream is then set,\nit is immediately listened to, and its events are forwarded to the\nexisting subscription.<\/p>\n<p>Any one of <a href=\"package-async_async\/StreamCompleter\/setSourceStream.html\">setSourceStream<\/a>, <a href=\"package-async_async\/StreamCompleter\/setEmpty.html\">setEmpty<\/a>, and <a href=\"package-async_async\/StreamCompleter\/setError.html\">setError<\/a> may be called at\nmost once. Trying to call any of them again will fail.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setSourceStream(Stream&lt;T&gt; sourceStream) {\n  if (_stream._isSourceStreamSet) {\n    throw new StateError(\"Source stream already set\");\n  }\n  _stream._setSourceStream(sourceStream);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamCompleter\/setSourceStream.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setSourceStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.StreamCompleter",
            "params": [
                {
                    "name": "sourceStream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The stream of this completer.<\/p>\n<p>This stream is always a single-subscription stream.<\/p>\n<p>When a source stream is provided, its events will be forwarded to\nlisteners on this stream.<\/p>\n<p>The stream can be listened either before or after a source stream\nis set.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream =&gt; _stream;<\/code><\/pre>\n        ",
            "href": "package-async_async\/StreamCompleter\/stream.html",
            "name": "stream",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "memberOf": "async.StreamCompleter",
            "params": []
        }
    ]
}