{
    "name": "flutter_test.LabeledTapTargetGuideline",
    "extends": [
        "flutter_test.AccessibilityGuideline",
        "dart:core.Object"
    ],
    "memberOf": "flutter_test",
    "events": [],
    "methods": [
        {
            "name": "evaluate",
            "type": "dart:async.FutureOr<flutter_test.Evaluation>",
            "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.LabeledTapTargetGuideline",
            "sig": "",
            "params": [
                {
                    "name": "tester",
                    "type": "flutter_test.WidgetTester",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/LabeledTapTargetGuideline\/evaluate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFutureOr&lt;Evaluation&gt; evaluate(WidgetTester tester) {\n  final SemanticsNode root = tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n  Evaluation traverse(SemanticsNode node) {\n    Evaluation result = const Evaluation.pass();\n    node.visitChildren((SemanticsNode child) {\n      result += traverse(child);\n      return true;\n    });\n    if (node.isMergedIntoParent || node.isInvisible || node.hasFlag(ui.SemanticsFlag.isHidden))\n      return result;\n    final SemanticsData data = node.getSemanticsData();\n    \/\/ Skip node if it has no actions, or is marked as hidden.\n    if (!data.hasAction(ui.SemanticsAction.longPress) &amp;&amp; !data.hasAction(ui.SemanticsAction.tap))\n      return result;\n    if (data.label == null || data.label.isEmpty) {\n      result += Evaluation.fail(\n        '$node: expected tappable node to have semantic label, but none was found\\n',\n      );\n    }\n    return result;\n  }\n  return traverse(root);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.FutureOr",
                "flutter_test.Evaluation"
            ]
        }
    ],
    "props": [
        {
            "name": "description",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
            "memberOf": "flutter_test.LabeledTapTargetGuideline",
            "isConstant": false,
            "href": "flutter_test\/LabeledTapTargetGuideline\/description.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get description =&gt; 'Tappable widgets should have a semantic label';<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "flutter_test\/LabeledTapTargetGuideline-class.html",
    "desc": "<p>A guideline which enforces that all nodes with a tap or long press action\nalso have a label.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LabeledTapTargetGuideline"
}