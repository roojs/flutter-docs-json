{
    "name": "dart:core.double",
    "extends": [
        "dart:core.num",
        "dart:core.Object"
    ],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "dart:core.double",
            "desc": "<p>Euclidean modulo operator.<\/p>\n<p>Returns the remainder of the Euclidean division. The Euclidean division of\ntwo integers <code>a<\/code> and <code>b<\/code> yields two integers <code>q<\/code> and <code>r<\/code> such that\n<code>a == b * q + r<\/code> and <code>0 &lt;= r &lt; b.abs()<\/code>.<\/p>\n<p>The Euclidean division is only defined for integers, but can be easily\nextended to work with doubles. In that case <code>r<\/code> may have a non-integer\nvalue, but it still verifies <code>0 &lt;= r &lt; |b|<\/code>.<\/p>\n<p>The sign of the returned value <code>r<\/code> is always positive.<\/p>\n<p>See <a href=\"dart-core\/double\/remainder.html\">remainder<\/a> for the remainder of the truncating division.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator %(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "dart:core.double",
            "desc": "<p>Multiplication operator.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator *(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "dart:core.double",
            "desc": "<p>Addition operator.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator +(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "dart:core.double",
            "desc": "<p>Subtraction operator.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator -(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "dart:core.double",
            "desc": "<p>Division operator.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator \/(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "abs",
            "type": "dart:core.double",
            "desc": "<p>Returns the absolute value of this <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/abs.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double abs();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ceil",
            "type": "dart:core.int",
            "desc": "<p>Returns the least integer no smaller than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/ceil.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ceilToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns the least integer double value no smaller than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/ceilToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "double",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-core\/double\/double.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "floor",
            "type": "dart:core.int",
            "desc": "<p>Returns the greatest integer no greater than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/floor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "floorToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns the greatest integer double value no greater than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>0.0 &lt; d &lt; 1.0<\/code> will return <code>0.0<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/floorToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "parse",
            "type": "dart:core.double",
            "desc": "<p>Parse <code>source<\/code> as an double literal and return its value.<\/p>\n<p>Accepts an optional sign (<code>+<\/code> or <code>-<\/code>) followed by either the characters\n\"Infinity\", the characters \"NaN\" or a floating-point representation.\nA floating-point representation is composed of a mantissa and an optional\nexponent part. The mantissa is either a decimal point (<code>.<\/code>) followed by a\nsequence of (decimal) digits, or a sequence of digits\noptionally followed by a decimal point and optionally more digits. The\n(optional) exponent part consists of the character \"e\" or \"E\", an optional\nsign, and one or more digits.\nThe <code>source<\/code> must not be <code>null<\/code>.<\/p>\n<p>Leading and trailing whitespace is ignored.<\/p>\n<p>If the <code>source<\/code> string is not a valid double literal, the <code>onError<\/code>\nis called with the <code>source<\/code> as argument, and its return value is\nused instead. If no <code>onError<\/code> is provided, a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>\nis thrown instead.<\/p>\n<p>The <code>onError<\/code> function is only invoked if <code>source<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a> with an\ninvalid format. It is not invoked if <code>source<\/code> is <code>null<\/code>.<\/p>\n<p>Examples of accepted strings:<\/p>\n<pre class=\"language-dart\"><code>\"3.14\"\n\"  3.14 \\xA0\"\n\"0.\"\n\".0\"\n\"-1.e3\"\n\"1234E+7\"\n\"+.12e-9\"\n\"-NaN\"\n<\/code><\/pre>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>double.parse(string, (string) { ... })<\/code>,\nyou should use <code>double.tryParse(string) ?? (...)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/parse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static double parse(String source,\n    [@deprecated double onError(String source)]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "remainder",
            "type": "dart:core.double",
            "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/remainder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double remainder(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "round",
            "type": "dart:core.int",
            "desc": "<p>Returns the integer closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).round() == 4<\/code> and <code>(-3.5).round() == -4<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/round.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "roundToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns the integer double value closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).roundToDouble() == 4<\/code> and <code>(-3.5).roundToDouble() == -4<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>,\nand <code>-0.0<\/code> is therefore considered closer to negative numbers than <code>0.0<\/code>.\nThis means that for a value, <code>d<\/code> in the range <code>-0.5 &lt; d &lt; 0.0<\/code>,\nthe result is <code>-0.0<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/roundToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Provide a representation of this <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/p>\n<p>The representation is a number literal such that the closest double value\nto the representation's mathematical value is this <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>Returns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.<\/p>\n<p>For all doubles, <code>d<\/code>, converting to a string and parsing the string back\ngives the same value again: <code>d == double.parse(d.toString())<\/code> (except when\n<code>d<\/code> is NaN).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "truncate",
            "type": "dart:core.int",
            "desc": "<p>Returns the integer obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/truncate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "truncateToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns the integer double value obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>, and\nin the range <code>0.0 &lt; d &lt; 1.0<\/code> it will return 0.0.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/truncateToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "tryParse",
            "type": "dart:core.double",
            "desc": "<p>Parse <code>source<\/code> as an double literal and return its value.<\/p>\n<p>Like <a href=\"dart-core\/double\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> for invalid inputs\ninstead of throwing, and the <code>source<\/code> must still not be <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/tryParse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static double tryParse(String source);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "dart:core.double",
            "desc": "<p>Negate operator.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double operator -();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "dart:core.int",
            "desc": "<p>Truncating division operator.<\/p>\n<p>The result of the truncating division <code>a ~\/ b<\/code> is equivalent to\n<code>(a \/ b).truncate()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.double",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/double\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator ~\/(num other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "type": "",
            "href": "dart-core\/double\/infinity-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double infinity = 1.0 \/ 0.0\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "infinity",
            "memberOf": "dart:core.double"
        },
        {
            "type": "",
            "href": "dart-core\/double\/maxFinite-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double maxFinite = 1.7976931348623157e+308\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "maxFinite",
            "memberOf": "dart:core.double"
        },
        {
            "type": "",
            "href": "dart-core\/double\/minPositive-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double minPositive = 5e-324\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "minPositive",
            "memberOf": "dart:core.double"
        },
        {
            "type": "",
            "href": "dart-core\/double\/nan-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double nan = 0.0 \/ 0.0\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "nan",
            "memberOf": "dart:core.double"
        },
        {
            "type": "",
            "href": "dart-core\/double\/negativeInfinity-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double negativeInfinity = -infinity\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "negativeInfinity",
            "memberOf": "dart:core.double"
        },
        {
            "name": "sign",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Returns the sign of the double's numerical value.<\/p>\n<p>Returns -1.0 if the value is less than zero,\n+1.0 if the value is greater than zero,\nand the value itself if it is -0.0, 0.0 or NaN.<\/p>\n        ",
            "memberOf": "dart:core.double",
            "isConstant": false,
            "href": "dart-core\/double\/sign.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get sign;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "animation.AnimationController",
        "animation.AnimationMean",
        "animation.CurveTween",
        "animation.CurvedAnimation",
        "animation.ProxyAnimation",
        "animation.ReverseAnimation",
        "animation.TrainHoppingAnimation",
        "dart:typed_data.UnmodifiableFloat32ListView",
        "dart:typed_data.UnmodifiableFloat64ListView",
        "foundation.DoubleProperty",
        "foundation.PercentProperty",
        "typed_data.typed_buffers.Float32Buffer",
        "typed_data.typed_buffers.Float64Buffer"
    ],
    "realImplementors": [
        "animation.AnimationController",
        "animation.AnimationMean",
        "animation.CurveTween",
        "animation.CurvedAnimation",
        "animation.ProxyAnimation",
        "animation.ReverseAnimation",
        "animation.TrainHoppingAnimation",
        "dart:typed_data.UnmodifiableFloat32ListView",
        "dart:typed_data.UnmodifiableFloat64ListView",
        "foundation.DoubleProperty",
        "foundation.PercentProperty",
        "typed_data.typed_buffers.Float32Buffer",
        "typed_data.typed_buffers.Float64Buffer"
    ],
    "cn": [],
    "href": "dart-core\/double-class.html",
    "desc": "<p>A double-precision floating point number.<\/p>\n<p>Representation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n<a href=\"dart-core\/num-class.html\">num<\/a>. Dart doubles are 64-bit floating-point numbers as specified in the\nIEEE 754 standard.<\/p>\n<p>The <a href=\"dart-core\/double-class.html\">double<\/a> type is contagious. Operations on <a href=\"dart-core\/double-class.html\">double<\/a>s return\n<a href=\"dart-core\/double-class.html\">double<\/a> results.<\/p>\n<p>It is a compile-time error for a class to attempt to extend or implement\ndouble.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "double"
}