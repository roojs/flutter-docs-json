{
    "desc": "<p>A widget that listens for <a href=\"widgets\/Notification-class.html\">Notification<\/a>s bubbling up the tree.<\/p>\n<p>Notifications will trigger the <a href=\"widgets\/NotificationListener\/onNotification.html\">onNotification<\/a> callback only if their\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> is a subtype of <code>T<\/code>.<\/p>\n<p>To dispatch notifications, use the <a href=\"widgets\/Notification\/dispatch.html\">Notification.dispatch<\/a> method.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/NotificationListener-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.NotificationListener",
    "shortname": "NotificationListener",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when a notification of the appropriate type arrives at this\nlocation in the tree.<\/p>\n<p>Return true to cancel the notification bubbling. Return false (or null) to\nallow the notification to continue to be dispatched to further ancestors.<\/p>\n<p>The notification's <a href=\"widgets\/Notification\/visitAncestor.html\">Notification.visitAncestor<\/a> method is called for each\nancestor, and invokes this callback as appropriate.<\/p>\n<p>Notifications vary in terms of when they are dispatched. There are two\nmain possibilities: dispatch between frames, and dispatch during layout.<\/p>\n<p>For notifications that dispatch during layout, such as those that inherit\nfrom <a href=\"widgets\/LayoutChangedNotification-class.html\">LayoutChangedNotification<\/a>, it is too late to call <a href=\"widgets\/State\/setState.html\">State.setState<\/a>\nin response to the notification (as layout is currently happening in a\ndescendant, by definition, since notifications bubble up the tree). For\nwidgets that depend on layout, consider a <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final NotificationListenerCallback&lt;T&gt; onNotification\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/NotificationListener\/onNotification.html",
            "isDeprecated": false,
            "type": "widgets.NotificationListenerCallback",
            "name": "onNotification",
            "memberOf": "widgets.NotificationListener",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that listens for notifications.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const NotificationListener({\n  Key key,\n  @required this.child,\n  this.onNotification,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/NotificationListener\/NotificationListener.html",
            "isDeprecated": false,
            "type": "",
            "name": "NotificationListener",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.NotificationListener",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onNotification",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.NotificationListenerCallback"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/NotificationListener\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) =&gt; child;<\/code><\/pre>\n    ",
            "href": "widgets\/NotificationListener\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.NotificationListener",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget directly below this widget in the tree.<\/p>\n<p>This is not necessarily the widget that dispatched the notification.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/NotificationListener\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.NotificationListener",
            "params": []
        }
    ]
}