{
    "desc": "<p>A binding for the gesture subsystem.<\/p>\n<h2 id=\"lifecycle-of-pointer-events-and-the-gesture-arena\">Lifecycle of pointer events and the gesture arena<\/h2>\n<h3 id=\"pointerdownevent\"><a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a><\/h3>\n<p>When a <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a> is received by the <a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a> (from\n<a href=\"dart-ui\/Window\/onPointerDataPacket.html\">Window.onPointerDataPacket<\/a>, as interpreted by the\n<a href=\"gestures\/PointerEventConverter-class.html\">PointerEventConverter<\/a>), a <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> is performed to determine which\n<a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes are affected. (Other bindings are expected to\nimplement <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> to defer to <a href=\"gestures\/HitTestable-class.html\">HitTestable<\/a> objects. For example, the\nrendering layer defers to the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> and the rest of the render object\nhierarchy.)<\/p>\n<p>The affected nodes then are given the event to handle (<a href=\"gestures\/GestureBinding\/dispatchEvent.html\">dispatchEvent<\/a> calls\n<a href=\"gestures\/GestureBinding\/handleEvent.html\">HitTestTarget.handleEvent<\/a> for each affected node). If any have relevant\n<a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a>s, they provide the event to them using\n<a href=\"gestures\/GestureRecognizer\/addPointer.html\">GestureRecognizer.addPointer<\/a>. This typically causes the recognizer to\nregister with the <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a> to receive notifications regarding the\npointer in question.<\/p>\n<p>Once the hit test and dispatching logic is complete, the event is then\npassed to the aforementioned <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>, which passes it to any objects\nthat have registered interest in that event.<\/p>\n<p>Finally, the <a href=\"gestures\/GestureBinding\/gestureArena.html\">gestureArena<\/a> is closed for the given pointer\n(<a href=\"gestures\/GestureArenaManager\/close.html\">GestureArenaManager.close<\/a>), which begins the process of selecting a\ngesture to win that pointer.<\/p>\n<h3 id=\"other-events\">Other events<\/h3>\n<p>A pointer that is <a href=\"gestures\/PointerEvent\/down.html\">PointerEvent.down<\/a> may send further events, such as\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>, or <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a>. These are\nsent to the same <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes as were found when the down event was\nreceived (even if they have since been disposed; it is the responsibility of\nthose objects to be aware of that possibility).<\/p>\n<p>Then, the events are routed to any still-registered entrants in the\n<a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>'s table for that pointer.<\/p>\n<p>When a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> is received, the <a href=\"gestures\/GestureArenaManager\/sweep.html\">GestureArenaManager.sweep<\/a> method\nis invoked to force the gesture arena logic to terminate if necessary.<\/p>\n    ",
    "dtype": "mixin",
    "example": "",
    "href": "gestures\/GestureBinding-mixin.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "gestures",
    "name": "gestures.GestureBinding",
    "shortname": "GestureBinding",
    "extends": [],
    "is_enum": false,
    "is_mixin": true,
    "realImplementors": [],
    "events": [],
    "methods": [],
    "props": []
}