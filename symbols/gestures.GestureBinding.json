{
    "name": "gestures.GestureBinding",
    "extends": [],
    "memberOf": "gestures",
    "events": [],
    "methods": [
        {
            "name": "GestureBinding",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "gestures\/GestureBinding\/GestureBinding.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "cancelPointer",
            "type": "",
            "desc": "<p>Dispatch a <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a> for the given pointer soon.<\/p>\n<p>The pointer event will be dispatch before the next pointer event and\nbefore the end of the microtask but not within this function call.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/cancelPointer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cancelPointer(int pointer) {\n  if (_pendingPointerEvents.isEmpty &amp;&amp; !locked)\n    scheduleMicrotask(_flushPointerEventQueue);\n  _pendingPointerEvents.addFirst(PointerCancelEvent(pointer: pointer));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispatchEvent",
            "type": "",
            "desc": "<p>Dispatch an event to a hit test result's path.<\/p>\n<p>This sends the given event to every <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> in the entries of the\ngiven <a href=\"gestures\/HitTestResult-class.html\">HitTestResult<\/a>, and catches exceptions that any of the handlers\nmight throw. The <code>hitTestResult<\/code> argument may only be null for\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, <a href=\"gestures\/PointerAddedEvent-class.html\">PointerAddedEvent<\/a>, or <a href=\"gestures\/PointerRemovedEvent-class.html\">PointerRemovedEvent<\/a> events.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hitTestResult",
                    "type": "gestures.HitTestResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/dispatchEvent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override \/\/ from HitTestDispatcher\nvoid dispatchEvent(PointerEvent event, HitTestResult hitTestResult) {\n  assert(!locked);\n  \/\/ No hit test information implies that this is a hover or pointer\n  \/\/ add\/remove event.\n  if (hitTestResult == null) {\n    assert(event is PointerHoverEvent || event is PointerAddedEvent || event is PointerRemovedEvent);\n    try {\n      pointerRouter.route(event);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetailsForPointerEventDispatcher(\n        exception: exception,\n        stack: stack,\n        library: 'gesture library',\n        context: 'while dispatching a non-hit-tested pointer event',\n        event: event,\n        hitTestEntry: null,\n        informationCollector: (StringBuffer information) {\n          information.writeln('Event:');\n          information.writeln('  $event');\n        },\n      ));\n    }\n    return;\n  }\n  for (HitTestEntry entry in hitTestResult.path) {\n    try {\n      entry.target.handleEvent(event, entry);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetailsForPointerEventDispatcher(\n        exception: exception,\n        stack: stack,\n        library: 'gesture library',\n        context: 'while dispatching a pointer event',\n        event: event,\n        hitTestEntry: entry,\n        informationCollector: (StringBuffer information) {\n          information.writeln('Event:');\n          information.writeln('  $event');\n          information.writeln('Target:');\n          information.write('  ${entry.target}');\n        },\n      ));\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handleEvent",
            "type": "",
            "desc": "<p>Override this method to receive events.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "entry",
                    "type": "gestures.HitTestEntry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/handleEvent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override \/\/ from HitTestTarget\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  pointerRouter.route(event);\n  if (event is PointerDownEvent) {\n    gestureArena.close(event.pointer);\n  } else if (event is PointerUpEvent) {\n    gestureArena.sweep(event.pointer);\n  } else if (event is PointerSignalEvent) {\n    pointerSignalResolver.resolve(event);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hitTest",
            "type": "",
            "desc": "<p>Determine which <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> objects are located at a given position.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [
                {
                    "name": "result",
                    "type": "gestures.HitTestResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/hitTest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override \/\/ from HitTestable\nvoid hitTest(HitTestResult result, Offset position) {\n  result.add(HitTestEntry(this));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "initInstances",
            "type": "",
            "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/initInstances.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  _instance = this;\n  window.onPointerDataPacket = _handlePointerDataPacket;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "unlocked",
            "type": "",
            "desc": "<p>Called by <a href=\"foundation\/BindingBase\/lockEvents.html\">lockEvents<\/a> when events get unlocked.<\/p>\n<p>This should flush any events that were queued while <a href=\"foundation\/BindingBase\/locked.html\">locked<\/a> was true.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/GestureBinding\/unlocked.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid unlocked() {\n  super.unlocked();\n  _flushPointerEventQueue();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "gestureArena",
            "type": "gestures.GestureArenaManager",
            "types": [],
            "desc": "<p>The gesture arenas used for disambiguating the meaning of sequences of\npointer events.<\/p>\n        ",
            "memberOf": "gestures.GestureBinding",
            "isConstant": false,
            "href": "gestures\/GestureBinding\/gestureArena.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureArenaManager gestureArena = GestureArenaManager()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "instance",
            "type": "gestures.GestureBinding",
            "types": [],
            "desc": "<p>The singleton instance of this object.<\/p>\n        ",
            "memberOf": "gestures.GestureBinding",
            "isConstant": false,
            "href": "gestures\/GestureBinding\/instance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static GestureBinding get instance =&gt; _instance;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pointerRouter",
            "type": "gestures.PointerRouter",
            "types": [],
            "desc": "<p>A router that routes all pointer events received from the engine.<\/p>\n        ",
            "memberOf": "gestures.GestureBinding",
            "isConstant": false,
            "href": "gestures\/GestureBinding\/pointerRouter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerRouter pointerRouter = PointerRouter()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pointerSignalResolver",
            "type": "gestures.PointerSignalResolver",
            "types": [],
            "desc": "<p>The resolver used for determining which widget handles a pointer\nsignal event.<\/p>\n        ",
            "memberOf": "gestures.GestureBinding",
            "isConstant": false,
            "href": "gestures\/GestureBinding\/pointerSignalResolver.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerSignalResolver pointerSignalResolver = PointerSignalResolver()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "gestures\/GestureBinding-mixin.html",
    "desc": "<p>A binding for the gesture subsystem.<\/p>\n<h2 id=\"lifecycle-of-pointer-events-and-the-gesture-arena\">Lifecycle of pointer events and the gesture arena<\/h2>\n<h3 id=\"pointerdownevent\"><a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a><\/h3>\n<p>When a <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a> is received by the <a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a> (from\n<a href=\"dart-ui\/Window\/onPointerDataPacket.html\">Window.onPointerDataPacket<\/a>, as interpreted by the\n<a href=\"gestures\/PointerEventConverter-class.html\">PointerEventConverter<\/a>), a <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> is performed to determine which\n<a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes are affected. (Other bindings are expected to\nimplement <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> to defer to <a href=\"gestures\/HitTestable-class.html\">HitTestable<\/a> objects. For example, the\nrendering layer defers to the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> and the rest of the render object\nhierarchy.)<\/p>\n<p>The affected nodes then are given the event to handle (<a href=\"gestures\/GestureBinding\/dispatchEvent.html\">dispatchEvent<\/a> calls\n<a href=\"gestures\/GestureBinding\/handleEvent.html\">HitTestTarget.handleEvent<\/a> for each affected node). If any have relevant\n<a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a>s, they provide the event to them using\n<a href=\"gestures\/GestureRecognizer\/addPointer.html\">GestureRecognizer.addPointer<\/a>. This typically causes the recognizer to\nregister with the <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a> to receive notifications regarding the\npointer in question.<\/p>\n<p>Once the hit test and dispatching logic is complete, the event is then\npassed to the aforementioned <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>, which passes it to any objects\nthat have registered interest in that event.<\/p>\n<p>Finally, the <a href=\"gestures\/GestureBinding\/gestureArena.html\">gestureArena<\/a> is closed for the given pointer\n(<a href=\"gestures\/GestureArenaManager\/close.html\">GestureArenaManager.close<\/a>), which begins the process of selecting a\ngesture to win that pointer.<\/p>\n<h3 id=\"other-events\">Other events<\/h3>\n<p>A pointer that is <a href=\"gestures\/PointerEvent\/down.html\">PointerEvent.down<\/a> may send further events, such as\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>, or <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a>. These are\nsent to the same <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes as were found when the down event was\nreceived (even if they have since been disposed; it is the responsibility of\nthose objects to be aware of that possibility).<\/p>\n<p>Then, the events are routed to any still-registered entrants in the\n<a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>'s table for that pointer.<\/p>\n<p>When a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> is received, the <a href=\"gestures\/GestureArenaManager\/sweep.html\">GestureArenaManager.sweep<\/a> method\nis invoked to force the gesture arena logic to terminate if necessary.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "GestureBinding"
}