{
    "name": "material.PopupMenuItem",
    "extends": [
        "material.PopupMenuEntry",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "PopupMenuItem",
            "type": "",
            "desc": "<p>Creates an item for a popup menu.<\/p>\n<p>By default, the item is <code>enabled<\/code>.<\/p>\n<p>The <code>height<\/code> and <code>enabled<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuItem",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "enabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/PopupMenuItem\/PopupMenuItem.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PopupMenuItem({\n  Key key,\n  this.value,\n  this.enabled = true,\n  this.height = _kMenuItemHeight,\n  @required this.child,\n}) : assert(enabled != null),\n     assert(height != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "material.PopupMenuItemState<material.PopupMenuItem>",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/PopupMenuItem\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuItem",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/PopupMenuItem\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPopupMenuItemState&lt;T, PopupMenuItem&lt;T&gt;&gt; createState() =&gt; PopupMenuItemState&lt;T, PopupMenuItem&lt;T&gt;&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "material.PopupMenuItemState",
                "material.PopupMenuItem"
            ]
        },
        {
            "name": "represents",
            "type": "dart:core.bool",
            "desc": "<p>Whether this entry represents a particular value.<\/p>\n<p>This method is used by <a href=\"material\/showMenu.html\">showMenu<\/a>, when it is called, to align the entry\nrepresenting the <code>initialValue<\/code>, if any, to the given <code>position<\/code>, and then\nlater is called on each entry to determine if it should be highlighted (if\nthe method returns true, the entry will have its background color set to\nthe ambient <a href=\"material\/ThemeData\/highlightColor.html\">ThemeData.highlightColor<\/a>). If <code>initialValue<\/code> is null, then\nthis method is not called.<\/p>\n<p>If the <a href=\"material\/PopupMenuEntry-class.html\">PopupMenuEntry<\/a> represents a single value, this should return true\nif the argument matches that value. If it represents multiple values, it\nshould return true if the argument matches any of them.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuItem",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "material\/PopupMenuItem\/represents.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool represents(T value) =&gt; value == this.value;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a single-line <a href=\"material\/ListTile-class.html\">ListTile<\/a> (for menus with icons) or a <a href=\"widgets\/Text-class.html\">Text<\/a>. An\nappropriate <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> is put in scope for the child. In either\ncase, the text should be short enough that it won't wrap.<\/p>\n        ",
            "memberOf": "material.PopupMenuItem",
            "isConstant": false,
            "href": "material\/PopupMenuItem\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "enabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the user is permitted to select this entry.<\/p>\n<p>Defaults to true. If this is false, then the item will not react to\ntouches.<\/p>\n        ",
            "memberOf": "material.PopupMenuItem",
            "isConstant": false,
            "href": "material\/PopupMenuItem\/enabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The height of the entry.<\/p>\n<p>Defaults to 48 pixels.<\/p>\n        ",
            "memberOf": "material.PopupMenuItem",
            "isConstant": false,
            "href": "material\/PopupMenuItem\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "value",
            "type": "",
            "types": [],
            "desc": "<p>The value that will be returned by <a href=\"material\/showMenu.html\">showMenu<\/a> if this entry is selected.<\/p>\n        ",
            "memberOf": "material.PopupMenuItem",
            "isConstant": false,
            "href": "material\/PopupMenuItem\/value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T value\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.CheckedPopupMenuItem"
    ],
    "realImplementors": [
        "material.CheckedPopupMenuItem"
    ],
    "cn": [],
    "href": "material\/PopupMenuItem-class.html",
    "desc": "<p>An item in a material design popup menu.<\/p>\n<p>To show a popup menu, use the <a href=\"material\/showMenu.html\">showMenu<\/a> function. To create a button that\nshows a popup menu, consider using <a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>.<\/p>\n<p>To show a checkmark next to a popup menu item, consider using\n<a href=\"material\/CheckedPopupMenuItem-class.html\">CheckedPopupMenuItem<\/a>.<\/p>\n<p>Typically the <a href=\"material\/PopupMenuItem\/child.html\">child<\/a> of a <a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a> is a <a href=\"widgets\/Text-class.html\">Text<\/a> widget. More\nelaborate menus with icons can use a <a href=\"material\/ListTile-class.html\">ListTile<\/a>. By default, a\n<a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a> is 48 pixels high. If you use a widget with a different\nheight, it must be specified in the <a href=\"material\/PopupMenuItem\/height.html\">height<\/a> property.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, a <a href=\"widgets\/Text-class.html\">Text<\/a> widget is used with a popup menu item. The <code>WhyFarther<\/code> type\nis an enum, not shown here.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const PopupMenuItem&lt;WhyFarther&gt;(\n  value: WhyFarther.harder,\n  child: Text('Working a lot harder'),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See the example at <a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a> for how this example could be used in a\ncomplete menu, and see the example at <a href=\"material\/CheckedPopupMenuItem-class.html\">CheckedPopupMenuItem<\/a> for one way to\nkeep the text of <a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a>s that use <a href=\"widgets\/Text-class.html\">Text<\/a> widgets in their <a href=\"material\/PopupMenuItem\/child.html\">child<\/a>\nslot aligned with the text of <a href=\"material\/CheckedPopupMenuItem-class.html\">CheckedPopupMenuItem<\/a>s or of <a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a>\nthat use a <a href=\"material\/ListTile-class.html\">ListTile<\/a> in their <a href=\"material\/PopupMenuItem\/child.html\">child<\/a> slot.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/PopupMenuDivider-class.html\">PopupMenuDivider<\/a>, which can be used to divide items from each other.<\/li>\n<li>\n<a href=\"material\/CheckedPopupMenuItem-class.html\">CheckedPopupMenuItem<\/a>, a variant of <a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a> with a checkmark.<\/li>\n<li>\n<a href=\"material\/showMenu.html\">showMenu<\/a>, a method to dynamically show a popup menu at a given location.<\/li>\n<li>\n<a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>, an <a href=\"material\/IconButton-class.html\">IconButton<\/a> that automatically shows a menu when\nit is tapped.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "PopupMenuItem"
}