{
    "name": "rendering.RenderSliverFillViewport",
    "extends": [
        "rendering.RenderSliverFixedExtentBoxAdaptor",
        "rendering.RenderSliverMultiBoxAdaptor",
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "RenderSliverFillViewport",
            "type": "",
            "desc": "<p>Creates a sliver that contains multiple box children that each fill the\nviewport.<\/p>\n<p>The <code>childManager<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFillViewport",
            "sig": "",
            "params": [
                {
                    "name": "childManager",
                    "type": "rendering.RenderSliverBoxChildManager",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "viewportFraction",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "rendering\/RenderSliverFillViewport\/RenderSliverFillViewport.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverFillViewport({\n  @required RenderSliverBoxChildManager childManager,\n  double viewportFraction = 1.0,\n}) : assert(viewportFraction != null),\n     assert(viewportFraction &gt; 0.0),\n     _viewportFraction = viewportFraction,\n     super(childManager: childManager);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "estimateMaxScrollOffset",
            "type": "dart:core.double",
            "desc": "<p>Called to estimate the total scrollable extents of this object.<\/p>\n<p>Must return the total distance from the start of the child with the\nearliest possible index to the end of the child with the last possible\nindex.<\/p>\n<p>By default, defers to <a href=\"rendering\/RenderSliverFillViewport\/estimateMaxScrollOffset.html\">RenderSliverBoxChildManager.estimateMaxScrollOffset<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/computeMaxScrollOffset.html\">computeMaxScrollOffset<\/a>, which is similar but must provide a precise\nvalue.<\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.RenderSliverFillViewport",
            "sig": "",
            "params": [
                {
                    "name": "constraints",
                    "type": "rendering.SliverConstraints",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "firstIndex",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "lastIndex",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "leadingScrollOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "trailingScrollOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFillViewport\/estimateMaxScrollOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble estimateMaxScrollOffset(\n  SliverConstraints constraints, {\n  int firstIndex,\n  int lastIndex,\n  double leadingScrollOffset,\n  double trailingScrollOffset,\n}) {\n  final double padding = _padding;\n  return childManager.estimateMaxScrollOffset(\n    constraints,\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    leadingScrollOffset: leadingScrollOffset - padding,\n    trailingScrollOffset: trailingScrollOffset - padding,\n  ) + padding + padding;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getMaxChildIndexForScrollOffset",
            "type": "dart:core.int",
            "desc": "<p>The maximum child index that is visible at the given scroll offset.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, returns a value consistent with the children being placed in\norder, without gaps, starting from layout offset zero.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFillViewport",
            "sig": "",
            "params": [
                {
                    "name": "scrollOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "itemExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFillViewport\/getMaxChildIndexForScrollOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint getMaxChildIndexForScrollOffset(double scrollOffset, double itemExtent) {\n  return super.getMaxChildIndexForScrollOffset(math.max(scrollOffset - _padding, 0.0), itemExtent);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getMinChildIndexForScrollOffset",
            "type": "dart:core.int",
            "desc": "<p>The minimum child index that is visible at the given scroll offset.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, returns a value consistent with the children being placed in\norder, without gaps, starting from layout offset zero.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFillViewport",
            "sig": "",
            "params": [
                {
                    "name": "scrollOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "itemExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFillViewport\/getMinChildIndexForScrollOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint getMinChildIndexForScrollOffset(double scrollOffset, double itemExtent) {\n  return super.getMinChildIndexForScrollOffset(math.max(scrollOffset - _padding, 0.0), itemExtent);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "indexToLayoutOffset",
            "type": "dart:core.double",
            "desc": "<p>The layout offset for the child with the given index.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, places the children in order, without gaps, starting from\nlayout offset zero.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFillViewport",
            "sig": "",
            "params": [
                {
                    "name": "itemExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFillViewport\/indexToLayoutOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble indexToLayoutOffset(double itemExtent, int index) {\n  return _padding + super.indexToLayoutOffset(itemExtent, index);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "itemExtent",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The main-axis extent of each item.<\/p>\n        ",
            "memberOf": "rendering.RenderSliverFillViewport",
            "isConstant": false,
            "href": "rendering\/RenderSliverFillViewport\/itemExtent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get itemExtent =&gt; constraints.viewportMainAxisExtent * viewportFraction;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "viewportFraction",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The fraction of the viewport that each child should fill in the main axis.<\/p>\n<p>If this fraction is less than 1.0, more than one child will be visible at\nonce. If this fraction is greater than 1.0, each child will be larger than\nthe viewport in the main axis.<\/p>\n        ",
            "memberOf": "rendering.RenderSliverFillViewport",
            "isConstant": false,
            "href": "rendering\/RenderSliverFillViewport\/viewportFraction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get viewportFraction =&gt; _viewportFraction;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/RenderSliverFillViewport-class.html",
    "desc": "<p>A sliver that contains multiple box children that each fill the viewport.<\/p>\n<p><a href=\"rendering\/RenderSliverFillViewport-class.html\">RenderSliverFillViewport<\/a> places its children in a linear array along the\nmain axis. Each child is sized to fill the viewport, both in the main and\ncross axis. A <a href=\"rendering\/RenderSliverFillViewport\/viewportFraction.html\">viewportFraction<\/a> factor can be provided to size the children\nto a multiple of the viewport's main axis dimension (typically a fraction\nless than 1.0).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliverFillRemaining-class.html\">RenderSliverFillRemaining<\/a>, which sizes the children based on the\nremaining space rather than the viewport itself.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>, which has a configurable <a href=\"rendering\/RenderSliverFillViewport\/itemExtent.html\">itemExtent<\/a>.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a>, which does not require its children to have the same\nextent in the main axis.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RenderSliverFillViewport"
}