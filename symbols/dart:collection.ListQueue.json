{
    "desc": "<p>List based <a href=\"dart-collection\/Queue-class.html\">Queue<\/a>.<\/p>\n<p>Keeps a cyclic buffer of elements, and grows to a larger buffer when\nit fills up. This guarantees constant time peek and remove operations, and\namortized constant time add operations.<\/p>\n<p>The structure is efficient for any queue or stack usage.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-collection\/ListQueue-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "dart:collection",
    "name": "dart:collection.ListQueue",
    "shortname": "ListQueue",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create an empty queue.<\/p>\n<p>If <code>initialCapacity<\/code> is given, prepare the queue for at least that many\nelements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListQueue([int initialCapacity])\n    : _head = 0,\n      _tail = 0 {\n  if (initialCapacity == null || initialCapacity &lt; _INITIAL_CAPACITY) {\n    initialCapacity = _INITIAL_CAPACITY;\n  } else if (!_isPowerOf2(initialCapacity)) {\n    initialCapacity = _nextPowerOf2(initialCapacity);\n  }\n  assert(_isPowerOf2(initialCapacity));\n  _table = List&lt;E&gt;(initialCapacity);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/ListQueue.html",
            "isDeprecated": false,
            "type": "",
            "name": "ListQueue",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "initialCapacity",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/add.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  if (elements is List&lt;E&gt;) {\n    List&lt;E&gt; list = elements;\n    int addCount = list.length;\n    int length = this.length;\n    if (length + addCount &gt;= _table.length) {\n      _preGrow(length + addCount);\n      \/\/ After preGrow, all elements are at the start of the list.\n      _table.setRange(length, length + addCount, list, 0);\n      _tail += addCount;\n    } else {\n      \/\/ Adding addCount elements won't reach _head.\n      int endSpace = _table.length - _tail;\n      if (addCount &lt; endSpace) {\n        _table.setRange(_tail, _tail + addCount, list, 0);\n        _tail += addCount;\n      } else {\n        int preSpace = addCount - endSpace;\n        _table.setRange(_tail, _tail + endSpace, list, 0);\n        _table.setRange(0, preSpace, list, endSpace);\n        _tail = preSpace;\n      }\n    }\n    _modificationCount++;\n  } else {\n    for (E element in elements) _add(element);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/addAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "elements",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _head = (_head - 1) &amp; (_table.length - 1);\n  _table[_head] = value;\n  if (_head == _tail) _grow();\n  _modificationCount++;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/addFirst.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addFirst",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/addLast.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addLast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (test(elementAt(i))) return true;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/any.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "any",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this queue as a queue of <code>R<\/code> instances, if necessary.<\/p>\n<p>If this queue contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the queue (e.g., by using <a href=\"dart-collection\/ListQueue\/addFirst.html\">addFirst<\/a> or <a href=\"dart-collection\/ListQueue\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis queue as well.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;() =&gt; Queue.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/cast.html",
            "isDeprecated": false,
            "type": "dart:collection.Queue",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  if (_head != _tail) {\n    for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n      _table[i] = null;\n    }\n    _head = _tail = 0;\n    _modificationCount++;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/clear.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (elementAt(i) == element) return true;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/contains.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-collection\/ListQueue\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  RangeError.checkValidIndex(index, this);\n  return _table[(_head + index) &amp; (_table.length - 1)];\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/elementAt.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "elementAt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (!test(elementAt(i))) return false;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/every.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "every",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    E element = elementAt(i);\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/firstWhere.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "firstWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    value = combine(value, elementAt(i));\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/fold.html",
            "isDeprecated": false,
            "type": "<T>",
            "name": "fold",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "initialValue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "previousValue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  int modificationCount = _modificationCount;\n  for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n    f(_table[i]);\n    _checkModification(modificationCount);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/forEach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "forEach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/ListQueue\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  int length = this.length;\n  if (!separator.isEmpty) {\n    if (length == 0) return \"\";\n    String first = \"${elementAt(0)}\";\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n    StringBuffer buffer = new StringBuffer(first);\n    for (int i = 1; i &lt; length; i++) {\n      buffer.write(separator);\n      buffer.write(elementAt(i));\n      if (length != this.length) {\n        throw new ConcurrentModificationError(this);\n      }\n    }\n    return buffer.toString();\n  } else {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i &lt; length; i++) {\n      buffer.write(elementAt(i));\n      if (length != this.length) {\n        throw new ConcurrentModificationError(this);\n      }\n    }\n    return buffer.toString();\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/join.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "join",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "separator",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = length - 1; i &gt;= 0; i--) {\n    E element = elementAt(i);\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/lastWhere.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "lastWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/ListQueue\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; new MappedListIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/map.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "map",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  int length = this.length;\n  if (length == 0) throw IterableElementError.noElement();\n  E value = elementAt(0);\n  for (int i = 1; i &lt; length; i++) {\n    value = combine(value, elementAt(i));\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/reduce.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "reduce",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) {\n  for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n    E element = _table[i];\n    if (element == value) {\n      _remove(i);\n      _modificationCount++;\n      return true;\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/remove.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  if (_head == _tail) throw IterableElementError.noElement();\n  _modificationCount++;\n  E result = _table[_head];\n  _table[_head] = null;\n  _head = (_head + 1) &amp; (_table.length - 1);\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/removeFirst.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeFirst",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  if (_head == _tail) throw IterableElementError.noElement();\n  _modificationCount++;\n  _tail = (_tail - 1) &amp; (_table.length - 1);\n  E result = _table[_tail];\n  _table[_tail] = null;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/removeLast.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeLast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Remove all elements matched by <code>test<\/code>.<\/p>\n<p>This method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filterWhere(test, true);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/removeWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Remove all elements not matched by <code>test<\/code>.<\/p>\n<p>This method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filterWhere(test, false);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/retainWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "retainWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  E match = null;\n  bool matchFound = false;\n  for (int i = 0; i &lt; length; i++) {\n    E element = elementAt(i);\n    if (test(element)) {\n      if (matchFound) {\n        throw IterableElementError.tooMany();\n      }\n      matchFound = true;\n      match = element;\n    }\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (matchFound) return match;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/singleWhere.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "singleWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) =&gt; new SubListIterable&lt;E&gt;(this, count, null);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/skip.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "skip",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "count",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E element)) =&gt; super.skipWhile(test);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/skipWhile.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "skipWhile",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) =&gt; new SubListIterable&lt;E&gt;(this, 0, count);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/take.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "take",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "count",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E element)) =&gt; super.takeWhile(test);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/takeWhile.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "takeWhile",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) {\n  List&lt;E&gt; list;\n  if (growable) {\n    list = &lt;E&gt;[]..length = length;\n  } else {\n    list = List&lt;E&gt;(length);\n  }\n  _writeToList(list);\n  return list;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/toList.html",
            "isDeprecated": false,
            "type": "dart:core.List",
            "name": "toList",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "growable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; result = new Set&lt;E&gt;();\n  for (int i = 0; i &lt; length; i++) {\n    result.add(elementAt(i));\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/toSet.html",
            "isDeprecated": false,
            "type": "dart:core.Set",
            "name": "toSet",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, \"{\", \"}\");<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; super.where(test);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListQueue\/where.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "where",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _head == _tail;<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListQueue\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _ListQueueIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListQueue\/iterator.html",
            "name": "iterator",
            "isDeprecated": false,
            "type": "dart:core.Iterator",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; (_tail - _head) &amp; (_table.length - 1);<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListQueue\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:collection.ListQueue",
            "params": []
        }
    ]
}