{
    "name": "pub_semver",
    "href": "package-pub_semver_pub_semver\/package-pub_semver_pub_semver-library.html",
    "cn": [
        {
            "name": "pub_semver.Version",
            "extends": [],
            "memberOf": "pub_semver",
            "events": [],
            "methods": [
                {
                    "name": "operator <",
                    "type": "dart:core.bool",
                    "desc": "",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/operator_less.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;(Version other) =&gt; compareTo(other) &lt; 0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator <=",
                    "type": "dart:core.bool",
                    "desc": "",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/operator_less_equal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;=(Version other) =&gt; compareTo(other) &lt;= 0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-pub_semver_pub_semver\/Version\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) {\n  if (other is! Version) return false;\n  return major == other.major &amp;&amp;\n      minor == other.minor &amp;&amp;\n      patch == other.patch &amp;&amp;\n      _equality.equals(preRelease, other.preRelease) &amp;&amp;\n      _equality.equals(build, other.build);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator >",
                    "type": "dart:core.bool",
                    "desc": "",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/operator_greater.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;(Version other) =&gt; compareTo(other) &gt; 0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator >=",
                    "type": "dart:core.bool",
                    "desc": "",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/operator_greater_equal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;=(Version other) =&gt; compareTo(other) &gt;= 0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Version",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a> object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "major",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minor",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "patch",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pre",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "build",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/Version\/Version.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Version(int major, int minor, int patch, {String pre, String build}) {\n  var text = \"$major.$minor.$patch\";\n  if (pre != null) text += \"-$pre\";\n  if (build != null) text += \"+$build\";\n\n  return new Version._(major, minor, patch, pre, build, text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allows",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests if <code>other<\/code> matches this version exactly.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/allows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version other) =&gt; this == other;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/allowsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other) =&gt; other.isEmpty || other == this;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAny",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/allowsAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other) =&gt; other.allows(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "antiprioritize",
                    "type": "dart:core.int",
                    "desc": "<p>Like <a href=\"package-pub_semver_pub_semver\/Version\/prioritize.html\">prioritize<\/a>, but lower version numbers are considered greater than\nhigher version numbers.<\/p>\n<p>This still considers prerelease versions to be lower than non-prerelease\nversions. Pub uses this when downgrading -- it chooses the lowest version\nbut still excludes pre-release versions when possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/antiprioritize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int antiprioritize(Version a, Version b) {\n  if (a.isPreRelease &amp;&amp; !b.isPreRelease) return -1;\n  if (!a.isPreRelease &amp;&amp; b.isPreRelease) return 1;\n\n  return b.compareTo(a);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compareTo",
                    "type": "dart:core.int",
                    "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionRange",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/compareTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(VersionRange other) {\n  if (other is Version) {\n    if (major != other.major) return major.compareTo(other.major);\n    if (minor != other.minor) return minor.compareTo(other.minor);\n    if (patch != other.patch) return patch.compareTo(other.patch);\n\n    \/\/ Pre-releases always come before no pre-release string.\n    if (!isPreRelease &amp;&amp; other.isPreRelease) return 1;\n    if (!other.isPreRelease &amp;&amp; isPreRelease) return -1;\n\n    var comparison = _compareLists(preRelease, other.preRelease);\n    if (comparison != 0) return comparison;\n\n    \/\/ Builds always come after no build string.\n    if (build.isEmpty &amp;&amp; other.build.isNotEmpty) return -1;\n    if (other.build.isEmpty &amp;&amp; build.isNotEmpty) return 1;\n    return _compareLists(build, other.build);\n  } else {\n    return -other.compareTo(this);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other) =&gt;\n    other.allows(this) ? VersionConstraint.empty : this;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersect",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/intersect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other) =&gt;\n    other.allows(this) ? this : VersionConstraint.empty;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Version.parse",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a> by parsing <code>text<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/Version\/Version.parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Version.parse(String text) {\n  final match = COMPLETE_VERSION.firstMatch(text);\n  if (match == null) {\n    throw new FormatException('Could not parse \"$text\".');\n  }\n\n  try {\n    int major = int.parse(match[1]);\n    int minor = int.parse(match[2]);\n    int patch = int.parse(match[3]);\n\n    String preRelease = match[5];\n    String build = match[8];\n\n    return new Version._(major, minor, patch, preRelease, build, text);\n  } on FormatException {\n    throw new FormatException('Could not parse \"$text\".');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "pub_semver.Version",
                    "desc": "<p>Returns the primary version out of a list of candidates.<\/p>\n<p>This is the highest-numbered stable (non-prerelease) version. If there\nare no stable versions, it's just the highest-numbered version.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "versions",
                            "type": "dart:core.List<pub_semver.Version>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "pub_semver.Version"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/primary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Version primary(List&lt;Version&gt; versions) {\n  var primary;\n  for (var version in versions) {\n    if (primary == null ||\n        (!version.isPreRelease &amp;&amp; primary.isPreRelease) ||\n        (version.isPreRelease == primary.isPreRelease &amp;&amp; version &gt; primary)) {\n      primary = version;\n    }\n  }\n  return primary;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "prioritize",
                    "type": "dart:core.int",
                    "desc": "<p>Compares <code>a<\/code> and <code>b<\/code> to see which takes priority over the other.<\/p>\n<p>Returns <code>1<\/code> if <code>a<\/code> takes priority over <code>b<\/code> and <code>-1<\/code> if vice versa. If\n<code>a<\/code> and <code>b<\/code> are equivalent, returns <code>0<\/code>.<\/p>\n<p>Unlike <a href=\"package-pub_semver_pub_semver\/Version\/compareTo.html\">compareTo<\/a>, which <em>orders<\/em> versions, this determines which\nversion a user is likely to prefer. In particular, it prioritizes\npre-release versions lower than stable versions, regardless of their\nversion numbers. Pub uses this when determining which version to prefer\nwhen a number of versions are allowed. In that case, it will always\nchoose a stable version when possible.<\/p>\n<p>When used to sort a list, orders in ascending priority so that the\nhighest priority version is <em>last<\/em> in the result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/prioritize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int prioritize(Version a, Version b) {\n  \/\/ Sort all prerelease versions after all normal versions. This way\n  \/\/ the solver will prefer stable packages over unstable ones.\n  if (a.isPreRelease &amp;&amp; !b.isPreRelease) return -1;\n  if (!a.isPreRelease &amp;&amp; b.isPreRelease) return 1;\n\n  return a.compareTo(b);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _text;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.Version",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/Version\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other) {\n  if (other.allows(this)) return other;\n\n  if (other is VersionRange) {\n    if (other.min == this) {\n      return new VersionRange(\n          min: other.min,\n          max: other.max,\n          includeMin: true,\n          includeMax: other.includeMax,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    if (other.max == this) {\n      return new VersionRange(\n          min: other.min,\n          max: other.max,\n          includeMin: other.includeMin,\n          includeMax: true,\n          alwaysIncludeMaxPreRelease: true);\n    }\n  }\n\n  return new VersionConstraint.unionOf([this, other]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "build",
                    "type": "dart:core.List",
                    "types": [],
                    "desc": "<p>The build identifier: \"foo\" in \"1.2.3+foo\".<\/p>\n<p>This is split into a list of components, each of which may be either a\nstring or a non-negative integer. It may also be empty, indicating that\nthis version has no build identifier.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/build.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List build\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "firstPreRelease",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>Returns the first possible pre-release of this version.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/firstPreRelease.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get firstPreRelease =&gt; new Version(major, minor, patch, pre: \"0\");<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-pub_semver_pub_semver\/Version\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt;\n    major ^\n    minor ^\n    patch ^\n    _equality.hash(preRelease) ^\n    _equality.hash(build);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "includeMax",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>If <code>true<\/code>, then <a href=\"package-pub_semver_pub_semver\/Version\/max.html\">max<\/a> is allowed by the range.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/includeMax.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get includeMax =&gt; true;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "includeMin",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>If <code>true<\/code> then <a href=\"package-pub_semver_pub_semver\/Version\/min.html\">min<\/a> is allowed by the range.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/includeMin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get includeMin =&gt; true;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAny",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/isAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isFirstPreRelease",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns whether this is the first possible pre-release of its version.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/isFirstPreRelease.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFirstPreRelease =&gt; preRelease.length == 1 &amp;&amp; preRelease.first == 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isPreRelease",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether or not this is a pre-release version.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/isPreRelease.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isPreRelease =&gt; preRelease.isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "major",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The major version number: \"1\" in \"1.2.3\".<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/major.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int major\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>The maximum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/includeMax.html\">includeMax<\/a> is <code>true<\/code>, this will be the maximum allowed version.\nOtherwise, it will be the lowest version above the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no maximum end and allows\nany version greater than the minimum.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/max.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get max =&gt; this;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "min",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>The minimum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/includeMin.html\">includeMin<\/a> is <code>true<\/code>, this will be the minimum allowed version.\nOtherwise, it will be the highest version below the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no minimum end and allows\nany version less than the maximum.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/min.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get min =&gt; this;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minor",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The minor version number: \"2\" in \"1.2.3\".<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/minor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nextBreaking",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>Gets the next breaking version number that follows this one.<\/p>\n<p>Increments <a href=\"package-pub_semver_pub_semver\/Version\/major.html\">major<\/a> if it's greater than zero, otherwise <a href=\"package-pub_semver_pub_semver\/Version\/minor.html\">minor<\/a>, resets\nsubsequent digits to zero, and strips any <a href=\"package-pub_semver_pub_semver\/Version\/preRelease.html\">preRelease<\/a> or <a href=\"package-pub_semver_pub_semver\/Version\/build.html\">build<\/a>\nsuffix.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/nextBreaking.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextBreaking {\n  if (major == 0) {\n    return _incrementMinor();\n  }\n\n  return _incrementMajor();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nextMajor",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>Gets the next major version number that follows this one.<\/p>\n<p>If this version is a pre-release of a major version release (i.e. the\nminor and patch versions are zero), then it just strips the pre-release\nsuffix. Otherwise, it increments the major version and resets the minor\nand patch.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/nextMajor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextMajor {\n  if (isPreRelease &amp;&amp; minor == 0 &amp;&amp; patch == 0) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementMajor();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nextMinor",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>Gets the next minor version number that follows this one.<\/p>\n<p>If this version is a pre-release of a minor version release (i.e. the\npatch version is zero), then it just strips the pre-release suffix.\nOtherwise, it increments the minor version and resets the patch.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/nextMinor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextMinor {\n  if (isPreRelease &amp;&amp; patch == 0) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementMinor();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nextPatch",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>Gets the next patch version number that follows this one.<\/p>\n<p>If this version is a pre-release, then it just strips the pre-release\nsuffix. Otherwise, it increments the patch version.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/nextPatch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextPatch {\n  if (isPreRelease) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementPatch();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "none",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>No released version: i.e. \"0.0.0\".<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/none.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Version get none =&gt; new Version(0, 0, 0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "patch",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The patch version number: \"3\" in \"1.2.3\".<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/patch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int patch\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "preRelease",
                    "type": "dart:core.List",
                    "types": [],
                    "desc": "<p>The pre-release identifier: \"foo\" in \"1.2.3-foo\".<\/p>\n<p>This is split into a list of components, each of which may be either a\nstring or a non-negative integer. It may also be empty, indicating that\nthis version has no pre-release identifier.<\/p>\n        ",
                    "memberOf": "pub_semver.Version",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/Version\/preRelease.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List preRelease\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-pub_semver_pub_semver\/Version-class.html",
            "desc": "<p>A parsed semantic version number.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Version"
        },
        {
            "name": "pub_semver.VersionConstraint",
            "extends": [],
            "memberOf": "pub_semver",
            "events": [],
            "methods": [
                {
                    "name": "allows",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows <code>version<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "version",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/allows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version version);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/allowsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAny",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/allowsAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionConstraint.compatibleWith",
                    "type": "",
                    "desc": "<p>Creates a version constraint which allows all versions that are\nbackward compatible with <code>version<\/code>.<\/p>\n<p>Versions are considered backward compatible with <code>version<\/code> if they\nare greater than or equal to <code>version<\/code>, but less than the next breaking\nversion (<a href=\"package-pub_semver_pub_semver\/Version\/nextBreaking.html\">Version.nextBreaking<\/a>) of <code>version<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "version",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.compatibleWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.compatibleWith(Version version) =&gt;\n    new CompatibleWithVersionRange(version);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersect",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/intersect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionConstraint.intersection",
                    "type": "",
                    "desc": "<p>Creates a new version constraint that is the intersection of\n<code>constraints<\/code>.<\/p>\n<p>It only allows versions that all of those constraints allow. If\nconstraints is empty, then it returns a VersionConstraint that allows\nall versions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "constraints",
                            "type": "dart:core.Iterable<pub_semver.VersionConstraint>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "pub_semver.VersionConstraint"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.intersection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.intersection(\n    Iterable&lt;VersionConstraint&gt; constraints) {\n  var constraint = new VersionRange();\n  for (var other in constraints) {\n    constraint = constraint.intersect(other);\n  }\n  return constraint;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionConstraint.parse",
                    "type": "",
                    "desc": "<p>Parses a version constraint.<\/p>\n<p>This string is one of:<\/p>\n<ul>\n<li>\"any\". <a href=\"package-pub_semver_pub_semver\/VersionConstraint\/any.html\">any<\/a> version.<\/li>\n<li>\"^\" followed by a version string. Versions compatible with\n(<a href=\"package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.compatibleWith.html\">VersionConstraint.compatibleWith<\/a>) the version.<\/li>\n<li>a series of version parts. Each part can be one of:<ul>\n<li>A version string like <code>1.2.3<\/code>. In other words, anything that can be\nparsed by <a href=\"package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.parse.html\">Version.parse()<\/a>.<\/li>\n<li>A comparison operator (<code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, or <code>&gt;=<\/code>) followed by a\nversion string.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Whitespace is ignored.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>any\n^0.7.2\n^1.0.0-alpha\n1.2.3-alpha\n&lt;=5.1.4\n&gt;2.0.4 &lt;= 2.4.6\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.parse(String text) {\n  var originalText = text;\n\n  skipWhitespace() {\n    text = text.trim();\n  }\n\n  skipWhitespace();\n\n  \/\/ Handle the \"any\" constraint.\n  if (text == \"any\") return any;\n\n  \/\/ Try to parse and consume a version number.\n  Version matchVersion() {\n    var version = START_VERSION.firstMatch(text);\n    if (version == null) return null;\n\n    text = text.substring(version.end);\n    return new Version.parse(version[0]);\n  }\n\n  \/\/ Try to parse and consume a comparison operator followed by a version.\n  VersionRange matchComparison() {\n    var comparison = START_COMPARISON.firstMatch(text);\n    if (comparison == null) return null;\n\n    var op = comparison[0];\n    text = text.substring(comparison.end);\n    skipWhitespace();\n\n    var version = matchVersion();\n    if (version == null) {\n      throw new FormatException('Expected version number after \"$op\" in '\n          '\"$originalText\", got \"$text\".');\n    }\n\n    switch (op) {\n      case '&lt;=':\n        return new VersionRange(max: version, includeMax: true);\n      case '&lt;':\n        return new VersionRange(\n            max: version,\n            includeMax: false,\n            alwaysIncludeMaxPreRelease: true);\n      case '&gt;=':\n        return new VersionRange(min: version, includeMin: true);\n      case '&gt;':\n        return new VersionRange(min: version, includeMin: false);\n    }\n    throw \"Unreachable.\";\n  }\n\n  \/\/ Try to parse the \"^\" operator followed by a version.\n  matchCompatibleWith() {\n    if (!text.startsWith(COMPATIBLE_WITH)) return null;\n\n    text = text.substring(COMPATIBLE_WITH.length);\n    skipWhitespace();\n\n    var version = matchVersion();\n    if (version == null) {\n      throw new FormatException('Expected version number after '\n          '\"$COMPATIBLE_WITH\" in \"$originalText\", got \"$text\".');\n    }\n\n    if (text.isNotEmpty) {\n      throw new FormatException('Cannot include other constraints with '\n          '\"$COMPATIBLE_WITH\" constraint in \"$originalText\".');\n    }\n\n    return new VersionConstraint.compatibleWith(version);\n  }\n\n  var compatibleWith = matchCompatibleWith();\n  if (compatibleWith != null) return compatibleWith;\n\n  Version min;\n  var includeMin = false;\n  Version max;\n  var includeMax = false;\n\n  while (true) {\n    skipWhitespace();\n\n    if (text.isEmpty) break;\n\n    var newRange = matchVersion() ?? matchComparison();\n    if (newRange == null) {\n      throw new FormatException('Could not parse version \"$originalText\". '\n          'Unknown text at \"$text\".');\n    }\n\n    if (newRange.min != null) {\n      if (min == null || newRange.min &gt; min) {\n        min = newRange.min;\n        includeMin = newRange.includeMin;\n      } else if (newRange.min == min &amp;&amp; !newRange.includeMin) {\n        includeMin = false;\n      }\n    }\n\n    if (newRange.max != null) {\n      if (max == null || newRange.max &lt; max) {\n        max = newRange.max;\n        includeMax = newRange.includeMax;\n      } else if (newRange.max == max &amp;&amp; !newRange.includeMax) {\n        includeMax = false;\n      }\n    }\n  }\n\n  if (min == null &amp;&amp; max == null) {\n    throw new FormatException('Cannot parse an empty string.');\n  }\n\n  if (min != null &amp;&amp; max != null) {\n    if (min &gt; max) return VersionConstraint.empty;\n    if (min == max) {\n      if (includeMin &amp;&amp; includeMax) return min;\n      return VersionConstraint.empty;\n    }\n  }\n\n  return new VersionRange(\n      min: min, includeMin: includeMin, max: max, includeMax: includeMax);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionConstraint.unionOf",
                    "type": "",
                    "desc": "<p>Creates a new version constraint that is the union of <code>constraints<\/code>.<\/p>\n<p>It allows any versions that any of those constraints allows. If\n<code>constraints<\/code> is empty, this returns a constraint that allows no versions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionConstraint",
                    "sig": "",
                    "params": [
                        {
                            "name": "constraints",
                            "type": "dart:core.Iterable<pub_semver.VersionConstraint>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "pub_semver.VersionConstraint"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.unionOf.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.unionOf(Iterable&lt;VersionConstraint&gt; constraints) {\n  var flattened = constraints.expand((constraint) {\n    if (constraint.isEmpty) return [];\n    if (constraint is VersionUnion) return constraint.ranges;\n    return [constraint];\n  }).toList();\n\n  if (flattened.isEmpty) return VersionConstraint.empty;\n\n  if (flattened.any((constraint) =&gt; constraint.isAny)) {\n    return VersionConstraint.any;\n  }\n\n  \/\/ Only allow Versions and VersionRanges here so we can more easily reason\n  \/\/ about everything in [flattened]. _EmptyVersions and VersionUnions are\n  \/\/ filtered out above.\n  for (var constraint in flattened) {\n    if (constraint is VersionRange) continue;\n    throw new ArgumentError('Unknown VersionConstraint type $constraint.');\n  }\n\n  flattened.sort();\n\n  var merged = &lt;VersionRange&gt;[];\n  for (var constraint in flattened) {\n    \/\/ Merge this constraint with the previous one, but only if they touch.\n    if (merged.isEmpty ||\n        (!merged.last.allowsAny(constraint) &amp;&amp;\n            !areAdjacent(merged.last, constraint))) {\n      merged.add(constraint);\n    } else {\n      merged[merged.length - 1] = merged.last.union(constraint);\n    }\n  }\n\n  if (merged.length == 1) return merged.single;\n  return new VersionUnion.fromRanges(merged);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "any",
                    "type": "pub_semver.VersionConstraint",
                    "types": [],
                    "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows all versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionConstraint",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static VersionConstraint any = new VersionRange()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "empty",
                    "type": "pub_semver.VersionConstraint",
                    "types": [],
                    "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows no versions -- the empty set.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionConstraint",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/empty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static VersionConstraint empty = const _EmptyVersion()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAny",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionConstraint",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/isAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionConstraint",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionConstraint\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-pub_semver_pub_semver\/VersionConstraint-class.html",
            "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> is a predicate that can determine whether a given\nversion is valid or not.<\/p>\n<p>For example, a \"&gt;= 2.0.0\" constraint allows any version that is \"2.0.0\" or\ngreater. Version objects themselves implement this to match a specific\nversion.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "VersionConstraint"
        },
        {
            "name": "pub_semver.VersionRange",
            "extends": [],
            "memberOf": "pub_semver",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-pub_semver_pub_semver\/VersionRange\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) {\n  if (other is! VersionRange) return false;\n\n  return min == other.min &amp;&amp;\n      max == other.max &amp;&amp;\n      includeMin == other.includeMin &amp;&amp;\n      includeMax == other.includeMax;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionRange",
                    "type": "",
                    "desc": "<p>Creates a new version range from <code>min<\/code> to <code>max<\/code>, either inclusive or\nexclusive.<\/p>\n<p>If it is an error if <code>min<\/code> is greater than <code>max<\/code>.<\/p>\n<p>Either <code>max<\/code> or <code>min<\/code> may be omitted to not clamp the range at that end.\nIf both are omitted, the range allows all versions.<\/p>\n<p>If <code>includeMin<\/code> is <code>true<\/code>, then the minimum end of the range is inclusive.\nLikewise, passing <code>includeMax<\/code> as <code>true<\/code> makes the upper end inclusive.<\/p>\n<p>If <code>alwaysIncludeMaxPreRelease<\/code> is <code>true<\/code>, this will always include\npre-release versions of an exclusive <code>max<\/code>. Otherwise, it will use the\ndefault behavior for pre-release versions of <code>max<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "min",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "max",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "includeMin",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "includeMax",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "alwaysIncludeMaxPreRelease",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/VersionRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionRange(\n    {Version min,\n    Version max,\n    bool includeMin: false,\n    bool includeMax: false,\n    bool alwaysIncludeMaxPreRelease: false}) {\n  if (min != null &amp;&amp; max != null &amp;&amp; min &gt; max) {\n    throw new ArgumentError(\n        'Minimum version (\"$min\") must be less than maximum (\"$max\").');\n  }\n\n  if (!alwaysIncludeMaxPreRelease &amp;&amp;\n      !includeMax &amp;&amp;\n      max != null &amp;&amp;\n      !max.isPreRelease &amp;&amp;\n      max.build.isEmpty &amp;&amp;\n      (min == null ||\n          !min.isPreRelease ||\n          !equalsWithoutPreRelease(min, max))) {\n    max = max.firstPreRelease;\n  }\n\n  return new VersionRange._(min, max, includeMin, includeMax);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allows",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests if <code>other<\/code> falls within this version range.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/allows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version other) {\n  if (min != null) {\n    if (other &lt; min) return false;\n    if (!includeMin &amp;&amp; other == min) return false;\n  }\n\n  if (max != null) {\n    if (other &gt; max) return false;\n    if (!includeMax &amp;&amp; other == max) return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/allowsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other) {\n  if (other.isEmpty) return true;\n  if (other is Version) return allows(other);\n\n  if (other is VersionUnion) {\n    return other.ranges.every((constraint) =&gt; allowsAll(constraint));\n  }\n\n  if (other is VersionRange) {\n    return !allowsLower(other, this) &amp;&amp; !allowsHigher(other, this);\n  }\n\n  throw new ArgumentError('Unknown VersionConstraint type $other.');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAny",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/allowsAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other) {\n  if (other.isEmpty) return false;\n  if (other is Version) return allows(other);\n\n  if (other is VersionUnion) {\n    return other.ranges.any((constraint) =&gt; allowsAny(constraint));\n  }\n\n  if (other is VersionRange) {\n    return !strictlyLower(other, this) &amp;&amp; !strictlyHigher(other, this);\n  }\n\n  throw new ArgumentError('Unknown VersionConstraint type $other.');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compareTo",
                    "type": "dart:core.int",
                    "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionRange",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/compareTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(VersionRange other) {\n  if (min == null) {\n    if (other.min == null) return _compareMax(other);\n    return -1;\n  } else if (other.min == null) {\n    return 1;\n  }\n\n  var result = min.compareTo(other.min);\n  if (result != 0) return result;\n  if (includeMin != other.includeMin) return includeMin ? -1 : 1;\n\n  return _compareMax(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other) {\n  if (other.isEmpty) return this;\n\n  if (other is Version) {\n    if (!allows(other)) return this;\n\n    if (other == min) {\n      if (!includeMin) return this;\n      return new VersionRange(\n          min: min,\n          max: max,\n          includeMin: false,\n          includeMax: includeMax,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    if (other == max) {\n      if (!includeMax) return this;\n      return new VersionRange(\n          min: min,\n          max: max,\n          includeMin: includeMin,\n          includeMax: false,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    return new VersionUnion.fromRanges([\n      new VersionRange(\n          min: min,\n          max: other,\n          includeMin: includeMin,\n          includeMax: false,\n          alwaysIncludeMaxPreRelease: true),\n      new VersionRange(\n          min: other,\n          max: max,\n          includeMin: false,\n          includeMax: includeMax,\n          alwaysIncludeMaxPreRelease: true)\n    ]);\n  } else if (other is VersionRange) {\n    if (!allowsAny(other)) return this;\n\n    VersionRange before;\n    if (!allowsLower(this, other)) {\n      before = null;\n    } else if (min == other.min) {\n      assert(includeMin &amp;&amp; !other.includeMin);\n      assert(min != null);\n      before = min;\n    } else {\n      before = new VersionRange(\n          min: min,\n          max: other.min,\n          includeMin: includeMin,\n          includeMax: !other.includeMin,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    VersionRange after;\n    if (!allowsHigher(this, other)) {\n      after = null;\n    } else if (max == other.max) {\n      assert(includeMax &amp;&amp; !other.includeMax);\n      assert(max != null);\n      after = max;\n    } else {\n      after = new VersionRange(\n          min: other.max,\n          max: max,\n          includeMin: !other.includeMax,\n          includeMax: includeMax,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    if (before == null &amp;&amp; after == null) return VersionConstraint.empty;\n    if (before == null) return after;\n    if (after == null) return before;\n    return new VersionUnion.fromRanges([before, after]);\n  } else if (other is VersionUnion) {\n    var ranges = &lt;VersionRange&gt;[];\n    var current = this;\n\n    for (var range in other.ranges) {\n      \/\/ Skip any ranges that are strictly lower than [current].\n      if (strictlyLower(range, current)) continue;\n\n      \/\/ If we reach a range strictly higher than [current], no more ranges\n      \/\/ will be relevant so we can bail early.\n      if (strictlyHigher(range, current)) break;\n\n      var difference = current.difference(range);\n      if (difference.isEmpty) {\n        return VersionConstraint.empty;\n      } else if (difference is VersionUnion) {\n        \/\/ If [range] split [current] in half, we only need to continue\n        \/\/ checking future ranges against the latter half.\n        assert(difference.ranges.length == 2);\n        ranges.add(difference.ranges.first);\n        current = difference.ranges.last;\n      } else {\n        current = difference as VersionRange;\n      }\n    }\n\n    if (ranges.isEmpty) return current;\n    return new VersionUnion.fromRanges(ranges..add(current));\n  }\n\n  throw new ArgumentError('Unknown VersionConstraint type $other.');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersect",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/intersect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other) {\n  if (other.isEmpty) return other;\n  if (other is VersionUnion) return other.intersect(this);\n\n  \/\/ A range and a Version just yields the version if it's in the range.\n  if (other is Version) {\n    return allows(other) ? other : VersionConstraint.empty;\n  }\n\n  if (other is VersionRange) {\n    \/\/ Intersect the two ranges.\n    Version intersectMin;\n    bool intersectIncludeMin;\n    if (allowsLower(this, other)) {\n      if (strictlyLower(this, other)) return VersionConstraint.empty;\n      intersectMin = other.min;\n      intersectIncludeMin = other.includeMin;\n    } else {\n      if (strictlyLower(other, this)) return VersionConstraint.empty;\n      intersectMin = this.min;\n      intersectIncludeMin = this.includeMin;\n    }\n\n    Version intersectMax;\n    bool intersectIncludeMax;\n    if (allowsHigher(this, other)) {\n      intersectMax = other.max;\n      intersectIncludeMax = other.includeMax;\n    } else {\n      intersectMax = this.max;\n      intersectIncludeMax = this.includeMax;\n    }\n\n    if (intersectMin == null &amp;&amp; intersectMax == null) {\n      \/\/ Open range.\n      return new VersionRange();\n    }\n\n    \/\/ If the range is just a single version.\n    if (intersectMin == intersectMax) {\n      \/\/ Because we already verified that the lower range isn't strictly\n      \/\/ lower, there must be some overlap.\n      assert(intersectIncludeMin &amp;&amp; intersectIncludeMax);\n      return intersectMin;\n    }\n\n    \/\/ If we got here, there is an actual range.\n    return new VersionRange(\n        min: intersectMin,\n        max: intersectMax,\n        includeMin: intersectIncludeMin,\n        includeMax: intersectIncludeMax,\n        alwaysIncludeMaxPreRelease: true);\n  }\n\n  throw new ArgumentError('Unknown VersionConstraint type $other.');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var buffer = new StringBuffer();\n\n  if (min != null) {\n    buffer.write(includeMin ? '&gt;=' : '&gt;');\n    buffer.write(min);\n  }\n\n  if (max != null) {\n    if (min != null) buffer.write(' ');\n    if (includeMax) {\n      buffer.write('&lt;=');\n      buffer.write(max);\n    } else {\n      buffer.write('&lt;');\n      if (max.isFirstPreRelease) {\n        \/\/ Since `\"&lt;$max\"` would parse the same as `\"&lt;$max-0\"`, we just emit\n        \/\/ `&lt;$max` to avoid confusing \"-0\" suffixes.\n        buffer.write(\"${max.major}.${max.minor}.${max.patch}\");\n      } else {\n        buffer.write(max);\n\n        \/\/ If `\"&gt;=$min &lt;$max\"` would parse as `\"&gt;=$min &lt;$max-0\"`, add `-*` to\n        \/\/ indicate that actually does allow pre-release versions.\n        var minIsPreReleaseOfMax = min != null &amp;&amp;\n            min.isPreRelease &amp;&amp;\n            equalsWithoutPreRelease(min, max);\n        if (!max.isPreRelease &amp;&amp; max.build.isEmpty &amp;&amp; !minIsPreReleaseOfMax) {\n          buffer.write(\"-\u221e\");\n        }\n      }\n    }\n  }\n\n  if (min == null &amp;&amp; max == null) buffer.write('any');\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other) {\n  if (other is Version) {\n    if (allows(other)) return this;\n\n    if (other == min) {\n      return new VersionRange(\n          min: this.min,\n          max: this.max,\n          includeMin: true,\n          includeMax: this.includeMax,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    if (other == max) {\n      return new VersionRange(\n          min: this.min,\n          max: this.max,\n          includeMin: this.includeMin,\n          includeMax: true,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    return new VersionConstraint.unionOf([this, other]);\n  }\n\n  if (other is VersionRange) {\n    \/\/ If the two ranges don't overlap, we won't be able to create a single\n    \/\/ VersionRange for both of them.\n    var edgesTouch = (max == other.min &amp;&amp; (includeMax || other.includeMin)) ||\n        (min == other.max &amp;&amp; (includeMin || other.includeMax));\n    if (!edgesTouch &amp;&amp; !allowsAny(other)) {\n      return new VersionConstraint.unionOf([this, other]);\n    }\n\n    Version unionMin;\n    bool unionIncludeMin;\n    if (allowsLower(this, other)) {\n      unionMin = this.min;\n      unionIncludeMin = this.includeMin;\n    } else {\n      unionMin = other.min;\n      unionIncludeMin = other.includeMin;\n    }\n\n    Version unionMax;\n    bool unionIncludeMax;\n    if (allowsHigher(this, other)) {\n      unionMax = this.max;\n      unionIncludeMax = this.includeMax;\n    } else {\n      unionMax = other.max;\n      unionIncludeMax = other.includeMax;\n    }\n\n    return new VersionRange(\n        min: unionMin,\n        max: unionMax,\n        includeMin: unionIncludeMin,\n        includeMax: unionIncludeMax,\n        alwaysIncludeMaxPreRelease: true);\n  }\n\n  return new VersionConstraint.unionOf([this, other]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-pub_semver_pub_semver\/VersionRange\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-pub_semver_pub_semver\/VersionRange\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/VersionRange\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-pub_semver_pub_semver\/VersionRange\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-pub_semver_pub_semver\/VersionRange\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-pub_semver_pub_semver\/VersionRange\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt;\n    min.hashCode ^\n    (max.hashCode * 3) ^\n    (includeMin.hashCode * 5) ^\n    (includeMax.hashCode * 7);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "includeMax",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>If <code>true<\/code>, then <a href=\"package-pub_semver_pub_semver\/VersionRange\/max.html\">max<\/a> is allowed by the range.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/includeMax.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool includeMax\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "includeMin",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>If <code>true<\/code> then <a href=\"package-pub_semver_pub_semver\/VersionRange\/min.html\">min<\/a> is allowed by the range.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/includeMin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool includeMin\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAny",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/isAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny =&gt; min == null &amp;&amp; max == null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>The maximum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/VersionRange\/includeMax.html\">includeMax<\/a> is <code>true<\/code>, this will be the maximum allowed version.\nOtherwise, it will be the lowest version above the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no maximum end and allows\nany version greater than the minimum.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/max.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Version max\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "min",
                    "type": "pub_semver.Version",
                    "types": [],
                    "desc": "<p>The minimum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/VersionRange\/includeMin.html\">includeMin<\/a> is <code>true<\/code>, this will be the minimum allowed version.\nOtherwise, it will be the highest version below the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no minimum end and allows\nany version less than the maximum.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionRange",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionRange\/min.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Version min\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-pub_semver_pub_semver\/VersionRange-class.html",
            "desc": "<p>Constrains versions to a fall within a given range.<\/p>\n<p>If there is a minimum, then this only allows versions that are at that\nminimum or greater. If there is a maximum, then only versions less than\nthat are allowed. In other words, this allows <code>&gt;= min, &lt; max<\/code>.<\/p>\n<p>Version ranges are ordered first by their lower bounds, then by their upper\nbounds. For example, <code>&gt;=1.0.0 &lt;2.0.0<\/code> is before <code>&gt;=1.5.0 &lt;2.0.0<\/code> is before\n<code>&gt;=1.5.0 &lt;3.0.0<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "VersionRange"
        },
        {
            "name": "pub_semver.VersionUnion",
            "extends": [],
            "memberOf": "pub_semver",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-pub_semver_pub_semver\/VersionUnion\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) {\n  if (other is! VersionUnion) return false;\n  return const ListEquality().equals(ranges, other.ranges);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allows",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows <code>version<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "version",
                            "type": "pub_semver.Version",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/allows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version version) =&gt;\n    ranges.any((constraint) =&gt; constraint.allows(version));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/allowsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    if (ourRanges.current.allowsAll(theirRanges.current)) {\n      theirRanges.moveNext();\n    } else {\n      ourRanges.moveNext();\n    }\n  }\n\n  \/\/ If our ranges have allowed all of their ranges, we'll have consumed all\n  \/\/ of them.\n  return theirRanges.current == null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allowsAny",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/allowsAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    if (ourRanges.current.allowsAny(theirRanges.current)) {\n      return true;\n    }\n\n    \/\/ Move the constraint with the lower max value forward. This ensures that\n    \/\/ we keep both lists in sync as much as possible.\n    if (allowsHigher(theirRanges.current, ourRanges.current)) {\n      ourRanges.moveNext();\n    } else {\n      theirRanges.moveNext();\n    }\n  }\n\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  var newRanges = &lt;VersionRange&gt;[];\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  var current = ourRanges.current;\n\n  theirNextRange() {\n    if (theirRanges.moveNext()) return true;\n\n    \/\/ If there are no more of their ranges, none of the rest of our ranges\n    \/\/ need to be subtracted so we can add them as-is.\n    newRanges.add(current);\n    while (ourRanges.moveNext()) {\n      newRanges.add(ourRanges.current);\n    }\n    return false;\n  }\n\n  ourNextRange({bool includeCurrent: true}) {\n    if (includeCurrent) newRanges.add(current);\n    if (!ourRanges.moveNext()) return false;\n    current = ourRanges.current;\n    return true;\n  }\n\n  while (true) {\n    \/\/ If the current ranges are disjoint, move the lowest one forward.\n    if (strictlyLower(theirRanges.current, current)) {\n      if (!theirNextRange()) break;\n      continue;\n    }\n\n    if (strictlyHigher(theirRanges.current, current)) {\n      if (!ourNextRange()) break;\n      continue;\n    }\n\n    \/\/ If we're here, we know [theirRanges.current] overlaps [current].\n    var difference = current.difference(theirRanges.current);\n    if (difference is VersionUnion) {\n      \/\/ If their range split [current] in half, we only need to continue\n      \/\/ checking future ranges against the latter half.\n      assert(difference.ranges.length == 2);\n      newRanges.add(difference.ranges.first);\n      current = difference.ranges.last;\n\n      \/\/ Since their range split [current], it definitely doesn't allow higher\n      \/\/ versions, so we should move their ranges forward.\n      if (!theirNextRange()) break;\n    } else if (difference.isEmpty) {\n      if (!ourNextRange(includeCurrent: false)) break;\n    } else {\n      current = difference as VersionRange;\n\n      \/\/ Move the constraint with the lower max value forward. This ensures\n      \/\/ that we keep both lists in sync as much as possible, and that large\n      \/\/ ranges have a chance to subtract or be subtracted by multiple small\n      \/\/ ranges that they contain.\n      if (allowsHigher(current, theirRanges.current)) {\n        if (!theirNextRange()) break;\n      } else {\n        if (!ourNextRange()) break;\n      }\n    }\n  }\n\n  if (newRanges.isEmpty) return VersionConstraint.empty;\n  if (newRanges.length == 1) return newRanges.single;\n  return new VersionUnion.fromRanges(newRanges);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "VersionUnion.fromRanges",
                    "type": "",
                    "desc": "<p>Creates a union from a list of ranges with no pre-processing.<\/p>\n<p>It's up to the caller to ensure that the invariants described in <code>ranges<\/code>\nare maintained. They are not verified by this constructor. To\nautomatically ensure that they're maintained, use <a href=\"package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.unionOf.html\">new\nVersionConstraint.unionOf<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "ranges",
                            "type": "dart:core.List<pub_semver.VersionRange>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "pub_semver.VersionRange"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/VersionUnion.fromRanges.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionUnion.fromRanges(this.ranges);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersect",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/intersect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  var newRanges = &lt;VersionRange&gt;[];\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    var intersection = ourRanges.current.intersect(theirRanges.current);\n\n    if (!intersection.isEmpty) newRanges.add(intersection);\n\n    \/\/ Move the constraint with the lower max value forward. This ensures that\n    \/\/ we keep both lists in sync as much as possible, and that large ranges\n    \/\/ have a chance to match multiple small ranges that they contain.\n    if (allowsHigher(theirRanges.current, ourRanges.current)) {\n      ourRanges.moveNext();\n    } else {\n      theirRanges.moveNext();\n    }\n  }\n\n  if (newRanges.isEmpty) return VersionConstraint.empty;\n  if (newRanges.length == 1) return newRanges.single;\n\n  return new VersionUnion.fromRanges(newRanges);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; ranges.join(\" or \");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "pub_semver.VersionUnion",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "pub_semver.VersionConstraint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other) =&gt;\n    new VersionConstraint.unionOf([this, other]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-pub_semver_pub_semver\/VersionUnion\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionUnion",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; const ListEquality().hash(ranges);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAny",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionUnion",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/isAny.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
                    "memberOf": "pub_semver.VersionUnion",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ranges",
                    "type": "dart:core.List<pub_semver.VersionRange>",
                    "types": [
                        "dart:core.List",
                        "pub_semver.VersionRange"
                    ],
                    "desc": "<p>The constraints that compose this union.<\/p>\n<p>This list has two invariants:<\/p>\n<ul>\n<li>Its contents are sorted using the standard ordering of <a href=\"package-pub_semver_pub_semver\/VersionRange-class.html\">VersionRange<\/a>s.<\/li>\n<li>Its contents are disjoint and non-adjacent. In other words, for any two\nconstraints next to each other in the list, there's some version between\nthose constraints that they don't match.<\/li>\n<\/ul>",
                    "memberOf": "pub_semver.VersionUnion",
                    "isConstant": false,
                    "href": "package-pub_semver_pub_semver\/VersionUnion\/ranges.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;VersionRange&gt; ranges\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-pub_semver_pub_semver\/VersionUnion-class.html",
            "desc": "<p>A version constraint representing a union of multiple disjoint version\nranges.<\/p>\n<p>An instance of this will only be created if the version can't be represented\nas a non-compound value.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "VersionUnion"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}