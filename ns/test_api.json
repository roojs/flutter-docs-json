{
    "class": [
        {
            "desc": "<p>An annotation for platform-specific customizations for a test suite.<\/p>\n<p>See <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-specific-configuration\">the README<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/OnPlatform-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.OnPlatform",
            "shortname": "OnPlatform",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OnPlatform(this.annotationsByPlatform);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/OnPlatform\/OnPlatform.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "OnPlatform",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.OnPlatform",
                    "params": [
                        {
                            "name": "annotationsByPlatform",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, dynamic&gt; annotationsByPlatform\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/OnPlatform\/annotationsByPlatform.html",
                    "name": "annotationsByPlatform",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.OnPlatform",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An annotation for marking a test to be retried.<\/p>\n<p>A test with retries enabled will be re-run if it fails for a reason\nother than <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/Retry-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.Retry",
            "shortname": "Retry",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Marks a test to be retried.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Retry(this.count);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Retry\/Retry.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Retry",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.Retry",
                    "params": [
                        {
                            "name": "count",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The number of times the test will be retried.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int count\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Retry\/count.html",
                    "name": "count",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Retry",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An annotation for marking a test suite as skipped.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/Skip-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.Skip",
            "shortname": "Skip",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Marks a suite as skipped.<\/p>\n<p>If <code>reason<\/code> is passed, it's included in the test output as the reason the\ntest is skipped.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Skip([this.reason]);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Skip\/Skip.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Skip",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.Skip",
                    "params": [
                        {
                            "name": "reason",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The reason the test suite is skipped, or <code>null<\/code> if no reason is given.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String reason\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Skip\/reason.html",
                    "name": "reason",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Skip",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A matcher that matches events from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s or <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>s.<\/p>\n<p>Stream matchers are designed to make it straightforward to create complex\nexpectations for streams, and to interleave expectations with the rest of a\ntest. They can be used on a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> to match all events it emits:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(stream, emitsInOrder([\n  \/\/ Values match individual events.\n  \"Ready.\",\n\n  \/\/ Matchers also run against individual events.\n  startsWith(\"Loading took\"),\n\n  \/\/ Stream matchers can be nested. This asserts that one of two events are\n  \/\/ emitted after the \"Loading took\" line.\n  emitsAnyOf([\"Succeeded!\", \"Failed!\"]),\n\n  \/\/ By default, more events are allowed after the matcher finishes\n  \/\/ matching. This asserts instead that the stream emits a done event and\n  \/\/ nothing else.\n  emitsDone\n]));\n<\/code><\/pre>\n<p>It can also match a <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>, in which case it consumes the matched\nevents. The call to <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the\nmatcher is done matching. You can <code>await<\/code> this to consume different events\nat different times:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var stdout = new StreamQueue(stdoutLineStream);\n\n\/\/ Ignore lines from the process until it's about to emit the URL.\nawait expect(stdout, emitsThrough(\"WebSocket URL:\"));\n\n\/\/ Parse the next line as a URL.\nvar url = Uri.parse(await stdout.next);\nexpect(url.host, equals('localhost'));\n\n\/\/ You can match against the same StreamQueue multiple times.\nawait expect(stdout, emits(\"Waiting for connection...\"));\n<\/code><\/pre>\n<p>Users can call <a href=\"package-test_api_test_api\/StreamMatcher\/StreamMatcher.html\">new StreamMatcher<\/a> to create custom matchers.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/StreamMatcher-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.StreamMatcher",
            "shortname": "StreamMatcher",
            "extends": [
                "matcher.Matcher",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> described by <code>description<\/code> that matches\nevents with <code>matchQueue<\/code>.<\/p>\n<p>The <code>matchQueue<\/code> callback is used to implement <a href=\"package-test_api_test_api\/StreamMatcher\/matchQueue.html\">StreamMatcher.matchQueue<\/a>,\nand should follow all the guarantees of that method. In particular:<\/p>\n<ul>\n<li>If it matches successfully, it should return <code>null<\/code> and possibly consume\nevents.<\/li>\n<li>If it fails to match, consume no events and return a description of the\nfailure.<\/li>\n<li>The description should be in past tense.<\/li>\n<li>The description should be gramatically valid when used after \"the\nstream\"\u2014\"emitted the wrong events\", for example.<\/li>\n<\/ul>\n<p>The <code>matchQueue<\/code> callback may return the empty string to indicate a\nfailure if it has no information to add beyond the description of the\nfailure and the events actually emitted by the stream.<\/p>\n<p>The <code>description<\/code> should be in the subjunctive mood. This means that it\nshould be grammatically valid when used after the word \"should\". For\nexample, it might be \"emit the right events\".<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamMatcher(\n        Future&lt;String&gt; matchQueue(StreamQueue queue), String description) =\n    _StreamMatcher;<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/StreamMatcher\/StreamMatcher.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamMatcher",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.StreamMatcher",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "queue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "async.StreamQueue"
                        }
                    ]
                },
                {
                    "desc": "<p>Tries to match events emitted by <code>queue<\/code>.<\/p>\n<p>If this matches successfully, it consumes the matching events from <code>queue<\/code>\nand returns <code>null<\/code>.<\/p>\n<p>If this fails to match, it doesn't consume any events and returns a\ndescription of the failure. This description is in the past tense, and\ncould grammatically be used after \"the stream\". For example, it might\nreturn \"emitted the wrong events\".<\/p>\n<p>The description string may also be empty, which indicates that the\nmatcher's description and the events actually emitted by the stream are\nenough to understand the failure.<\/p>\n<p>If the queue emits an error, that error is re-thrown unless otherwise\nindicated by the matcher.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; matchQueue(StreamQueue queue);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/StreamMatcher\/matchQueue.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:core.String>",
                    "name": "matchQueue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.StreamMatcher",
                    "params": [
                        {
                            "name": "queue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "async.StreamQueue"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The description of this matcher.<\/p>\n<p>This is in the subjunctive mood, which means it can be used after the word\n\"should\". For example, it might be \"emit the right events\".<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/StreamMatcher\/description.html",
                    "name": "description",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.StreamMatcher",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An annotation for applying a set of user-defined tags to a test suite.<\/p>\n<p>See <a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/README.md#tagging-tests\">the documentation on tagging tests<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/Tags-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.Tags",
            "shortname": "Tags",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Applies a set of user-defined tags to a test suite.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Tags(this._tags);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Tags\/Tags.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Tags",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.Tags",
                    "params": [
                        {
                            "name": "_tags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The tags for the test suite.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; get tags =&gt; _tags.toSet();<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Tags\/tags.html",
                    "name": "tags",
                    "isDeprecated": false,
                    "type": "dart:core.Set<dart:core.String>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Tags",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An exception thrown when a test assertion fails.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/TestFailure-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.TestFailure",
            "shortname": "TestFailure",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestFailure(this.message);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/TestFailure\/TestFailure.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TestFailure",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.TestFailure",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; message;<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/TestFailure\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.TestFailure",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/TestFailure\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.TestFailure",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An annotation indicating which platforms a test suite supports.<\/p>\n<p>For the full syntax of <a href=\"package-test_api_test_api\/TestOn\/expression.html\">expression<\/a>, see <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">the README<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/TestOn-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.TestOn",
            "shortname": "TestOn",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TestOn(this.expression);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/TestOn\/TestOn.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TestOn",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.TestOn",
                    "params": [
                        {
                            "name": "expression",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The expression specifying the platform.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String expression\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/TestOn\/expression.html",
                    "name": "expression",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.TestOn",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Use the <a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a> function instead.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/Throws-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.Throws",
            "shortname": "Throws",
            "extends": [
                "matcher.Matcher",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Throws([Matcher matcher]) : this._matcher = matcher;<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Throws\/Throws.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Throws",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "params": [
                        {
                            "name": "matcher",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "matcher.Matcher"
                        }
                    ]
                },
                {
                    "desc": "<p>Builds a textual description of the matcher.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describe(Description description) {\n  if (_matcher == null) {\n    return description.add(\"throws\");\n  } else {\n    return description.add('throws ').addDescriptionOf(_matcher);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Throws\/describe.html",
                    "isDeprecated": false,
                    "type": "matcher.Description",
                    "name": "describe",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "matcher.Description"
                        }
                    ]
                },
                {
                    "desc": "<p>Builds a textual description of a specific mismatch.<\/p>\n<p><code>item<\/code> is the value that was tested by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>; <code>matchState<\/code> is\nthe <a href=\"dart-core\/Map-class.html\">Map<\/a> that was passed to and supplemented by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>\nwith additional information about the mismatch, and <code>mismatchDescription<\/code>\nis the <a href=\"package-matcher_matcher\/Description-class.html\">Description<\/a> that is being built to describe the mismatch.<\/p>\n<p>A few matchers make use of the <code>verbose<\/code> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describeMismatch(\n        item, Description description, Map matchState, bool verbose) =&gt;\n    StringDescription(matchState[this] as String);<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Throws\/describeMismatch.html",
                    "isDeprecated": false,
                    "type": "matcher.Description",
                    "name": "describeMismatch",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "matcher.Description"
                        },
                        {
                            "name": "item",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "matchState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "verbose",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>null<\/code> if this matches <code>item<\/code>, or a <a href=\"dart-core\/String-class.html\">String<\/a> description of the\nfailure if it doesn't match.<\/p>\n<p>This can return a <a href=\"dart-async\/Future-class.html\">Future<\/a> or a synchronous value. If it returns a\n<a href=\"dart-async\/Future-class.html\">Future<\/a>, neither <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> nor the test will complete until that <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes.<\/p>\n<p>If this returns a <a href=\"dart-core\/String-class.html\">String<\/a> synchronously, <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> will synchronously\nthrow a <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> and <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a> will synchronusly return <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/*FutureOr&lt;String&gt;*\/ matchAsync(item) {\n  if (item is! Function &amp;&amp; item is! Future) {\n    return \"was not a Function or Future\";\n  }\n\n  if (item is Future) {\n    return item.then((value) =&gt; indent(prettyPrint(value), first: 'emitted '),\n        onError: _check);\n  }\n\n  try {\n    var value = item();\n    if (value is Future) {\n      return value.then(\n          (value) =&gt; indent(prettyPrint(value),\n              first: 'returned a Future that emitted '),\n          onError: _check);\n    }\n\n    return indent(prettyPrint(value), first: 'returned ');\n  } catch (error, trace) {\n    return _check(error, trace);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Throws\/matchAsync.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "matchAsync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "params": [
                        {
                            "name": "item",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Does the matching of the actual vs expected values.<\/p>\n<p><code>item<\/code> is the actual value. <code>matchState<\/code> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a href=\"package-test_api_test_api\/Throws\/describeMismatch.html\">describeMismatch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(item, Map matchState) {\n  var result = matchAsync(item);\n  expect(result,\n      anyOf([equals(null), TypeMatcher&lt;Future&gt;(), TypeMatcher&lt;String&gt;()]),\n      reason: \"matchAsync() may only return a String, a Future, or null.\");\n\n  if (result is Future) {\n    Invoker.current.addOutstandingCallback();\n    result.then((realResult) {\n      if (realResult != null) {\n        \/\/ ignore: deprecated_member_use\n        fail(formatFailure(this, item, realResult as String));\n      }\n      Invoker.current.removeOutstandingCallback();\n    });\n  } else if (result is String) {\n    matchState[this] = result;\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Throws\/matches.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "matches",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "params": [
                        {
                            "name": "item",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "matchState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A class representing a modification to the default timeout for a test.<\/p>\n<p>By default, a test will time out after 30 seconds. With <a href=\"package-test_api_test_api\/Timeout\/Timeout.html\">new Timeout<\/a>, that\ncan be overridden entirely; with <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">new Timeout.factor<\/a>, it can be scaled\nrelative to the default.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-test_api_test_api\/Timeout-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "test_api",
            "name": "test_api.Timeout",
            "shortname": "Timeout",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Declares an absolute timeout that overrides the default.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Timeout(this.duration) : scaleFactor = null;<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Timeout\/Timeout.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Timeout",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "params": [
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"dart-core\/Duration-class.html\">Duration<\/a> from applying <a href=\"package-test_api_test_api\/Timeout-class.html\">this<\/a> to <code>base<\/code>.<\/p>\n<p>If this is <a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">none<\/a>, returns <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Duration apply(Duration base) {\n  if (this == none) return null;\n  return duration == null ? base * scaleFactor : duration;\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Timeout\/apply.html",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "name": "apply",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a> that merges <a href=\"package-test_api_test_api\/Timeout-class.html\">this<\/a> with <code>other<\/code>.<\/p>\n<p><a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a> takes precedence over everything. If timeout is\n<a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a> and <code>other<\/code> declares a <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a>, that takes precedence.\nOtherwise, this timeout's <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a> or <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">factor<\/a> are multiplied by\n<code>other<\/code>'s <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">factor<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Timeout merge(Timeout other) {\n  if (this == none || other == none) return none;\n  if (other.duration != null) return Timeout(other.duration);\n  if (duration != null) return Timeout(duration * other.scaleFactor);\n  return Timeout.factor(scaleFactor * other.scaleFactor);\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Timeout\/merge.html",
                    "isDeprecated": false,
                    "type": "test_api.Timeout",
                    "name": "merge",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "test_api.Timeout"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  if (duration != null) return duration.toString();\n  if (scaleFactor != null) return \"${scaleFactor}x\";\n  return \"none\";\n}<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Timeout\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The timeout duration.<\/p>\n<p>If set, this overrides the default duration entirely. It's <code>null<\/code> for\ntimeouts with a non-null <a href=\"package-test_api_test_api\/Timeout\/scaleFactor.html\">scaleFactor<\/a> and for <a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Timeout\/duration.html",
                    "name": "duration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Timeout",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-test_api_test_api\/Timeout\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; duration.hashCode ^ 5 * scaleFactor.hashCode;<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Timeout\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Timeout",
                    "params": []
                },
                {
                    "desc": "<p>A constant indicating that a test should never time out.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const none = Timeout._none()\n\n<\/code><\/pre>\n    ",
                    "href": "package-test_api_test_api\/Timeout\/none-constant.html",
                    "name": "none",
                    "isDeprecated": false,
                    "type": "test_api.Timeout",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "test_api.Timeout",
                    "params": []
                },
                {
                    "desc": "<p>The timeout factor.<\/p>\n<p>The default timeout will be multiplied by this to get the new timeout.\nThus a factor of 2 means that the test will take twice as long to time\nout, and a factor of 0.5 means that it will time out twice as quickly.<\/p>\n<p>This is <code>null<\/code> for timeouts with a non-null <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a> and for\n<a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num scaleFactor\n\n<\/code><\/pre>\n        ",
                    "href": "package-test_api_test_api\/Timeout\/scaleFactor.html",
                    "name": "scaleFactor",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "test_api.Timeout",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}