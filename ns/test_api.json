{
    "name": "test_api",
    "href": "package-test_api_test_api\/package-test_api_test_api-library.html",
    "cn": [
        {
            "name": "test_api.ErrorFormatter",
            "type": "dart:core.String",
            "desc": "<p>The type used for functions that can be used to build up error reports\nupon failures in <a href=\"package-test_api_test_api\/expect.html\">expect<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "matcher.Matcher",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matchState",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "verbose",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/ErrorFormatter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Will be removed in 0.13.0.\")\ntypedef String ErrorFormatter(\n    actual, Matcher matcher, String reason, Map matchState, bool verbose);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "test_api.Func0",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func0.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func0&lt;T&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func1",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func1&lt;T, A&gt;([A a]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func2",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func2&lt;T, A, B&gt;([A a, B b]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func3",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func3&lt;T, A, B, C&gt;([A a, B b, C c]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func4",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func4.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func4&lt;T, A, B, C, D&gt;([A a, B b, C c, D d]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func5",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func5.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func5&lt;T, A, B, C, D, E&gt;([A a, B b, C c, D d, E e]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.Func6",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/Func6.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef T Func6&lt;T, A, B, C, D, E, F&gt;([A a, B b, C c, D d, E e, F f]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "test_api.OnPlatform",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "OnPlatform",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "test_api.OnPlatform",
                    "sig": "",
                    "params": [
                        {
                            "name": "annotationsByPlatform",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/OnPlatform\/OnPlatform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OnPlatform(this.annotationsByPlatform);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "annotationsByPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ],
                    "desc": "",
                    "memberOf": "test_api.OnPlatform",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/OnPlatform\/annotationsByPlatform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, dynamic&gt; annotationsByPlatform\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/OnPlatform-class.html",
            "desc": "<p>An annotation for platform-specific customizations for a test suite.<\/p>\n<p>See <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-specific-configuration\">the README<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "OnPlatform"
        },
        {
            "name": "test_api.Retry",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "Retry",
                    "type": "",
                    "desc": "<p>Marks a test to be retried.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Retry",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Retry\/Retry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Retry(this.count);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of times the test will be retried.<\/p>\n        ",
                    "memberOf": "test_api.Retry",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Retry\/count.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int count\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/Retry-class.html",
            "desc": "<p>An annotation for marking a test to be retried.<\/p>\n<p>A test with retries enabled will be re-run if it fails for a reason\nother than <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Retry"
        },
        {
            "name": "test_api.Skip",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "Skip",
                    "type": "",
                    "desc": "<p>Marks a suite as skipped.<\/p>\n<p>If <code>reason<\/code> is passed, it's included in the test output as the reason the\ntest is skipped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Skip",
                    "sig": "",
                    "params": [
                        {
                            "name": "reason",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Skip\/Skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Skip([this.reason]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The reason the test suite is skipped, or <code>null<\/code> if no reason is given.<\/p>\n        ",
                    "memberOf": "test_api.Skip",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Skip\/reason.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String reason\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/Skip-class.html",
            "desc": "<p>An annotation for marking a test suite as skipped.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Skip"
        },
        {
            "name": "test_api.StreamMatcher",
            "extends": [
                "matcher.Matcher",
                "dart:core.Object"
            ],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "StreamMatcher",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> described by <code>description<\/code> that matches\nevents with <code>matchQueue<\/code>.<\/p>\n<p>The <code>matchQueue<\/code> callback is used to implement <a href=\"package-test_api_test_api\/StreamMatcher\/matchQueue.html\">StreamMatcher.matchQueue<\/a>,\nand should follow all the guarantees of that method. In particular:<\/p>\n<ul>\n<li>If it matches successfully, it should return <code>null<\/code> and possibly consume\nevents.<\/li>\n<li>If it fails to match, consume no events and return a description of the\nfailure.<\/li>\n<li>The description should be in past tense.<\/li>\n<li>The description should be gramatically valid when used after \"the\nstream\"\u2014\"emitted the wrong events\", for example.<\/li>\n<\/ul>\n<p>The <code>matchQueue<\/code> callback may return the empty string to indicate a\nfailure if it has no information to add beyond the description of the\nfailure and the events actually emitted by the stream.<\/p>\n<p>The <code>description<\/code> should be in the subjunctive mood. This means that it\nshould be grammatically valid when used after the word \"should\". For\nexample, it might be \"emit the right events\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.StreamMatcher",
                    "sig": "",
                    "params": [
                        {
                            "name": "queue",
                            "type": "async.StreamQueue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "queue",
                            "type": "async.StreamQueue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/StreamMatcher\/StreamMatcher.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamMatcher(\n        Future&lt;String&gt; matchQueue(StreamQueue queue), String description) =\n    _StreamMatcher;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "matchQueue",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Tries to match events emitted by <code>queue<\/code>.<\/p>\n<p>If this matches successfully, it consumes the matching events from <code>queue<\/code>\nand returns <code>null<\/code>.<\/p>\n<p>If this fails to match, it doesn't consume any events and returns a\ndescription of the failure. This description is in the past tense, and\ncould grammatically be used after \"the stream\". For example, it might\nreturn \"emitted the wrong events\".<\/p>\n<p>The description string may also be empty, which indicates that the\nmatcher's description and the events actually emitted by the stream are\nenough to understand the failure.<\/p>\n<p>If the queue emits an error, that error is re-thrown unless otherwise\nindicated by the matcher.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.StreamMatcher",
                    "sig": "",
                    "params": [
                        {
                            "name": "queue",
                            "type": "async.StreamQueue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/StreamMatcher\/matchQueue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; matchQueue(StreamQueue queue);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The description of this matcher.<\/p>\n<p>This is in the subjunctive mood, which means it can be used after the word\n\"should\". For example, it might be \"emit the right events\".<\/p>\n        ",
                    "memberOf": "test_api.StreamMatcher",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/StreamMatcher\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/StreamMatcher-class.html",
            "desc": "<p>A matcher that matches events from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s or <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>s.<\/p>\n<p>Stream matchers are designed to make it straightforward to create complex\nexpectations for streams, and to interleave expectations with the rest of a\ntest. They can be used on a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> to match all events it emits:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(stream, emitsInOrder([\n  \/\/ Values match individual events.\n  \"Ready.\",\n\n  \/\/ Matchers also run against individual events.\n  startsWith(\"Loading took\"),\n\n  \/\/ Stream matchers can be nested. This asserts that one of two events are\n  \/\/ emitted after the \"Loading took\" line.\n  emitsAnyOf([\"Succeeded!\", \"Failed!\"]),\n\n  \/\/ By default, more events are allowed after the matcher finishes\n  \/\/ matching. This asserts instead that the stream emits a done event and\n  \/\/ nothing else.\n  emitsDone\n]));\n<\/code><\/pre>\n<p>It can also match a <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>, in which case it consumes the matched\nevents. The call to <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the\nmatcher is done matching. You can <code>await<\/code> this to consume different events\nat different times:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var stdout = new StreamQueue(stdoutLineStream);\n\n\/\/ Ignore lines from the process until it's about to emit the URL.\nawait expect(stdout, emitsThrough(\"WebSocket URL:\"));\n\n\/\/ Parse the next line as a URL.\nvar url = Uri.parse(await stdout.next);\nexpect(url.host, equals('localhost'));\n\n\/\/ You can match against the same StreamQueue multiple times.\nawait expect(stdout, emits(\"Waiting for connection...\"));\n<\/code><\/pre>\n<p>Users can call <a href=\"package-test_api_test_api\/StreamMatcher\/StreamMatcher.html\">new StreamMatcher<\/a> to create custom matchers.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StreamMatcher"
        },
        {
            "name": "test_api.Tags",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "Tags",
                    "type": "",
                    "desc": "<p>Applies a set of user-defined tags to a test suite.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Tags",
                    "sig": "",
                    "params": [
                        {
                            "name": "_tags",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Tags\/Tags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Tags(this._tags);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "tags",
                    "type": "dart:core.Set<dart:core.String>",
                    "types": [
                        "dart:core.Set",
                        "dart:core.String"
                    ],
                    "desc": "<p>The tags for the test suite.<\/p>\n        ",
                    "memberOf": "test_api.Tags",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Tags\/tags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; get tags =&gt; _tags.toSet();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/Tags-class.html",
            "desc": "<p>An annotation for applying a set of user-defined tags to a test suite.<\/p>\n<p>See <a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/README.md#tagging-tests\">the documentation on tagging tests<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Tags"
        },
        {
            "name": "test_api.TestFailure",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "TestFailure",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "test_api.TestFailure",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/TestFailure\/TestFailure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestFailure(this.message);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.TestFailure",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/TestFailure\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; message;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "test_api.TestFailure",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/TestFailure\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/TestFailure-class.html",
            "desc": "<p>An exception thrown when a test assertion fails.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestFailure"
        },
        {
            "name": "test_api.TestOn",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "TestOn",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "test_api.TestOn",
                    "sig": "",
                    "params": [
                        {
                            "name": "expression",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/TestOn\/TestOn.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TestOn(this.expression);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "expression",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The expression specifying the platform.<\/p>\n        ",
                    "memberOf": "test_api.TestOn",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/TestOn\/expression.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String expression\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/TestOn-class.html",
            "desc": "<p>An annotation indicating which platforms a test suite supports.<\/p>\n<p>For the full syntax of <a href=\"package-test_api_test_api\/TestOn\/expression.html\">expression<\/a>, see <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">the README<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestOn"
        },
        {
            "name": "test_api.Throws",
            "extends": [
                "matcher.Matcher",
                "dart:core.Object"
            ],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "Throws",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "sig": "",
                    "params": [
                        {
                            "name": "matcher",
                            "type": "matcher.Matcher",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Throws\/Throws.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Throws([Matcher matcher]) : this._matcher = matcher;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "describe",
                    "type": "matcher.Description",
                    "desc": "<p>Builds a textual description of the matcher.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "sig": "",
                    "params": [
                        {
                            "name": "description",
                            "type": "matcher.Description",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Throws\/describe.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describe(Description description) {\n  if (_matcher == null) {\n    return description.add(\"throws\");\n  } else {\n    return description.add('throws ').addDescriptionOf(_matcher);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "describeMismatch",
                    "type": "matcher.Description",
                    "desc": "<p>Builds a textual description of a specific mismatch.<\/p>\n<p><code>item<\/code> is the value that was tested by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>; <code>matchState<\/code> is\nthe <a href=\"dart-core\/Map-class.html\">Map<\/a> that was passed to and supplemented by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>\nwith additional information about the mismatch, and <code>mismatchDescription<\/code>\nis the <a href=\"package-matcher_matcher\/Description-class.html\">Description<\/a> that is being built to describe the mismatch.<\/p>\n<p>A few matchers make use of the <code>verbose<\/code> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "sig": "",
                    "params": [
                        {
                            "name": "item",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "description",
                            "type": "matcher.Description",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matchState",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "verbose",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Throws\/describeMismatch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describeMismatch(\n        item, Description description, Map matchState, bool verbose) =&gt;\n    StringDescription(matchState[this] as String);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "matchAsync",
                    "type": "",
                    "desc": "<p>Returns <code>null<\/code> if this matches <code>item<\/code>, or a <a href=\"dart-core\/String-class.html\">String<\/a> description of the\nfailure if it doesn't match.<\/p>\n<p>This can return a <a href=\"dart-async\/Future-class.html\">Future<\/a> or a synchronous value. If it returns a\n<a href=\"dart-async\/Future-class.html\">Future<\/a>, neither <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> nor the test will complete until that <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes.<\/p>\n<p>If this returns a <a href=\"dart-core\/String-class.html\">String<\/a> synchronously, <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> will synchronously\nthrow a <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> and <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a> will synchronusly return <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "sig": "",
                    "params": [
                        {
                            "name": "item",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Throws\/matchAsync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/*FutureOr&lt;String&gt;*\/ matchAsync(item) {\n  if (item is! Function &amp;&amp; item is! Future) {\n    return \"was not a Function or Future\";\n  }\n\n  if (item is Future) {\n    return item.then((value) =&gt; indent(prettyPrint(value), first: 'emitted '),\n        onError: _check);\n  }\n\n  try {\n    var value = item();\n    if (value is Future) {\n      return value.then(\n          (value) =&gt; indent(prettyPrint(value),\n              first: 'returned a Future that emitted '),\n          onError: _check);\n    }\n\n    return indent(prettyPrint(value), first: 'returned ');\n  } catch (error, trace) {\n    return _check(error, trace);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matches",
                    "type": "dart:core.bool",
                    "desc": "<p>Does the matching of the actual vs expected values.<\/p>\n<p><code>item<\/code> is the actual value. <code>matchState<\/code> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a href=\"package-test_api_test_api\/Throws\/describeMismatch.html\">describeMismatch<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Throws",
                    "sig": "",
                    "params": [
                        {
                            "name": "item",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "matchState",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Throws\/matches.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(item, Map matchState) {\n  var result = matchAsync(item);\n  expect(result,\n      anyOf([equals(null), TypeMatcher&lt;Future&gt;(), TypeMatcher&lt;String&gt;()]),\n      reason: \"matchAsync() may only return a String, a Future, or null.\");\n\n  if (result is Future) {\n    Invoker.current.addOutstandingCallback();\n    result.then((realResult) {\n      if (realResult != null) {\n        \/\/ ignore: deprecated_member_use\n        fail(formatFailure(this, item, realResult as String));\n      }\n      Invoker.current.removeOutstandingCallback();\n    });\n  } else if (result is String) {\n    matchState[this] = result;\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/Throws-class.html",
            "desc": "<p>Use the <a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a> function instead.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Throws"
        },
        {
            "name": "test_api.Timeout",
            "extends": [],
            "memberOf": "test_api",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-test_api_test_api\/Timeout\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Timeout\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) =&gt;\n    other is Timeout &amp;&amp;\n    other.duration == duration &amp;&amp;\n    other.scaleFactor == scaleFactor;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Timeout",
                    "type": "",
                    "desc": "<p>Declares an absolute timeout that overrides the default.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Timeout\/Timeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Timeout(this.duration) : scaleFactor = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "apply",
                    "type": "dart:core.Duration",
                    "desc": "<p>Returns a new <a href=\"dart-core\/Duration-class.html\">Duration<\/a> from applying <a href=\"package-test_api_test_api\/Timeout-class.html\">this<\/a> to <code>base<\/code>.<\/p>\n<p>If this is <a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">none<\/a>, returns <code>null<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "base",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Timeout\/apply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Duration apply(Duration base) {\n  if (this == none) return null;\n  return duration == null ? base * scaleFactor : duration;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Timeout.factor",
                    "type": "",
                    "desc": "<p>Declares a relative timeout that scales the default.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "scaleFactor",
                            "type": "dart:core.num",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Timeout\/Timeout.factor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Timeout.factor(this.scaleFactor) : duration = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "merge",
                    "type": "test_api.Timeout",
                    "desc": "<p>Returns a new <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a> that merges <a href=\"package-test_api_test_api\/Timeout-class.html\">this<\/a> with <code>other<\/code>.<\/p>\n<p><a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a> takes precedence over everything. If timeout is\n<a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a> and <code>other<\/code> declares a <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a>, that takes precedence.\nOtherwise, this timeout's <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a> or <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">factor<\/a> are multiplied by\n<code>other<\/code>'s <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">factor<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "test_api.Timeout",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Timeout\/merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Timeout merge(Timeout other) {\n  if (this == none || other == none) return none;\n  if (other.duration != null) return Timeout(other.duration);\n  if (duration != null) return Timeout(duration * other.scaleFactor);\n  return Timeout.factor(scaleFactor * other.scaleFactor);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Timeout.parse",
                    "type": "",
                    "desc": "<p>Parse the timeout from a user-provided string.<\/p>\n<p>This supports the following formats:<\/p>\n<ul>\n<li>\n<p><code>Number \"x\"<\/code>, which produces a relative timeout with the given scale\nfactor.<\/p>\n<\/li>\n<li>\n<p><code>(Number (\"d\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"us\") (\" \")?)+<\/code>, which produces\nan absolute timeout with the duration given by the sum of the given\nunits.<\/p>\n<\/li>\n<li>\n<p><code>\"none\"<\/code>, which produces <a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if <code>timeout<\/code> is not in a valid format<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [
                        {
                            "name": "timeout",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-test_api_test_api\/Timeout\/Timeout.parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Timeout.parse(String timeout) {\n  var scanner = StringScanner(timeout);\n\n  \/\/ First check for the string \"none\".\n  if (scanner.scan(\"none\")) {\n    scanner.expectDone();\n    return Timeout.none;\n  }\n\n  \/\/ Scan a number. This will be either a time unit or a scale factor.\n  scanner.expect(_untilUnit, name: \"number\");\n  var number = double.parse(scanner.lastMatch[0]);\n\n  \/\/ A number followed by \"x\" is a scale factor.\n  if (scanner.scan(\"x\") || scanner.scan(\"X\")) {\n    scanner.expectDone();\n    return Timeout.factor(number);\n  }\n\n  \/\/ Parse time units until none are left. The condition is in the middle of\n  \/\/ the loop because we've already parsed the first number.\n  var microseconds = 0.0;\n  while (true) {\n    scanner.expect(_unit, name: \"unit\");\n    microseconds += _microsecondsFor(number, scanner.lastMatch[0]);\n\n    scanner.scan(_whitespace);\n\n    \/\/ Scan the next number, if it's avaialble.\n    if (!scanner.scan(_untilUnit)) break;\n    number = double.parse(scanner.lastMatch[0]);\n  }\n\n  scanner.expectDone();\n  return Timeout(Duration(microseconds: microseconds.round()));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "test_api.Timeout",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-test_api_test_api\/Timeout\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  if (duration != null) return duration.toString();\n  if (scaleFactor != null) return \"${scaleFactor}x\";\n  return \"none\";\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>The timeout duration.<\/p>\n<p>If set, this overrides the default duration entirely. It's <code>null<\/code> for\ntimeouts with a non-null <a href=\"package-test_api_test_api\/Timeout\/scaleFactor.html\">scaleFactor<\/a> and for <a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a>.<\/p>\n        ",
                    "memberOf": "test_api.Timeout",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Timeout\/duration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-test_api_test_api\/Timeout\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-test_api_test_api\/Timeout\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "test_api.Timeout",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Timeout\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; duration.hashCode ^ 5 * scaleFactor.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "package-test_api_test_api\/Timeout\/none-constant.html",
                    "desc": "<p>A constant indicating that a test should never time out.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const none = Timeout._none()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "none",
                    "memberOf": "test_api.Timeout"
                },
                {
                    "name": "scaleFactor",
                    "type": "dart:core.num",
                    "types": [],
                    "desc": "<p>The timeout factor.<\/p>\n<p>The default timeout will be multiplied by this to get the new timeout.\nThus a factor of 2 means that the test will take twice as long to time\nout, and a factor of 0.5 means that it will time out twice as quickly.<\/p>\n<p>This is <code>null<\/code> for timeouts with a non-null <a href=\"package-test_api_test_api\/Timeout\/duration.html\">duration<\/a> and for\n<a href=\"package-test_api_test_api\/Timeout\/none-constant.html\">Timeout.none<\/a>.<\/p>\n        ",
                    "memberOf": "test_api.Timeout",
                    "isConstant": false,
                    "href": "package-test_api_test_api\/Timeout\/scaleFactor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num scaleFactor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-test_api_test_api\/Timeout-class.html",
            "desc": "<p>A class representing a modification to the default timeout for a test.<\/p>\n<p>By default, a test will time out after 30 seconds. With <a href=\"package-test_api_test_api\/Timeout\/Timeout.html\">new Timeout<\/a>, that\ncan be overridden entirely; with <a href=\"package-test_api_test_api\/Timeout\/Timeout.factor.html\">new Timeout.factor<\/a>, it can be scaled\nrelative to the default.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Timeout"
        },
        {
            "name": "addTearDown",
            "type": "",
            "desc": "<p>Registers a function to be run after the current test.<\/p>\n<p>This is called within a running test, and adds a tear-down only for the\ncurrent test. It allows testing libraries to add cleanup logic as soon as\nthere's something to clean up.<\/p>\n<p>The <code>callback<\/code> is run before any callbacks registered with <a href=\"package-test_api_test_api\/tearDown.html\">tearDown<\/a>. Like\n<a href=\"package-test_api_test_api\/tearDown.html\">tearDown<\/a>, the most recently registered callback is run first.<\/p>\n<p>If this is called from within a <a href=\"package-test_api_test_api\/setUpAll.html\">setUpAll<\/a> or <a href=\"package-test_api_test_api\/tearDownAll.html\">tearDownAll<\/a> callback, it\ninstead runs the function after <em>all<\/em> tests in the current test suite.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/addTearDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTearDown(callback()) {\n  if (Invoker.current == null) {\n    throw StateError(\"addTearDown() may only be called within a test.\");\n  }\n\n  Invoker.current.addTearDown(callback);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "completion",
            "type": "matcher.Matcher",
            "desc": "<p>Matches a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes succesfully with a value that matches\n<code>matcher<\/code>.<\/p>\n<p>Note that this creates an asynchronous expectation. The call to\n<code>expect()<\/code> that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.<\/p>\n<p>To test that a Future completes with an exception, you can use <a class=\"deprecated\" href=\"package-test_api_test_api\/throws-constant.html\">throws<\/a> and\n<a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a>.<\/p>\n<p>This returns an <code>AsyncMatcher<\/code>, so <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> won't complete until the matched\nfuture does.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/completion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher completion(matcher, [@deprecated String description]) =&gt;\n    _Completes(wrapMatcher(matcher));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emits",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> for <code>matcher<\/code>.<\/p>\n<p>If <code>matcher<\/code> is already a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a>, it's returned as-is. If it's any\nother <a href=\"package-matcher_matcher\/Matcher-class.html\">Matcher<\/a>, this matches a single event that matches that matcher. If\nit's any other Object, this matches a single event that's equal to that\nobject.<\/p>\n<p>This functions like <a href=\"package-matcher_matcher\/wrapMatcher.html\">wrapMatcher<\/a> for <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a>s: it can convert any\nmatcher-like value into a proper <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emits(matcher) {\n  if (matcher is StreamMatcher) return matcher;\n  var wrapped = wrapMatcher(matcher);\n\n  var matcherDescription = wrapped.describe(StringDescription());\n\n  return StreamMatcher((queue) async {\n    if (!await queue.hasNext) return \"\";\n\n    var matchState = {};\n    var actual = await queue.next;\n    if (wrapped.matches(actual, matchState)) return null;\n\n    var mismatchDescription = StringDescription();\n    wrapped.describeMismatch(actual, mismatchDescription, matchState, false);\n\n    if (mismatchDescription.length == 0) return \"\";\n    return \"emitted an event that $mismatchDescription\";\n  },\n      \/\/ TODO(nweiz): add \"should\" once matcher#42 is fixed.\n      \"emit an event that $matcherDescription\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emitsAnyOf",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches the stream if at least one of\n<code>matchers<\/code> matches.<\/p>\n<p>If multiple matchers match the stream, this chooses the matcher that\nconsumes as many events as possible.<\/p>\n<p>If any matchers match the stream, no errors from other matchers are thrown.\nIf no matchers match and multiple matchers threw errors, the first error is\nre-thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emitsAnyOf.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emitsAnyOf(Iterable matchers) {\n  var streamMatchers = matchers.map(emits).toList();\n  if (streamMatchers.isEmpty) {\n    throw ArgumentError(\"matcher may not be empty\");\n  }\n\n  if (streamMatchers.length == 1) return streamMatchers.first;\n  var description = \"do one of the following:\\n\" +\n      bullet(streamMatchers.map((matcher) =&gt; matcher.description));\n\n  return StreamMatcher((queue) async {\n    var transaction = queue.startTransaction();\n\n    \/\/ Allocate the failures list ahead of time so that its order matches the\n    \/\/ order of [matchers], and thus the order the matchers will be listed in\n    \/\/ the description.\n    var failures = List&lt;String&gt;(matchers.length);\n\n    \/\/ The first error thrown. If no matchers match and this exists, we rethrow\n    \/\/ it.\n    Object firstError;\n    StackTrace firstStackTrace;\n\n    var futures = &lt;Future&gt;[];\n    StreamQueue consumedMost;\n    for (var i = 0; i &lt; matchers.length; i++) {\n      futures.add(() async {\n        var copy = transaction.newQueue();\n\n        String result;\n        try {\n          result = await streamMatchers[i].matchQueue(copy);\n        } catch (error, stackTrace) {\n          if (firstError == null) {\n            firstError = error;\n            firstStackTrace = stackTrace;\n          }\n          return;\n        }\n\n        if (result != null) {\n          failures[i] = result;\n        } else if (consumedMost == null ||\n            consumedMost.eventsDispatched &lt; copy.eventsDispatched) {\n          consumedMost = copy;\n        }\n      }());\n    }\n\n    await Future.wait(futures);\n\n    if (consumedMost == null) {\n      transaction.reject();\n      if (firstError != null) {\n        await Future.error(firstError, firstStackTrace);\n      }\n\n      var failureMessages = &lt;String&gt;[];\n      for (var i = 0; i &lt; matchers.length; i++) {\n        var message = \"failed to ${streamMatchers[i].description}\";\n        if (failures[i].isNotEmpty) {\n          message += message.contains(\"\\n\") ? \"\\n\" : \" \";\n          message += \"because it ${failures[i]}\";\n        }\n\n        failureMessages.add(message);\n      }\n\n      return \"failed all options:\\n${bullet(failureMessages)}\";\n    } else {\n      transaction.commit(consumedMost);\n      return null;\n    }\n  }, description);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emitsError",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches a single error event that matches\n<code>matcher<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emitsError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emitsError(matcher) {\n  var wrapped = wrapMatcher(matcher);\n  var matcherDescription = wrapped.describe(StringDescription());\n  var throwsMatcher = throwsA(wrapped) as AsyncMatcher;\n\n  return StreamMatcher(\n      (queue) =&gt; throwsMatcher.matchAsync(queue.next) as Future&lt;String&gt;,\n      \/\/ TODO(nweiz): add \"should\" once matcher#42 is fixed.\n      \"emit an error that $matcherDescription\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emitsInAnyOrder",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches the stream if each matcher in\n<code>matchers<\/code> matches, in any order.<\/p>\n<p>If any matcher fails to match, this fails and consumes no events. If the\nmatchers match in multiple different possible orders, this chooses the order\nthat consumes as many events as possible.<\/p>\n<p>If any sequence of matchers matches the stream, no errors from other\nsequences are thrown. If no sequences match and multiple sequences throw\nerrors, the first error is re-thrown.<\/p>\n<p>Note that checking every ordering of <code>matchers<\/code> is O(n!) in the worst case,\nso this should only be called when there are very few <code>matchers<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emitsInAnyOrder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emitsInAnyOrder(Iterable matchers) {\n  var streamMatchers = matchers.map(emits).toSet();\n  if (streamMatchers.length == 1) return streamMatchers.first;\n  var description = \"do the following in any order:\\n\" +\n      bullet(streamMatchers.map((matcher) =&gt; matcher.description));\n\n  return StreamMatcher(\n      (queue) async =&gt; await _tryInAnyOrder(queue, streamMatchers) ? null : \"\",\n      description);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emitsInOrder",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches the stream if each matcher in\n<code>matchers<\/code> matches, one after another.<\/p>\n<p>If any matcher fails to match, this fails and consumes no events.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matchers",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emitsInOrder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emitsInOrder(Iterable matchers) {\n  var streamMatchers = matchers.map(emits).toList();\n  if (streamMatchers.length == 1) return streamMatchers.first;\n\n  var description = \"do the following in order:\\n\" +\n      bullet(streamMatchers.map((matcher) =&gt; matcher.description));\n\n  return StreamMatcher((queue) async {\n    for (var i = 0; i &lt; streamMatchers.length; i++) {\n      var matcher = streamMatchers[i];\n      var result = await matcher.matchQueue(queue);\n      if (result == null) continue;\n\n      var newResult = \"didn't ${matcher.description}\";\n      if (result.isNotEmpty) {\n        newResult += newResult.contains(\"\\n\") ? \"\\n\" : \" \";\n        newResult += \"because it $result\";\n      }\n      return newResult;\n    }\n    return null;\n  }, description);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "emitsThrough",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches any number of events followed by\nevents that match <code>matcher<\/code>.<\/p>\n<p>This consumes all events matched by <code>matcher<\/code>, as well as all events before.\nIf the stream emits a done event without matching <code>matcher<\/code>, this fails and\nconsumes no events.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/emitsThrough.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher emitsThrough(matcher) {\n  var streamMatcher = emits(matcher);\n  return StreamMatcher((queue) async {\n    var failures = &lt;String&gt;[];\n\n    tryHere() =&gt; queue.withTransaction((copy) async {\n          var result = await streamMatcher.matchQueue(copy);\n          if (result == null) return true;\n          failures.add(result);\n          return false;\n        });\n\n    while (await queue.hasNext) {\n      if (await tryHere()) return null;\n      await queue.next;\n    }\n\n    \/\/ Try after the queue is done in case the matcher can match an empty\n    \/\/ stream.\n    if (await tryHere()) return null;\n\n    var result = \"never did ${streamMatcher.description}\";\n\n    var failureMessages =\n        bullet(failures.where((failure) =&gt; failure.isNotEmpty));\n    if (failureMessages.isNotEmpty) {\n      result += result.contains(\"\\n\") ? \"\\n\" : \" \";\n      result += \"because it:\\n$failureMessages\";\n    }\n\n    return result;\n  }, \"eventually ${streamMatcher.description}\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expect",
            "type": "",
            "desc": "<p>Assert that <code>actual<\/code> matches <code>matcher<\/code>.<\/p>\n<p>This is the main assertion function. <code>reason<\/code> is optional and is typically\nnot supplied, as a reason is generated from <code>matcher<\/code>; if <code>reason<\/code>\nis included it is appended to the reason generated by the matcher.<\/p>\n<p><code>matcher<\/code> can be a value in which case it will be wrapped in an\n<a href=\"package-matcher_matcher\/equals.html\">equals<\/a> matcher.<\/p>\n<p>If the assertion fails a <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> is thrown.<\/p>\n<p>If <code>skip<\/code> is a String or <code>true<\/code>, the assertion is skipped. The arguments are\nstill evaluated, but <code>actual<\/code> is not verified to match <code>matcher<\/code>. If\n<code>actual<\/code> is a <a href=\"dart-async\/Future-class.html\">Future<\/a>, the test won't complete until the future emits a\nvalue.<\/p>\n<p>If <code>skip<\/code> is a string, it should explain why the assertion is skipped; this\nreason will be printed when running the test.<\/p>\n<p>Certain matchers, like <a href=\"package-test_api_test_api\/completion.html\">completion<\/a> and <a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a>, either match or fail\nasynchronously. When you use <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> with these matchers, it ensures that\nthe test doesn't complete until the matcher has either matched or failed. If\nyou want to wait for the matcher to complete before continuing the test, you\ncan call <a href=\"package-test_api_test_api\/expectLater.html\">expectLater<\/a> instead and <code>await<\/code> the result.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "verbose",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "formatter",
                    "type": "test_api.ErrorFormatter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "verbose",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "formatter",
                    "type": "test_api.ErrorFormatter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expect(actual, matcher,\n    {String reason,\n    skip,\n    @Deprecated(\"Will be removed in 0.13.0.\") bool verbose = false,\n    \/\/ ignore: deprecated_member_use\n    @Deprecated(\"Will be removed in 0.13.0.\") ErrorFormatter formatter}) {\n  _expect(actual, matcher,\n      reason: reason, skip: skip, verbose: verbose, formatter: formatter);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "expectAsync",
            "type": "dart:core.Function",
            "desc": "<p>This function is deprecated because it doesn't work well with strong mode.\nUse <a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>, <a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>, <a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, or\n<a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> instead.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Will be removed in 0.13.0\")\nFunction expectAsync(Function callback,\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction(callback, count, max, id: id, reason: reason).func;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync0",
            "type": "test_api.Func0",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 0 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with zero arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>, <a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync0.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func0&lt;T&gt; expectAsync0&lt;T&gt;(T callback(),\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync0() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync1",
            "type": "test_api.Func1",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 1 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with one argument. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>, <a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func1&lt;T, A&gt; expectAsync1&lt;T, A&gt;(T callback(A a),\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync1() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max1;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync2",
            "type": "test_api.Func2",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 2 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with two arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>, <a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func2&lt;T, A, B&gt; expectAsync2&lt;T, A, B&gt;(T callback(A a, B b),\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync2() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max2;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync3",
            "type": "test_api.Func3",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 3 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with three arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func3&lt;T, A, B, C&gt; expectAsync3&lt;T, A, B, C&gt;(T callback(A a, B b, C c),\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync3() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max3;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync4",
            "type": "test_api.Func4",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 4 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with four arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync4.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func4&lt;T, A, B, C, D&gt; expectAsync4&lt;T, A, B, C, D&gt;(T callback(A a, B b, C c, D d),\n    {int count = 1, int max = 0, String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync4() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max4;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync5",
            "type": "test_api.Func5",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 5 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with five arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>, and <a href=\"package-test_api_test_api\/expectAsync6.html\">expectAsync6<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync5.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func5&lt;T, A, B, C, D, E&gt; expectAsync5&lt;T, A, B, C, D, E&gt;(\n    T callback(A a, B b, C c, D d, E e),\n    {int count = 1,\n    int max = 0,\n    String id,\n    String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync5() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max5;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsync6",
            "type": "test_api.Func6",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 6 is expected to be\ncalled <code>count<\/code> number of times (by default 1).<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p>The test framework will wait for the callback to run the <code>count<\/code> times\nbefore it considers the current test to be complete.<\/p>\n<p><code>max<\/code> can be used to specify an upper bound on the number of calls; if this\nis exceeded the test will fail. If <code>max<\/code> is <code>0<\/code> (the default), the callback\nis expected to be called exactly <code>count<\/code> times. If <code>max<\/code> is <code>-1<\/code>, the\ncallback is allowed to be called any number of times greater than <code>count<\/code>.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with six arguments. See also\n<a href=\"package-test_api_test_api\/expectAsync0.html\">expectAsync0<\/a>, <a href=\"package-test_api_test_api\/expectAsync1.html\">expectAsync1<\/a>, <a href=\"package-test_api_test_api\/expectAsync2.html\">expectAsync2<\/a>, <a href=\"package-test_api_test_api\/expectAsync3.html\">expectAsync3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsync4.html\">expectAsync4<\/a>, and <a href=\"package-test_api_test_api\/expectAsync5.html\">expectAsync5<\/a> for callbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsync6.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func6&lt;T, A, B, C, D, E, F&gt; expectAsync6&lt;T, A, B, C, D, E, F&gt;(\n    T callback(A a, B b, C c, D d, E e, F f),\n    {int count = 1,\n    int max = 0,\n    String id,\n    String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsync6() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, count, max, id: id, reason: reason)\n      .max6;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil",
            "type": "dart:core.Function",
            "desc": "<p>This function is deprecated because it doesn't work well with strong mode.\nUse <a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, or <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> instead.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Will be removed in 0.13.0\")\nFunction expectAsyncUntil(Function callback, bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .func;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil0",
            "type": "test_api.Func0",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 0 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with zero arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil0.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func0&lt;T&gt; expectAsyncUntil0&lt;T&gt;(T callback(), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil0() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil1",
            "type": "test_api.Func1",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 1 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with one argument. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func1&lt;T, A&gt; expectAsyncUntil1&lt;T, A&gt;(T callback(A a), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil1() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max1;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil2",
            "type": "test_api.Func2",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 2 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with two arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func2&lt;T, A, B&gt; expectAsyncUntil2&lt;T, A, B&gt;(T callback(A a, B b), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil2() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max2;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil3",
            "type": "test_api.Func3",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 3 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with three arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func3&lt;T, A, B, C&gt; expectAsyncUntil3&lt;T, A, B, C&gt;(\n    T callback(A a, B b, C c), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil3() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max3;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil4",
            "type": "test_api.Func4",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 4 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with four arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil4.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func4&lt;T, A, B, C, D&gt; expectAsyncUntil4&lt;T, A, B, C, D&gt;(\n    T callback(A a, B b, C c, D d), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil4() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max4;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil5",
            "type": "test_api.Func5",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 5 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with five arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil6.html\">expectAsyncUntil6<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil5.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func5&lt;T, A, B, C, D, E&gt; expectAsyncUntil5&lt;T, A, B, C, D, E&gt;(\n    T callback(A a, B b, C c, D d, E e), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil5() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max5;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectAsyncUntil6",
            "type": "test_api.Func6",
            "desc": "<p>Informs the framework that the given <code>callback<\/code> of arity 6 is expected to be\ncalled until <code>isDone<\/code> returns true.<\/p>\n<p>Returns a wrapped function that should be used as a replacement of the\noriginal callback.<\/p>\n<p><code>isDone<\/code> is called after each time the function is run. Only when it returns\ntrue will the callback be considered complete.<\/p>\n<p>Both <code>id<\/code> and <code>reason<\/code> are optional and provide extra information about the\ncallback when debugging. <code>id<\/code> should be the name of the callback, while\n<code>reason<\/code> should be the reason the callback is expected to be called.<\/p>\n<p>This method takes callbacks with six arguments. See also\n<a href=\"package-test_api_test_api\/expectAsyncUntil0.html\">expectAsyncUntil0<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil1.html\">expectAsyncUntil1<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil2.html\">expectAsyncUntil2<\/a>,\n<a href=\"package-test_api_test_api\/expectAsyncUntil3.html\">expectAsyncUntil3<\/a>, <a href=\"package-test_api_test_api\/expectAsyncUntil4.html\">expectAsyncUntil4<\/a>, and <a href=\"package-test_api_test_api\/expectAsyncUntil5.html\">expectAsyncUntil5<\/a> for\ncallbacks with different arity.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "c",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "d",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "f",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectAsyncUntil6.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Func6&lt;T, A, B, C, D, E, F&gt; expectAsyncUntil6&lt;T, A, B, C, D, E, F&gt;(\n    T callback(A a, B b, C c, D d, E e, F f), bool isDone(),\n    {String id, String reason}) {\n  if (Invoker.current == null) {\n    throw StateError(\"expectAsyncUntil() may only be called within a test.\");\n  }\n\n  return _ExpectedFunction&lt;T&gt;(callback, 0, -1,\n          id: id, reason: reason, isDone: isDone)\n      .max6;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectLater",
            "type": "dart:async.Future",
            "desc": "<p>Just like <a href=\"package-test_api_test_api\/expect.html\">expect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the matcher\nhas finished matching.<\/p>\n<p>For the <a href=\"package-test_api_test_api\/completes.html\">completes<\/a> and <a href=\"package-test_api_test_api\/completion.html\">completion<\/a> matchers, as well as <a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a> and\nrelated matchers when they're matched against a <a href=\"dart-async\/Future-class.html\">Future<\/a>, the returned\nfuture completes when the matched future completes. For the <a href=\"package-test_api_test_api\/prints.html\">prints<\/a>\nmatcher, it completes when the future returned by the callback completes.\nOtherwise, it completes immediately.<\/p>\n<p>If the matcher fails asynchronously, that failure is piped to the returned\nfuture where it can be handled by user code.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/expectLater.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future expectLater(actual, matcher, {String reason, skip}) =&gt;\n    _expect(actual, matcher, reason: reason, skip: skip);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "fail",
            "type": "dart:core.Null",
            "desc": "<p>Convenience method for throwing a new <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> with the provided\n<code>message<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/fail.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@alwaysThrows\nNull fail(String message) =&gt; throw TestFailure(message);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "group",
            "type": "",
            "desc": "<p>Creates a group of tests.<\/p>\n<p>A group's description (converted to a string) is included in the descriptions\nof any tests or sub-groups it contains. <a href=\"package-test_api_test_api\/setUp.html\">setUp<\/a> and <a href=\"package-test_api_test_api\/tearDown.html\">tearDown<\/a> are also scoped\nto the containing group.<\/p>\n<p>If <code>testOn<\/code> is passed, it's parsed as a <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">platform selector<\/a>; the test will\nonly be run on matching platforms.<\/p>\n<p>If <code>timeout<\/code> is passed, it's used to modify or replace the default timeout\nof 30 seconds. Timeout modifications take precedence in suite-group-test\norder, so <code>timeout<\/code> will also modify any timeouts set on the suite, and will\nbe modified by any timeouts set on individual tests.<\/p>\n<p>If <code>skip<\/code> is a String or <code>true<\/code>, the group is skipped. If it's a String, it\nshould explain why the group is skipped; this reason will be printed instead\nof running the group's tests.<\/p>\n<p>If <code>tags<\/code> is passed, it declares user-defined tags that are applied to the\ntest. These tags can be used to select or skip the test on the command line,\nor to do bulk test configuration. All tags should be declared in the\n<a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/doc\/package_config.md#configuring-tags\">package configuration file<\/a>. The parameter can be an\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of tag names, or a <a href=\"dart-core\/String-class.html\">String<\/a> representing a single tag.<\/p>\n<p><code>onPlatform<\/code> allows groups to be configured on a platform-by-platform\nbasis. It's a map from strings that are parsed as <code>PlatformSelector<\/code>s to\nannotation classes: <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a>, <a href=\"package-test_api_test_api\/Skip-class.html\">Skip<\/a>, or lists of those. These\nannotations apply only on the given platforms. For example:<\/p>\n<pre class=\"language-dart\"><code>group(\"potentially slow tests\", () {\n  \/\/ ...\n}, onPlatform: {\n  \/\/ These tests are especially slow on Windows.\n  \"windows\": new Timeout.factor(2),\n  \"browser\": [\n    new Skip(\"TODO: add browser support\"),\n    \/\/ They'll be slow on browsers once it works on them.\n    new Timeout.factor(2)\n  ]\n});\n<\/code><\/pre>\n<p>If multiple platforms match, the annotations apply in order as through\nthey were in nested groups.<\/p>\n<p>If the <code>solo<\/code> flag is <code>true<\/code>, only tests and groups marked as\n\"solo\" will be be run. This only restricts tests <em>within this test\nsuite<\/em>\u2014tests in other suites will run as normal. We recommend that users\navoid this flag if possible, and instead use the test runner flag <code>-n<\/code> to\nfilter tests by name.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "body",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "testOn",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "tags",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "retry",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "solo",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "body",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "testOn",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "tags",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "retry",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "solo",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/group.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@isTestGroup\nvoid group(description, body(),\n    {String testOn,\n    Timeout timeout,\n    skip,\n    tags,\n    Map&lt;String, dynamic&gt; onPlatform,\n    int retry,\n    @deprecated bool solo = false}) {\n  _declarer.group(description.toString(), body,\n      testOn: testOn,\n      timeout: timeout,\n      skip: skip,\n      tags: tags,\n      onPlatform: onPlatform,\n      retry: retry,\n      solo: solo);\n\n  \/\/ Force dart2js not to inline this function. We need it to be separate from\n  \/\/ `main()` in JS stack traces in order to properly determine the line and\n  \/\/ column where the test was defined. See sdk#26705.\n  return;\n  return; \/\/ ignore: dead_code\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "mayEmit",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that allows (but doesn't require) <code>matcher<\/code> to\nmatch the stream.<\/p>\n<p>This matcher always succeeds; if <code>matcher<\/code> doesn't match, this just consumes\nno events.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/mayEmit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher mayEmit(matcher) {\n  var streamMatcher = emits(matcher);\n  return StreamMatcher((queue) async {\n    await queue.withTransaction(\n        (copy) async =&gt; (await streamMatcher.matchQueue(copy)) == null);\n    return null;\n  }, \"maybe ${streamMatcher.description}\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "mayEmitMultiple",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches any number of events that match\n<code>matcher<\/code>.<\/p>\n<p>This consumes events until <code>matcher<\/code> no longer matches. It always succeeds;\nif <code>matcher<\/code> doesn't match, this just consumes no events. It never rethrows\nerrors.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/mayEmitMultiple.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher mayEmitMultiple(matcher) {\n  var streamMatcher = emits(matcher);\n\n  var description = streamMatcher.description;\n  description += description.contains(\"\\n\") ? \"\\n\" : \" \";\n  description += \"zero or more times\";\n\n  return StreamMatcher((queue) async {\n    while (await _tryMatch(queue, streamMatcher)) {\n      \/\/ Do nothing; the matcher presumably already consumed events.\n    }\n    return null;\n  }, description);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "neverEmits",
            "type": "test_api.StreamMatcher",
            "desc": "<p>Returns a <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> that matches a stream that never matches\n<code>matcher<\/code>.<\/p>\n<p>This doesn't complete until the stream emits a done event. It never consumes\nany events. It never re-throws errors.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/neverEmits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamMatcher neverEmits(matcher) {\n  var streamMatcher = emits(matcher);\n  return StreamMatcher((queue) async {\n    var events = 0;\n    var matched = false;\n    await queue.withTransaction((copy) async {\n      while (await copy.hasNext) {\n        matched = await _tryMatch(copy, streamMatcher);\n        if (matched) return false;\n\n        events++;\n\n        try {\n          await copy.next;\n        } catch (_) {\n          \/\/ Ignore errors events.\n        }\n      }\n\n      matched = await _tryMatch(copy, streamMatcher);\n      return false;\n    });\n\n    if (!matched) return null;\n    return \"after $events ${pluralize('event', events)} did \"\n        \"${streamMatcher.description}\";\n  }, \"never ${streamMatcher.description}\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "printOnFailure",
            "type": "",
            "desc": "<p>Prints <code>message<\/code> if and when the current test fails.<\/p>\n<p>This is intended for test infrastructure to provide debugging information\nwithout cluttering the output for successful tests. Note that unlike\n<a href=\"dart-core\/print.html\">print<\/a>, each individual message passed to <a href=\"package-test_api_test_api\/printOnFailure.html\">printOnFailure<\/a> will be\nseparated by a blank line.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/printOnFailure.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void printOnFailure(String message) =&gt; Invoker.current.printOnFailure(message);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "prints",
            "type": "matcher.Matcher",
            "desc": "<p>Matches a <a href=\"dart-core\/Function-class.html\">Function<\/a> that prints text that matches <code>matcher<\/code>.<\/p>\n<p><code>matcher<\/code> may be a String or a <a href=\"package-matcher_matcher\/Matcher-class.html\">Matcher<\/a>.<\/p>\n<p>If the function this runs against returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>, all text printed by\nthe function (using <a href=\"dart-async\/Zone-class.html\">Zone<\/a> scoping) until that Future completes is matched.<\/p>\n<p>This only tracks text printed using the <a href=\"dart-core\/print.html\">print<\/a> function.<\/p>\n<p>This returns an <code>AsyncMatcher<\/code>, so <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> won't complete until the matched\nfunction does.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/prints.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher prints(matcher) =&gt; _Prints(wrapMatcher(matcher));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "pumpEventQueue",
            "type": "dart:async.Future",
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes after the <a href=\"https:\/\/webdev.dartlang.org\/articles\/performance\/event-loop#darts-event-loop-and-queues\">event loop<\/a> has run the given\nnumber of <code>times<\/code> (20 by default).<\/p>\n<p>Awaiting this approximates waiting until all asynchronous work (other than\nwork that's waiting for external resources) completes.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "times",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "times",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/pumpEventQueue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future pumpEventQueue({int times}) {\n  times ??= 20;\n  if (times == 0) return Future.value();\n  \/\/ Use [new Future] future to allow microtask events to finish. The [new\n  \/\/ Future.value] constructor uses scheduleMicrotask itself and would therefore\n  \/\/ not wait for microtask callbacks that are scheduled after invoking this\n  \/\/ method.\n  return Future(() =&gt; pumpEventQueue(times: times - 1));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "registerException",
            "type": "",
            "desc": "<p>Registers an exception that was caught for the current test.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "error",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "error",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/registerException.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerException(error, [StackTrace stackTrace]) {\n  \/\/ This will usually forward directly to [Invoker.current.handleError], but\n  \/\/ going through the zone API allows other zones to consistently see errors.\n  Zone.current.handleUncaughtError(error, stackTrace);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUp",
            "type": "",
            "desc": "<p>Registers a function to be run before tests.<\/p>\n<p>This function will be called before each test is run. <code>callback<\/code> may be\nasynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, it applies only to tests in that\ngroup. <code>callback<\/code> will be run after any set-up callbacks in parent groups or\nat the top level.<\/p>\n<p>Each callback at the top level or in a given group will be run in the order\nthey were declared.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/setUp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUp(callback()) =&gt; _declarer.setUp(callback);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUpAll",
            "type": "",
            "desc": "<p>Registers a function to be run once before all tests.<\/p>\n<p><code>callback<\/code> may be asynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, <code>callback<\/code> will run before all tests\nin that group. It will be run after any <a href=\"package-test_api_test_api\/setUpAll.html\">setUpAll<\/a> callbacks in parent\ngroups or at the top level. It won't be run if none of the tests in the\ngroup are run.<\/p>\n<p><strong>Note<\/strong>: This function makes it very easy to accidentally introduce hidden\ndependencies between tests that should be isolated. In general, you should\nprefer <a href=\"package-test_api_test_api\/setUp.html\">setUp<\/a>, and only use <a href=\"package-test_api_test_api\/setUpAll.html\">setUpAll<\/a> if the callback is prohibitively\nslow.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/setUpAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUpAll(callback()) =&gt; _declarer.setUpAll(callback);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "spawnHybridCode",
            "type": "stream_channel.StreamChannel",
            "desc": "<p>Spawns a VM isolate that runs the given <code>dartCode<\/code>, which is loaded as the\ncontents of a Dart library.<\/p>\n<p>This allows browser tests to spawn servers with which they can communicate\nto test client\/server interactions. It can also be used by VM tests to\neasily spawn an isolate.<\/p>\n<p>The <code>dartCode<\/code> must define a top-level <code>hybridMain()<\/code> function that takes a\n<code>StreamChannel<\/code> argument and, optionally, an <code>Object<\/code> argument to which\n<code>message<\/code> will be passed. Note that <code>message<\/code> must be JSON-encodable. For\nexample:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">import \"package:stream_channel\/stream_channel.dart\";\n\nhybridMain(StreamChannel channel, Object message) {\n  \/\/ ...\n}\n<\/code><\/pre>\n<p>Returns a <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> that's connected to the channel passed to\n<code>hybridMain()<\/code>. Only JSON-encodable objects may be sent through this\nchannel. If the channel is closed, the hybrid isolate is killed. If the\nisolate is killed, the channel's stream will emit a \"done\" event.<\/p>\n<p>Any unhandled errors loading or running the hybrid isolate will be emitted\nas errors over the channel's stream. Any calls to <code>print()<\/code> in the hybrid\nisolate will be printed as though they came from the test that created the\nisolate.<\/p>\n<p>Code in the hybrid isolate is not considered to be running in a test\ncontext, so it can't access test functions like <code>expect()<\/code> and\n<code>expectAsync()<\/code>.<\/p>\n<p>By default, the hybrid isolate is automatically killed when the test\nfinishes running. If <code>stayAlive<\/code> is <code>true<\/code>, it won't be killed until the\nentire test suite finishes running.<\/p>\n<p><strong>Note<\/strong>: If you use this API, be sure to add a dependency on the\n**<code>stream_channel<\/code> package, since you're using its API as well!<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "dartCode",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stayAlive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dartCode",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stayAlive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/spawnHybridCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel spawnHybridCode(String dartCode,\n    {Object message, bool stayAlive = false}) {\n  var uri = Uri.dataFromString(dartCode,\n      encoding: utf8, mimeType: 'application\/dart');\n  return _spawn(uri.toString(), message, stayAlive: stayAlive);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "spawnHybridUri",
            "type": "stream_channel.StreamChannel",
            "desc": "<p>Spawns a VM isolate for the given <code>uri<\/code>, which may be a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> or a <a href=\"dart-core\/String-class.html\">String<\/a>.<\/p>\n<p>This allows browser tests to spawn servers with which they can communicate\nto test client\/server interactions. It can also be used by VM tests to\neasily spawn an isolate.<\/p>\n<p>The Dart file at <code>uri<\/code> must define a top-level <code>hybridMain()<\/code> function that\ntakes a <code>StreamChannel<\/code> argument and, optionally, an <code>Object<\/code> argument to\nwhich <code>message<\/code> will be passed. Note that <code>message<\/code> must be JSON-encodable.\nFor example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">import \"package:stream_channel\/stream_channel.dart\";\n\nhybridMain(StreamChannel channel, Object message) {\n  \/\/ ...\n}\n<\/code><\/pre>\n<p>If <code>uri<\/code> is relative, it will be interpreted relative to the <code>file:<\/code> URL for\nthe test suite being executed. If it's root-relative (that is, if it begins\nwith <code>\/<\/code>) it will be interpreted relative to the root of the package (the\ndirectory that contains <code>pubspec.yaml<\/code>, <em>not<\/em> the <code>test\/<\/code> directory). If\nit's a <code>package:<\/code> URL, it will be resolved using the current package's\ndependency constellation.<\/p>\n<p>Returns a <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> that's connected to the channel passed to\n<code>hybridMain()<\/code>. Only JSON-encodable objects may be sent through this\nchannel. If the channel is closed, the hybrid isolate is killed. If the\nisolate is killed, the channel's stream will emit a \"done\" event.<\/p>\n<p>Any unhandled errors loading or running the hybrid isolate will be emitted\nas errors over the channel's stream. Any calls to <code>print()<\/code> in the hybrid\nisolate will be printed as though they came from the test that created the\nisolate.<\/p>\n<p>Code in the hybrid isolate is not considered to be running in a test\ncontext, so it can't access test functions like <code>expect()<\/code> and\n<code>expectAsync()<\/code>.<\/p>\n<p>By default, the hybrid isolate is automatically killed when the test\nfinishes running. If <code>stayAlive<\/code> is <code>true<\/code>, it won't be killed until the\nentire test suite finishes running.<\/p>\n<p><strong>Note<\/strong>: If you use this API, be sure to add a dependency on the\n**<code>stream_channel<\/code> package, since you're using its API as well!<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "message",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stayAlive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "message",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stayAlive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/spawnHybridUri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel spawnHybridUri(uri, {Object message, bool stayAlive = false}) {\n  Uri parsedUrl;\n  if (uri is Uri) {\n    parsedUrl = uri;\n  } else if (uri is String) {\n    parsedUrl = Uri.parse(uri);\n  } else {\n    throw ArgumentError.value(uri, \"uri\", \"must be a Uri or a String.\");\n  }\n\n  String absoluteUri;\n  if (parsedUrl.scheme.isEmpty) {\n    var isRootRelative = parsedUrl.path.startsWith(\"\/\");\n\n    \/\/ If we're running in a browser context, the working directory is already\n    \/\/ relative to the test file, whereas on the VM the working directory is the\n    \/\/ root of the package.\n    if (p.style == p.Style.url) {\n      if (isRootRelative) {\n        \/\/ A root-relative URL is interpreted as relative to the package root,\n        \/\/ which means placing it beneath the URL secret.\n        var secret = Uri.encodeComponent(Uri.base.pathSegments[0]);\n        absoluteUri = p.absolute(\"\/$secret$parsedUrl\");\n        print(\"Uri.base: ${Uri.base}\");\n        print(\"absoluteUri: ${absoluteUri}\");\n      } else {\n        absoluteUri = p.absolute(parsedUrl.toString());\n      }\n    } else {\n      if (isRootRelative) {\n        \/\/ We assume that the current path is the package root. `pub run`\n        \/\/ enforces this currently, but at some point it would probably be good\n        \/\/ to pass in an explicit root.\n        absoluteUri = p.url\n            .join(p.toUri(p.current).toString(), parsedUrl.path.substring(1));\n      } else {\n        var suitePath = Invoker.current.liveTest.suite.path;\n        absoluteUri = p.url.join(\n            p.url.dirname(p.toUri(p.absolute(suitePath)).toString()),\n            parsedUrl.toString());\n      }\n    }\n  } else {\n    absoluteUri = uri.toString();\n  }\n\n  return _spawn(absoluteUri, message, stayAlive: stayAlive);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "tearDown",
            "type": "",
            "desc": "<p>Registers a function to be run after tests.<\/p>\n<p>This function will be called after each test is run. <code>callback<\/code> may be\nasynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, it applies only to tests in that\ngroup. <code>callback<\/code> will be run before any tear-down callbacks in parent\ngroups or at the top level.<\/p>\n<p>Each callback at the top level or in a given group will be run in the\nreverse of the order they were declared.<\/p>\n<p>See also <a href=\"package-test_api_test_api\/addTearDown.html\">addTearDown<\/a>, which adds tear-downs to a running test.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/tearDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void tearDown(callback()) =&gt; _declarer.tearDown(callback);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "tearDownAll",
            "type": "",
            "desc": "<p>Registers a function to be run once after all tests.<\/p>\n<p>If this is called within a test group, <code>callback<\/code> will run after all tests\nin that group. It will be run before any <a href=\"package-test_api_test_api\/tearDownAll.html\">tearDownAll<\/a> callbacks in parent\ngroups or at the top level. It won't be run if none of the tests in the\ngroup are run.<\/p>\n<p><strong>Note<\/strong>: This function makes it very easy to accidentally introduce hidden\ndependencies between tests that should be isolated. In general, you should\nprefer <a href=\"package-test_api_test_api\/tearDown.html\">tearDown<\/a>, and only use <a href=\"package-test_api_test_api\/tearDownAll.html\">tearDownAll<\/a> if the callback is\nprohibitively slow.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/tearDownAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void tearDownAll(callback()) =&gt; _declarer.tearDownAll(callback);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "test",
            "type": "",
            "desc": "<p>Creates a new test case with the given description (converted to a string)\nand body.<\/p>\n<p>The description will be added to the descriptions of any surrounding\n<a href=\"package-test_api_test_api\/group.html\">group<\/a>s. If <code>testOn<\/code> is passed, it's parsed as a <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">platform selector<\/a>; the\ntest will only be run on matching platforms.<\/p>\n<p>If <code>timeout<\/code> is passed, it's used to modify or replace the default timeout\nof 30 seconds. Timeout modifications take precedence in suite-group-test\norder, so <code>timeout<\/code> will also modify any timeouts set on the group or suite.<\/p>\n<p>If <code>skip<\/code> is a String or <code>true<\/code>, the test is skipped. If it's a String, it\nshould explain why the test is skipped; this reason will be printed instead\nof running the test.<\/p>\n<p>If <code>tags<\/code> is passed, it declares user-defined tags that are applied to the\ntest. These tags can be used to select or skip the test on the command line,\nor to do bulk test configuration. All tags should be declared in the\n<a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/doc\/package_config.md#configuring-tags\">package configuration file<\/a>. The parameter can be an\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of tag names, or a <a href=\"dart-core\/String-class.html\">String<\/a> representing a single tag.<\/p>\n<p>If <code>retry<\/code> is passed, the test will be retried the provided number of times\nbefore being marked as a failure.<\/p>\n<p><code>onPlatform<\/code> allows tests to be configured on a platform-by-platform\nbasis. It's a map from strings that are parsed as <code>PlatformSelector<\/code>s to\nannotation classes: <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a>, <a href=\"package-test_api_test_api\/Skip-class.html\">Skip<\/a>, or lists of those. These\nannotations apply only on the given platforms. For example:<\/p>\n<pre class=\"language-dart\"><code>test(\"potentially slow test\", () {\n  \/\/ ...\n}, onPlatform: {\n  \/\/ This test is especially slow on Windows.\n  \"windows\": new Timeout.factor(2),\n  \"browser\": [\n    new Skip(\"TODO: add browser support\"),\n    \/\/ This will be slow on browsers once it works on them.\n    new Timeout.factor(2)\n  ]\n});\n<\/code><\/pre>\n<p>If multiple platforms match, the annotations apply in order as through\nthey were in nested groups.<\/p>\n<p>If the <code>solo<\/code> flag is <code>true<\/code>, only tests and groups marked as\n\"solo\" will be be run. This only restricts tests <em>within this test\nsuite<\/em>\u2014tests in other suites will run as normal. We recommend that users\navoid this flag if possible and instead use the test runner flag <code>-n<\/code> to\nfilter tests by name.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "body",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "testOn",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "tags",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "retry",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "solo",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "body",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "testOn",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "tags",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "retry",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "solo",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/test.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@isTest\nvoid test(description, body(),\n    {String testOn,\n    Timeout timeout,\n    skip,\n    tags,\n    Map&lt;String, dynamic&gt; onPlatform,\n    int retry,\n    @deprecated bool solo = false}) {\n  _declarer.test(description.toString(), body,\n      testOn: testOn,\n      timeout: timeout,\n      skip: skip,\n      onPlatform: onPlatform,\n      tags: tags,\n      retry: retry,\n      solo: solo);\n\n  \/\/ Force dart2js not to inline this function. We need it to be separate from\n  \/\/ `main()` in JS stack traces in order to properly determine the line and\n  \/\/ column where the test was defined. See sdk#26705.\n  return;\n  return; \/\/ ignore: dead_code\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throws-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throws",
            "memberOf": "test_api"
        },
        {
            "name": "throwsA",
            "type": "matcher.Matcher",
            "desc": "<p>This can be used to match three kinds of objects:<\/p>\n<ul>\n<li>\n<p>A <a href=\"dart-core\/Function-class.html\">Function<\/a> that throws an exception when called. The function cannot\ntake any arguments. If you want to test that a function expecting\narguments throws, wrap it in another zero-argument function that calls\nthe one you want to test.<\/p>\n<\/li>\n<li>\n<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with an exception. Note that this creates an\nasynchronous expectation. The call to <code>expect()<\/code> that includes this will\nreturn immediately and execution will continue. Later, when the future\ncompletes, the actual expectation will run.<\/p>\n<\/li>\n<li>\n<p>A <a href=\"dart-core\/Function-class.html\">Function<\/a> that returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with an exception.<\/p>\n<\/li>\n<\/ul>\n<p>In all three cases, when an exception is thrown, this will test that the\nexception object matches <code>matcher<\/code>. If <code>matcher<\/code> is not an instance of\n<a href=\"package-matcher_matcher\/Matcher-class.html\">Matcher<\/a>, it will implicitly be treated as <code>equals(matcher)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "test_api",
            "sig": "",
            "params": [
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-test_api_test_api\/throwsA.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher throwsA(matcher) =&gt;\n    \/\/ ignore: deprecated_member_use\n    Throws(wrapMatcher(matcher));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsArgumentError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsArgumentError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsConcurrentModificationError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsConcurrentModificationError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsCyclicInitializationError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsCyclicInitializationError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsException-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsException",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsFormatException-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsFormatException",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsNoSuchMethodError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsNoSuchMethodError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsNullThrownError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsNullThrownError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsRangeError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsRangeError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsStateError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsStateError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsUnimplementedError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsUnimplementedError",
            "memberOf": "test_api"
        },
        {
            "type": "",
            "href": "package-test_api_test_api\/throwsUnsupportedError-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "throwsUnsupportedError",
            "memberOf": "test_api"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}