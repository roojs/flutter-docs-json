{
    "name": "file",
    "href": "package-file_file\/package-file_file-library.html",
    "cn": [
        {
            "name": "file.Directory",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "Directory",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/Directory\/Directory.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childDirectory",
                    "type": "file.Directory",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> that exists as a child of this\ndirectory and has the specified <code>basename<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "basename",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/childDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory childDirectory(String basename);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "childFile",
                    "type": "file.File",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/File-class.html\">File<\/a> that exists as a child of this directory\nand has the specified <code>basename<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "basename",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/childFile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File childFile(String basename);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "childLink",
                    "type": "file.Link",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Link-class.html\">Link<\/a> that exists as a child of this directory\nand has the specified <code>basename<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "basename",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/childLink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link childLink(String basename);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.Directory>",
                    "desc": "<p>Creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Directory"
                    ]
                },
                {
                    "name": "createTemp",
                    "type": "dart:async.Future<file.Directory>",
                    "desc": "<p>Creates a temporary directory in this directory. Additional random\ncharacters are appended to <code>prefix<\/code> to produce a unique directory\nname. If <code>prefix<\/code> is missing or null, the empty string is used\nfor <code>prefix<\/code>.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with the newly\ncreated temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/createTemp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; createTemp([String prefix]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Directory"
                    ]
                },
                {
                    "name": "createTempSync",
                    "type": "file.Directory",
                    "desc": "<p>Synchronously creates a temporary directory in this directory.\nAdditional random characters are appended to <code>prefix<\/code> to produce\na unique directory name. If <code>prefix<\/code> is missing or null, the empty\nstring is used for <code>prefix<\/code>.<\/p>\n<p>Returns the newly created temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/createTempSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory createTempSync([String prefix]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:async.Stream<file.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a symbolic link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>The result is a stream of <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects\nfor the directories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/list.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;FileSystemEntity&gt; list(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "file.FileSystemEntity"
                    ]
                },
                {
                    "name": "listSync",
                    "type": "dart:core.List<file.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>Returns a <a href=\"dart-core\/List-class.html\">List<\/a> containing <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects for the\ndirectories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/listSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;FileSystemEntity&gt; listSync(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "file.FileSystemEntity"
                    ]
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<file.Directory>",
                    "desc": "<p>Renames this directory. Returns a <code>Future&lt;Directory&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> instance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file, the operation\nfails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Directory"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "file.Directory",
                    "desc": "<p>Synchronously renames this directory. Returns a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>\ninstance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file the operation\nfails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Directory\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> instance whose path is the absolute path to <a href=\"package-file_file\/Directory-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "file.Directory",
                    "isConstant": false,
                    "href": "package-file_file\/Directory\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/Directory-class.html",
            "desc": "<p>A reference to a directory on the file system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Directory"
        },
        {
            "name": "file.ErrorCodes",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "E2BIG",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Argument list too long<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/E2BIG.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get E2BIG =&gt; _platform((_Codes codes) =&gt; codes.e2big);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EACCES",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Permission denied<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EACCES.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EACCES =&gt; _platform((_Codes codes) =&gt; codes.eacces);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EAGAIN",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Try again<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EAGAIN.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EAGAIN =&gt; _platform((_Codes codes) =&gt; codes.eagain);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EBADF",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Bad file number<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EBADF.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EBADF =&gt; _platform((_Codes codes) =&gt; codes.ebadf);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EBUSY",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Device or resource busy<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EBUSY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EBUSY =&gt; _platform((_Codes codes) =&gt; codes.ebusy);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ECHILD",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No child processes<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ECHILD.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ECHILD =&gt; _platform((_Codes codes) =&gt; codes.echild);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EDEADLK",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Resource deadlock would occur<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EDEADLK.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EDEADLK =&gt; _platform((_Codes codes) =&gt; codes.edeadlk);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EDOM",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Math argument out of domain of func<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EDOM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EDOM =&gt; _platform((_Codes codes) =&gt; codes.edom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EEXIST",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>File exists<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EEXIST.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EEXIST =&gt; _platform((_Codes codes) =&gt; codes.eexist);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EFAULT",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Bad address<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EFAULT.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EFAULT =&gt; _platform((_Codes codes) =&gt; codes.efault);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EFBIG",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>File too large<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EFBIG.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EFBIG =&gt; _platform((_Codes codes) =&gt; codes.efbig);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EILSEQ",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Illegal byte sequence<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EILSEQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EILSEQ =&gt; _platform((_Codes codes) =&gt; codes.eilseq);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EINTR",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Interrupted system call<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EINTR.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EINTR =&gt; _platform((_Codes codes) =&gt; codes.eintr);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EINVAL",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Invalid argument<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EINVAL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EINVAL =&gt; _platform((_Codes codes) =&gt; codes.einval);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EIO",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>I\/O error<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EIO.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EIO =&gt; _platform((_Codes codes) =&gt; codes.eio);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EISDIR",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Is a directory<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EISDIR.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EISDIR =&gt; _platform((_Codes codes) =&gt; codes.eisdir);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ELOOP",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Too many levels of symbolic links<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ELOOP.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ELOOP =&gt; _platform((_Codes codes) =&gt; codes.eloop);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EMFILE",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Too many open files<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EMFILE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EMFILE =&gt; _platform((_Codes codes) =&gt; codes.emfile);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EMLINK",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Too many links<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EMLINK.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EMLINK =&gt; _platform((_Codes codes) =&gt; codes.emlink);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENAMETOOLONG",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>File name too long<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENAMETOOLONG.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENAMETOOLONG =&gt;\n    _platform((_Codes codes) =&gt; codes.enametoolong);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENFILE",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>File table overflow<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENFILE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENFILE =&gt; _platform((_Codes codes) =&gt; codes.enfile);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENODEV",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No such device<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENODEV.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENODEV =&gt; _platform((_Codes codes) =&gt; codes.enodev);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOENT",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No such file or directory<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOENT.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOENT =&gt; _platform((_Codes codes) =&gt; codes.enoent);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOEXEC",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Exec format error<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOEXEC.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOEXEC =&gt; _platform((_Codes codes) =&gt; codes.enoexec);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOLCK",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No record locks available<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOLCK.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOLCK =&gt; _platform((_Codes codes) =&gt; codes.enolck);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOMEM",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Out of memory<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOMEM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOMEM =&gt; _platform((_Codes codes) =&gt; codes.enomem);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOSPC",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No space left on device<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOSPC.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOSPC =&gt; _platform((_Codes codes) =&gt; codes.enospc);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOSYS",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Function not implemented<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOSYS.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOSYS =&gt; _platform((_Codes codes) =&gt; codes.enosys);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOTDIR",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Not a directory<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOTDIR.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOTDIR =&gt; _platform((_Codes codes) =&gt; codes.enotdir);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOTEMPTY",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Directory not empty<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOTEMPTY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOTEMPTY =&gt; _platform((_Codes codes) =&gt; codes.enotempty);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENOTTY",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Not a typewriter<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENOTTY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENOTTY =&gt; _platform((_Codes codes) =&gt; codes.enotty);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ENXIO",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No such device or address<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ENXIO.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ENXIO =&gt; _platform((_Codes codes) =&gt; codes.enxio);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EPERM",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Operation not permitted<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EPERM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EPERM =&gt; _platform((_Codes codes) =&gt; codes.eperm);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EPIPE",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Broken pipe<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EPIPE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EPIPE =&gt; _platform((_Codes codes) =&gt; codes.epipe);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ERANGE",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Math result not representable<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ERANGE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ERANGE =&gt; _platform((_Codes codes) =&gt; codes.erange);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EROFS",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Read-only file system<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EROFS.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EROFS =&gt; _platform((_Codes codes) =&gt; codes.erofs);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ESPIPE",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Illegal seek<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ESPIPE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ESPIPE =&gt; _platform((_Codes codes) =&gt; codes.espipe);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ESRCH",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>No such process<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/ESRCH.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get ESRCH =&gt; _platform((_Codes codes) =&gt; codes.esrch);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "EXDEV",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Cross-device link<\/p>\n        ",
                    "memberOf": "file.ErrorCodes",
                    "isConstant": false,
                    "href": "package-file_file\/ErrorCodes\/EXDEV.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: non_constant_identifier_names\nstatic int get EXDEV =&gt; _platform((_Codes codes) =&gt; codes.exdev);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ErrorCodes-class.html",
            "desc": "<p>Operating system error codes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ErrorCodes"
        },
        {
            "name": "file.File",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "File",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/File\/File.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "copy",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/copy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; copy(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "copySync",
                    "type": "file.File",
                    "desc": "<p>Synchronously copy this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/copySync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile copySync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"package-file_file\/File\/create.html\">create<\/a>. Calling <a href=\"package-file_file\/File\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Renames this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "file.File",
                    "desc": "<p>Synchronously renames this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "writeAsBytes",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/File\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/writeAsBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsBytes(List&lt;int&gt; bytes,\n    {io.FileMode mode: io.FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "writeAsString",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/File\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "contents",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/File\/writeAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsString(String contents,\n    {io.FileMode mode: io.FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "file.File",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"package-file_file\/File-class.html\">File<\/a> instance whose path is the absolute path to <a href=\"package-file_file\/File-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "file.File",
                    "isConstant": false,
                    "href": "package-file_file\/File\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/File-class.html",
            "desc": "<p>A reference to a file on the file system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "File"
        },
        {
            "name": "file.FileSystem",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "FileSystem",
                    "type": "",
                    "desc": "<p>Creates a new <code>FileSystem<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/FileSystem\/FileSystem.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FileSystem();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "directory",
                    "type": "file.Directory",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/directory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory directory(dynamic path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "file",
                    "type": "file.File",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/File-class.html\">File<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/file.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File file(dynamic path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getPath",
                    "type": "dart:core.String",
                    "desc": "<p>Gets the string path represented by the specified generic <code>path<\/code>.<\/p>\n<p><code>path<\/code> may be a <a href=\"dart-io\/FileSystemEntity-class.html\">io.FileSystemEntity<\/a>, a <a href=\"dart-core\/String-class.html\">String<\/a>, or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/getPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getPath(dynamic path) {\n  if (path is io.FileSystemEntity) {\n    return path.path;\n  } else if (path is String) {\n    return path;\n  } else if (path is Uri) {\n    return this.path.fromUri(path);\n  } else {\n    throw new ArgumentError('Invalid type for \"path\": ${path?.runtimeType}');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "identical",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks whether two paths refer to the same object in the\nfile system. Returns a <a href=\"dart-async\/Future-class.html\">Future&lt;bool&gt;<\/a> that completes with the result.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Completes the returned Future with an error if one of the paths points\nto an object that does not exist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/identical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; identical(String path1, String path2);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "identicalSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Throws an error if one of the paths points to an object that does not\nexist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/identicalSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool identicalSync(String path1, String path2);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isDirectory",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/DIRECTORY-constant.html\">io.FileSystemEntityType.DIRECTORY<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isDirectory(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.directory;<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isDirectorySync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/DIRECTORY-constant.html\">io.FileSystemEntityType.DIRECTORY<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isDirectorySync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isDirectorySync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.directory;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isFile",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/FILE-constant.html\">io.FileSystemEntityType.FILE<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isFile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isFile(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.file;<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isFileSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/FILE-constant.html\">io.FileSystemEntityType.FILE<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isFileSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isFileSync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.file;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isLink",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isLink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isLink(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.link;<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isLinkSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/isLinkSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isLinkSync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.link;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "link",
                    "type": "file.Link",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Link-class.html\">Link<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/link.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link link(dynamic path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Asynchronously calls the operating system's stat() function on <code>path<\/code>.\nReturns a Future which completes with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing\nthe data returned by stat().\nIf the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with\n.type set to FileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;io.FileStat&gt; stat(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Calls the operating system's stat() function on <code>path<\/code>.\nReturns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().\nIf the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">io.FileStat statSync(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:async.Future<dart:io.FileSystemEntityType>",
                    "desc": "<p>Finds the type of file system object that a <code>path<\/code> points to. Returns\na Future<filesystementitytype> that completes with the result.<\/filesystementitytype><\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;io.FileSystemEntityType&gt; type(String path, {bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntityType"
                    ]
                },
                {
                    "name": "typeSync",
                    "type": "dart:io.FileSystemEntityType",
                    "desc": "<p>Syncronously finds the type of file system object that a <code>path<\/code> points\nto. Returns a <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a>.<\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystem\/typeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">io.FileSystemEntityType typeSync(String path, {bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "currentDirectory",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>Creates a directory object pointing to the current working directory.<\/p>\n        ",
                    "memberOf": "file.FileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystem\/currentDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get currentDirectory;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isWatchSupported",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Tests if <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a> is supported on the current system.<\/p>\n        ",
                    "memberOf": "file.FileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystem\/isWatchSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isWatchSupported;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "path.Context",
                    "types": [],
                    "desc": "<p>An object for manipulating paths in this file system.<\/p>\n        ",
                    "memberOf": "file.FileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystem\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">p.Context get path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemTempDirectory",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>Gets the system temp directory.<\/p>\n<p>It is left to file system implementations to decide how to define the\n\"system temp directory\".<\/p>\n        ",
                    "memberOf": "file.FileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystem\/systemTempDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get systemTempDirectory;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "chroot.ChrootFileSystem",
                "file.ForwardingFileSystem",
                "local.LocalFileSystem",
                "record_replay.RecordingFileSystem",
                "record_replay.ReplayFileSystem"
            ],
            "realImplementors": [
                "chroot.ChrootFileSystem"
            ],
            "cn": [],
            "href": "package-file_file\/FileSystem-class.html",
            "desc": "<p>A generic representation of a file system.<\/p>\n<p>Note that this class uses <code>dart:io<\/code> only inasmuch as it deals in the types\nexposed by the <code>dart:io<\/code> library. Subclasses should document their level of\ndependence on the library (and the associated implications of using that\nimplementation in the browser).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystem"
        },
        {
            "name": "file.FileSystemEntity",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "FileSystemEntity",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/FileSystemEntity\/FileSystemEntity.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "delete",
                    "type": "dart:async.Future<file.FileSystemEntity>",
                    "desc": "<p>Deletes this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"package-file_file\/FileSystemEntity\/delete.html\">delete<\/a> to be used to unconditionally delete any file\nsystem object.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with this\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> when the deletion is done. If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>\ncannot be deleted, the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/FileSystemEntity\/delete.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;FileSystemEntity&gt; delete({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.FileSystemEntity"
                    ]
                }
            ],
            "props": [
                {
                    "name": "basename",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the part of this entity's path after the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/foo.dart'); \/\/ -&gt; 'foo.dart'\ncontext.basename('path\/to');          \/\/ -&gt; 'to'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/'); \/\/ -&gt; 'to'\n<\/code><\/pre>\n        ",
                    "memberOf": "file.FileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystemEntity\/basename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get basename;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dirname",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the part of this entity's path before the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to'\ncontext.dirname('path\/to');          \/\/ -&gt; 'path'\ncontext.dirname('foo.dart');         \/\/ -&gt; '.'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/'); \/\/ -&gt; 'path'\n<\/code><\/pre>\n        ",
                    "memberOf": "file.FileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystemEntity\/dirname.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get dirname;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fileSystem",
                    "type": "file.FileSystem",
                    "types": [],
                    "desc": "<p>Returns the file system responsible for this entity.<\/p>\n        ",
                    "memberOf": "file.FileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystemEntity\/fileSystem.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSystem get fileSystem;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>The directory containing <a href=\"package-file_file\/FileSystemEntity-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "file.FileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/FileSystemEntity\/parent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get parent;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/FileSystemEntity-class.html",
            "desc": "<p>The common super class for <a href=\"package-file_file\/File-class.html\">File<\/a>, <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, and <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemEntity"
        },
        {
            "name": "file.ForwardingDirectory",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "ForwardingDirectory",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/ForwardingDirectory\/ForwardingDirectory.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.Directory>",
                    "desc": "<p>Creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; create({bool recursive: false}) async =&gt;\n    wrap(await delegate.create(recursive: recursive));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Directory"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>If the directory cannot be created an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync({bool recursive: false}) =&gt;\n    delegate.createSync(recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "createTemp",
                    "type": "dart:async.Future<file.Directory>",
                    "desc": "<p>Creates a temporary directory in this directory. Additional random\ncharacters are appended to <code>prefix<\/code> to produce a unique directory\nname. If <code>prefix<\/code> is missing or null, the empty string is used\nfor <code>prefix<\/code>.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with the newly\ncreated temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/createTemp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Directory&gt; createTemp([String prefix]) async =&gt;\n    wrap(await delegate.createTemp(prefix));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Directory"
                    ]
                },
                {
                    "name": "createTempSync",
                    "type": "file.Directory",
                    "desc": "<p>Synchronously creates a temporary directory in this directory.\nAdditional random characters are appended to <code>prefix<\/code> to produce\na unique directory name. If <code>prefix<\/code> is missing or null, the empty\nstring is used for <code>prefix<\/code>.<\/p>\n<p>Returns the newly created temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/createTempSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory createTempSync([String prefix]) =&gt;\n    wrap(delegate.createTempSync(prefix));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:async.Stream<file.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a symbolic link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>The result is a stream of <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects\nfor the directories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/list.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;FileSystemEntity&gt; list({\n  bool recursive: false,\n  bool followLinks: true,\n}) =&gt;\n    delegate.list(recursive: recursive, followLinks: followLinks).map(_wrap);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "file.FileSystemEntity"
                    ]
                },
                {
                    "name": "listSync",
                    "type": "dart:core.List<file.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"package-file_file\/Link-class.html\">Link<\/a> objects.\nIf a link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>Returns a <a href=\"dart-core\/List-class.html\">List<\/a> containing <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects for the\ndirectories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/listSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;FileSystemEntity&gt; listSync({\n  bool recursive: false,\n  bool followLinks: true,\n}) =&gt;\n    delegate\n        .listSync(recursive: recursive, followLinks: followLinks)\n        .map(_wrap)\n        .toList();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "file.FileSystemEntity"
                    ]
                },
                {
                    "name": "wrap",
                    "type": "",
                    "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingDirectory",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.Directory",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingDirectory\/wrap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT wrap(io.Directory delegate) =&gt; wrapDirectory(delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ForwardingDirectory-class.html",
            "desc": "<p>A directory that forwards all methods and properties to a delegate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ForwardingDirectory"
        },
        {
            "name": "file.ForwardingFile",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "ForwardingFile",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/ForwardingFile\/ForwardingFile.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "copy",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/copy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; copy(String newPath) async =&gt; wrap(await delegate.copy(newPath));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "copySync",
                    "type": "file.File",
                    "desc": "<p>Synchronously copy this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/copySync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile copySync(String newPath) =&gt; wrap(delegate.copySync(newPath));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"package-file_file\/ForwardingFile\/create.html\">create<\/a>. Calling <a href=\"package-file_file\/ForwardingFile\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; create({bool recursive: false}) async =&gt;\n    wrap(await delegate.create(recursive: recursive));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously create the file. Existing files are left untouched\nby <a href=\"package-file_file\/ForwardingFile\/createSync.html\">createSync<\/a>. Calling <a href=\"package-file_file\/ForwardingFile\/createSync.html\">createSync<\/a> on an existing file might fail\nif there are restrictive permissions on the file.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created\nonly if all directories in the path exist.\nIf <code>recursive<\/code> is true, all non-existing path components are created.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync({bool recursive: false}) =&gt;\n    delegate.createSync(recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "lastAccessed",
                    "type": "dart:async.Future<dart:core.DateTime>",
                    "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last accessed, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/lastAccessed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;DateTime&gt; lastAccessed() =&gt; delegate.lastAccessed();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.DateTime"
                    ]
                },
                {
                    "name": "lastAccessedSync",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns the date and time when the file was last accessed,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/lastAccessedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDateTime lastAccessedSync() =&gt; delegate.lastAccessedSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastModified",
                    "type": "dart:async.Future<dart:core.DateTime>",
                    "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last modified, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/lastModified.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;DateTime&gt; lastModified() =&gt; delegate.lastModified();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.DateTime"
                    ]
                },
                {
                    "name": "lastModifiedSync",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns the date and time when the file was last modified,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/lastModifiedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDateTime lastModifiedSync() =&gt; delegate.lastModifiedSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Get the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;int&gt; length() =&gt; delegate.length();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "lengthSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously get the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/lengthSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lengthSync() =&gt; delegate.lengthSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "open",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Open the file for random access operations. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with the opened\nrandom access file. <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using the\n<a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>Files can be opened in three modes:<\/p>\n<p><a href=\"dart-io\/FileMode\/read-constant.html\">FileMode.read<\/a>: open the file for reading.<\/p>\n<p><a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: open the file for both reading and writing and\ntruncate the file to length zero. If the file does not exist the\nfile is created.<\/p>\n<p><a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: same as <a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a> except that the file is\nnot truncated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/open.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;RandomAccessFile&gt; open({\n  FileMode mode: FileMode.read,\n}) async =&gt;\n    delegate.open(mode: mode);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "openRead",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "desc": "<p>Create a new independent <a href=\"dart-async\/Stream-class.html\">Stream<\/a> for the contents of this file.<\/p>\n<p>If <code>start<\/code> is present, the file will be read from byte-offset <code>start<\/code>.\nOtherwise from the beginning (index 0).<\/p>\n<p>If <code>end<\/code> is present, only up to byte-index <code>end<\/code> will be read. Otherwise,\nuntil end of file.<\/p>\n<p>In order to make sure that system resources are freed, the stream\nmust be read to completion or the subscription on the stream must\nbe cancelled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/openRead.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;List&lt;int&gt;&gt; openRead([int start, int end]) =&gt;\n    delegate.openRead(start, end);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "openSync",
                    "type": "dart:io.RandomAccessFile",
                    "desc": "<p>Synchronously open the file for random access operations. The\nresult is a <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> on which random access operations\ncan be performed. Opened <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using\nthe <a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>See <a href=\"package-file_file\/ForwardingFile\/open.html\">open<\/a> for information on the <code>mode<\/code> argument.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/openSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRandomAccessFile openSync({FileMode mode: FileMode.read}) =&gt;\n    delegate.openSync(mode: mode);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "openWrite",
                    "type": "dart:io.IOSink",
                    "desc": "<p>Creates a new independent <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for the file. The\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> must be closed when no longer used, to free\nsystem resources.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for a file can be opened in two modes:<\/p>\n<ul>\n<li>\n<a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: truncates the file to length zero.<\/li>\n<li>\n<a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: sets the initial write position to the end\nof the file.<\/li>\n<\/ul>\n<p> When writing strings through the returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> the encoding\n specified using <code>encoding<\/code> will be used. The returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>\n has an <code>encoding<\/code> property which can be changed after the\n <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> has been created.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/openWrite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIOSink openWrite({\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n}) =&gt;\n    delegate.openWrite(mode: mode, encoding: encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readAsBytes",
                    "type": "dart:async.Future<dart:core.List<dart:core.int>>",
                    "desc": "<p>Read the entire file contents as a list of bytes. Returns a\n<code>Future&lt;List&lt;int&gt;&gt;<\/code> that completes with the list of bytes that\nis the contents of the file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;List&lt;int&gt;&gt; readAsBytes() =&gt; delegate.readAsBytes();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readAsBytesSync",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Synchronously read the entire file contents as a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsBytesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;int&gt; readAsBytesSync() =&gt; delegate.readAsBytesSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readAsLines",
                    "type": "dart:async.Future<dart:core.List<dart:core.String>>",
                    "desc": "<p>Read the entire file contents as lines of text using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;List&lt;String&gt;&gt;<\/code> that completes with the lines\nonce the file contents has been read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;List&lt;String&gt;&gt; readAsLines({Encoding encoding: utf8}) =&gt;\n    delegate.readAsLines(encoding: encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsLinesSync",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "<p>Synchronously read the entire file contents as lines of text\nusing the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsLinesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;String&gt; readAsLinesSync({Encoding encoding: utf8}) =&gt;\n    delegate.readAsLinesSync(encoding: encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsString",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Read the entire file contents as a string using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;String&gt;<\/code> that completes with the string once\nthe file contents has been read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; readAsString({Encoding encoding: utf8}) =&gt;\n    delegate.readAsString(encoding: encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsStringSync",
                    "type": "dart:core.String",
                    "desc": "<p>Synchronously read the entire file contents as a string using the\ngiven <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/readAsStringSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString readAsStringSync({Encoding encoding: utf8}) =&gt;\n    delegate.readAsStringSync(encoding: encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastAccessed",
                    "type": "dart:async.Future",
                    "desc": "<p>Modifies the time the file was last accessed.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/setLastAccessed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;dynamic&gt; setLastAccessed(DateTime time) =&gt;\n    delegate.setLastAccessed(time);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastAccessedSync",
                    "type": "",
                    "desc": "<p>Synchronously modifies the time the file was last accessed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/setLastAccessedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setLastAccessedSync(DateTime time) =&gt; delegate.setLastAccessedSync(time);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setLastModified",
                    "type": "dart:async.Future",
                    "desc": "<p>Modifies the time the file was last modified.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/setLastModified.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;dynamic&gt; setLastModified(DateTime time) =&gt;\n    delegate.setLastModified(time);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastModifiedSync",
                    "type": "",
                    "desc": "<p>Synchronously modifies the time the file was last modified.<\/p>\n<p>If the attributes cannot be set, throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/setLastModifiedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setLastModifiedSync(DateTime time) =&gt; delegate.setLastModifiedSync(time);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "wrap",
                    "type": "file.ForwardingFile",
                    "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.File",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/wrap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nForwardingFile wrap(io.File delegate) =&gt; wrapFile(delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "writeAsBytes",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/writeAsBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsBytes(\n  List&lt;int&gt; bytes, {\n  FileMode mode: FileMode.write,\n  bool flush: false,\n}) async =&gt;\n    wrap(await delegate.writeAsBytes(\n      bytes,\n      mode: mode,\n      flush: flush,\n    ));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "writeAsBytesSync",
                    "type": "",
                    "desc": "<p>Synchronously write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it and closes the file.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsBytesSync.html\">writeAsBytesSync<\/a> creates the file for writing and truncates\nthe file if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/writeAsBytesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid writeAsBytesSync(\n  List&lt;int&gt; bytes, {\n  FileMode mode: FileMode.write,\n  bool flush: false,\n}) =&gt;\n    delegate.writeAsBytesSync(bytes, mode: mode, flush: flush);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeAsString",
                    "type": "dart:async.Future<file.File>",
                    "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "contents",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/writeAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsString(\n  String contents, {\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n  bool flush: false,\n}) async =&gt;\n    wrap(await delegate.writeAsString(\n      contents,\n      mode: mode,\n      encoding: encoding,\n      flush: flush,\n    ));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.File"
                    ]
                },
                {
                    "name": "writeAsStringSync",
                    "type": "",
                    "desc": "<p>Synchronously write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsStringSync.html\">writeAsStringSync<\/a> creates the file for writing and\ntruncates the file if it already exists. In order to append the bytes\nto an existing file, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode\nparameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "contents",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFile\/writeAsStringSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid writeAsStringSync(\n  String contents, {\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n  bool flush: false,\n}) =&gt;\n    delegate.writeAsStringSync(\n      contents,\n      mode: mode,\n      encoding: encoding,\n      flush: flush,\n    );<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ForwardingFile-class.html",
            "desc": "<p>A file that forwards all methods and properties to a delegate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ForwardingFile"
        },
        {
            "name": "file.ForwardingFileSystem",
            "extends": [
                "file.FileSystem",
                "dart:core.Object"
            ],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "ForwardingFileSystem",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-file_file\/ForwardingFileSystem-class.html\">ForwardingFileSystem<\/a> that forwards all methods and\nproperties to the specified <code>delegate<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "file.FileSystem",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-file_file\/ForwardingFileSystem\/ForwardingFileSystem.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ForwardingFileSystem(this.delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "directory",
                    "type": "file.Directory",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/directory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory directory(dynamic path) =&gt; delegate.directory(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "file",
                    "type": "file.File",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/File-class.html\">File<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/file.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile file(dynamic path) =&gt; delegate.file(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "identical",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks whether two paths refer to the same object in the\nfile system. Returns a <a href=\"dart-async\/Future-class.html\">Future&lt;bool&gt;<\/a> that completes with the result.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Completes the returned Future with an error if one of the paths points\nto an object that does not exist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/identical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; identical(String path1, String path2) =&gt;\n    delegate.identical(path1, path2);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "identicalSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Throws an error if one of the paths points to an object that does not\nexist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/identicalSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool identicalSync(String path1, String path2) =&gt;\n    delegate.identicalSync(path1, path2);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "link",
                    "type": "file.Link",
                    "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Link-class.html\">Link<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/link.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink link(dynamic path) =&gt; delegate.link(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Asynchronously calls the operating system's stat() function on <code>path<\/code>.\nReturns a Future which completes with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing\nthe data returned by stat().\nIf the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with\n.type set to FileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileStat&gt; stat(String path) =&gt; delegate.stat(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Calls the operating system's stat() function on <code>path<\/code>.\nReturns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().\nIf the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileStat statSync(String path) =&gt; delegate.statSync(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:async.Future<dart:io.FileSystemEntityType>",
                    "desc": "<p>Finds the type of file system object that a <code>path<\/code> points to. Returns\na Future<filesystementitytype> that completes with the result.<\/filesystementitytype><\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileSystemEntityType&gt; type(String path, {bool followLinks: true}) =&gt;\n    delegate.type(path, followLinks: followLinks);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntityType"
                    ]
                },
                {
                    "name": "typeSync",
                    "type": "dart:io.FileSystemEntityType",
                    "desc": "<p>Syncronously finds the type of file system object that a <code>path<\/code> points\nto. Returns a <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a>.<\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystem",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystem\/typeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileSystemEntityType typeSync(String path, {bool followLinks: true}) =&gt;\n    delegate.typeSync(path, followLinks: followLinks);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "currentDirectory",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>Creates a directory object pointing to the current working directory.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystem\/currentDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get currentDirectory =&gt; delegate.currentDirectory;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "delegate",
                    "type": "file.FileSystem",
                    "types": [],
                    "desc": "<p>The file system to which this file system will forward all activity.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystem\/delegate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FileSystem delegate\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isWatchSupported",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Tests if <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a> is supported on the current system.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystem\/isWatchSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isWatchSupported =&gt; delegate.isWatchSupported;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "path.Context",
                    "types": [],
                    "desc": "<p>An object for manipulating paths in this file system.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystem\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\np.Context get path =&gt; delegate.path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemTempDirectory",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>Gets the system temp directory.<\/p>\n<p>It is left to file system implementations to decide how to define the\n\"system temp directory\".<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystem",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystem\/systemTempDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get systemTempDirectory =&gt; delegate.systemTempDirectory;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ForwardingFileSystem-class.html",
            "desc": "<p>A file system that forwards all methods and properties to a delegate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ForwardingFileSystem"
        },
        {
            "name": "file.ForwardingFileSystemEntity",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "ForwardingFileSystemEntity",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/ForwardingFileSystemEntity.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "delete",
                    "type": "dart:async.Future",
                    "desc": "<p>Deletes this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"package-file_file\/ForwardingFileSystemEntity\/delete.html\">delete<\/a> to be used to unconditionally delete any file\nsystem object.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with this\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> when the deletion is done. If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>\ncannot be deleted, the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/delete.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; delete({bool recursive: false}) async =&gt;\n    wrap(await delegate.delete(recursive: recursive) as D);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "deleteSync",
                    "type": "",
                    "desc": "<p>Synchronously deletes this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"package-file_file\/ForwardingFileSystemEntity\/deleteSync.html\">deleteSync<\/a> to be used to unconditionally delete any\nfile system object.<\/p>\n<p>Throws an exception if the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> cannot be deleted.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/deleteSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid deleteSync({bool recursive: false}) =&gt;\n    delegate.deleteSync(recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "exists",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks whether the file system entity with this path exists. Returns\na <code>Future&lt;bool&gt;<\/code> that completes with the result.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"package-file_file\/File-class.html\">File<\/a>,\n<a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, and <a href=\"package-file_file\/Link-class.html\">Link<\/a>.  Calling <a href=\"package-file_file\/ForwardingFileSystemEntity\/exists.html\">exists<\/a> on an instance of one\nof these subclasses checks whether the object exists in the file\nsystem object exists and is of the correct type (file, directory,\nor link).  To check whether a path points to an object on the\nfile system, regardless of the object's type, use the <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a>\nstatic method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/exists.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; exists() =&gt; delegate.exists();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "existsSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks whether the file system entity with this path\nexists.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"package-file_file\/File-class.html\">File<\/a>,\n<a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, and <a href=\"package-file_file\/Link-class.html\">Link<\/a>.  Calling <a href=\"package-file_file\/ForwardingFileSystemEntity\/existsSync.html\">existsSync<\/a> on an instance of\none of these subclasses checks whether the object exists in the\nfile system object exists and is of the correct type (file,\ndirectory, or link).  To check whether a path points to an object\non the file system, regardless of the object's type, use the\n<a href=\"dart-io\/FileSystemEntity\/typeSync.html\">typeSync<\/a> static method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/existsSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool existsSync() =&gt; delegate.existsSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future",
                    "desc": "<p>Renames this file system entity.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with a\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed file system entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; rename(String newPath) async =&gt;\n    wrap(await delegate.rename(newPath) as D);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "renameSync",
                    "type": "",
                    "desc": "<p>Synchronously renames this file system entity.<\/p>\n<p>Returns a <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT renameSync(String newPath) =&gt; wrap(delegate.renameSync(newPath) as D);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "resolveSymbolicLinks",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinks.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; resolveSymbolicLinks() =&gt; delegate.resolveSymbolicLinks();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "resolveSymbolicLinksSync",
                    "type": "dart:core.String",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinksSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString resolveSymbolicLinksSync() =&gt; delegate.resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Calls the operating system's stat() function on the <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> of this\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.stat(this.path)<\/code>.<\/p>\n<p>Returns a <code>Future&lt;FileStat&gt;<\/code> object containing the data returned by\nstat().<\/p>\n<p>If the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object\nwith .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileStat&gt; stat() =&gt; delegate.stat();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Synchronously calls the operating system's stat() function on the\n<a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> of this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.statSync(this.path)<\/code>.<\/p>\n<p>Returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().<\/p>\n<p>If the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileStat statSync() =&gt; delegate.statSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "watch",
                    "type": "dart:async.Stream<dart:io.FileSystemEvent>",
                    "desc": "<p>Start watching the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> for changes.<\/p>\n<p>The implementation uses platform-dependent event-based APIs for receiving\nfile-system notifications, thus behavior depends on the platform.<\/p>\n<ul>\n<li>\n<code>Windows<\/code>: Uses <code>ReadDirectoryChangesW<\/code>. The implementation only\nsupports watching directories. Recursive watching is supported.<\/li>\n<li>\n<code>Linux<\/code>: Uses <code>inotify<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is not supported.\nNote: When watching files directly, delete events might not happen\nas expected.<\/li>\n<li>\n<code>OS X<\/code>: Uses <code>FSEvents<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is supported.<\/li>\n<\/ul>\n<p>The system will start listening for events once the returned <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is\nbeing listened to, not when the call to <a href=\"package-file_file\/ForwardingFileSystemEntity\/watch.html\">watch<\/a> is issued.<\/p>\n<p>The returned value is an endless broadcast <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, that only stops when\none of the following happens:<\/p>\n<ul>\n<li>The <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is canceled, e.g. by calling <code>cancel<\/code> on the\n <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a>.<\/li>\n<li>The <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> being watches, is deleted.<\/li>\n<\/ul>\n<p>Use <code>events<\/code> to specify what events to listen for. The constants in\n<a href=\"dart-io\/FileSystemEvent-class.html\">FileSystemEvent<\/a> can be or'ed together to mix events. Default is\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEvent\/ALL-constant.html\">FileSystemEvent.ALL<\/a>.<\/p>\n<p>A move event may be reported as seperate delete and create events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "events",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/watch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;FileSystemEvent&gt; watch({\n  int events: FileSystemEvent.all,\n  bool recursive: false,\n}) =&gt;\n    delegate.watch(events: events, recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:io.FileSystemEvent"
                    ]
                },
                {
                    "name": "wrap",
                    "type": "",
                    "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/wrap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT wrap(D delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "wrapDirectory",
                    "type": "file.Directory",
                    "desc": "<p>Creates a new directory with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.Directory",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/wrapDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDirectory wrapDirectory(io.Directory delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "wrapFile",
                    "type": "file.File",
                    "desc": "<p>Creates a new file with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.File",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/wrapFile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFile wrapFile(io.File delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "wrapLink",
                    "type": "file.Link",
                    "desc": "<p>Creates a new link with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.Link",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/wrapLink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nLink wrapLink(io.Link delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> whose path is the absolute path to <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The type of the returned instance is the type of <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT get absolute =&gt; wrap(delegate.absolute as D);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "basename",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the part of this entity's path after the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/foo.dart'); \/\/ -&gt; 'foo.dart'\ncontext.basename('path\/to');          \/\/ -&gt; 'to'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/'); \/\/ -&gt; 'to'\n<\/code><\/pre>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/basename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get basename =&gt; fileSystem.path.basename(path);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "delegate",
                    "type": "",
                    "types": [],
                    "desc": "<p>The entity to which this entity will forward all methods and properties.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/delegate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nD get delegate;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dirname",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the part of this entity's path before the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to'\ncontext.dirname('path\/to');          \/\/ -&gt; 'path'\ncontext.dirname('foo.dart');         \/\/ -&gt; '.'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/'); \/\/ -&gt; 'path'\n<\/code><\/pre>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/dirname.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get dirname =&gt; fileSystem.path.dirname(path);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAbsolute",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-core\/bool-class.html\">bool<\/a> indicating whether this object's path is absolute.<\/p>\n<p>On Windows, a path is absolute if it starts with \\\\ or a drive letter\nbetween a and z (upper or lower case) followed by :\\ or :\/.\nOn non-Windows, a path is absolute if it starts with \/.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/isAbsolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isAbsolute =&gt; delegate.isAbsolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "file.Directory",
                    "types": [],
                    "desc": "<p>The directory containing <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/parent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get parent =&gt; wrapDirectory(delegate.parent);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get path =&gt; delegate.path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> representing the file system entity's location.<\/p>\n<p>The returned URI's scheme is always \"file\" if the entity's <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> is\nabsolute, otherwise the scheme will be empty.<\/p>\n        ",
                    "memberOf": "file.ForwardingFileSystemEntity",
                    "isConstant": false,
                    "href": "package-file_file\/ForwardingFileSystemEntity\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nUri get uri =&gt; delegate.uri;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ForwardingFileSystemEntity-class.html",
            "desc": "<p>A file system entity that forwards all methods and properties to a delegate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ForwardingFileSystemEntity"
        },
        {
            "name": "file.ForwardingLink",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "ForwardingLink",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/ForwardingLink\/ForwardingLink.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.Link>",
                    "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; create(String target, {bool recursive: false}) async =&gt;\n    wrap(await delegate.create(target, recursive: recursive));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Link"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously create the link. Calling <a href=\"package-file_file\/ForwardingLink\/createSync.html\">createSync<\/a> on an existing link\nwill throw an exception.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created only if all\ndirectories in its path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created. The directories in\nthe path of <code>target<\/code> are not affected, unless they are also in <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync(String target, {bool recursive: false}) =&gt;\n    delegate.createSync(target, recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "target",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Gets the target of the link. Returns a future that completes with\nthe path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, the future completes with\na FileSystemException.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/target.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; target() =&gt; delegate.target();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "targetSync",
                    "type": "dart:core.String",
                    "desc": "<p>Synchronously gets the target of the link. Returns the path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, throws a FileSystemException.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/targetSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString targetSync() =&gt; delegate.targetSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "update",
                    "type": "dart:async.Future<file.Link>",
                    "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"package-file_file\/ForwardingLink\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; update(String target) async =&gt;\n    wrap(await delegate.update(target));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Link"
                    ]
                },
                {
                    "name": "updateSync",
                    "type": "",
                    "desc": "<p>Synchronously updates the link. Calling <a href=\"package-file_file\/ForwardingLink\/updateSync.html\">updateSync<\/a> on a non-existing link\nwill throw an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/updateSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateSync(String target) =&gt; delegate.updateSync(target);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "wrap",
                    "type": "file.ForwardingLink",
                    "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.ForwardingLink",
                    "sig": "",
                    "params": [
                        {
                            "name": "delegate",
                            "type": "dart:io.Link",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/ForwardingLink\/wrap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nForwardingLink wrap(io.Link delegate) =&gt; wrapLink(delegate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/ForwardingLink-class.html",
            "desc": "<p>A link that forwards all methods and properties to a delegate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ForwardingLink"
        },
        {
            "name": "file.Link",
            "extends": [],
            "memberOf": "file",
            "events": [],
            "methods": [
                {
                    "name": "Link",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "file.Link",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-file_file\/Link\/Link.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<file.Link>",
                    "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Link\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; create(String target, {bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Link"
                    ]
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<file.Link>",
                    "desc": "<p>Renames this link. Returns a <code>Future&lt;Link&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/Link-class.html\">Link<\/a> instance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory,\nthe operation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Link\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Link"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "file.Link",
                    "desc": "<p>Synchronously renames this link. Returns a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\ninstance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory\nthe operation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Link\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "update",
                    "type": "dart:async.Future<file.Link>",
                    "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"package-file_file\/Link\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "file.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-file_file\/Link\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; update(String target);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "file.Link"
                    ]
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "file.Link",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"package-file_file\/Link-class.html\">Link<\/a> instance whose path is the absolute path to <a href=\"package-file_file\/Link-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "file.Link",
                    "isConstant": false,
                    "href": "package-file_file\/Link\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-file_file\/Link-class.html",
            "desc": "<p>A reference to a symbolic link on the file system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Link"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}