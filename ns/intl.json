{
    "name": "intl",
    "href": "intl\/intl-library.html",
    "cn": [
        {
            "name": "intl.Bidi",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "Bidi",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "intl\/Bidi\/Bidi.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "detectRtlDirectionality",
                    "type": "dart:core.bool",
                    "desc": "<p>Check the estimated directionality of <code>str<\/code>, return true if the piece of\ntext should be laid out in RTL direction. If <code>isHtml<\/code> is true, the string\nis HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "str",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/detectRtlDirectionality.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool detectRtlDirectionality(String str, {bool isHtml: false}) =&gt;\n    estimateDirectionOfText(str, isHtml: isHtml) == TextDirection.RTL;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "endsWithLtr",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the exit directionality (ie, the last strongly-directional\ncharacter in <code>text<\/code> is LTR. If <code>isHtml<\/code> is true, the text is HTML or\nHTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/endsWithLtr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool endsWithLtr(String text, [isHtml = false]) {\n  return new RegExp('[$_LTR_CHARS][^$_RTL_CHARS]*\\$')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "endsWithRtl",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the exit directionality (ie, the last strongly-directional\ncharacter in <code>text<\/code> is RTL. If <code>isHtml<\/code> is true, the text is HTML or\nHTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/endsWithRtl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool endsWithRtl(String text, [isHtml = false]) {\n  return new RegExp('[$_RTL_CHARS][^$_LTR_CHARS]*\\$')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enforceLtrInHtml",
                    "type": "dart:core.String",
                    "desc": "<p>Enforce the <code>html<\/code> snippet in LTR directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must\nenclose the whole piece. If the tag already has a direction specified,\nthis new one will override existing one in behavior (tested on FF and IE).<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "html",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/enforceLtrInHtml.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceLtrInHtml(String html) =&gt;\n    _enforceInHtmlHelper(html, 'ltr');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enforceLtrInText",
                    "type": "dart:core.String",
                    "desc": "<p>Enforce LTR on both end of the given <code>text<\/code> using unicode BiDi formatting\ncharacters LRE and PDF.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/enforceLtrInText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceLtrInText(String text) =&gt; '$LRE$text$PDF';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enforceRtlInHtml",
                    "type": "dart:core.String",
                    "desc": "<p>Enforce the <code>html<\/code> snippet in RTL directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must\nenclose the whole piece. If the tag already has a direction specified,\nthis new one will override existing one in behavior (should work on\nChrome, FF, and IE since this was ported directly from the Closure\nversion).<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "html",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/enforceRtlInHtml.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceRtlInHtml(String html) =&gt;\n    _enforceInHtmlHelper(html, 'rtl');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enforceRtlInText",
                    "type": "dart:core.String",
                    "desc": "<p>Enforce RTL on both end of the given <code>text<\/code> using unicode BiDi formatting\ncharacters RLE and PDF.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/enforceRtlInText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceRtlInText(String text) =&gt; '$RLE$text$PDF';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "estimateDirectionOfText",
                    "type": "intl.TextDirection",
                    "desc": "<p>Estimates the directionality of <code>text<\/code> using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n<code>isHtml<\/code> is true if <code>text<\/code> HTML or HTML-escaped.<\/p>\n<p>If the number of RTL words is above a certain percentage of the total\nnumber of strongly directional words, returns RTL.\nOtherwise, if any words are strongly or weakly LTR, returns LTR.\nOtherwise, returns UNKNOWN, which is used to mean <code>neutral<\/code>.\nNumbers and URLs are counted as weakly LTR.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/estimateDirectionOfText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextDirection estimateDirectionOfText(String text,\n    {bool isHtml: false}) {\n  text = isHtml ? stripHtmlIfNeeded(text) : text;\n  var rtlCount = 0;\n  var total = 0;\n  var hasWeaklyLtr = false;\n  \/\/ Split a string into 'words' for directionality estimation based on\n  \/\/ relative word counts.\n  for (String token in text.split(new RegExp(r'\\s+'))) {\n    if (startsWithRtl(token)) {\n      rtlCount++;\n      total++;\n    } else if (new RegExp(r'^http:\/\/').hasMatch(token)) {\n      \/\/ Checked if token looks like something that must always be LTR even in\n      \/\/ RTL text, such as a URL.\n      hasWeaklyLtr = true;\n    } else if (hasAnyLtr(token)) {\n      total++;\n    } else if (new RegExp(r'\\d').hasMatch(token)) {\n      \/\/ Checked if token contains any numerals.\n      hasWeaklyLtr = true;\n    }\n  }\n\n  if (total == 0) {\n    return hasWeaklyLtr ? TextDirection.LTR : TextDirection.UNKNOWN;\n  } else if (rtlCount &gt; _RTL_DETECTION_THRESHOLD * total) {\n    return TextDirection.RTL;\n  } else {\n    return TextDirection.LTR;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "guardBracketInHtml",
                    "type": "dart:core.String",
                    "desc": "<p>Apply bracket guard to <code>str<\/code> using html span tag. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nIf <code>isRtlContext<\/code> is true, then we explicitly want to wrap in a span of\nRTL directionality, regardless of the estimated directionality.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "str",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isRtlContext",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/guardBracketInHtml.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String guardBracketInHtml(String str, [bool isRtlContext]) {\n  var useRtl = isRtlContext == null ? hasAnyRtl(str) : isRtlContext;\n  RegExp matchingBrackets =\n      new RegExp(r'(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(&amp;lt;.*?(&amp;gt;)+)');\n  return _guardBracketHelper(str, matchingBrackets,\n      '&lt;span dir=${useRtl? \"rtl\" : \"ltr\"}&gt;', '&lt;\/span&gt;');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "guardBracketInText",
                    "type": "dart:core.String",
                    "desc": "<p>Apply bracket guard to <code>str<\/code> using LRM and RLM. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nThis version works for both plain text and html, but in some cases is not\nas good as guardBracketInHtml. If <code>isRtlContext<\/code> is true, then we\nexplicitly want to wrap in a span of RTL directionality, regardless of the\nestimated directionality.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "str",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isRtlContext",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/guardBracketInText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String guardBracketInText(String str, [bool isRtlContext]) {\n  var useRtl = isRtlContext == null ? hasAnyRtl(str) : isRtlContext;\n  var mark = useRtl ? RLM : LRM;\n  return _guardBracketHelper(str,\n      new RegExp(r'(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(&lt;.*?&gt;+)'), mark, mark);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hasAnyLtr",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the given <code>text<\/code> has any LTR characters in it.\nIf <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/hasAnyLtr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool hasAnyLtr(String text, [isHtml = false]) {\n  return new RegExp(r'[' '$_LTR_CHARS' r']')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hasAnyRtl",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the given <code>text<\/code> has any RTL characters in it.\nIf <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/hasAnyRtl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool hasAnyRtl(String text, [isHtml = false]) {\n  return new RegExp(r'[' '$_RTL_CHARS' r']')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isRtlLanguage",
                    "type": "dart:core.bool",
                    "desc": "<p>Check if a BCP 47 \/ III <code>languageString<\/code> indicates an RTL language.<\/p>\n<p>i.e. either:<\/p>\n<ul>\n<li>a language code explicitly specifying one of the right-to-left scripts,\ne.g. \"az-Arab\", or<\/li>\n<li>a language code specifying one of the languages normally written in a\nright-to-left script, e.g. \"fa\" (Farsi), except ones explicitly\nspecifying Latin or Cyrillic script (which are the usual LTR\nalternatives).<\/li>\n<\/ul>\n<p>The list of right-to-left scripts appears in the 100-199 range in\n<a href=\"http:\/\/www.unicode.org\/iso15924\/iso15924-num.html\">http:\/\/www.unicode.org\/iso15924\/iso15924-num.html<\/a>, of which Arabic and\nHebrew are by far the most widely used. We also recognize Thaana, N'Ko,\nand Tifinagh, which also have significant modern usage. The rest (Syriac,\nSamaritan, Mandaic, etc.) seem to have extremely limited or no modern\nusage and are not recognized.  The languages usually written in a\nright-to-left script are taken as those with Suppress-Script:\nHebr|Arab|Thaa|Nkoo|Tfng in\n<a href=\"http:\/\/www.iana.org\/assignments\/language-subtag-registry\">http:\/\/www.iana.org\/assignments\/language-subtag-registry<\/a>, as well as\nSindhi (sd) and Uyghur (ug).  The presence of other subtags of the\nlanguage code, e.g. regions like EG (Egypt), is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "languageString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/isRtlLanguage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isRtlLanguage([String languageString]) {\n  var language = languageString ?? Intl.getCurrentLocale();\n  if (_lastLocaleCheckedForRtl != language) {\n    _lastLocaleCheckedForRtl = language;\n    _lastRtlCheck = _rtlLocaleRegex.hasMatch(language);\n  }\n  return _lastRtlCheck;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "normalizeHebrewQuote",
                    "type": "dart:core.String",
                    "desc": "<p>Replace the double and single quote directly after a Hebrew character in\n<code>str<\/code> with GERESH and GERSHAYIM. This is most likely the user's intention.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "str",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/normalizeHebrewQuote.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String normalizeHebrewQuote(String str) {\n  StringBuffer buf = new StringBuffer();\n  if (str.length &gt; 0) {\n    buf.write(str.substring(0, 1));\n  }\n  \/\/ Start at 1 because we're looking for the patterns [\\u0591-\\u05f2])\" or\n  \/\/ [\\u0591-\\u05f2]'.\n  for (int i = 1; i &lt; str.length; i++) {\n    if (str.substring(i, i + 1) == '\"' &amp;&amp;\n        new RegExp('[\\u0591-\\u05f2]').hasMatch(str.substring(i - 1, i))) {\n      buf.write('\\u05f4');\n    } else if (str.substring(i, i + 1) == \"'\" &amp;&amp;\n        new RegExp('[\\u0591-\\u05f2]').hasMatch(str.substring(i - 1, i))) {\n      buf.write('\\u05f3');\n    } else {\n      buf.write(str.substring(i, i + 1));\n    }\n  }\n  return buf.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "startsWithLtr",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the first character in <code>text<\/code> with strong directionality is\nLTR. If <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/startsWithLtr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool startsWithLtr(String text, [isHtml = false]) {\n  return new RegExp('^[^$_RTL_CHARS]*[$_LTR_CHARS]')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "startsWithRtl",
                    "type": "dart:core.bool",
                    "desc": "<p>Determines if the first character in <code>text<\/code> with strong directionality is\nRTL. If <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/startsWithRtl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool startsWithRtl(String text, [isHtml = false]) {\n  return new RegExp('^[^$_LTR_CHARS]*[$_RTL_CHARS]')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stripHtmlIfNeeded",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the input <code>text<\/code> with spaces instead of HTML tags or HTML escapes,\nwhich is helpful for text directionality estimation.\nNote: This function should not be used in other contexts.\nIt does not deal well with many things: comments, script,\nelements, style elements, dir attribute,<code>&gt;<\/code> in quoted attribute values,\netc. But it does handle well enough the most common use cases.\nSince the worst that can happen as a result of these shortcomings is that\nthe wrong directionality will be estimated, we have not invested in\nimproving this.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Bidi",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Bidi\/stripHtmlIfNeeded.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String stripHtmlIfNeeded(String text) {\n  \/\/ The regular expression is simplified for an HTML tag (opening or\n  \/\/ closing) or an HTML escape. We might want to skip over such expressions\n  \/\/ when estimating the text directionality.\n  return text.replaceAll(new RegExp(r'&lt;[^&gt;]*&gt;|&amp;[^;]+;'), ' ');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "intl\/Bidi\/LRE-constant.html",
                    "desc": "<p>Unicode \"Left-To-Right Embedding\" (LRE) character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LRE = '\\u202A'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRE",
                    "memberOf": "intl.Bidi"
                },
                {
                    "type": "",
                    "href": "intl\/Bidi\/LRM-constant.html",
                    "desc": "<p>Unicode \"Left-To-Right Mark\" (LRM) character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LRM = '\\u200E'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRM",
                    "memberOf": "intl.Bidi"
                },
                {
                    "type": "",
                    "href": "intl\/Bidi\/PDF-constant.html",
                    "desc": "<p>Unicode \"Pop Directional Formatting\" (PDF) character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PDF = '\\u202C'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PDF",
                    "memberOf": "intl.Bidi"
                },
                {
                    "type": "",
                    "href": "intl\/Bidi\/RLE-constant.html",
                    "desc": "<p>Unicode \"Right-To-Left Embedding\" (RLE) character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RLE = '\\u202B'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLE",
                    "memberOf": "intl.Bidi"
                },
                {
                    "type": "",
                    "href": "intl\/Bidi\/RLM-constant.html",
                    "desc": "<p>Unicode \"Right-To-Left Mark\" (RLM) character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RLM = '\\u200F'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLM",
                    "memberOf": "intl.Bidi"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/Bidi-class.html",
            "desc": "<p>This provides utility methods for working with bidirectional text. All\nof the methods are static, and are organized into a class primarily to\ngroup them together for documentation and discoverability.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Bidi"
        },
        {
            "name": "intl.BidiFormatter",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "BidiFormatter.LTR",
                    "type": "",
                    "desc": "<p>Create a formatting object with a direction. If <code>alwaysSpan<\/code> is true we\nshould always use a <code>span<\/code> tag, even when the input directionality is\nneutral or matches the context, so that the DOM structure of the output\ndoes not depend on the combination of directionalities.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "alwaysSpan",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/BidiFormatter\/BidiFormatter.LTR.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidiFormatter.LTR([alwaysSpan = false])\n    : contextDirection = TextDirection.LTR,\n      _alwaysSpan = alwaysSpan;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BidiFormatter.RTL",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "alwaysSpan",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/BidiFormatter\/BidiFormatter.RTL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidiFormatter.RTL([alwaysSpan = false])\n    : contextDirection = TextDirection.RTL,\n      _alwaysSpan = alwaysSpan;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BidiFormatter.UNKNOWN",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "alwaysSpan",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/BidiFormatter\/BidiFormatter.UNKNOWN.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidiFormatter.UNKNOWN([alwaysSpan = false])\n    : contextDirection = TextDirection.UNKNOWN,\n      _alwaysSpan = alwaysSpan;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "estimateDirection",
                    "type": "intl.TextDirection",
                    "desc": "<p>Estimates the directionality of <code>text<\/code> using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n<code>isHtml<\/code> is true if <code>text<\/code> HTML or HTML-escaped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/BidiFormatter\/estimateDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection estimateDirection(String text, {bool isHtml: false}) {\n  return Bidi.estimateDirectionOfText(text, isHtml: isHtml); \/\/TODO~!!!\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWithSpan",
                    "type": "dart:core.String",
                    "desc": "<p>Formats a string of a given (or estimated, if not provided) <code>direction<\/code>\nfor use in HTML output of the context directionality, so an\nopposite-directionality string is neither garbled nor garbles what follows\nit.<\/p>\n<p>If the input string's directionality doesn't match the context\ndirectionality, we wrap it with a <code>span<\/code> tag and add a <code>dir<\/code> attribute\n(either \"dir=rtl\" or \"dir=ltr\").  If alwaysSpan was true when constructing\nthe formatter, the input is always wrapped with <code>span<\/code> tag, skipping the\ndir attribute when it's not needed.<\/p>\n<p>If <code>resetDir<\/code> is true and the overall directionality or the exit\ndirectionality of <code>text<\/code> is opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM). If <code>isHtml<\/code> is false, we HTML-escape the <code>text<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "resetDir",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "direction",
                            "type": "intl.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/BidiFormatter\/wrapWithSpan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String wrapWithSpan(String text,\n    {bool isHtml: false, bool resetDir: true, TextDirection direction}) {\n  if (direction == null) direction = estimateDirection(text, isHtml: isHtml);\n  var result;\n  if (!isHtml) text = const HtmlEscape().convert(text);\n  var directionChange = contextDirection.isDirectionChange(direction);\n  if (_alwaysSpan || directionChange) {\n    var spanDirection = '';\n    if (directionChange) {\n      spanDirection = ' dir=${direction.spanText}';\n    }\n    result = '&lt;span$spanDirection&gt;$text&lt;\/span&gt;';\n  } else {\n    result = text;\n  }\n  return result + (resetDir ? _resetDir(text, direction, isHtml) : '');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWithUnicode",
                    "type": "dart:core.String",
                    "desc": "<p>Format <code>text<\/code> of a known (if specified) or estimated <code>direction<\/code> for use\nin <em>plain-text<\/em> output of the context directionality, so an\nopposite-directionality text is neither garbled nor garbles what follows\nit. Unlike wrapWithSpan, this makes use of unicode BiDi formatting\ncharacters instead of spans for wrapping. The returned string would be\nRLE+text+PDF for RTL text, or LRE+text+PDF for LTR text.<\/p>\n<p>If <code>resetDir<\/code> is true, and if the overall directionality or the exit\ndirectionality of text are opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM).<\/p>\n<p>In HTML, the <em>only<\/em> valid use of this function is inside of elements that\ndo not allow markup, e.g. an 'option' tag.\nThis function does <em>not<\/em> do HTML-escaping regardless of the value of\n<code>isHtml<\/code>. <code>isHtml<\/code> is used to designate if the text contains HTML (escaped\nor unescaped).<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.BidiFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isHtml",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "resetDir",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "direction",
                            "type": "intl.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/BidiFormatter\/wrapWithUnicode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String wrapWithUnicode(String text,\n    {bool isHtml: false, bool resetDir: true, TextDirection direction}) {\n  if (direction == null) direction = estimateDirection(text, isHtml: isHtml);\n  var result = text;\n  if (contextDirection.isDirectionChange(direction)) {\n    var marker = direction == TextDirection.RTL ? Bidi.RLE : Bidi.LRE;\n    result = \"${marker}$text${Bidi.PDF}\";\n  }\n  return result + (resetDir ? _resetDir(text, direction, isHtml) : '');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "contextDirection",
                    "type": "intl.TextDirection",
                    "types": [],
                    "desc": "<p>The direction of the surrounding text (the context).<\/p>\n        ",
                    "memberOf": "intl.BidiFormatter",
                    "isConstant": false,
                    "href": "intl\/BidiFormatter\/contextDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection contextDirection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isRTL",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Is true if the known context direction for this formatter is RTL.<\/p>\n        ",
                    "memberOf": "intl.BidiFormatter",
                    "isConstant": false,
                    "href": "intl\/BidiFormatter\/isRTL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRTL =&gt; contextDirection == TextDirection.RTL;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/BidiFormatter-class.html",
            "desc": "<p>Bidi stands for Bi-directional text.  According to\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Bi-directional_text\">Wikipedia<\/a>:\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to\nboustrophedon, which is changing text directionality in each row.<\/p>\n<p>Utility class for formatting display text in a potentially\nopposite-directionality context without garbling layout issues.  Mostly a\nvery \"slimmed-down\" and dart-ified port of the Closure Birectional\nformatting libary. If there is a utility in the Closure library (or ICU, or\nelsewhere) that you would like this formatter to make available, please\ncontact the Dart team.<\/p>\n<p>Provides the following functionality:<\/p>\n<ol>\n<li>\n<p><em>BiDi Wrapping<\/em>\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a \"wrapper\" that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts where mark-up\ncan not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.<\/p>\n<\/li>\n<li>\n<p><em>Directionality estimation<\/em>\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.<\/p>\n<\/li>\n<li>\n<p><em>Escaping<\/em>\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent\nXSS attacks and other nasty business. This of course is always true, but the\nescaping cannot be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.<\/p>\n<\/li>\n<\/ol>\n<p>Thus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BidiFormatter"
        },
        {
            "name": "intl.DateFormat",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "DateFormat",
                    "type": "",
                    "desc": "<p>Creates a new DateFormat, using the format specified by <code>newPattern<\/code>.<\/p>\n<p>For forms that match one of our predefined skeletons, we look up the\ncorresponding pattern in <code>locale<\/code> (or in the default locale if none is\nspecified) and use the resulting full format string. This is the preferred\nusage, but if <code>newPattern<\/code> does not match one of the skeletons, then it is\nused as a format directly, but will not be adapted to suit the locale.<\/p>\n<p>For example, in an en_US locale, specifying the skeleton<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat.yMEd();\n<\/code><\/pre>\n<p>or the explicit<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat('EEE, M\/d\/y');\n<\/code><\/pre>\n<p>would produce the same result, a date of the form \"Wed, 6\/27\/2012\".<\/p>\n<p>The first version would produce a different format string if used in\nanother locale, but the second format would always be the same.<\/p>\n<p>If <code>locale<\/code> does not exist in our set of supported locales then an\n<a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat([String newPattern, String locale]) {\n  \/\/ TODO(alanknight): It should be possible to specify multiple skeletons eg\n  \/\/ date, time, timezone all separately. Adding many or named parameters to\n  \/\/ the constructor seems awkward, especially with the possibility of\n  \/\/ confusion with the locale. A \"fluent\" interface with cascading on an\n  \/\/ instance might work better? A list of patterns is also possible.\n  _locale = Intl.verifiedLocale(locale, localeExists);\n  addPattern(newPattern);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.E",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.E.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.E([locale]) : this(\"E\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.EEEE",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.EEEE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.EEEE([locale]) : this(\"EEEE\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.H",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.H.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.H([locale]) : this(\"H\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.Hm",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.Hm.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.Hm([locale]) : this(\"Hm\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.Hms",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.Hms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.Hms([locale]) : this(\"Hms\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.LLL",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.LLL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.LLL([locale]) : this(\"LLL\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.LLLL",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.LLLL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.LLLL([locale]) : this(\"LLLL\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.M",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.M.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.M([locale]) : this(\"M\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MEd([locale]) : this(\"MEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMM",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMM([locale]) : this(\"MMM\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMMEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMMEd([locale]) : this(\"MMMEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMMM",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMMM([locale]) : this(\"MMMM\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMMMEEEEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMMMEEEEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMMMEEEEd([locale]) : this(\"MMMMEEEEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMMMd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMMMd([locale]) : this(\"MMMMd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.MMMd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.MMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.MMMd([locale]) : this(\"MMMd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.Md",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.Md.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.Md([locale]) : this(\"Md\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.QQQ",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.QQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.QQQ([locale]) : this(\"QQQ\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.QQQQ",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.QQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.QQQQ([locale]) : this(\"QQQQ\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addPattern",
                    "type": "intl.DateFormat",
                    "desc": "<p>Add <code>inputPattern<\/code> to this instance as a pattern.<\/p>\n<p>If there was a previous pattern, then this appends to it, separating the\ntwo by <code>separator<\/code>.  <code>inputPattern<\/code> is first looked up in our list of\nknown skeletons.  If it's found there, then use the corresponding pattern\nfor this locale.  If it's not, then treat <code>inputPattern<\/code> as an explicit\npattern.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputPattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/addPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat addPattern(String inputPattern, [String separator = ' ']) {\n  \/\/ TODO(alanknight): This is an expensive operation. Caching recently used\n  \/\/ formats, or possibly introducing an entire \"locale\" object that would\n  \/\/ cache patterns for that locale could be a good optimization.\n  \/\/ If we have already parsed the format fields, reset them.\n  _formatFieldsPrivate = null;\n  if (inputPattern == null) return this;\n  if (!_availableSkeletons.containsKey(inputPattern)) {\n    _appendPattern(inputPattern, separator);\n  } else {\n    _appendPattern(_availableSkeletons[inputPattern], separator);\n  }\n  return this;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_E",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_E.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_E() =&gt; addPattern(\"E\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_EEEE",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_EEEE.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_EEEE() =&gt; addPattern(\"EEEE\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_H",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_H.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_H() =&gt; addPattern(\"H\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_Hm",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_Hm.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_Hm() =&gt; addPattern(\"Hm\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_Hms",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_Hms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_Hms() =&gt; addPattern(\"Hms\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_LLL",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_LLL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_LLL() =&gt; addPattern(\"LLL\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_LLLL",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_LLLL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_LLLL() =&gt; addPattern(\"LLLL\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_M",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_M.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_M() =&gt; addPattern(\"M\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MEd() =&gt; addPattern(\"MEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMM",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMM() =&gt; addPattern(\"MMM\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMMEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMMEd() =&gt; addPattern(\"MMMEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMMM",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMMM() =&gt; addPattern(\"MMMM\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMMMEEEEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMMMEEEEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMMMEEEEd() =&gt; addPattern(\"MMMMEEEEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMMMd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMMMd() =&gt; addPattern(\"MMMMd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_MMMd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_MMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_MMMd() =&gt; addPattern(\"MMMd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_Md",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_Md.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_Md() =&gt; addPattern(\"Md\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_QQQ",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_QQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_QQQ() =&gt; addPattern(\"QQQ\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_QQQQ",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_QQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_QQQQ() =&gt; addPattern(\"QQQQ\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_d",
                    "type": "intl.DateFormat",
                    "desc": "<p>The \"add_*\" methods append a particular skeleton to the format, or set\nit as the only format if none was previously set. These are primarily\nuseful for creating compound formats. For example<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat.yMd().add_Hms();\n<\/code><\/pre>\n<p>would create a date format that prints both the date and the time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_d.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_d() =&gt; addPattern(\"d\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_j",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_j.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_j() =&gt; addPattern(\"j\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jm",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jm.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jm() =&gt; addPattern(\"jm\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jms",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jms() =&gt; addPattern(\"jms\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jmv",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jmv.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jmv() =&gt; addPattern(\"jmv\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jmz",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jmz.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jmz() =&gt; addPattern(\"jmz\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jv",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jv.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jv() =&gt; addPattern(\"jv\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_jz",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_jz.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_jz() =&gt; addPattern(\"jz\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_m",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_m.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_m() =&gt; addPattern(\"m\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_ms",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_ms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_ms() =&gt; addPattern(\"ms\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_s",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_s.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_s() =&gt; addPattern(\"s\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_y",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_y() =&gt; addPattern(\"y\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yM",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yM() =&gt; addPattern(\"yM\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMEd() =&gt; addPattern(\"yMEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMM",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMM() =&gt; addPattern(\"yMMM\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMMEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMMEd() =&gt; addPattern(\"yMMMEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMMM",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMMM() =&gt; addPattern(\"yMMMM\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMMMEEEEd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMMMEEEEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMMMEEEEd() =&gt; addPattern(\"yMMMMEEEEd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMMMd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMMMd() =&gt; addPattern(\"yMMMMd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMMMd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMMMd() =&gt; addPattern(\"yMMMd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yMd",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yMd() =&gt; addPattern(\"yMd\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yQQQ",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yQQQ() =&gt; addPattern(\"yQQQ\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add_yQQQQ",
                    "type": "intl.DateFormat",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/add_yQQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat add_yQQQQ() =&gt; addPattern(\"yQQQQ\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "allLocalesWithSymbols",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "<p>Returns a list of all locales for which we have date formatting\ninformation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/allLocalesWithSymbols.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;String&gt; allLocalesWithSymbols() =&gt;\n    new List&lt;String&gt;.from(dateTimeSymbols.keys);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "DateFormat.d",
                    "type": "",
                    "desc": "<p>The named constructors for this class are all conveniences for creating\ninstances using one of the known \"skeleton\" formats, and having code\ncompletion support for discovering those formats.\nSo,<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat.yMd(\"en_US\")\n<\/code><\/pre>\n<p>is equivalent to<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat(\"yMd\", \"en_US\")\n<\/code><\/pre>\n<p>To create a compound format you can use these constructors in combination\nwith the \"add_*\" methods below. e.g.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new DateFormat.yMd().add_Hms();\n<\/code><\/pre>\n<p>If the optional <code>locale<\/code> is omitted, the format will be created using the\ndefault locale in <a href=\"intl\/Intl\/systemLocale.html\">Intl.systemLocale<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.d.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.d([locale]) : this(\"d\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "format",
                    "type": "dart:core.String",
                    "desc": "<p>Return a string representing <code>date<\/code> formatted according to our locale\nand internal format.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "date",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/format.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String format(DateTime date) {\n  \/\/ TODO(efortuna): read optional TimeZone argument (or similar)?\n  var result = new StringBuffer();\n  _formatFields.forEach((field) =&gt; result.write(field.format(date)));\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "formatDuration",
                    "type": "dart:core.String",
                    "desc": "<p>NOT YET IMPLEMENTED.<\/p>\n<p>Returns a date string indicating how long ago (3 hours, 2 minutes)\nsomething has happened or how long in the future something will happen\ngiven a <code>reference<\/code> DateTime relative to the current time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "reference",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/formatDuration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String formatDuration(DateTime reference) =&gt; '';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "formatDurationFrom",
                    "type": "dart:core.String",
                    "desc": "<p>NOT YET IMPLEMENTED.<\/p>\n<p>Formats a string indicating how long ago (negative <code>duration<\/code>) or how far\nin the future (positive <code>duration<\/code>) some time is with respect to a\nreference <code>date<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "date",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/formatDurationFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String formatDurationFrom(Duration duration, DateTime date) =&gt; '';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.j",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.j.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.j([locale]) : this(\"j\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jm",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jm.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jm([locale]) : this(\"jm\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jms",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jms([locale]) : this(\"jms\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jmv",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jmv.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jmv([locale]) : this(\"jmv\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jmz",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jmz.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jmz([locale]) : this(\"jmz\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jv",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jv.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jv([locale]) : this(\"jv\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.jz",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.jz.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.jz([locale]) : this(\"jz\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "localeExists",
                    "type": "dart:core.bool",
                    "desc": "<p>Return true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "localeName",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/localeExists.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool localeExists(localeName) {\n  if (localeName == null) return false;\n  return dateTimeSymbols.containsKey(localeName);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.m",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.m.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.m([locale]) : this(\"m\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.ms",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.ms.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.ms([locale]) : this(\"ms\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parse",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Given user input, attempt to parse the <code>inputString<\/code> into the anticipated\nformat, treating it as being in the local timezone.<\/p>\n<p>If <code>inputString<\/code> does not match our format, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.\nThis will accept dates whose values are not strictly valid, or strings\nwith additional characters (including whitespace) after a valid date. For\nstricter parsing, use <a href=\"intl\/DateFormat\/parseStrict.html\">parseStrict<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "utc",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime parse(String inputString, [utc = false]) =&gt;\n    _parse(inputString, utc: utc, strict: false);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parseLoose",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Given user input, attempt to parse the <code>inputString<\/code> \"loosely\" into the\nanticipated format, accepting some variations from the strict format.<\/p>\n<p>If <code>inputString<\/code> is accepted by <a href=\"intl\/DateFormat\/parseStrict.html\">parseStrict<\/a>, just return the result. If\nnot, attempt to parse it, but accepting either upper or lower case,\nallowing delimiters to be missing and replaced or supplemented with\nwhitespace, and allowing arbitrary amounts of whitespace wherever\nwhitespace is permitted. Note that this does not allow trailing\ncharacters, the way <a href=\"intl\/DateFormat\/parse.html\">parse<\/a> does.  It also does not allow alternative\nnames for months or weekdays other than those the format knows about. The\nrestrictions are quite arbitrary and it's not known how well they'll work\nfor locales that aren't English-like.<\/p>\n<p>If <code>inputString<\/code> does not parse, this throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>For example, this will accept<\/p>\n<pre class=\"language-dart\"><code>  new DateFormat.yMMMd(\"en_US\").parseLoose(\"SEp   3 2014\");\n  new DateFormat.yMd(\"en_US\").parseLoose(\"09    03\/2014\");\n  new DateFormat.yMd(\"en_US\").parseLoose(\"09 \/ 03 \/ 2014\");\n<\/code><\/pre>\n<p>It will NOT accept<\/p>\n<pre class=\"language-dart\"><code> \/\/ \"Sept\" is not a valid month name.\n new DateFormat.yMMMd(\"en_US\").parseLoose(\"Sept 3, 2014\");\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "utc",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parseLoose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime parseLoose(String inputString, [utc = false]) {\n  try {\n    return _parse(inputString, utc: utc, strict: true);\n  } on FormatException {\n    return _parseLoose(inputString.toLowerCase(), utc);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parsePattern",
                    "type": "dart:core.List",
                    "desc": "<p>Parse the template pattern and return a list of field objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parsePattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;_DateFormatField&gt; parsePattern(String pattern) {\n  if (pattern == null) return null;\n  return _parsePatternHelper(pattern).reversed.toList();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parseStrict",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Given user input, attempt to parse the <code>inputString<\/code> into the anticipated\nformat, treating it as being in the local timezone.<\/p>\n<p>If <code>inputString<\/code> does not match our format, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.\nThis will reject dates whose values are not strictly valid, even if the\nDateTime constructor will accept them. It will also rejct strings with\nadditional characters (including whitespace) after a valid date. For\nlooser parsing, use <a href=\"intl\/DateFormat\/parse.html\">parse<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "utc",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parseStrict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime parseStrict(String inputString, [utc = false]) =&gt;\n    _parse(inputString, utc: utc, strict: true);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parseUTC",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Given user input, attempt to parse the <code>inputString<\/code> into the anticipated\nformat, treating it as being in UTC.<\/p>\n<p>The canonical Dart style name\nis <a href=\"intl\/DateFormat\/parseUtc.html\">parseUtc<\/a>, but <a href=\"intl\/DateFormat\/parseUTC.html\">parseUTC<\/a> is retained\nfor backward-compatibility.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parseUTC.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime parseUTC(String inputString) =&gt; parse(inputString, true);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parseUtc",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Given user input, attempt to parse the <code>inputString<\/code> into the anticipated\nformat, treating it as being in UTC.<\/p>\n<p>The canonical Dart style name\nis <a href=\"intl\/DateFormat\/parseUtc.html\">parseUtc<\/a>, but <a href=\"intl\/DateFormat\/parseUTC.html\">parseUTC<\/a> is retained\nfor backward-compatibility.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/parseUtc.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime parseUtc(String inputString) =&gt; parse(inputString, true);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.s",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.s.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.s([locale]) : this(\"s\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "shouldUseNativeDigitsByDefaultFor",
                    "type": "",
                    "desc": "<p>Should a new DateFormat for <code>locale<\/code> have useNativeDigits true.<\/p>\n<p>For example, for locale 'ar' when this setting is true, DateFormat will\nformat using Eastern Arabic digits, e.g. \"\\u0660, \\u0661, \\u0662\". If it\nis false, a new DateFormat will format using ASCII digits.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/shouldUseNativeDigitsByDefaultFor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static shouldUseNativeDigitsByDefaultFor(String locale) {\n  return _useNativeDigitsByDefault[locale] ?? true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "useNativeDigitsByDefaultFor",
                    "type": "",
                    "desc": "<p>Indicate if a new DateFormat for <code>locale<\/code> should have useNativeDigits\ntrue.<\/p>\n<p>For example, for locale 'ar' when this setting is true, DateFormat will\nformat using Eastern Arabic digits, e.g. \"\\u0660, \\u0661, \\u0662\". If it\nis false, a new DateFormat will format using ASCII digits.<\/p>\n<p>If not indicated, the default value is true, so native digits will be\nused.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/DateFormat\/useNativeDigitsByDefaultFor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static useNativeDigitsByDefaultFor(String locale, bool value) {\n  _useNativeDigitsByDefault[locale] = value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "DateFormat.y",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.y([locale]) : this(\"y\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yM",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yM([locale]) : this(\"yM\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMEd([locale]) : this(\"yMEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMM",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMM([locale]) : this(\"yMMM\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMMEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMMEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMMEd([locale]) : this(\"yMMMEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMMM",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMMM.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMMM([locale]) : this(\"yMMMM\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMMMEEEEd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMMMEEEEd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMMMEEEEd([locale]) : this(\"yMMMMEEEEd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMMMd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMMMd([locale]) : this(\"yMMMMd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMMMd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMMMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMMMd([locale]) : this(\"yMMMd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yMd",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yMd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yMd([locale]) : this(\"yMd\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yQQQ",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yQQQ([locale]) : this(\"yQQQ\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DateFormat.yQQQQ",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.DateFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/DateFormat\/DateFormat.yQQQQ.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat.yQQQQ([locale]) : this(\"yQQQQ\", locale);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_MONTH-constant.html",
                    "desc": "<p>For each of the skeleton formats we also allow the use of the\ncorresponding ICU constant names.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_MONTH = 'MMM'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_MONTH_DAY = 'MMMd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_MONTH_WEEKDAY_DAY = 'MMMEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_QUARTER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_QUARTER = 'QQQ'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_QUARTER",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_STANDALONE_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_STANDALONE_MONTH = 'LLL'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_STANDALONE_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/ABBR_WEEKDAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ABBR_WEEKDAY = 'E'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABBR_WEEKDAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String DAY = 'd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR = 'j'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR24-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR24 = 'H'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR24",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR24_MINUTE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR24_MINUTE = 'Hm'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR24_MINUTE",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR24_MINUTE_SECOND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR24_MINUTE_SECOND = 'Hms'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR24_MINUTE_SECOND",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_GENERIC_TZ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_GENERIC_TZ = 'jv'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_GENERIC_TZ",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_MINUTE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_MINUTE = 'jm'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_MINUTE",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_MINUTE_GENERIC_TZ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_MINUTE_GENERIC_TZ = 'jmv'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_MINUTE_GENERIC_TZ",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_MINUTE_SECOND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_MINUTE_SECOND = 'jms'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_MINUTE_SECOND",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_MINUTE_TZ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_MINUTE_TZ = 'jmz'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_MINUTE_TZ",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/HOUR_TZ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String HOUR_TZ = 'jz'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOUR_TZ",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/MINUTE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String MINUTE = 'm'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MINUTE",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/MINUTE_SECOND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String MINUTE_SECOND = 'ms'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MINUTE_SECOND",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String MONTH = 'MMMM'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String MONTH_DAY = 'MMMMd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String MONTH_WEEKDAY_DAY = 'MMMMEEEEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/NUM_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String NUM_MONTH = 'M'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NUM_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/NUM_MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String NUM_MONTH_DAY = 'Md'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NUM_MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/NUM_MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String NUM_MONTH_WEEKDAY_DAY = 'MEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NUM_MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/QUARTER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String QUARTER = 'QQQQ'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "QUARTER",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/SECOND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String SECOND = 's'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SECOND",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/STANDALONE_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String STANDALONE_MONTH = 'LLLL'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STANDALONE_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/WEEKDAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String WEEKDAY = 'EEEE'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WEEKDAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR = 'y'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_ABBR_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_ABBR_MONTH = 'yMMM'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_ABBR_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_ABBR_MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_ABBR_MONTH_DAY = 'yMMMd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_ABBR_MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_ABBR_MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_ABBR_MONTH_WEEKDAY_DAY = 'yMMMEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_ABBR_MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_ABBR_QUARTER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_ABBR_QUARTER = 'yQQQ'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_ABBR_QUARTER",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_MONTH = 'yMMMM'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_MONTH_DAY = 'yMMMMd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_MONTH_WEEKDAY_DAY = 'yMMMMEEEEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_NUM_MONTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_NUM_MONTH = 'yM'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_NUM_MONTH",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_NUM_MONTH_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_NUM_MONTH_DAY = 'yMd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_NUM_MONTH_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_NUM_MONTH_WEEKDAY_DAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_NUM_MONTH_WEEKDAY_DAY = 'yMEd'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_NUM_MONTH_WEEKDAY_DAY",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "type": "",
                    "href": "intl\/DateFormat\/YEAR_QUARTER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String YEAR_QUARTER = 'yQQQQ'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "YEAR_QUARTER",
                    "memberOf": "intl.DateFormat"
                },
                {
                    "name": "dateOnly",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Does our format only only date fields, and no time fields.<\/p>\n<p>For example, 'yyyy-MM-dd' would be true, but 'dd hh:mm' would be false.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/dateOnly.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get dateOnly =&gt; _dateOnly ??= _checkDateOnly;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dateSymbols",
                    "type": "date_symbols.DateSymbols",
                    "types": [],
                    "desc": "<p>Return the <code>DateSymbol<\/code> information for the locale.<\/p>\n<p>This can be useful to find lists like the names of weekdays or months in a\nlocale, but the structure of this data may change, and it's generally\nbetter to go through the <a href=\"intl\/DateFormat\/format.html\">format<\/a> and <a href=\"intl\/DateFormat\/parse.html\">parse<\/a> APIs. If the locale isn't\npresent, or is uninitialized, returns null.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/dateSymbols.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateSymbols get dateSymbols {\n  if (_locale != lastDateSymbolLocale) {\n    lastDateSymbolLocale = _locale;\n    cachedDateSymbols = dateTimeSymbols[_locale];\n  }\n  return cachedDateSymbols;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "digitMatcher",
                    "type": "dart:core.RegExp",
                    "types": [],
                    "desc": "<p>A regular expression which matches against digits for this locale.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/digitMatcher.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">RegExp get digitMatcher {\n  if (_digitMatcher != null) return _digitMatcher;\n  _digitMatcher = _digitMatchers.putIfAbsent(localeZero, _initDigitMatcher);\n  return _digitMatcher;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Return the locale code in which we operate, e.g. 'en_US' or 'pt'.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get locale =&gt; _locale;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localeZero",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>For performance, keep the zero digit available.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/localeZero.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get localeZero =&gt; _localeZero == null\n    ? _localeZero = (useNativeDigits ? dateSymbols.ZERODIGIT ?? '0' : '0')\n    : _localeZero;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localeZeroCodeUnit",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>For performance, keep the code unit of the zero digit available.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/localeZeroCodeUnit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get localeZeroCodeUnit =&gt; _localeZeroCodeUnit == null\n    ? _localeZeroCodeUnit = localeZero.codeUnitAt(0)\n    : _localeZeroCodeUnit;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pattern",
                    "type": "",
                    "types": [],
                    "desc": "<p>Return the pattern that we use to format dates.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/pattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">get pattern =&gt; _pattern;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "useNativeDigits",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Should we use native digits for printing DateTime, or ASCII.<\/p>\n<p>The default for this can be set using <a href=\"intl\/DateFormat\/useNativeDigitsByDefaultFor.html\">useNativeDigitsByDefaultFor<\/a>.<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/useNativeDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get useNativeDigits =&gt; _useNativeDigits == null\n    ? _useNativeDigits = shouldUseNativeDigitsByDefaultFor(locale)\n    : _useNativeDigits;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "usesAsciiDigits",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Does this use ASCII digits<\/p>\n        ",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/usesAsciiDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get usesAsciiDigits =&gt; !usesNativeDigits;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "usesNativeDigits",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.DateFormat",
                    "isConstant": false,
                    "href": "intl\/DateFormat\/usesNativeDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get usesNativeDigits =&gt;\n    useNativeDigits &amp;&amp; _localeZeroCodeUnit != _asciiZeroCodeUnit;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/DateFormat-class.html",
            "desc": "<p>DateFormat is for formatting and parsing dates in a locale-sensitive\nmanner.<\/p>\n<p>It allows the user to choose from a set of standard date time formats as\nwell as specify a customized pattern under certain locales. Date elements\nthat vary across locales include month name, week name, field order, etc.\nWe also allow the user to use any customized pattern to parse or format\ndate-time strings under certain locales. Date elements that vary across\nlocales include month name, weekname, field, order, etc.<\/p>\n<p>Formatting dates in the default \"en_US\" format does not require any\ninitialization. e.g.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(new DateFormat.yMMMd().format(new DateTime.now()));\n<\/code><\/pre>\n<p>But for other locales, the formatting data for the locale must be\nobtained. This can currently be done in one of three ways, determined by\nwhich library you import. In all cases, the \"initializeDateFormatting\"\nmethod must be called and will return a future that is complete once the\nlocale data is available. The result of the future isn't important, but the\ndata for that locale is available to the date formatting and parsing once it\ncompletes.<\/p>\n<p>The easiest option is that the data may be available locally, imported in a\nlibrary that contains data for all the locales.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">import 'package:intl\/date_symbol_data_local.dart';\ninitializeDateFormatting(\"fr_FR\", null).then((_) =&gt; runMyCode());\n<\/code><\/pre>\n<p>If we are running outside of a browser, we may want to read the data\nfrom files in the file system.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">import 'package:intl\/date_symbol_data_file.dart';\ninitializeDateFormatting(\"de_DE\", null).then((_) =&gt; runMyCode());\n<\/code><\/pre>\n<p>If we are running in a browser, we may want to read the data from the\nserver using the XmlHttpRequest mechanism.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">import 'package:intl\/date_symbol_data_http_request.dart';\ninitializeDateFormatting(\"pt_BR\", null).then((_) =&gt; runMyCode());\n<\/code><\/pre>\n<p>The code in example\/basic\/basic_example.dart shows a full example of\nusing this mechanism.<\/p>\n<p>Once we have the locale data, we need to specify the particular format.\nThis library uses the ICU\/JDK date\/time pattern specification both for\ncomplete format specifications and also the abbreviated \"skeleton\" form\nwhich can also adapt to different locales and is preferred where available.<\/p>\n<p>Skeletons: These can be specified either as the ICU constant name or as the\nskeleton to which it resolves. The supported set of skeletons is as follows.\nFor each skeleton there is a named constructor that can be used to create\nit.  It's also possible to pass the skeleton as a string, but the\nconstructor is preferred.<\/p>\n<pre class=\"language-dart\"><code> ICU Name                   Skeleton\n --------                   --------\n DAY                          d\n ABBR_WEEKDAY                 E\n WEEKDAY                      EEEE\n ABBR_STANDALONE_MONTH        LLL\n STANDALONE_MONTH             LLLL\n NUM_MONTH                    M\n NUM_MONTH_DAY                Md\n NUM_MONTH_WEEKDAY_DAY        MEd\n ABBR_MONTH                   MMM\n ABBR_MONTH_DAY               MMMd\n ABBR_MONTH_WEEKDAY_DAY       MMMEd\n MONTH                        MMMM\n MONTH_DAY                    MMMMd\n MONTH_WEEKDAY_DAY            MMMMEEEEd\n ABBR_QUARTER                 QQQ\n QUARTER                      QQQQ\n YEAR                         y\n YEAR_NUM_MONTH               yM\n YEAR_NUM_MONTH_DAY           yMd\n YEAR_NUM_MONTH_WEEKDAY_DAY   yMEd\n YEAR_ABBR_MONTH              yMMM\n YEAR_ABBR_MONTH_DAY          yMMMd\n YEAR_ABBR_MONTH_WEEKDAY_DAY  yMMMEd\n YEAR_MONTH                   yMMMM\n YEAR_MONTH_DAY               yMMMMd\n YEAR_MONTH_WEEKDAY_DAY       yMMMMEEEEd\n YEAR_ABBR_QUARTER            yQQQ\n YEAR_QUARTER                 yQQQQ\n HOUR24                       H\n HOUR24_MINUTE                Hm\n HOUR24_MINUTE_SECOND         Hms\n HOUR                         j\n HOUR_MINUTE                  jm\n HOUR_MINUTE_SECOND           jms\n HOUR_MINUTE_GENERIC_TZ       jmv\n HOUR_MINUTE_TZ               jmz\n HOUR_GENERIC_TZ              jv\n HOUR_TZ                      jz\n MINUTE                       m\n MINUTE_SECOND                ms\n SECOND                       s\n<\/code><\/pre>\n<p>Examples Using the US Locale:<\/p>\n<pre class=\"language-dart\"><code> Pattern                           Result\n ----------------                  -------\n new DateFormat.yMd()             -&gt; 7\/10\/1996\n new DateFormat(\"yMd\")            -&gt; 7\/10\/1996\n new DateFormat.yMMMMd(\"en_US\")   -&gt; July 10, 1996\n new DateFormat.jm()              -&gt; 5:08 PM\n new DateFormat.yMd().add_jm()    -&gt; 7\/10\/1996 5:08 PM\n new DateFormat.Hm()              -&gt; 17:08 \/\/ force 24 hour time\n<\/code><\/pre>\n<p>Explicit Pattern Syntax: Formats can also be specified with a pattern\nstring.  This can be used for formats that don't have a skeleton available,\nbut these will not adapt to different locales. For example, in an explicit\npattern the letters \"H\" and \"h\" are available for 24 hour and 12 hour time\nformats respectively. But there isn't a way in an explicit pattern to get\nthe behaviour of the \"j\" skeleton, which prints 24 hour or 12 hour time\naccording to the conventions of the locale, and also includes am\/pm markers\nwhere appropriate. So it is preferable to use the skeletons.<\/p>\n<p>The following characters are available in explicit patterns:<\/p>\n<pre class=\"language-dart\"><code>Symbol   Meaning                Presentation       Example\n------   -------                ------------       -------\nG        era designator         (Text)             AD\ny        year                   (Number)           1996\nM        month in year          (Text &amp; Number)    July &amp; 07\nL        standalone month       (Text &amp; Number)    July &amp; 07\nd        day in month           (Number)           10\nc        standalone day         (Number)           10\nh        hour in am\/pm (1~12)   (Number)           12\nH        hour in day (0~23)     (Number)           0\nm        minute in hour         (Number)           30\ns        second in minute       (Number)           55\nS        fractional second      (Number)           978\nE        day of week            (Text)             Tuesday\nD        day in year            (Number)           189\na        am\/pm marker           (Text)             PM\nk        hour in day (1~24)     (Number)           24\nK        hour in am\/pm (0~11)   (Number)           0\nz        time zone              (Text)             Pacific Standard Time\nZ        time zone (RFC 822)    (Number)           -0800\nv        time zone (generic)    (Text)             Pacific Time\nQ        quarter                (Text)             Q3\n'        escape for text        (Delimiter)        'Date='\n''       single quote           (Literal)          'o''clock'\n<\/code><\/pre>\n<p>The count of pattern letters determine the format.<\/p>\n<p><strong>Text<\/strong>:<\/p>\n<ul>\n<li>5 pattern letters--use narrow form for standalone. Otherwise not used.<\/li>\n<li>4 or more pattern letters--use full form,<\/li>\n<li>3 pattern letters--use short or abbreviated form if one exists<\/li>\n<li>less than 3--use numeric form if one exists<\/li>\n<\/ul>\n<p><strong>Number<\/strong>: the minimum number of digits. Shorter numbers are zero-padded to\nthis amount (e.g. if \"m\" produces \"6\", \"mm\" produces \"06\"). Year is handled\nspecially; that is, if the count of 'y' is 2, the Year will be truncated to\n2 digits. (e.g., if \"yyyy\" produces \"1997\", \"yy\" produces \"97\".) Unlike\nother fields, fractional seconds are padded on the right with zero.<\/p>\n<p><strong>(Text &amp; Number)<\/strong>: 3 or over, use text, otherwise use number.<\/p>\n<p>Any characters not in the pattern will be treated as quoted text. For\ninstance, characters like ':', '.', ' ', '#' and '@' will appear in the\nresulting text even though they are not enclosed in single quotes. In our\ncurrent pattern usage, not all letters have meanings. But those unused\nletters are strongly discouraged to be used as quoted text without quotes,\nbecause we may use other letters as pattern characters in the future.<\/p>\n<p>Examples Using the US Locale:<\/p>\n<pre class=\"language-dart\"><code>Format Pattern                    Result\n--------------                    -------\n\"yyyy.MM.dd G 'at' HH:mm:ss vvvv\" 1996.07.10 AD at 15:08:56 Pacific Time\n\"EEE, MMM d, ''yy\"                Wed, Jul 10, '96\n\"h:mm a\"                          12:08 PM\n\"hh 'o''clock' a, zzzz\"           12 o'clock PM, Pacific Daylight Time\n\"K:mm a, vvv\"                     0:00 PM, PT\n\"yyyyy.MMMMM.dd GGG hh:mm aaa\"    01996.July.10 AD 12:08 PM\n<\/code><\/pre>\n<p>When parsing a date string using the abbreviated year pattern (\"yy\"),\nDateFormat must interpret the abbreviated year relative to some\ncentury. It does this by adjusting dates to be within 80 years before and 20\nyears after the time the parse function is called. For example, using a\npattern of \"MM\/dd\/yy\" and a DateParse instance created on Jan 1, 1997,\nthe string \"01\/11\/12\" would be interpreted as Jan 11, 2012 while the string\n\"05\/04\/64\" would be interpreted as May 4, 1964. During parsing, only\nstrings consisting of exactly two digits will be parsed into the default\ncentury. Any other numeric string, such as a one digit string, a three or\nmore digit string will be interpreted as its face value.<\/p>\n<p>If the year pattern does not have exactly two 'y' characters, the year is\ninterpreted literally, regardless of the number of digits. So using the\npattern \"MM\/dd\/yyyy\", \"01\/11\/12\" parses to Jan 11, 12 A.D.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DateFormat"
        },
        {
            "name": "intl.Intl",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "Intl",
                    "type": "",
                    "desc": "<p>Constructor optionally <code>aLocale<\/code> for specifics of the language\nlocale to be used, otherwise, we will attempt to infer it (acceptable if\nDart is running on the client, we can infer from the browser\/client\npreferences).<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "aLocale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/Intl\/Intl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Intl([String aLocale]) {\n  _locale = aLocale != null ? aLocale : getCurrentLocale();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "canonicalizedLocale",
                    "type": "dart:core.String",
                    "desc": "<p>Return the name <code>aLocale<\/code> turned into xx_YY where it might possibly be\nin the wrong case or with a hyphen instead of an underscore. If\n<code>aLocale<\/code> is null, for example, if you tried to get it from IE,\nreturn the current system locale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "aLocale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/canonicalizedLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String canonicalizedLocale(String aLocale) {\n  \/\/ Locales of length &lt; 5 are presumably two-letter forms, or else malformed.\n  \/\/ We return them unmodified and if correct they will be found.\n  \/\/ Locales longer than 6 might be malformed, but also do occur. Do as\n  \/\/ little as possible to them, but make the '-' be an '_' if it's there.\n  \/\/ We treat C as a special case, and assume it wants en_ISO for formatting.\n  \/\/ TODO(alanknight): en_ISO is probably not quite right for the C\/Posix\n  \/\/ locale for formatting. Consider adding C to the formats database.\n  if (aLocale == null) return getCurrentLocale();\n  if (aLocale == \"C\") return \"en_ISO\";\n  if (aLocale.length &lt; 5) return aLocale;\n  if (aLocale[2] != '-' &amp;&amp; (aLocale[2] != '_')) return aLocale;\n  var region = aLocale.substring(3);\n  \/\/ If it's longer than three it's something odd, so don't touch it.\n  if (region.length &lt;= 3) region = region.toUpperCase();\n  return '${aLocale[0]}${aLocale[1]}_$region';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "date",
                    "type": "intl.DateFormat",
                    "desc": "<p>Return a new date format using the specified <code>pattern<\/code>.\nIf <code>desiredLocale<\/code> is not specified, then we default to <a href=\"intl\/Intl\/locale.html\">locale<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "desiredLocale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/date.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat date([String pattern, String desiredLocale]) {\n  var actualLocale = (desiredLocale == null) ? locale : desiredLocale;\n  return new DateFormat(pattern, actualLocale);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "gender",
                    "type": "dart:core.String",
                    "desc": "<p>Format a message differently depending on <code>targetGender<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "targetGender",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "female",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "male",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "other",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "desc",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "examples",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "args",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "meaning",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/gender.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String gender(String targetGender,\n    {String female,\n    String male,\n    String other,\n    String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  \/\/ Call our internal method, dropping args and desc because they're not used\n  \/\/ at runtime and we want them to be optimized away.\n  return _gender(targetGender,\n      male: male,\n      female: female,\n      other: other,\n      locale: locale,\n      name: name,\n      args: args,\n      meaning: meaning);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "genderLogic",
                    "type": "",
                    "desc": "<p>Internal: Implements the logic for gender selection - use <a href=\"intl\/Intl\/gender.html\">gender<\/a> for\nnormal messages.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "targetGender",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "female",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "male",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/genderLogic.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static genderLogic(String targetGender,\n    {female, male, other, String locale}) {\n  if (other == null) {\n    throw new ArgumentError(\"The 'other' named argument must be specified\");\n  }\n  switch (targetGender) {\n    case \"female\":\n      return female == null ? other : female;\n    case \"male\":\n      return male == null ? other : male;\n    default:\n      return other;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getCurrentLocale",
                    "type": "dart:core.String",
                    "desc": "<p>Accessor for the current locale. This should always == the default locale,\nunless for some reason this gets called inside a message that resets the\nlocale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/Intl\/getCurrentLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String getCurrentLocale() {\n  if (defaultLocale == null) defaultLocale = systemLocale;\n  return defaultLocale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "<p>Use this for a message that will be translated for different locales. The\nexpected usage is that this is inside an enclosing function that only\nreturns the value of this call and provides a scope for the variables that\nwill be substituted in the message.<\/p>\n<p>The <code>message_str<\/code> is the string to be translated, which may be\ninterpolated based on one or more variables. The <code>name<\/code> of the message\nmust match the enclosing function name. For methods, it can also be\nclassName_methodName. So for a method hello in class Simple, the name can\nbe either \"hello\" or \"Simple_hello\". The name must also be globally unique\nin the program, so the second form can make it easier to distinguish\nmessages with the same name but in different classes.<\/p>\n<p>The <code>args<\/code> repeats the arguments of the enclosing\nfunction, <code>desc<\/code> provides a description of usage,\n<code>examples<\/code> is a Map of examples for each interpolated variable.\nFor example<\/p>\n<pre class=\"language-dart\"><code>  hello(yourName) =&gt; Intl.message(\n    \"Hello, $yourName\",\n    name: \"hello\",\n    args: [yourName],\n    desc: \"Say hello\",\n    examples = const {\"yourName\": \"Sparky\"}.\n<\/code><\/pre>\n<p>The source code will be processed via the analyzer to extract out the\nmessage data, so only a subset of valid Dart code is accepted. In\nparticular, everything must be literal and cannot refer to variables\noutside the scope of the enclosing function. The <code>examples<\/code> map must be a\nvalid const literal map. Similarly, the <code>desc<\/code> argument must be a single,\nsimple string and <code>skip<\/code> a boolean literal. These three arguments will not\nbe used at runtime but will be extracted from the source code and used as\nadditional data for translators. For more information see the \"Messages\"\nsection of the main\n<code>package documentation<\/code> (<a href=\"https:\/\/pub.dartlang.org\/packages\/intl)\">https:\/\/pub.dartlang.org\/packages\/intl)<\/a>.<\/p>\n<p>For messages without parameters, both <code>name<\/code> and <code>args<\/code> can be omitted.\nMessages that supply <code>args<\/code> should also supply a unique <code>name<\/code>. The <code>name<\/code>\nand <code>args<\/code> arguments used at runtime to look up the localized version and\npass the appropriate arguments to it. We may in the future modify the code\nduring compilation to make manually passing those arguments unnecessary in\nmore situations.<\/p>\n<p>The <code>skip<\/code> arg will still validate the message, but will be filtered from\nthe extracted message output. This can be useful to set up placeholder\nmessages during development whose text aren't finalized yet without having\nthe placeholder automatically translated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "message_str",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "desc",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "examples",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "args",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "meaning",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String message(String message_str,\n        {String desc: '',\n        Map&lt;String, dynamic&gt; examples: const {},\n        String locale,\n        String name,\n        List args,\n        String meaning,\n        bool skip}) =&gt;\n    _message(message_str, locale, name, args, meaning);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "plural",
                    "type": "dart:core.String",
                    "desc": "<p>Format a message differently depending on <code>howMany<\/code>. Normally used\nas part of an <code>Intl.message<\/code> text that is to be translated.\nSelects the correct plural form from\nthe provided alternatives. The <code>other<\/code> named argument is mandatory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "howMany",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "zero",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "one",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "two",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "few",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "many",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "other",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "desc",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "examples",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "args",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "meaning",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/plural.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String plural(int howMany,\n    {String zero,\n    String one,\n    String two,\n    String few,\n    String many,\n    String other,\n    String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  \/\/ Call our internal method, dropping examples and desc because they're not\n  \/\/ used at runtime and we want them to be optimized away.\n  return _plural(howMany,\n      zero: zero,\n      one: one,\n      two: two,\n      few: few,\n      many: many,\n      other: other,\n      locale: locale,\n      name: name,\n      args: args,\n      meaning: meaning);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pluralLogic",
                    "type": "",
                    "desc": "<p>Internal: Implements the logic for plural selection - use <a href=\"intl\/Intl\/plural.html\">plural<\/a> for\nnormal messages.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "howMany",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "zero",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "one",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "two",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "few",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "many",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "meaning",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/pluralLogic.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static pluralLogic(int howMany,\n    {zero, one, two, few, many, other, String locale, String meaning}) {\n  if (other == null) {\n    throw new ArgumentError(\"The 'other' named argument must be provided\");\n  }\n  if (howMany == null) {\n    throw new ArgumentError(\"The howMany argument to plural cannot be null\");\n  }\n  \/\/ If there's an explicit case for the exact number, we use it. This is not\n  \/\/ strictly in accord with the CLDR rules, but it seems to be the\n  \/\/ expectation. At least I see e.g. Russian translations that have a zero\n  \/\/ case defined. The rule for that locale will never produce a zero, and\n  \/\/ treats it as other. But it seems reasonable that, even if the language\n  \/\/ rules treat zero as other, we might want a special message for zero.\n  if (howMany == 0 &amp;&amp; zero != null) return zero;\n  if (howMany == 1 &amp;&amp; one != null) return one;\n  if (howMany == 2 &amp;&amp; two != null) return two;\n  var pluralRule = _pluralRule(locale, howMany);\n  var pluralCase = pluralRule();\n  switch (pluralCase) {\n    case plural_rules.PluralCase.ZERO:\n      return zero ?? other;\n    case plural_rules.PluralCase.ONE:\n      return one ?? other;\n    case plural_rules.PluralCase.TWO:\n      return two ?? few ?? other;\n    case plural_rules.PluralCase.FEW:\n      return few ?? other;\n    case plural_rules.PluralCase.MANY:\n      return many ?? other;\n    case plural_rules.PluralCase.OTHER:\n      return other;\n    default:\n      throw new ArgumentError.value(\n          howMany, \"howMany\", \"Invalid plural argument\");\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "select",
                    "type": "dart:core.String",
                    "desc": "<p>Format a message differently depending on <code>choice<\/code>. We look up the value\nof <code>choice<\/code> in <code>cases<\/code> and return the result, or an empty string if\nit is not found. Normally used as part\nof an Intl.message message that is to be translated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "choice",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cases",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "desc",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "examples",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "args",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "meaning",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/select.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String select(Object choice, Map&lt;String, String&gt; cases,\n    {String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  return _select(choice, cases,\n      locale: locale, name: name, args: args, meaning: meaning);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "selectLogic",
                    "type": "",
                    "desc": "<p>Internal: Implements the logic for select - use <a href=\"intl\/Intl\/select.html\">select<\/a> for\nnormal messages.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "choice",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cases",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/selectLogic.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static selectLogic(Object choice, Map&lt;String, dynamic&gt; cases) {\n  \/\/ Allow passing non-strings, e.g. enums to a select.\n  choice = \"$choice\";\n  var exact = cases[choice];\n  if (exact != null) return exact;\n  var other = cases[\"other\"];\n  if (other == null)\n    throw new ArgumentError(\"The 'other' case must be specified\");\n  return other;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "shortLocale",
                    "type": "dart:core.String",
                    "desc": "<p>Return the short version of a locale name, e.g. 'en_US' =&gt; 'en'<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "aLocale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/shortLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String shortLocale(String aLocale) {\n  if (aLocale.length &lt; 2) return aLocale;\n  return aLocale.substring(0, 2).toLowerCase();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/Intl\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">toString() =&gt; \"Intl($locale)\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "verifiedLocale",
                    "type": "dart:core.String",
                    "desc": "<p>Given <code>newLocale<\/code> return a locale that we have data for that is similar\nto it, if possible.<\/p>\n<p>If <code>newLocale<\/code> is found directly, return it. If it can't be found, look up\nbased on just the language (e.g. 'en_CA' -&gt; 'en'). Also accepts '-'\nas a separator and changes it into '_' for lookup, and changes the\ncountry to uppercase.<\/p>\n<p>There is a special case that if a locale named \"fallback\" is present\nand has been initialized, this will return that name. This can be useful\nfor messages where you don't want to just use the text from the original\nsource code, but wish to have a universal fallback translation.<\/p>\n<p>Note that null is interpreted as meaning the default locale, so if\n<code>newLocale<\/code> is null the default locale will be returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "newLocale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "localeExists",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onFailure",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/verifiedLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String verifiedLocale(String newLocale, Function localeExists,\n    {Function onFailure: _throwLocaleError}) {\n  \/\/ TODO(alanknight): Previously we kept a single verified locale on the Intl\n  \/\/ object, but with different verification for different uses, that's more\n  \/\/ difficult. As a result, we call this more often. Consider keeping\n  \/\/ verified locales for each purpose if it turns out to be a performance\n  \/\/ issue.\n  if (newLocale == null) {\n    return verifiedLocale(getCurrentLocale(), localeExists,\n        onFailure: onFailure);\n  }\n  if (localeExists(newLocale)) {\n    return newLocale;\n  }\n  for (var each in [\n    canonicalizedLocale(newLocale),\n    shortLocale(newLocale),\n    \"fallback\"\n  ]) {\n    if (localeExists(each)) {\n      return each;\n    }\n  }\n  return onFailure(newLocale);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withLocale",
                    "type": "",
                    "desc": "<p>Run <code>function<\/code> with the default locale set to <code>locale<\/code> and\nreturn the result.<\/p>\n<p>This is run in a zone, so async operations invoked\nfrom within <code>function<\/code> will still have the locale set.<\/p>\n<p>In simple usage <code>function<\/code> might be a single\n<code>Intl.message()<\/code> call or number\/date formatting operation. But it can\nalso be an arbitrary function that calls multiple Intl operations.<\/p>\n<p>For example<\/p>\n<pre class=\"language-dart\"><code>  Intl.withLocale(\"fr\", () =&gt; new NumberFormat.format(123456));\n<\/code><\/pre>\n<p>or<\/p>\n<pre class=\"language-dart\"><code>  hello(name) =&gt; Intl.message(\n      \"Hello $name.\",\n      name: 'hello',\n      args: [name],\n      desc: 'Say Hello');\n  Intl.withLocale(\"zh\", new Timer(new Duration(milliseconds:10),\n      () =&gt; print(hello(\"World\")));\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "intl.Intl",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "function",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/Intl\/withLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static withLocale(String locale, function()) {\n  var canonical = Intl.canonicalizedLocale(locale);\n  return runZoned(function, zoneValues: {#Intl.locale: canonical});\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "defaultLocale",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The default locale. This defaults to being set from systemLocale, but\ncan also be set explicitly, and will then apply to any new instances where\nthe locale isn't specified. Note that a locale parameter to\n<a href=\"intl\/Intl\/withLocale.html\">Intl.withLocale<\/a>\nwill supercede this value while that operation is active. Using\n<a href=\"intl\/Intl\/withLocale.html\">Intl.withLocale<\/a> may be preferable if you are using different locales\nin the same application.<\/p>\n        ",
                    "memberOf": "intl.Intl",
                    "isConstant": false,
                    "href": "intl\/Intl\/defaultLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get defaultLocale {\n  var zoneLocale = Zone.current[#Intl.locale];\n  return zoneLocale == null ? _defaultLocale : zoneLocale;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Return the locale for this instance. If none was set, the locale will\nbe the default.<\/p>\n        ",
                    "memberOf": "intl.Intl",
                    "isConstant": false,
                    "href": "intl\/Intl\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get locale =&gt; _locale;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemLocale",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The system's locale, as obtained from the window.navigator.language\nor other operating system mechanism. Note that due to system limitations\nthis is not automatically set, and must be set by importing one of\nintl_browser.dart or intl_standalone.dart and calling findSystemLocale().<\/p>\n        ",
                    "memberOf": "intl.Intl",
                    "isConstant": false,
                    "href": "intl\/Intl\/systemLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String systemLocale = 'en_US'\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/Intl-class.html",
            "desc": "<p>The Intl class provides a common entry point for internationalization\nrelated tasks. An Intl instance can be created for a particular locale\nand used to create a date format via <code>anIntl.date()<\/code>. Static methods\non this class are also used in message formatting.<\/p>\n<p>Examples:\n     today(date) =&gt; Intl.message(\n         \"Today's date is $date\",\n         name: 'today',\n         args: <a href=\"intl\/Intl\/date.html\">date<\/a>,\n         desc: 'Indicate the current date',\n         examples: const {'date' : 'June 8, 2012'});\n     print(today(new DateTime.now().toString());<\/p>\n<pre class=\"language-dart\"><code> howManyPeople(numberOfPeople, place) =&gt; Intl.plural(\n       zero: 'I see no one at all',\n       one: 'I see $numberOfPeople other person',\n       other: 'I see $numberOfPeople other people')} in $place.''',\n     name: 'msg',\n     args: [numberOfPeople, place],\n     desc: 'Description of how many people are seen in a place.',\n     examples: const {'numberOfPeople': 3, 'place': 'London'});\n<\/code><\/pre>\n<p>Calling <code>howManyPeople(2, 'Athens');<\/code> would\nproduce \"I see 2 other people in Athens.\" as output in the default locale.\nIf run in a different locale it would produce appropriately translated\noutput.<\/p>\n<p>For more detailed information on messages and localizing them see\nthe main <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">package documentation<\/a><\/p>\n<p>You can set the default locale.\n      Intl.defaultLocale = \"pt_BR\";<\/p>\n<p>To temporarily use a locale other than the default, use the <code>withLocale<\/code>\nfunction.\n      var todayString = new DateFormat(\"pt_BR\").format(new DateTime.now());\n      print(withLocale(\"pt_BR\", () =&gt; today(todayString));<\/p>\n<p>See <code>tests\/message_format_test.dart<\/code> for more examples.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Intl"
        },
        {
            "name": "intl.MicroMoney",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "MicroMoney",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.MicroMoney",
                    "sig": "",
                    "params": [
                        {
                            "name": "micros",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/MicroMoney\/MicroMoney.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory MicroMoney(micros) =&gt; new _MicroMoney(micros);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/MicroMoney-class.html",
            "desc": "<p>Used primarily for currency formatting, this number-like class stores\nmillionths of a currency unit, typically as an Int64.<\/p>\n<p>It supports no operations other than being used for Intl number formatting.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MicroMoney"
        },
        {
            "name": "intl.NumberFormat",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "NumberFormat",
                    "type": "",
                    "desc": "<p>Create a number format that prints using <code>newPattern<\/code> as it applies in\n<code>locale<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat([String newPattern, String locale]) =&gt;\n    new NumberFormat._forPattern(locale, (x) =&gt; newPattern);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.compact",
                    "type": "",
                    "desc": "<p>A number format for compact representations, e.g. \"1.2M\" instead\nof \"1,200,000\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.compact.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compact({String locale}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_PATTERN);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.compactCurrency",
                    "type": "",
                    "desc": "<p>A number format for compact currency representations, e.g. \"$1.2M\" instead\nof \"$1,200,000\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "symbol",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decimalDigits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.compactCurrency.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactCurrency(\n    {String locale, String name, String symbol, int decimalDigits}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN,\n      name: name,\n      getPattern: (symbols) =&gt; symbols.CURRENCY_PATTERN,\n      currencySymbol: symbol,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.compactLong",
                    "type": "",
                    "desc": "<p>A number format for \"long\" compact representations, e.g. \"1.2 million\"\ninstead of of \"1,200,000\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.compactLong.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactLong({String locale}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_LONG_PATTERN);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.compactSimpleCurrency",
                    "type": "",
                    "desc": "<p>A number format for compact currency representations, e.g. \"$1.2M\" instead\nof \"$1,200,000\", and which will automatically determine a currency symbol\nbased on the currency name or the locale. See\n<a href=\"intl\/NumberFormat\/NumberFormat.simpleCurrency.html\">NumberFormat.simpleCurrency<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decimalDigits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.compactSimpleCurrency.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactSimpleCurrency(\n    {String locale, String name, int decimalDigits}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN,\n      name: name,\n      getPattern: (symbols) =&gt; symbols.CURRENCY_PATTERN,\n      computeCurrencySymbol: (format) =&gt;\n          _simpleCurrencySymbols[format.currencyName] ?? format.currencyName,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.currency",
                    "type": "",
                    "desc": "<p>Create a <a href=\"intl\/NumberFormat-class.html\">NumberFormat<\/a> that formats using the locale's CURRENCY_PATTERN.<\/p>\n<p>If <code>locale<\/code> is not specified, it will use the current default locale.<\/p>\n<p>If <code>name<\/code> is specified, the currency with that ISO 4217 name will be used.\nOtherwise we will use the default currency name for the current locale. If\nno <code>symbol<\/code> is specified, we will use the currency name in the formatted\nresult. e.g.\n     var f = new NumberFormat.currency(locale: 'en_US', name: 'EUR')\nwill format currency like \"EUR1.23\". If we did not specify the name, it\nwould format like \"USD1.23\".<\/p>\n<p>If <code>symbol<\/code> is used, then that symbol will be used in formatting instead\nof the name. e.g.\n     var eurosInCurrentLocale = new NumberFormat.currency(symbol: \"\u20ac\");\nwill format like \"\u20ac1.23\". Otherwise it will use the currency name.\nIf this is not explicitly specified in the constructor, then for\ncurrencies we use the default value for the currency if the name is given,\n otherwise we use the value from the pattern for the locale.<\/p>\n<p>If <code>decimalDigits<\/code> is specified, numbers will format with that many digits\nafter the decimal place. If it's not, they will use the default for the\ncurrency in <code>name<\/code>, and the default currency for <code>locale<\/code> if the currency\nname is not specified. e.g.\n      new NumberFormat.currency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.currency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.currency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n<p>The <code>customPattern<\/code> parameter can be used to specify a particular\nformat. This is useful if you have your own locale data which includes\nunsupported formats (e.g. accounting format for currencies.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "symbol",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decimalDigits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "customPattern",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.currency.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(alanknight): Should we allow decimalDigits on other numbers.\nNumberFormat.currency(\n    {String locale,\n    String name,\n    String symbol,\n    int decimalDigits,\n    String customPattern})\n    : this._forPattern(locale, (x) =&gt; customPattern ?? x.CURRENCY_PATTERN,\n          name: name,\n          currencySymbol: symbol,\n          decimalDigits: decimalDigits,\n          isForCurrency: true);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.currencyPattern",
                    "type": "",
                    "desc": "<p>Create a number format that prints as CURRENCY_PATTERN. (Deprecated:\nprefer NumberFormat.currency)<\/p>\n<p>If provided,\nuse <code>nameOrSymbol<\/code> in place of the default currency name. e.g.\n       var eurosInCurrentLocale = new NumberFormat\n           .currencyPattern(Intl.defaultLocale, \"\u20ac\");<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "currencyNameOrSymbol",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.currencyPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use NumberFormat.currency\")\nfactory NumberFormat.currencyPattern(\n    [String locale, String currencyNameOrSymbol]) {\n  \/\/ If it looks like an iso4217 name, pass as name, otherwise as symbol.\n  if (currencyNameOrSymbol != null &amp;&amp;\n      _checkCurrencyName.hasMatch(currencyNameOrSymbol)) {\n    return new NumberFormat.currency(\n        locale: locale, name: currencyNameOrSymbol);\n  } else {\n    return new NumberFormat.currency(\n        locale: locale, symbol: currencyNameOrSymbol);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.decimalPattern",
                    "type": "",
                    "desc": "<p>Create a number format that prints as DECIMAL_PATTERN.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.decimalPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.decimalPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.DECIMAL_PATTERN);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "format",
                    "type": "dart:core.String",
                    "desc": "<p>Format <code>number<\/code> according to our pattern and return the formatted string.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "number",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/format.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String format(number) {\n  if (_isNaN(number)) return symbols.NAN;\n  if (_isInfinite(number)) return \"${_signPrefix(number)}${symbols.INFINITY}\";\n\n  _add(_signPrefix(number));\n  _formatNumber(number.abs());\n  _add(_signSuffix(number));\n\n  var result = _buffer.toString();\n  _buffer.clear();\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "localeExists",
                    "type": "dart:core.bool",
                    "desc": "<p>Return true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "localeName",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/localeExists.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool localeExists(localeName) {\n  if (localeName == null) return false;\n  return numberFormatSymbols.containsKey(localeName);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "numberOfIntegerDigits",
                    "type": "dart:core.int",
                    "desc": "",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "number",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/numberOfIntegerDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int numberOfIntegerDigits(number) {\n  var simpleNumber = number.toDouble().abs();\n  \/\/ It's unfortunate that we have to do this, but we get precision errors\n  \/\/ that affect the result if we use logs, e.g. 1000000\n  if (simpleNumber &lt; 10) return 1;\n  if (simpleNumber &lt; 100) return 2;\n  if (simpleNumber &lt; 1000) return 3;\n  if (simpleNumber &lt; 10000) return 4;\n  if (simpleNumber &lt; 100000) return 5;\n  if (simpleNumber &lt; 1000000) return 6;\n  if (simpleNumber &lt; 10000000) return 7;\n  if (simpleNumber &lt; 100000000) return 8;\n  if (simpleNumber &lt; 1000000000) return 9;\n  if (simpleNumber &lt; 10000000000) return 10;\n  if (simpleNumber &lt; 100000000000) return 11;\n  if (simpleNumber &lt; 1000000000000) return 12;\n  if (simpleNumber &lt; 10000000000000) return 13;\n  if (simpleNumber &lt; 100000000000000) return 14;\n  if (simpleNumber &lt; 1000000000000000) return 15;\n  if (simpleNumber &lt; 10000000000000000) return 16;\n  \/\/ We're past the point where being off by one on the number of digits\n  \/\/ will affect the pattern, so now we can use logs.\n  return max(1, (log(simpleNumber) \/ _ln10).ceil());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parse",
                    "type": "dart:core.num",
                    "desc": "<p>Parse the number represented by the string. If it's not\nparseable, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num parse(String text) =&gt; new _NumberParser(this, text).value;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.percentPattern",
                    "type": "",
                    "desc": "<p>Create a number format that prints as PERCENT_PATTERN.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.percentPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.percentPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.PERCENT_PATTERN);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.scientificPattern",
                    "type": "",
                    "desc": "<p>Create a number format that prints as SCIENTIFIC_PATTERN.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.scientificPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.scientificPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.SCIENTIFIC_PATTERN);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NumberFormat.simpleCurrency",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"intl\/NumberFormat-class.html\">NumberFormat<\/a> for currencies, using the simple symbol for the\ncurrency if one is available (e.g. $, \u20ac), so it should only be used if the\nshort currency symbol will be unambiguous.<\/p>\n<p>If <code>locale<\/code> is not specified, it will use the current default locale.<\/p>\n<p>If <code>name<\/code> is specified, the currency with that ISO 4217 name will be used.\nOtherwise we will use the default currency name for the current locale. We\nwill assume that the symbol for this is well known in the locale and\nunambiguous. If you format CAD in an en_US locale using this format it\nwill display as \"$\", which may be confusing to the user.<\/p>\n<p>If <code>decimalDigits<\/code> is specified, numbers will format with that many digits\nafter the decimal place. If it's not, they will use the default for the\ncurrency in <code>name<\/code>, and the default currency for <code>locale<\/code> if the currency\nname is not specified. e.g.\n      new NumberFormat.simpleCurrency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.simpleCurrency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.simpleCurrency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "locale",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decimalDigits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "intl\/NumberFormat\/NumberFormat.simpleCurrency.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.simpleCurrency(\n    {String locale, String name, int decimalDigits}) {\n  return new NumberFormat._forPattern(locale, (x) =&gt; x.CURRENCY_PATTERN,\n      name: name,\n      computeCurrencySymbol: (format) =&gt;\n          _simpleCurrencySymbols[format.currencyName] ?? format.currencyName,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "simpleCurrencySymbol",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the simple currency symbol for given currency code, or\n<code>currencyCode<\/code> if no simple symbol is listed.<\/p>\n<p>The simple currency symbol is generally short, and the same or related to\nwhat is used in countries having the currency as an official symbol. It\nmay be a symbol character, or may have letters, or both. It may be\ndifferent according to the locale: for example, for an Arabic locale it\nmay consist of Arabic letters, but for a French locale consist of Latin\nletters. It will not be unique: for example, \"$\" can appear for both USD\nand CAD.<\/p>\n<p>(The current implementation is the same for all locales, but this is\ntemporary and callers shouldn't rely on it.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [
                        {
                            "name": "currencyCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/simpleCurrencySymbol.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String simpleCurrencySymbol(String currencyCode) =&gt;\n    _simpleCurrencySymbols[currencyCode] ?? currencyCode;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"NumberFormat($_locale, $_pattern)\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "turnOffGrouping",
                    "type": "",
                    "desc": "<p>Explicitly turn off any grouping (e.g. by thousands) in this format.<\/p>\n<p>This is used in compact number formatting, where we\nomit the normal grouping. Best to know what you're doing if you call it.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.NumberFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "intl\/NumberFormat\/turnOffGrouping.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void turnOffGrouping() {\n  _groupingSize = 0;\n  _finalGroupingSize = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "currencyName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the currency to print, in ISO 4217 form.<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/currencyName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String currencyName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "currencySymbol",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The symbol to be used when formatting this as currency.<\/p>\n<p>For example, \"$\", \"US$\", or \"\u20ac\".<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/currencySymbol.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get currencySymbol =&gt; _currencySymbol ?? currencyName;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "decimalDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of decimal places to use when formatting.<\/p>\n<p>If this is not explicitly specified in the constructor, then for\ncurrencies we use the default value for the currency if the name is given,\notherwise we use the value from the pattern for the locale.<\/p>\n<p>So, for example,\n     new NumberFormat.currency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.currency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.currency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/decimalDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get decimalDigits =&gt; _decimalDigits;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Return the locale code in which we operate, e.g. 'en_US' or 'pt'.<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get locale =&gt; _locale;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maximumFractionDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/maximumFractionDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maximumFractionDigits = 3\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maximumIntegerDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/maximumIntegerDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maximumIntegerDigits = 40\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minimumExponentDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/minimumExponentDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumExponentDigits = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minimumFractionDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/minimumFractionDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumFractionDigits = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minimumIntegerDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/minimumIntegerDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumIntegerDigits = 1\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "significantDigits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>How many significant digits should we print.<\/p>\n<p> Note that if significantDigitsInUse is the default false, this\n will be ignored.<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/significantDigits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get significantDigits =&gt; _significantDigits;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "significantDigitsInUse",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/significantDigitsInUse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool significantDigitsInUse = false\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "symbols",
                    "type": "number_symbols.NumberSymbols",
                    "types": [],
                    "desc": "<p>Return the symbols which are used in our locale. Cache them to avoid\nrepeated lookup.<\/p>\n        ",
                    "memberOf": "intl.NumberFormat",
                    "isConstant": false,
                    "href": "intl\/NumberFormat\/symbols.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">NumberSymbols get symbols =&gt; _symbols;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/NumberFormat-class.html",
            "desc": "<p>Provides the ability to format a number in a locale-specific way. The\nformat is specified as a pattern using a subset of the ICU formatting\npatterns.<\/p>\n<ul>\n<li>\n<code>0<\/code> A single digit<\/li>\n<li>\n<code>#<\/code> A single digit, omitted if the value is zero<\/li>\n<li>\n<code>.<\/code> Decimal separator<\/li>\n<li>\n<code>-<\/code> Minus sign<\/li>\n<li>\n<code>,<\/code> Grouping separator<\/li>\n<li>\n<code>E<\/code> Separates mantissa and expontent<\/li>\n<li>\n<code>+<\/code> - Before an exponent, to say it should be prefixed with a plus sign.<\/li>\n<li>\n<code>%<\/code> - In prefix or suffix, multiply by 100 and show as percentage<\/li>\n<li>\n<code>\u2030 (\\u2030)<\/code> In prefix or suffix, multiply by 1000 and show as per mille<\/li>\n<li>\n<code>\u00a4 (\\u00A4)<\/code> Currency sign, replaced by currency name<\/li>\n<li>\n<code>'<\/code> Used to quote special characters<\/li>\n<li>\n<code>;<\/code> Used to separate the positive and negative patterns (if both present)<\/li>\n<\/ul>\n<p>For example,\n      var f = new NumberFormat(\"###.0#\", \"en_US\");\n      print(f.format(12.345));\n      ==&gt; 12.34\nIf the locale is not specified, it will default to the current locale. If\nthe format is not specified it will print in a basic format with at least\none integer digit and three fraction digits.<\/p>\n<p>There are also standard patterns available via the special constructors.\ne.g.\n      var percent = new NumberFormat.percentFormat(\"ar\");\n      var eurosInUSFormat = new NumberFormat.currency(locale: \"en_US\",\n          symbol: \"\u20ac\");\nThere are four such constructors: decimalFormat, percentFormat,\nscientificFormat and currencyFormat. However, at the moment,\nscientificFormat prints only as equivalent to \"#E0\" and does not take\ninto account significant digits. The currencyFormat will default to the\nthree-letter name of the currency if no explicit name\/symbol is provided.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "NumberFormat"
        },
        {
            "name": "intl.TextDirection",
            "extends": [],
            "memberOf": "intl",
            "events": [],
            "methods": [
                {
                    "name": "isDirectionChange",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if <code>otherDirection<\/code> is known to be different from this\ndirection.<\/p>\n    ",
                    "static": false,
                    "memberOf": "intl.TextDirection",
                    "sig": "",
                    "params": [
                        {
                            "name": "otherDirection",
                            "type": "intl.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "intl\/TextDirection\/isDirectionChange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isDirectionChange(TextDirection otherDirection) =&gt;\n    otherDirection != TextDirection.UNKNOWN &amp;&amp; this != otherDirection;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "intl\/TextDirection\/LTR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LTR = const TextDirection._('LTR', 'ltr')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LTR",
                    "memberOf": "intl.TextDirection"
                },
                {
                    "type": "",
                    "href": "intl\/TextDirection\/RTL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RTL = const TextDirection._('RTL', 'rtl')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RTL",
                    "memberOf": "intl.TextDirection"
                },
                {
                    "type": "",
                    "href": "intl\/TextDirection\/UNKNOWN-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const UNKNOWN = const TextDirection._('UNKNOWN', 'ltr')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UNKNOWN",
                    "memberOf": "intl.TextDirection"
                },
                {
                    "name": "spanText",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Textual representation of the directionality when used in span tag.<\/p>\n        ",
                    "memberOf": "intl.TextDirection",
                    "isConstant": false,
                    "href": "intl\/TextDirection\/spanText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String spanText\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Textual representation of the directionality constant. One of\n'LTR', 'RTL', or 'UNKNOWN'.<\/p>\n        ",
                    "memberOf": "intl.TextDirection",
                    "isConstant": false,
                    "href": "intl\/TextDirection\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "intl\/TextDirection-class.html",
            "desc": "<p>Bidi stands for Bi-directional text.  According to\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Bi-directional_text\">http:\/\/en.wikipedia.org\/wiki\/Bi-directional_text<\/a>: Bi-directional text is\ntext containing text in both text directionalities, both right-to-left (RTL)\nand left-to-right (LTR). It generally involves text containing different\ntypes of alphabets, but may also refer to boustrophedon, which is changing\ntext directionality in each row.<\/p>\n<p>This file provides some utility classes for determining directionality of\ntext, switching CSS layout from LTR to RTL, and other normalizing utilities\nneeded when switching between RTL and LTR formatting.<\/p>\n<p>It defines the TextDirection class which is used to represent directionality\nof text,\nIn most cases, it is preferable to use bidi_formatter.dart, which provides\nbidi functionality in the given directional context, instead of using\nbidi_utils.dart directly.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextDirection"
        },
        {
            "name": "ordinalDayFromMarchFirst",
            "type": "dart:core.int",
            "desc": "<p>Return the day of the year counting March 1st as 1, after which the\nnumber of days per month is constant, so it's easier to calculate.\nFormula from <a href=\"http:\/\/en.wikipedia.org\/wiki\/Ordinal_date\">http:\/\/en.wikipedia.org\/wiki\/Ordinal_date<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "intl",
            "sig": "",
            "params": [
                {
                    "name": "month",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "day",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "month",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "day",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/ordinalDayFromMarchFirst.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ordinalDayFromMarchFirst(int month, int day) =&gt;\n    ((30.6 * month) - 91.4).floor() + day;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toBeginningOfSentenceCase",
            "type": "dart:core.String",
            "desc": "<p>Convert a string to beginning of sentence case, in a way appropriate to the\nlocale.<\/p>\n<p>Currently this just converts the first letter to uppercase, which works for\nmany locales, and we have the option to extend this to handle more cases\nwithout changing the API for clients. It also hard-codes the case of\ndotted i in Turkish and Azeri.<\/p>\n    ",
            "static": false,
            "memberOf": "intl",
            "sig": "",
            "params": [
                {
                    "name": "input",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "input",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/toBeginningOfSentenceCase.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toBeginningOfSentenceCase(String input, [String locale]) {\n  if (input == null || input.isEmpty) return input;\n  return \"${_upperCaseLetter(input[0], locale)}${input.substring(1)}\";\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}