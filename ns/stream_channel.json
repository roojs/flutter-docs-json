{
    "class": [
        {
            "desc": "<p>A simple delegating wrapper around <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a>.<\/p>\n<p>Subclasses can override individual methods, or use this to expose only\n<a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> methods.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/DelegatingStreamChannel-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.DelegatingStreamChannel",
            "shortname": "DelegatingStreamChannel",
            "extends": [
                "stream_channel.StreamChannelMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DelegatingStreamChannel(this._inner);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/DelegatingStreamChannel\/DelegatingStreamChannel.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingStreamChannel",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.DelegatingStreamChannel",
                    "params": [
                        {
                            "name": "_inner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The sink for sending values to the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;T&gt; get sink =&gt; _inner.sink;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/DelegatingStreamChannel\/sink.html",
                    "name": "sink",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSink",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.DelegatingStreamChannel",
                    "params": []
                },
                {
                    "desc": "<p>The single-subscription stream that emits values from the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream =&gt; _inner.stream;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/DelegatingStreamChannel\/stream.html",
                    "name": "stream",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.DelegatingStreamChannel",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Allows the caller to force a channel to disconnect.<\/p>\n<p>When <a href=\"package-stream_channel_stream_channel\/Disconnector\/disconnect.html\">disconnect<\/a> is called, the channel (or channels) transformed by this\ntransformer will act as though the remote end had disconnected\u2014the stream\nwill emit a done event, and the sink will ignore future inputs. The inner\nsink will also be closed to notify the remote end of the disconnection.<\/p>\n<p>If a channel is transformed after the <a href=\"package-stream_channel_stream_channel\/Disconnector\/disconnect.html\">disconnect<\/a> has been called, it will\nbe disconnected immediately.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/Disconnector-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.Disconnector",
            "shortname": "Disconnector",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-stream_channel_stream_channel\/Disconnector\/Disconnector.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Disconnector",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.Disconnector",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the events sent to and emitted by <code>channel<\/code>.<\/p>\n<p>Creates a new channel. When events are passed to the returned channel's\nsink, the transformer will transform them and pass the transformed\nversions to <code>channel.sink<\/code>. When events are emitted from the\n<code>channel.straem<\/code>, the transformer will transform them and pass the\ntransformed versions to the returned channel's stream.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; bind(StreamChannel&lt;T&gt; channel) {\n  return channel.changeSink((innerSink) {\n    var sink = new _DisconnectorSink&lt;T&gt;(innerSink);\n\n    if (isDisconnected) {\n      \/\/ Ignore errors here, because otherwise there would be no way for the\n      \/\/ user to handle them gracefully.\n      sink._disconnect().catchError((_) {});\n    } else {\n      _sinks.add(sink);\n    }\n\n    return sink;\n  });\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/Disconnector\/bind.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.Disconnector",
                    "params": [
                        {
                            "name": "channel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Disconnects all channels that have been transformed.<\/p>\n<p>Returns a future that completes when all inner sinks' <a href=\"dart-async\/StreamSink\/close.html\">StreamSink.close<\/a>\nfutures have completed. Note that a <a href=\"dart-async\/StreamController-class.html\">StreamController<\/a>'s sink won't close\nuntil the corresponding stream has a listener.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future disconnect() =&gt; _disconnectMemo.runOnce(() {\n      var futures = _sinks.map((sink) =&gt; sink._disconnect()).toList();\n      _sinks.clear();\n      return Future.wait(futures, eagerError: true);\n    });<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/Disconnector\/disconnect.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future",
                    "name": "disconnect",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.Disconnector",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether <a href=\"package-stream_channel_stream_channel\/Disconnector\/disconnect.html\">disconnect<\/a> has been called.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDisconnected =&gt; _disconnectMemo.hasRun;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/Disconnector\/isDisconnected.html",
                    "name": "isDisconnected",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.Disconnector",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> that communicates over a <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>\/<a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> pair,\npresumably with another isolate.<\/p>\n<p>The remote endpoint doesn't necessarily need to be running an\n<a href=\"package-stream_channel_stream_channel\/IsolateChannel-class.html\">IsolateChannel<\/a>. This can be used with any two ports, although the\n<a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> semantics mean that this class will treat them as being\npaired (for example, closing the <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/sink.html\">sink<\/a> will cause the <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/stream.html\">stream<\/a> to stop\nemitting events).<\/p>\n<p>The underlying isolate ports have no notion of closing connections. This\nmeans that <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/stream.html\">stream<\/a> won't close unless <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/sink.html\">sink<\/a> is closed, and that closing\n<a href=\"package-stream_channel_stream_channel\/IsolateChannel\/sink.html\">sink<\/a> won't cause the remote endpoint to close. Users should take care to\nensure that they always close the <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/sink.html\">sink<\/a> of every <a href=\"package-stream_channel_stream_channel\/IsolateChannel-class.html\">IsolateChannel<\/a> they use\nto avoid leaving dangling <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/IsolateChannel-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.IsolateChannel",
            "shortname": "IsolateChannel",
            "extends": [
                "stream_channel.StreamChannelMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a stream channel that receives messages from <code>receivePort<\/code> and\nsends them over <code>sendPort<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory IsolateChannel(ReceivePort receivePort, SendPort sendPort) {\n  var controller =\n      new StreamChannelController&lt;T&gt;(allowForeignErrors: false, sync: true);\n  receivePort.cast&lt;T&gt;().pipe(controller.local.sink);\n  controller.local.stream\n      .listen((data) =&gt; sendPort.send(data), onDone: receivePort.close);\n  return new IsolateChannel._(\n      controller.foreign.stream, controller.foreign.sink);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/IsolateChannel\/IsolateChannel.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IsolateChannel",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.IsolateChannel",
                    "params": [
                        {
                            "name": "receivePort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:isolate.ReceivePort"
                        },
                        {
                            "name": "sendPort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The sink for sending values to the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StreamSink&lt;T&gt; sink\n\n<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/IsolateChannel\/sink.html",
                    "name": "sink",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSink",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.IsolateChannel",
                    "params": []
                },
                {
                    "desc": "<p>The single-subscription stream that emits values from the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Stream&lt;T&gt; stream\n\n<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/IsolateChannel\/stream.html",
                    "name": "stream",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.IsolateChannel",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer-class.html\">StreamChannelTransformer<\/a> that transforms JSON documents\u2014strings that\ncontain individual objects encoded as JSON\u2014into decoded Dart objects.<\/p>\n<p>This decodes JSON that's emitted by the transformed channel's stream, and\nencodes objects so that JSON is passed to the transformed channel's sink.<\/p>\n<p>If the transformed channel emits invalid JSON, this emits a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>. If an unencodable object is added to the sink, it\nsynchronously throws a <a href=\"dart-convert\/JsonUnsupportedObjectError-class.html\">JsonUnsupportedObjectError<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/JsonDocumentTransformer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.JsonDocumentTransformer",
            "shortname": "JsonDocumentTransformer",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new transformer.<\/p>\n<p>The <code>reviver<\/code> and <code>toEncodable<\/code> arguments work the same way as the\ncorresponding arguments to <a href=\"dart-convert\/JsonCodec\/JsonCodec.html\">new JsonCodec<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">JsonDocumentTransformer({reviver(key, value), toEncodable(object)})\n    : _codec = new JsonCodec(reviver: reviver, toEncodable: toEncodable);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/JsonDocumentTransformer\/JsonDocumentTransformer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonDocumentTransformer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.JsonDocumentTransformer",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the events sent to and emitted by <code>channel<\/code>.<\/p>\n<p>Creates a new channel. When events are passed to the returned channel's\nsink, the transformer will transform them and pass the transformed\nversions to <code>channel.sink<\/code>. When events are emitted from the\n<code>channel.straem<\/code>, the transformer will transform them and pass the\ntransformed versions to the returned channel's stream.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;Object&gt; bind(StreamChannel&lt;String&gt; channel) {\n  var stream = channel.stream.map(_codec.decode);\n  var sink = new StreamSinkTransformer&lt;Object, String&gt;.fromHandlers(\n      handleData: (data, sink) {\n    sink.add(_codec.encode(data));\n  }).bind(channel.sink);\n  return new StreamChannel.withCloseGuarantee(stream, sink);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/JsonDocumentTransformer\/bind.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel<dart:core.Object>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.JsonDocumentTransformer",
                    "params": [
                        {
                            "name": "channel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A class that multiplexes multiple virtual channels across a single\nunderlying transport layer.<\/p>\n<p>This should be connected to another <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> on the other end of the\nunderlying channel. It starts with a single default virtual channel,\naccessible via <a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a> and <a href=\"package-stream_channel_stream_channel\/MultiChannel\/sink.html\">sink<\/a>. Additional virtual channels can be\ncreated with <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a>.<\/p>\n<p>When a virtual channel is created by one endpoint, the other must connect to\nit before messages may be sent through it. The first endpoint passes its\n<a href=\"package-stream_channel_stream_channel\/VirtualChannel\/id.html\">VirtualChannel.id<\/a> to the second, which then creates a channel from that id\nalso using <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ First endpoint\nvar virtual = multiChannel.virtualChannel();\nmultiChannel.sink.add({\n  \"channel\": virtual.id\n});\n\n\/\/ Second endpoint\nmultiChannel.stream.listen((message) {\n  var virtual = multiChannel.virtualChannel(message[\"channel\"]);\n  \/\/ ...\n});\n<\/code><\/pre>\n<p>Sending errors across a <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> is not supported. Any errors from the\nunderlying stream will be reported only via the default\n<a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">MultiChannel.stream<\/a>.<\/p>\n<p>Each virtual channel may be closed individually. When all of them are\nclosed, the underlying <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> is closed automatically.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/MultiChannel-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.MultiChannel",
            "shortname": "MultiChannel",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> that sends and receives messages over\n<code>inner<\/code>.<\/p>\n<p>The inner channel must take JSON-like objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory MultiChannel(StreamChannel&lt;dynamic&gt; inner) =&gt;\n    new _MultiChannel&lt;T&gt;(inner);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/MultiChannel\/MultiChannel.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MultiChannel",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.MultiChannel",
                    "params": [
                        {
                            "name": "inner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a new virtual channel.<\/p>\n<p>If <code>id<\/code> is not passed, this creates a virtual channel from scratch. Before\nit's used, its <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/id.html\">VirtualChannel.id<\/a> must be sent to the remote endpoint\nwhere <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a> should be called with that id.<\/p>\n<p>If <code>id<\/code> is passed, this creates a virtual channel corresponding to the\nchannel with that id on the remote channel.<\/p>\n<p>Throws an <a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> if a virtual channel already exists for <code>id<\/code>.\nThrows a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the underlying channel is closed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VirtualChannel&lt;T&gt; virtualChannel([int id]);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html",
                    "isDeprecated": false,
                    "type": "stream_channel.VirtualChannel",
                    "name": "virtualChannel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.MultiChannel",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The default output stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a>. If this is closed, the remote\n<a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a> will close, but other virtual channels will remain open and new\nvirtual channels may be opened.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;T&gt; get sink;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/MultiChannel\/sink.html",
                    "name": "sink",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSink",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.MultiChannel",
                    "params": []
                },
                {
                    "desc": "<p>The default input stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/MultiChannel\/sink.html\">sink<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/MultiChannel\/stream.html",
                    "name": "stream",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.MultiChannel",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An abstract class representing a two-way communication channel.<\/p>\n<p>Users should consider the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> emitting a \"done\" event to be the\ncanonical indicator that the channel has closed. If they wish to close the\nchannel, they should close the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>\u2014canceling the stream subscription is\nnot sufficient. Protocol errors may be emitted through the stream or through\n<a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>.done, depending on their underlying cause. Note that the sink may\nsilently drop events if the channel closes before <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>.close is called.<\/p>\n<p>Implementations are strongly encouraged to mix in or extend\n<a href=\"package-stream_channel_stream_channel\/StreamChannelMixin-class.html\">StreamChannelMixin<\/a> to get default implementations of the various instance\nmethods. Adding new methods to this interface will not be considered a\nbreaking change if implementations are also added to <a href=\"package-stream_channel_stream_channel\/StreamChannelMixin-class.html\">StreamChannelMixin<\/a>.<\/p>\n<p>Implementations must provide the following guarantees:<\/p>\n<ul>\n<li>\n<p>The stream is single-subscription, and must follow all the guarantees of\nsingle-subscription streams.<\/p>\n<\/li>\n<li>\n<p>Closing the sink causes the stream to close before it emits any more\nevents.<\/p>\n<\/li>\n<li>\n<p>After the stream closes, the sink is automatically closed. If this\nhappens, sink methods should silently drop their arguments until\n<a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>.close is called.<\/p>\n<\/li>\n<li>\n<p>If the stream closes before it has a listener, the sink should silently\ndrop events if possible.<\/p>\n<\/li>\n<li>\n<p>Canceling the stream's subscription has no effect on the sink. The channel\nmust still be able to respond to the other endpoint closing the channel\neven after the subscription has been canceled.<\/p>\n<\/li>\n<li>\n<p>The sink <em>either<\/em> forwards errors to the other endpoint <em>or<\/em> closes as\nsoon as an error is added and forwards that error to the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>.done\nfuture.<\/p>\n<\/li>\n<\/ul>\n<p>These guarantees allow users to interact uniformly with all implementations,\nand ensure that either endpoint closing the stream produces consistent\nbehavior.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/StreamChannel-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.StreamChannel",
            "shortname": "StreamChannel",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> that communicates over <code>stream<\/code> and <code>sink<\/code>.<\/p>\n<p>Note that this stream\/sink pair must provide the guarantees listed in the\n<a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> documentation. If they don't do so natively,\n<a href=\"package-stream_channel_stream_channel\/StreamChannel\/StreamChannel.withGuarantees.html\">StreamChannel.withGuarantees<\/a> should be used instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamChannel(Stream&lt;T&gt; stream, StreamSink&lt;T&gt; sink) =&gt;\n    new _StreamChannel&lt;T&gt;(stream, sink);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/StreamChannel.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamChannel",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:async.StreamSink"
                        },
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:async.Stream"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a copy of this with the generic type coerced to <code>S<\/code>.<\/p>\n<p>If any events emitted by <a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> aren't of type <code>S<\/code>, they're converted\ninto <a href=\"dart-core\/CastError-class.html\">CastError<\/a> events. Similarly, if any events are added to <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a> that\naren't of type <code>S<\/code>, a <a href=\"dart-core\/CastError-class.html\">CastError<\/a> is thrown.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;S&gt; cast&lt;S&gt;();<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/cast.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of this with <code>sink<\/code> replaced by <code>change<\/code>'s return\nvalue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; changeSink(StreamSink&lt;T&gt; change(StreamSink&lt;T&gt; sink));<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/changeSink.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "changeSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.StreamSink"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a copy of this with <code>stream<\/code> replaced by <code>change<\/code>'s return\nvalue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; changeStream(Stream&lt;T&gt; change(Stream&lt;T&gt; stream));<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/changeStream.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "changeStream",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream"
                        }
                    ]
                },
                {
                    "desc": "<p>Connects this to <code>other<\/code>, so that any values emitted by either are sent\ndirectly to the other.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pipe(StreamChannel&lt;T&gt; other);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/pipe.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "pipe",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms this using <code>transformer<\/code>.<\/p>\n<p>This is identical to calling <code>transformer.bind(channel)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;S&gt; transform&lt;S&gt;(StreamChannelTransformer&lt;S, T&gt; transformer);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/transform.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannelTransformer"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms only the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a> component of this using <code>transformer<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; transformSink(StreamSinkTransformer&lt;T, T&gt; transformer);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/transformSink.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transformSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "async.StreamSinkTransformer"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms only the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> component of this using <code>transformer<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; transformStream(StreamTransformer&lt;T, T&gt; transformer);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/transformStream.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transformStream",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.StreamTransformer"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The sink for sending values to the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;T&gt; get sink;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/sink.html",
                    "name": "sink",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSink",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": []
                },
                {
                    "desc": "<p>The single-subscription stream that emits values from the other endpoint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/StreamChannel\/stream.html",
                    "name": "stream",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.StreamChannel",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/channel.html\">channel<\/a> where the source and destination are provided later.<\/p>\n<p>The <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/channel.html\">channel<\/a> is a normal channel that can be listened to and that events\ncan be added to immediately, but until <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/setChannel.html\">setChannel<\/a> is called it won't emit\nany events and all events added to it will be buffered.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/StreamChannelCompleter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.StreamChannelCompleter",
            "shortname": "StreamChannelCompleter",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannelCompleter() {\n  _channel =\n      new StreamChannel&lt;T&gt;(_streamCompleter.stream, _sinkCompleter.sink);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelCompleter\/StreamChannelCompleter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamChannelCompleter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelCompleter",
                    "params": []
                },
                {
                    "desc": "<p>Convert a <code>Future&lt;StreamChannel&gt;<\/code> to a <code>StreamChannel<\/code>.<\/p>\n<p>This creates a channel using a channel completer, and sets the source\nchannel to the result of the future when the future completes.<\/p>\n<p>If the future completes with an error, the returned channel's stream will\ninstead contain just that error. The sink will silently discard all\nevents.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static StreamChannel fromFuture(Future&lt;StreamChannel&gt; channelFuture) {\n  var completer = new StreamChannelCompleter();\n  channelFuture.then(completer.setChannel, onError: completer.setError);\n  return completer.channel;\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelCompleter\/fromFuture.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "fromFuture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelCompleter",
                    "params": [
                        {
                            "name": "channelFuture",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Future<stream_channel.StreamChannel>"
                        }
                    ]
                },
                {
                    "desc": "<p>Set a channel as the source and destination for <code>channel<\/code>.<\/p>\n<p>A channel may be set at most once.<\/p>\n<p>Either <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/setChannel.html\">setChannel<\/a> or <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/setError.html\">setError<\/a> may be called at most once. Trying to\ncall either of them again will fail.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setChannel(StreamChannel&lt;T&gt; channel) {\n  if (_set) throw new StateError(\"The channel has already been set.\");\n  _set = true;\n\n  _streamCompleter.setSourceStream(channel.stream);\n  _sinkCompleter.setDestinationSink(channel.sink);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelCompleter\/setChannel.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setChannel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelCompleter",
                    "params": [
                        {
                            "name": "channel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Indicates that there was an error connecting the channel.<\/p>\n<p>This makes the stream emit <code>error<\/code> and close. It makes the sink discard\nall its events.<\/p>\n<p>Either <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/setChannel.html\">setChannel<\/a> or <a href=\"package-stream_channel_stream_channel\/StreamChannelCompleter\/setError.html\">setError<\/a> may be called at most once. Trying to\ncall either of them again will fail.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setError(error, [StackTrace stackTrace]) {\n  if (_set) throw new StateError(\"The channel has already been set.\");\n  _set = true;\n\n  _streamCompleter.setError(error, stackTrace);\n  _sinkCompleter.setDestinationSink(new NullStreamSink());\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelCompleter\/setError.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setError",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelCompleter",
                    "params": [
                        {
                            "name": "error",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "stackTrace",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.StackTrace"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The channel for this completer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; get channel =&gt; _channel;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelCompleter\/channel.html",
                    "name": "channel",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.StreamChannelCompleter",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A controller for exposing a new <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a>.<\/p>\n<p>This exposes two connected <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a>s, <a href=\"package-stream_channel_stream_channel\/StreamChannelController\/local.html\">local<\/a> and <a href=\"package-stream_channel_stream_channel\/StreamChannelController\/foreign.html\">foreign<\/a>. The\nuser's code should use <a href=\"package-stream_channel_stream_channel\/StreamChannelController\/local.html\">local<\/a> to emit and receive events. Then <a href=\"package-stream_channel_stream_channel\/StreamChannelController\/foreign.html\">foreign<\/a>\ncan be returned for others to use. For example, here's a simplified version\nof the implementation of <a href=\"package-stream_channel_stream_channel\/IsolateChannel\/IsolateChannel.html\">new IsolateChannel<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel isolateChannel(ReceivePort receivePort, SendPort sendPort) {\n  var controller = new StreamChannelController(allowForeignErrors: false);\n\n  \/\/ Pipe all events from the receive port into the local sink...\n  receivePort.pipe(controller.local.sink);\n\n  \/\/ ...and all events from the local stream into the send port.\n  controller.local.stream.listen(sendPort.send, onDone: receivePort.close);\n\n  \/\/ Then return the foreign controller for your users to use.\n  return controller.foreign;\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/StreamChannelController-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.StreamChannelController",
            "shortname": "StreamChannelController",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"package-stream_channel_stream_channel\/StreamChannelController-class.html\">StreamChannelController<\/a>.<\/p>\n<p>If <code>sync<\/code> is true, events added to either channel's sink are synchronously\ndispatched to the other channel's stream. This should only be done if the\nsource of those events is already asynchronous.<\/p>\n<p>If <code>allowForeignErrors<\/code> is <code>false<\/code>, errors are not allowed to be passed to\nthe foreign channel's sink. If any are, the connection will close and the\nerror will be forwarded to the foreign channel's <a href=\"dart-async\/StreamSink\/done.html\">StreamSink.done<\/a> future.\nThis guarantees that the local stream will never emit errors.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannelController({bool allowForeignErrors: true, bool sync: false}) {\n  var localToForeignController = new StreamController&lt;T&gt;(sync: sync);\n  var foreignToLocalController = new StreamController&lt;T&gt;(sync: sync);\n  _local = new StreamChannel&lt;T&gt;.withGuarantees(\n      foreignToLocalController.stream, localToForeignController.sink);\n  _foreign = new StreamChannel&lt;T&gt;.withGuarantees(\n      localToForeignController.stream, foreignToLocalController.sink,\n      allowSinkErrors: allowForeignErrors);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelController\/StreamChannelController.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamChannelController",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelController",
                    "params": [
                        {
                            "name": "allowForeignErrors",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "sync",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The foreign channel.<\/p>\n<p>This channel should be returned to external users so they can communicate\nwith <a href=\"package-stream_channel_stream_channel\/StreamChannelController\/local.html\">local<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; get foreign =&gt; _foreign;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelController\/foreign.html",
                    "name": "foreign",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.StreamChannelController",
                    "params": []
                },
                {
                    "desc": "<p>The local channel.<\/p>\n<p>This channel should be used directly by the creator of this\n<a href=\"package-stream_channel_stream_channel\/StreamChannelController-class.html\">StreamChannelController<\/a> to send and receive events.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; get local =&gt; _local;<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelController\/local.html",
                    "name": "local",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.StreamChannelController",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A mixin that implements the instance methods of <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> in terms of\n<a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> and <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/StreamChannelMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.StreamChannelMixin",
            "shortname": "StreamChannelMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "stream_channel.DelegatingStreamChannel",
                "stream_channel.IsolateChannel",
                "stream_channel.VirtualChannel",
                "web_socket_channel.WebSocketChannel",
                "web_socket_channel.io.IOWebSocketChannel"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/StreamChannelMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamChannelMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of this with the generic type coerced to <code>S<\/code>.<\/p>\n<p>If any events emitted by <a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> aren't of type <code>S<\/code>, they're converted\ninto <a href=\"dart-core\/CastError-class.html\">CastError<\/a> events. Similarly, if any events are added to <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a> that\naren't of type <code>S<\/code>, a <a href=\"dart-core\/CastError-class.html\">CastError<\/a> is thrown.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;S&gt; cast&lt;S&gt;() =&gt; new StreamChannel(\n    DelegatingStream.typed(stream), DelegatingStreamSink.typed(sink));<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/cast.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of this with <code>sink<\/code> replaced by <code>change<\/code>'s return\nvalue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; changeSink(StreamSink&lt;T&gt; change(StreamSink&lt;T&gt; sink)) =&gt;\n    new StreamChannel.withCloseGuarantee(stream, change(sink));<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/changeSink.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "changeSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.StreamSink"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a copy of this with <code>stream<\/code> replaced by <code>change<\/code>'s return\nvalue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; changeStream(Stream&lt;T&gt; change(Stream&lt;T&gt; stream)) =&gt;\n    new StreamChannel.withCloseGuarantee(change(stream), sink);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/changeStream.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "changeStream",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream"
                        }
                    ]
                },
                {
                    "desc": "<p>Connects this to <code>other<\/code>, so that any values emitted by either are sent\ndirectly to the other.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pipe(StreamChannel&lt;T&gt; other) {\n  stream.pipe(other.sink);\n  other.stream.pipe(sink);\n}<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/pipe.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "pipe",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms this using <code>transformer<\/code>.<\/p>\n<p>This is identical to calling <code>transformer.bind(channel)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;S&gt; transform&lt;S&gt;(StreamChannelTransformer&lt;S, T&gt; transformer) =&gt;\n    transformer.bind(this);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/transform.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannelTransformer"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms only the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/sink.html\">sink<\/a> component of this using <code>transformer<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; transformSink(StreamSinkTransformer&lt;T, T&gt; transformer) =&gt;\n    changeSink(transformer.bind);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/transformSink.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transformSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "async.StreamSinkTransformer"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms only the <a href=\"package-stream_channel_stream_channel\/StreamChannel\/stream.html\">stream<\/a> component of this using <code>transformer<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;T&gt; transformStream(StreamTransformer&lt;T, T&gt; transformer) =&gt;\n    changeStream(transformer.bind);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelMixin\/transformStream.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "transformStream",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelMixin",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.StreamTransformer"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer-class.html\">StreamChannelTransformer<\/a> transforms the events being passed to and\nemitted by a <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a>.<\/p>\n<p>This works on the same principle as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> and\n<a href=\"package-async_async\/StreamSinkTransformer-class.html\">StreamSinkTransformer<\/a>. Each transformer defines a <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer\/bind.html\">bind<\/a> method that takes\nin the original <a href=\"package-stream_channel_stream_channel\/StreamChannel-class.html\">StreamChannel<\/a> and returns the transformed version.<\/p>\n<p>Transformers must be able to have <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer\/bind.html\">bind<\/a> called multiple times. If a\nsubclass implements <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer\/bind.html\">bind<\/a> explicitly, it should be sure that the returned\nstream follows the second stream channel guarantee: closing the sink causes\nthe stream to close before it emits any more events. This guarantee is\ninvalidated when an asynchronous gap is added between the original stream's\nevent dispatch and the returned stream's, for example by transforming it\nwith a <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>. The guarantee can be easily preserved using\n<a href=\"package-stream_channel_stream_channel\/StreamChannel\/StreamChannel.withCloseGuarantee.html\">StreamChannel.withCloseGuarantee<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/StreamChannelTransformer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.StreamChannelTransformer",
            "shortname": "StreamChannelTransformer",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer-class.html\">StreamChannelTransformer<\/a> from existing stream and sink\ntransformers.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StreamChannelTransformer(\n    this._streamTransformer, this._sinkTransformer);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelTransformer\/StreamChannelTransformer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StreamChannelTransformer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelTransformer",
                    "params": [
                        {
                            "name": "_sinkTransformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "async.StreamSinkTransformer"
                        },
                        {
                            "name": "_streamTransformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:async.StreamTransformer"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the events sent to and emitted by <code>channel<\/code>.<\/p>\n<p>Creates a new channel. When events are passed to the returned channel's\nsink, the transformer will transform them and pass the transformed\nversions to <code>channel.sink<\/code>. When events are emitted from the\n<code>channel.straem<\/code>, the transformer will transform them and pass the\ntransformed versions to the returned channel's stream.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamChannel&lt;S&gt; bind(StreamChannel&lt;T&gt; channel) =&gt;\n    new StreamChannel&lt;S&gt;.withCloseGuarantee(\n        channel.stream.transform(_streamTransformer),\n        _sinkTransformer.bind(channel.sink));<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelTransformer\/bind.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannel",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelTransformer",
                    "params": [
                        {
                            "name": "channel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannel"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a wrapper that coerces the type of <code>transformer<\/code>.<\/p>\n<p>This soundly converts a <a href=\"package-stream_channel_stream_channel\/StreamChannelTransformer-class.html\">StreamChannelTransformer<\/a> to a\n<code>StreamChannelTransformer&lt;S, T&gt;<\/code>, regardless of its original generic type,\nby asserting that the events emitted by the transformed channel's stream\nare instances of <code>T<\/code> whenever they're provided. If they're not, the stream\nthrows a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. This also means that calls to <a href=\"dart-async\/EventSink\/add.html\">StreamSink.add<\/a> on\nthe transformed channel's sink may throw a <a href=\"dart-core\/CastError-class.html\">CastError<\/a> if the argument\ntype doesn't match the reified type of the sink.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static StreamChannelTransformer&lt;S, T&gt; typed&lt;S, T&gt;(\n        StreamChannelTransformer transformer) =&gt;\n    transformer is StreamChannelTransformer&lt;S, T&gt;\n        ? transformer\n        : new TypeSafeStreamChannelTransformer(transformer);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/StreamChannelTransformer\/typed.html",
                    "isDeprecated": false,
                    "type": "stream_channel.StreamChannelTransformer",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.StreamChannelTransformer",
                    "params": [
                        {
                            "name": "transformer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stream_channel.StreamChannelTransformer"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A virtual channel created by <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a>.<\/p>\n<p>This implements <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> for convenience.\n<a href=\"package-stream_channel_stream_channel\/VirtualChannel\/virtualChannel.html\">VirtualChannel.virtualChannel<\/a> is semantically identical to the parent's\n<a href=\"package-stream_channel_stream_channel\/VirtualChannel\/virtualChannel.html\">MultiChannel.virtualChannel<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stream_channel_stream_channel\/VirtualChannel-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stream_channel",
            "name": "stream_channel.VirtualChannel",
            "shortname": "VirtualChannel",
            "extends": [
                "stream_channel.StreamChannelMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new virtual channel.<\/p>\n<p>If <code>id<\/code> is not passed, this creates a virtual channel from scratch. Before\nit's used, its <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/id.html\">VirtualChannel.id<\/a> must be sent to the remote endpoint\nwhere <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/virtualChannel.html\">virtualChannel<\/a> should be called with that id.<\/p>\n<p>If <code>id<\/code> is passed, this creates a virtual channel corresponding to the\nchannel with that id on the remote channel.<\/p>\n<p>Throws an <a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> if a virtual channel already exists for <code>id<\/code>.\nThrows a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the underlying channel is closed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VirtualChannel&lt;T&gt; virtualChannel([id]) =&gt; _parent.virtualChannel(id);<\/code><\/pre>\n    ",
                    "href": "package-stream_channel_stream_channel\/VirtualChannel\/virtualChannel.html",
                    "isDeprecated": false,
                    "type": "stream_channel.VirtualChannel",
                    "name": "virtualChannel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stream_channel.VirtualChannel",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The identifier for this channel.<\/p>\n<p>This can be sent across the <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> to provide the remote endpoint\na means to connect to this channel. Nothing about this is guaranteed\nexcept that it will be JSON-serializable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/VirtualChannel\/id.html",
                    "name": "id",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.VirtualChannel",
                    "params": []
                },
                {
                    "desc": "<p>The default output stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/stream.html\">stream<\/a>. If this is closed, the remote\n<a href=\"package-stream_channel_stream_channel\/VirtualChannel\/stream.html\">stream<\/a> will close, but other virtual channels will remain open and new\nvirtual channels may be opened.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StreamSink&lt;T&gt; sink\n\n<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/VirtualChannel\/sink.html",
                    "name": "sink",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSink",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.VirtualChannel",
                    "params": []
                },
                {
                    "desc": "<p>The default input stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/sink.html\">sink<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Stream&lt;T&gt; stream\n\n<\/code><\/pre>\n        ",
                    "href": "package-stream_channel_stream_channel\/VirtualChannel\/stream.html",
                    "name": "stream",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stream_channel.VirtualChannel",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}