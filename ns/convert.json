{
    "name": "convert",
    "href": "convert\/convert-library.html",
    "cn": [
        {
            "name": "convert.AccumulatorSink",
            "extends": [],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "AccumulatorSink",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "convert.AccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "convert\/AccumulatorSink\/AccumulatorSink.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds <code>data<\/code> to the sink.<\/p>\n<p>Must not be called after a call to <a href=\"convert\/AccumulatorSink\/close.html\">close<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.AccumulatorSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/AccumulatorSink\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T event) {\n  if (_isClosed) {\n    throw new StateError(\"Can't add to a closed sink.\");\n  }\n\n  _events.add(event);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all events from <a href=\"convert\/AccumulatorSink\/events.html\">events<\/a>.<\/p>\n<p>This can be used to avoid double-processing events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.AccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/AccumulatorSink\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _events.clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Closes the sink.<\/p>\n<p>The <a href=\"convert\/AccumulatorSink\/add.html\">add<\/a> method must not be called after this method.<\/p>\n<p>Calling this method more than once is allowed, but does nothing.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.AccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/AccumulatorSink\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close() {\n  _isClosed = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "events",
                    "type": "dart:core.List",
                    "types": [],
                    "desc": "<p>An unmodifiable list of events passed to this sink so far.<\/p>\n        ",
                    "memberOf": "convert.AccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/AccumulatorSink\/events.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;T&gt; get events =&gt; new UnmodifiableListView(_events);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isClosed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether <a href=\"convert\/AccumulatorSink\/close.html\">close<\/a> has been called.<\/p>\n        ",
                    "memberOf": "convert.AccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/AccumulatorSink\/isClosed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _isClosed;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/AccumulatorSink-class.html",
            "desc": "<p>A sink that provides access to all the <a href=\"convert\/AccumulatorSink\/events.html\">events<\/a> that have been passed to it.<\/p>\n<p>See also <a href=\"dart-convert\/ChunkedConversionSink\/ChunkedConversionSink.withCallback.html\">ChunkedConversionSink.withCallback<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AccumulatorSink"
        },
        {
            "name": "convert.ByteAccumulatorSink",
            "extends": [
                "dart:convert.ByteConversionSinkBase",
                "dart:convert.ByteConversionSink",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "ByteAccumulatorSink",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "convert.ByteAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "convert\/ByteAccumulatorSink\/ByteAccumulatorSink.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.ByteAccumulatorSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/ByteAccumulatorSink\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; bytes) {\n  if (_isClosed) {\n    throw new StateError(\"Can't add to a closed sink.\");\n  }\n\n  _buffer.addAll(bytes);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addSlice",
                    "type": "",
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the bytes defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n<p>Contrary to <code>add<\/code> the given <code>chunk<\/code> must not be held onto. Once the method\nreturns, it is safe to overwrite the data in it.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.ByteAccumulatorSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "chunk",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isLast",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/ByteAccumulatorSink\/addSlice.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(List&lt;int&gt; chunk, int start, int end, bool isLast) {\n  if (_isClosed) {\n    throw new StateError(\"Can't add to a closed sink.\");\n  }\n\n  _buffer.addAll(chunk, start, end);\n  if (isLast) _isClosed = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all bytes from <a href=\"convert\/ByteAccumulatorSink\/bytes.html\">bytes<\/a>.<\/p>\n<p>This can be used to avoid double-processing data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.ByteAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/ByteAccumulatorSink\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _buffer.clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.ByteAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/ByteAccumulatorSink\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close() {\n  _isClosed = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "bytes",
                    "type": "dart:typed_data.Uint8List",
                    "types": [],
                    "desc": "<p>The bytes accumulated so far.<\/p>\n<p>The returned <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> is viewing a shared buffer, so it should not be\nchanged and any bytes outside the view should not be accessed.<\/p>\n        ",
                    "memberOf": "convert.ByteAccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/ByteAccumulatorSink\/bytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List get bytes =&gt; new Uint8List.view(_buffer.buffer, 0, _buffer.length);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isClosed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether <a href=\"convert\/ByteAccumulatorSink\/close.html\">close<\/a> has been called.<\/p>\n        ",
                    "memberOf": "convert.ByteAccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/ByteAccumulatorSink\/isClosed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _isClosed;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/ByteAccumulatorSink-class.html",
            "desc": "<p>A sink that provides access to the concatenated bytes passed to it.<\/p>\n<p>See also <a href=\"dart-convert\/ByteConversionSink\/ByteConversionSink.withCallback.html\">ByteConversionSink.withCallback<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ByteAccumulatorSink"
        },
        {
            "name": "convert.HexCodec",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "decoder",
                    "type": "convert.HexDecoder",
                    "types": [],
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.HexCodec",
                    "isConstant": false,
                    "href": "convert\/HexCodec\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HexDecoder get decoder =&gt; hexDecoder;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "convert.HexEncoder",
                    "types": [],
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.HexCodec",
                    "isConstant": false,
                    "href": "convert\/HexCodec\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HexEncoder get encoder =&gt; hexEncoder;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/HexCodec-class.html",
            "desc": "<p>A codec that converts byte arrays to and from hexadecimal strings, following\n<a href=\"https:\/\/tools.ietf.org\/html\/rfc4648#section-8\">the Base16 spec<\/a>.<\/p>\n<p>This should be used via the <a href=\"convert\/hex-constant.html\">hex<\/a> field.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HexCodec"
        },
        {
            "name": "convert.HexDecoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "convert",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.HexDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/HexDecoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(String string) {\n  if (!string.length.isEven) {\n    throw new FormatException(\n        \"Invalid input length, must be even.\", string, string.length);\n  }\n\n  var bytes = new Uint8List(string.length ~\/ 2);\n  _decode(string.codeUnits, 0, string.length, bytes, 0);\n  return bytes;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.StringConversionSink",
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.HexDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/HexDecoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) =&gt;\n    new _HexDecoderSink(sink);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/HexDecoder-class.html",
            "desc": "<p>A converter that decodes hexadecimal strings into byte arrays.<\/p>\n<p>Because two hexadecimal digits correspond to a single byte, this will throw\na <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if given an odd-length string. It will also throw a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if given a string containing non-hexadecimal code units.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HexDecoder"
        },
        {
            "name": "convert.HexEncoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "convert",
                    "type": "dart:core.String",
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.HexEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/HexEncoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; bytes) =&gt; _convert(bytes, 0, bytes.length);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.ByteConversionSink",
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.HexEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/HexEncoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) =&gt;\n    new _HexEncoderSink(sink);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/HexEncoder-class.html",
            "desc": "<p>A converter that encodes byte arrays into hexadecimal strings.<\/p>\n<p>This will throw a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if the byte array has any digits that don't\nfit in the gamut of a byte.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HexEncoder"
        },
        {
            "name": "convert.IdentityCodec",
            "extends": [
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "IdentityCodec",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "convert.IdentityCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "convert\/IdentityCodec\/IdentityCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IdentityCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fuse",
                    "type": "dart:convert.Codec",
                    "desc": "<p>Fuse with an other codec.<\/p>\n<p>Fusing with the identify converter is a no-op, so this always return\n<code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.IdentityCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:convert.Codec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/IdentityCodec\/fuse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Codec&lt;T, R&gt; fuse&lt;R&gt;(Codec&lt;T, R&gt; other) =&gt; other;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "decoder",
                    "type": "dart:convert.Converter",
                    "types": [],
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.IdentityCodec",
                    "isConstant": false,
                    "href": "convert\/IdentityCodec\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;T, T&gt; get decoder =&gt; new _IdentityConverter&lt;T&gt;();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "dart:convert.Converter",
                    "types": [],
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.IdentityCodec",
                    "isConstant": false,
                    "href": "convert\/IdentityCodec\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;T, T&gt; get encoder =&gt; new _IdentityConverter&lt;T&gt;();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/IdentityCodec-class.html",
            "desc": "<p>A <a href=\"dart-convert\/Codec-class.html\">Codec<\/a> that performs the identity conversion (changing nothing) in both\ndirections.<\/p>\n<p>The identity codec passes input directly to output in both directions.\nThis class can be used as a base when combining multiple codecs,\nbecause fusing the identity codec with any other codec gives the other\ncodec back.<\/p>\n<p>Note, that when fused with another <a href=\"dart-convert\/Codec-class.html\">Codec<\/a> the identity codec disppears.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IdentityCodec"
        },
        {
            "name": "convert.PercentCodec",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "decoder",
                    "type": "convert.PercentDecoder",
                    "types": [],
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.PercentCodec",
                    "isConstant": false,
                    "href": "convert\/PercentCodec\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PercentDecoder get decoder =&gt; percentDecoder;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "convert.PercentEncoder",
                    "types": [],
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "convert.PercentCodec",
                    "isConstant": false,
                    "href": "convert\/PercentCodec\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PercentEncoder get encoder =&gt; percentEncoder;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/PercentCodec-class.html",
            "desc": "<p>A codec that converts byte arrays to and from percent-encoded (also known as\nURL-encoded) strings according to <a href=\"https:\/\/tools.ietf.org\/html\/rfc3986#section-2.1\">RFC 3986<\/a>.<\/p>\n<p><a href=\"convert\/PercentCodec\/encoder.html\">encoder<\/a> encodes all bytes other than ASCII letters, decimal digits, or one\nof <code>-._~<\/code>. This matches the behavior of <a href=\"dart-core\/Uri\/encodeQueryComponent.html\">Uri.encodeQueryComponent<\/a> except\nthat it doesn't encode <code>0x20<\/code> bytes to the <code>+<\/code> character.<\/p>\n<p>To be maximally flexible, <a href=\"convert\/PercentCodec\/decoder.html\">decoder<\/a> will decode any percent-encoded byte and\nwill allow any non-percent-encoded byte other than <code>%<\/code>. By default, it\ninterprets <code>+<\/code> as <code>0x2B<\/code> rather than <code>0x20<\/code> as emitted by\n<a href=\"dart-core\/Uri\/encodeQueryComponent.html\">Uri.encodeQueryComponent<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PercentCodec"
        },
        {
            "name": "convert.PercentDecoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "convert",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.PercentDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/PercentDecoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(String string) {\n  var buffer = new Uint8Buffer();\n  var lastDigit = _decode(string.codeUnits, 0, string.length, buffer);\n\n  if (lastDigit != null) {\n    throw new FormatException(\n        \"Input ended with incomplete encoded byte.\", string, string.length);\n  }\n\n  return buffer.buffer.asUint8List(0, buffer.length);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.StringConversionSink",
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.PercentDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/PercentDecoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) =&gt;\n    new _PercentDecoderSink(sink);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/PercentDecoder-class.html",
            "desc": "<p>A converter that decodes percent-encoded strings into byte arrays.<\/p>\n<p>To be maximally flexible, this will decode any percent-encoded byte and\nwill allow any non-percent-encoded byte other than <code>%<\/code>. By default, it\ninterprets <code>+<\/code> as <code>0x2B<\/code> rather than <code>0x20<\/code> as emitted by\n<a href=\"dart-core\/Uri\/encodeQueryComponent.html\">Uri.encodeQueryComponent<\/a>.<\/p>\n<p>This will throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the input string has an incomplete\npercent-encoding, or if it contains non-ASCII code units.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PercentDecoder"
        },
        {
            "name": "convert.PercentEncoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "convert",
                    "type": "dart:core.String",
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.PercentEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/PercentEncoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; bytes) =&gt; _convert(bytes, 0, bytes.length);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.ByteConversionSink",
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.PercentEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/PercentEncoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) =&gt;\n    new _PercentEncoderSink(sink);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/PercentEncoder-class.html",
            "desc": "<p>A converter that encodes byte arrays into percent-encoded strings.<\/p>\n<p><code>encoder<\/code> encodes all bytes other than ASCII letters, decimal digits, or one\nof <code>-._~<\/code>. This matches the behavior of <a href=\"dart-core\/Uri\/encodeQueryComponent.html\">Uri.encodeQueryComponent<\/a> except\nthat it doesn't encode <code>0x20<\/code> bytes to the <code>+<\/code> character.<\/p>\n<p>This will throw a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if the byte array has any digits that don't\nfit in the gamut of a byte.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PercentEncoder"
        },
        {
            "name": "convert.StringAccumulatorSink",
            "extends": [
                "dart:convert.StringConversionSinkBase",
                "dart:convert.StringConversionSinkMixin",
                "dart:core.Object"
            ],
            "memberOf": "convert",
            "events": [],
            "methods": [
                {
                    "name": "StringAccumulatorSink",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "convert.StringAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "convert\/StringAccumulatorSink\/StringAccumulatorSink.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.StringAccumulatorSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "chunk",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/StringAccumulatorSink\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(String chunk) {\n  if (_isClosed) {\n    throw new StateError(\"Can't add to a closed sink.\");\n  }\n\n  _buffer.write(chunk);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addSlice",
                    "type": "",
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the substring defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.StringAccumulatorSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "chunk",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isLast",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "convert\/StringAccumulatorSink\/addSlice.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(String chunk, int start, int end, bool isLast) {\n  if (_isClosed) {\n    throw new StateError(\"Can't add to a closed sink.\");\n  }\n\n  _buffer.write(chunk.substring(start, end));\n  if (isLast) _isClosed = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Empties <a href=\"convert\/StringAccumulatorSink\/string.html\">string<\/a>.<\/p>\n<p>This can be used to avoid double-processing data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.StringAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/StringAccumulatorSink\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _buffer.clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "convert.StringAccumulatorSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "convert\/StringAccumulatorSink\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close() {\n  _isClosed = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "isClosed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether <a href=\"convert\/StringAccumulatorSink\/close.html\">close<\/a> has been called.<\/p>\n        ",
                    "memberOf": "convert.StringAccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/StringAccumulatorSink\/isClosed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _isClosed;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The string accumulated so far.<\/p>\n        ",
                    "memberOf": "convert.StringAccumulatorSink",
                    "isConstant": false,
                    "href": "convert\/StringAccumulatorSink\/string.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get string =&gt; _buffer.toString();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "convert\/StringAccumulatorSink-class.html",
            "desc": "<p>A sink that provides access to the concatenated strings passed to it.<\/p>\n<p>See also <a href=\"dart-convert\/StringConversionSink\/StringConversionSink.withCallback.html\">StringConversionSink.withCallback<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StringAccumulatorSink"
        },
        {
            "type": "",
            "href": "convert\/hex-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "hex",
            "memberOf": "convert"
        },
        {
            "type": "",
            "href": "convert\/percent-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "percent",
            "memberOf": "convert"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}