{
    "class": [
        {
            "desc": "<p>A <a href=\"package-source_span_source_span\/SourceLocation-class.html\">SourceLocation<\/a> within a <a href=\"package-source_span_source_span\/SourceFile-class.html\">SourceFile<\/a>.<\/p>\n<p>Unlike the base <a href=\"package-source_span_source_span\/SourceLocation-class.html\">SourceLocation<\/a>, <a href=\"package-source_span_source_span\/FileLocation-class.html\">FileLocation<\/a> lazily computes its line\nand column values based on its offset and the contents of <a href=\"package-source_span_source_span\/FileLocation\/file.html\">file<\/a>.<\/p>\n<p>A <a href=\"package-source_span_source_span\/FileLocation-class.html\">FileLocation<\/a> can be created using <a href=\"package-source_span_source_span\/SourceFile\/location.html\">SourceFile.location<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/FileLocation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.FileLocation",
            "shortname": "FileLocation",
            "extends": [
                "source_span.SourceLocationMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns a span that covers only a single point: this location.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan pointSpan() =&gt; new _FileSpan(file, offset, offset);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/FileLocation\/pointSpan.html",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "name": "pointSpan",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The 0-based column of this location in the source<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; file.getColumn(offset);<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileLocation\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"package-source_span_source_span\/FileLocation\/file.html\">file<\/a> that <a href=\"package-source_span_source_span\/FileLocation-class.html\">this<\/a> belongs to.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SourceFile file\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileLocation\/file.html",
                    "name": "file",
                    "isDeprecated": false,
                    "type": "source_span.SourceFile",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                },
                {
                    "desc": "<p>The 0-based line of this location in the source.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; file.getLine(offset);<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileLocation\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                },
                {
                    "desc": "<p>The 0-based offset of this location in the source.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileLocation\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                },
                {
                    "desc": "<p>URL of the source containing this location.<\/p>\n<p>This may be null, indicating that the source URL is unknown or\nunavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl =&gt; file.url;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileLocation\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileLocation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a> within a <a href=\"package-source_span_source_span\/SourceFile-class.html\">SourceFile<\/a>.<\/p>\n<p>Unlike the base <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a>, <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> lazily computes its line and column\nvalues based on its offset and the contents of <a href=\"package-source_span_source_span\/FileSpan\/file.html\">file<\/a>. <a href=\"package-source_span_source_span\/SourceSpanMixin\/message.html\">FileSpan.message<\/a> is\nalso able to provide more context then <a href=\"package-source_span_source_span\/SourceSpanMixin\/message.html\">SourceSpan.message<\/a>, and\n<a href=\"package-source_span_source_span\/SourceSpanMixin\/union.html\">FileSpan.union<\/a> will return a <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> if possible.<\/p>\n<p>A <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> can be created using <a href=\"package-source_span_source_span\/SourceFile\/span.html\">SourceFile.span<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/FileSpan-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.FileSpan",
            "shortname": "FileSpan",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-source_span_source_span\/FileSpan\/FileSpan.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FileSpan",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.FileSpan",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new span that covers both <a href=\"package-source_span_source_span\/FileSpan-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>Unlike <a href=\"package-source_span_source_span\/SourceSpanMixin\/union.html\">union<\/a>, <code>other<\/code> may be disjoint from <a href=\"package-source_span_source_span\/FileSpan-class.html\">this<\/a>. If it is, the text\nbetween the two will be covered by the returned span.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan expand(FileSpan other);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/FileSpan\/expand.html",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.FileSpan",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.FileSpan"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The end location of this span, exclusive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get end;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileSpan\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "source_span.FileLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileSpan",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"package-source_span_source_span\/FileSpan\/file.html\">file<\/a> that <a href=\"package-source_span_source_span\/FileSpan-class.html\">this<\/a> belongs to.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SourceFile get file;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileSpan\/file.html",
                    "name": "file",
                    "isDeprecated": false,
                    "type": "source_span.SourceFile",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileSpan",
                    "params": []
                },
                {
                    "desc": "<p>The start location of this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get start;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/FileSpan\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "source_span.FileLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.FileSpan",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class representing a source file.<\/p>\n<p>This doesn't necessarily have to correspond to a file on disk, just a chunk\nof text usually with a URL associated with it.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceFile-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceFile",
            "shortname": "SourceFile",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>This constructor is deprecated.<\/p>\n<p>Use <a href=\"package-source_span_source_span\/SourceFile\/SourceFile.fromString.html\">new SourceFile.fromString<\/a> instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Will be removed in 2.0.0\")\nSourceFile(String text, {url}) : this.decoded(text.runes, url: url);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/SourceFile.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceFile",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "url",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Gets the 0-based column corresponding to <code>offset<\/code>.<\/p>\n<p>If <code>line<\/code> is passed, it's assumed to be the line containing <code>offset<\/code> and\nis used to more efficiently compute the column.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getColumn(int offset, {int line}) {\n  if (offset &lt; 0) {\n    throw new RangeError(\"Offset may not be negative, was $offset.\");\n  } else if (offset &gt; length) {\n    throw new RangeError(\"Offset $offset must be not be greater than the \"\n        \"number of characters in the file, $length.\");\n  }\n\n  if (line == null) {\n    line = getLine(offset);\n  } else if (line &lt; 0) {\n    throw new RangeError(\"Line may not be negative, was $line.\");\n  } else if (line &gt;= lines) {\n    throw new RangeError(\"Line $line must be less than the number of \"\n        \"lines in the file, $lines.\");\n  }\n\n  var lineStart = _lineStarts[line];\n  if (lineStart &gt; offset) {\n    throw new RangeError(\"Line $line comes after offset $offset.\");\n  }\n\n  return offset - lineStart;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/getColumn.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "getColumn",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "line",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Gets the 0-based line corresponding to <code>offset<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getLine(int offset) {\n  if (offset &lt; 0) {\n    throw new RangeError(\"Offset may not be negative, was $offset.\");\n  } else if (offset &gt; length) {\n    throw new RangeError(\"Offset $offset must not be greater than the number \"\n        \"of characters in the file, $length.\");\n  }\n\n  if (offset &lt; _lineStarts.first) return -1;\n  if (offset &gt;= _lineStarts.last) return _lineStarts.length - 1;\n\n  if (_isNearCachedLine(offset)) return _cachedLine;\n\n  _cachedLine = _binarySearch(offset) - 1;\n  return _cachedLine;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/getLine.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "getLine",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Gets the offset for a <code>line<\/code> and <code>column<\/code>.<\/p>\n<p><code>column<\/code> defaults to 0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffset(int line, [int column]) {\n  if (column == null) column = 0;\n\n  if (line &lt; 0) {\n    throw new RangeError(\"Line may not be negative, was $line.\");\n  } else if (line &gt;= lines) {\n    throw new RangeError(\"Line $line must be less than the number of \"\n        \"lines in the file, $lines.\");\n  } else if (column &lt; 0) {\n    throw new RangeError(\"Column may not be negative, was $column.\");\n  }\n\n  var result = _lineStarts[line] + column;\n  if (result &gt; length ||\n      (line + 1 &lt; lines &amp;&amp; result &gt;= _lineStarts[line + 1])) {\n    throw new RangeError(\"Line $line doesn't have $column columns.\");\n  }\n\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/getOffset.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "getOffset",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "column",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "line",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the text of the file from <code>start<\/code> to <code>end<\/code> (exclusive).<\/p>\n<p>If <code>end<\/code> isn't passed, it defaults to the end of the file.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getText(int start, [int end]) =&gt;\n    new String.fromCharCodes(_decodedChars.sublist(start, end));<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/getText.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "getText",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a location in <a href=\"package-source_span_source_span\/SourceFile-class.html\">this<\/a> at <code>offset<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation location(int offset) =&gt; new FileLocation._(this, offset);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/location.html",
                    "isDeprecated": false,
                    "type": "source_span.FileLocation",
                    "name": "location",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a span in <a href=\"package-source_span_source_span\/SourceFile-class.html\">this<\/a> from <code>start<\/code> to <code>end<\/code> (exclusive).<\/p>\n<p>If <code>end<\/code> isn't passed, it defaults to the end of the file.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan span(int start, [int end]) {\n  if (end == null) end = length;\n  return new _FileSpan(this, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceFile\/span.html",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "name": "span",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceFile",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The length of the file in characters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _decodedChars.length;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceFile\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceFile",
                    "params": []
                },
                {
                    "desc": "<p>The number of lines in the file.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lines =&gt; _lineStarts.length;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceFile\/lines.html",
                    "name": "lines",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceFile",
                    "params": []
                },
                {
                    "desc": "<p>The URL where the source file is located.<\/p>\n<p>This may be null, indicating that the URL is unknown or unavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri url\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceFile\/url.html",
                    "name": "url",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceFile",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class that describes a single location within a source file.<\/p>\n<p>This class should not be extended. Instead, <a href=\"package-source_span_source_span\/SourceLocationBase-class.html\">SourceLocationBase<\/a> should be\nextended instead.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceLocation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceLocation",
            "shortname": "SourceLocation",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "source_span.SourceLocationBase"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new location indicating <code>offset<\/code> within <code>sourceUrl<\/code>.<\/p>\n<p><code>line<\/code> and <code>column<\/code> default to assuming the source is a single line. This\nmeans that <code>line<\/code> defaults to 0 and <code>column<\/code> defaults to <code>offset<\/code>.<\/p>\n<p><code>sourceUrl<\/code> may be either a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceLocation(int offset, {sourceUrl, int line, int column})\n    : sourceUrl = sourceUrl is String ? Uri.parse(sourceUrl) : sourceUrl,\n      offset = offset,\n      line = line == null ? 0 : line,\n      column = column == null ? offset : column {\n  if (offset &lt; 0) {\n    throw new RangeError(\"Offset may not be negative, was $offset.\");\n  } else if (line != null &amp;&amp; line &lt; 0) {\n    throw new RangeError(\"Line may not be negative, was $line.\");\n  } else if (column != null &amp;&amp; column &lt; 0) {\n    throw new RangeError(\"Column may not be negative, was $column.\");\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocation\/SourceLocation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceLocation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": [
                        {
                            "name": "column",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "line",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "sourceUrl",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares two locations.<\/p>\n<p><code>other<\/code> must have the same source URL as <a href=\"package-source_span_source_span\/SourceLocation-class.html\">this<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(SourceLocation other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \"\\\"${other.sourceUrl}\\\" don't match.\");\n  }\n  return offset - other.offset;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocation\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceLocation"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the distance in characters between <a href=\"package-source_span_source_span\/SourceLocation-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>This always returns a non-negative value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int distance(SourceLocation other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \"\\\"${other.sourceUrl}\\\" don't match.\");\n  }\n  return (offset - other.offset).abs();\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocation\/distance.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "distance",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceLocation"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a span that covers only a single point: this location.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan pointSpan() =&gt; new SourceSpan(this, this, \"\");<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocation\/pointSpan.html",
                    "isDeprecated": false,
                    "type": "source_span.SourceSpan",
                    "name": "pointSpan",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '&lt;$runtimeType: $offset $toolString&gt;';<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The 0-based column of this location in the source<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int column\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-source_span_source_span\/SourceLocation\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-source_span_source_span\/SourceLocation\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-source_span_source_span\/SourceLocation\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-source_span_source_span\/SourceLocation\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-source_span_source_span\/SourceLocation\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-source_span_source_span\/SourceLocation\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; sourceUrl.hashCode + offset;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>The 0-based line of this location in the source.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int line\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>The 0-based offset of this location in the source.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>URL of the source containing this location.<\/p>\n<p>This may be null, indicating that the source URL is unknown or\nunavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri sourceUrl\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                },
                {
                    "desc": "<p>Returns a representation of this location in the <code>source:line:column<\/code>\nformat used by text editors.<\/p>\n<p>This prints 1-based lines and columns.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get toolString {\n  var source = sourceUrl == null ? 'unknown source' : sourceUrl;\n  return '$source:${line + 1}:${column + 1}';\n}<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocation\/toolString.html",
                    "name": "toolString",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A base class for source locations with <a href=\"package-source_span_source_span\/SourceLocation\/offset.html\">offset<\/a>, <a href=\"package-source_span_source_span\/SourceLocation\/line.html\">line<\/a>, and <a href=\"package-source_span_source_span\/SourceLocation\/column.html\">column<\/a> known\nat construction time.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceLocationBase-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceLocationBase",
            "shortname": "SourceLocationBase",
            "extends": [
                "source_span.SourceLocation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceLocationBase(int offset, {sourceUrl, int line, int column})\n    : super(offset, sourceUrl: sourceUrl, line: line, column: column);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocationBase\/SourceLocationBase.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceLocationBase",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceLocationBase",
                    "params": [
                        {
                            "name": "column",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "line",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "sourceUrl",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A mixin for easily implementing <a href=\"package-source_span_source_span\/SourceLocation-class.html\">SourceLocation<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceLocationMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceLocationMixin",
            "shortname": "SourceLocationMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "source_span.FileLocation"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/SourceLocationMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceLocationMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": []
                },
                {
                    "desc": "<p>Compares two locations.<\/p>\n<p><code>other<\/code> must have the same source URL as <a href=\"package-source_span_source_span\/SourceLocationMixin-class.html\">this<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(SourceLocation other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \"\\\"${other.sourceUrl}\\\" don't match.\");\n  }\n  return offset - other.offset;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceLocation"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the distance in characters between <a href=\"package-source_span_source_span\/SourceLocationMixin-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>This always returns a non-negative value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int distance(SourceLocation other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \"\\\"${other.sourceUrl}\\\" don't match.\");\n  }\n  return (offset - other.offset).abs();\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/distance.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "distance",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceLocation"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a span that covers only a single point: this location.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan pointSpan() =&gt; new SourceSpan(this, this, \"\");<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/pointSpan.html",
                    "isDeprecated": false,
                    "type": "source_span.SourceSpan",
                    "name": "pointSpan",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '&lt;$runtimeType: $offset $toolString&gt;';<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-source_span_source_span\/SourceLocationMixin\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-source_span_source_span\/SourceLocationMixin\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-source_span_source_span\/SourceLocationMixin\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-source_span_source_span\/SourceLocationMixin\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-source_span_source_span\/SourceLocationMixin\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-source_span_source_span\/SourceLocationMixin\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; sourceUrl.hashCode + offset;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": []
                },
                {
                    "desc": "<p>Returns a representation of this location in the <code>source:line:column<\/code>\nformat used by text editors.<\/p>\n<p>This prints 1-based lines and columns.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get toolString {\n  var source = sourceUrl == null ? 'unknown source' : sourceUrl;\n  return '$source:${line + 1}:${column + 1}';\n}<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceLocationMixin\/toolString.html",
                    "name": "toolString",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceLocationMixin",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class that describes a segment of source text.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpan-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpan",
            "shortname": "SourceSpan",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new span from <code>start<\/code> to <code>end<\/code> (exclusive) containing <code>text<\/code>.<\/p>\n<p><code>start<\/code> and <code>end<\/code> must have the same source URL and <code>start<\/code> must come\nbefore <code>end<\/code>. <code>text<\/code> must have a number of characters equal to the\ndistance between <code>start<\/code> and <code>end<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SourceSpan(SourceLocation start, SourceLocation end, String text) =&gt;\n    new SourceSpanBase(start, end, text);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpan\/SourceSpan.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpan",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares two spans.<\/p>\n<p><code>other<\/code> must have the same source URL as <a href=\"package-source_span_source_span\/SourceSpan-class.html\">this<\/a>. This orders spans by\n<a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> then <a href=\"package-source_span_source_span\/SourceSpan\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(SourceSpan other);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpan\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                },
                {
                    "desc": "<p>Prints the text associated with this span in a user-friendly way.<\/p>\n<p>This is identical to <a href=\"package-source_span_source_span\/SourceSpan\/message.html\">message<\/a>, except that it doesn't print the file\nname, line number, column number, or message. If <a href=\"package-source_span_source_span\/SourceSpan\/length.html\">length<\/a> is 0 and this\nisn't a <a href=\"package-source_span_source_span\/SourceSpanWithContext-class.html\">SourceSpanWithContext<\/a>, returns an empty string.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String highlight({color});<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpan\/highlight.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "highlight",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Formats <code>message<\/code> in a human-friendly way associated with this span.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String message(String message, {color});<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpan\/message.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "message",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a new span that's the union of <a href=\"package-source_span_source_span\/SourceSpan-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>The two spans must have the same source URL and may not be disjoint.\n<a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a> is computed by combining <a href=\"package-source_span_source_span\/SourceSpan\/text.html\">this.text<\/a> and <code>other.text<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan union(SourceSpan other);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpan\/union.html",
                    "isDeprecated": false,
                    "type": "source_span.SourceSpan",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The end location of this span, exclusive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SourceLocation get end;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpan\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "source_span.SourceLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": []
                },
                {
                    "desc": "<p>The length of this span, in characters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpan\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": []
                },
                {
                    "desc": "<p>The URL of the source (typically a file) of this span.<\/p>\n<p>This may be null, indicating that the source URL is unknown or\nunavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpan\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": []
                },
                {
                    "desc": "<p>The start location of this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SourceLocation get start;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpan\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "source_span.SourceLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": []
                },
                {
                    "desc": "<p>The source text for this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get text;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpan\/text.html",
                    "name": "text",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpan",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A base class for source spans with <a href=\"package-source_span_source_span\/SourceSpanBase\/start.html\">start<\/a>, <a href=\"package-source_span_source_span\/SourceSpanBase\/end.html\">end<\/a>, and <a href=\"package-source_span_source_span\/SourceSpanBase\/text.html\">text<\/a> known at\nconstruction time.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpanBase-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpanBase",
            "shortname": "SourceSpanBase",
            "extends": [
                "source_span.SourceSpanMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "source_span.SourceSpanWithContext"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpanBase(this.start, this.end, this.text) {\n  if (end.sourceUrl != start.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${start.sourceUrl}\\\" and \"\n        \" \\\"${end.sourceUrl}\\\" don't match.\");\n  } else if (end.offset &lt; start.offset) {\n    throw new ArgumentError('End $end must come after start $start.');\n  } else if (text.length != start.distance(end)) {\n    throw new ArgumentError('Text \"$text\" must be ${start.distance(end)} '\n        'characters long.');\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanBase\/SourceSpanBase.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpanBase",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpanBase",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The end location of this span, exclusive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SourceLocation end\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanBase\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "source_span.SourceLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanBase",
                    "params": []
                },
                {
                    "desc": "<p>The start location of this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SourceLocation start\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanBase\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "source_span.SourceLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanBase",
                    "params": []
                },
                {
                    "desc": "<p>The source text for this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanBase\/text.html",
                    "name": "text",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanBase",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class for exceptions that have source span information attached.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpanException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpanException",
            "shortname": "SourceSpanException",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "source_span.SourceSpanFormatException",
                "string_scanner.StringScannerException"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpanException(this._message, this._span);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanException\/SourceSpanException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpanException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpanException",
                    "params": [
                        {
                            "name": "_message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "_span",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of <a href=\"package-source_span_source_span\/SourceSpanException-class.html\">this<\/a>.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an ANSII terminal color escape that should be used to\nhighlight the span's text. If it's <code>true<\/code>, it indicates that the text\nshould be highlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>,\nit indicates that the text shouldn't be highlighted.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString({color}) {\n  if (span == null) return message;\n  return \"Error on \" + span.message(message, color: color);\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanException\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanException",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>A message describing the exception.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get message =&gt; _message;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanException\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanException",
                    "params": []
                },
                {
                    "desc": "<p>The span associated with this exception.<\/p>\n<p>This may be <code>null<\/code> if the source location can't be determined.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan get span =&gt; _span;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanException\/span.html",
                    "name": "span",
                    "isDeprecated": false,
                    "type": "source_span.SourceSpan",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanException",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"package-source_span_source_span\/SourceSpanException-class.html\">SourceSpanException<\/a> that's also a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpanFormatException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpanFormatException",
            "shortname": "SourceSpanFormatException",
            "extends": [
                "source_span.SourceSpanException",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "string_scanner.StringScannerException"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpanFormatException(String message, SourceSpan span, [this._source])\n    : super(message, span);<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanFormatException\/SourceSpanFormatException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpanFormatException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpanFormatException",
                    "params": [
                        {
                            "name": "_source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "span",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The offset in <a href=\"package-source_span_source_span\/SourceSpanFormatException\/source.html\">source<\/a> where the error was detected.<\/p>\n<p>A zero-based offset into the source that marks the format error causing\nthis exception to be created. If <code>source<\/code> is a string, this should be a\nstring index in the range <code>0 &lt;= offset &lt;= source.length<\/code>.<\/p>\n<p>If input is a string, the <a href=\"package-source_span_source_span\/SourceSpanException\/toString.html\">toString<\/a> method may represent this offset as\na line and character position. The offset should be inside the string,\nor at the end of the string.<\/p>\n<p>May be omitted. If present, <a href=\"package-source_span_source_span\/SourceSpanFormatException\/source.html\">source<\/a> should also be present if possible.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offset =&gt; span == null ? null : span.start.offset;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanFormatException\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanFormatException",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A mixin for easily implementing <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a>.<\/p>\n<p>This implements the <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a> methods in terms of <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a>, <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>, and\n<a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a>. This assumes that <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> and <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a> have the same source URL, that\n<a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> comes before <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>, and that <a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a> has a number of characters equal\nto the distance between <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> and <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpanMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpanMixin",
            "shortname": "SourceSpanMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "source_span.SourceSpanBase",
                "source_span.SourceSpanWithContext"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/SourceSpanMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpanMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": []
                },
                {
                    "desc": "<p>Compares two spans.<\/p>\n<p><code>other<\/code> must have the same source URL as <a href=\"package-source_span_source_span\/SourceSpanMixin-class.html\">this<\/a>. This orders spans by\n<a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> then <a href=\"package-source_span_source_span\/SourceSpanMixin\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(SourceSpan other) {\n  var result = start.compareTo(other.start);\n  return result == 0 ? end.compareTo(other.end) : result;\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                },
                {
                    "desc": "<p>Prints the text associated with this span in a user-friendly way.<\/p>\n<p>This is identical to <a href=\"package-source_span_source_span\/SourceSpanMixin\/message.html\">message<\/a>, except that it doesn't print the file\nname, line number, column number, or message. If <a href=\"package-source_span_source_span\/SourceSpanMixin\/length.html\">length<\/a> is 0 and this\nisn't a <a href=\"package-source_span_source_span\/SourceSpanWithContext-class.html\">SourceSpanWithContext<\/a>, returns an empty string.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String highlight({color}) {\n  if (this is! SourceSpanWithContext &amp;&amp; this.length == 0) return \"\";\n  return new Highlighter(this, color: color).highlight();\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/highlight.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "highlight",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Formats <code>message<\/code> in a human-friendly way associated with this span.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String message(String message, {color}) {\n  var buffer = new StringBuffer();\n  buffer.write('line ${start.line + 1}, column ${start.column + 1}');\n  if (sourceUrl != null) buffer.write(' of ${p.prettyUri(sourceUrl)}');\n  buffer.write(': $message');\n\n  var highlight = this.highlight(color: color);\n  if (!highlight.isEmpty) {\n    buffer.writeln();\n    buffer.write(highlight);\n  }\n\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/message.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "message",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '&lt;$runtimeType: from $start to $end \"$text\"&gt;';<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": []
                },
                {
                    "desc": "<p>Creates a new span that's the union of <a href=\"package-source_span_source_span\/SourceSpanMixin-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>The two spans must have the same source URL and may not be disjoint.\n<a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a> is computed by combining <a href=\"package-source_span_source_span\/SourceSpan\/text.html\">this.text<\/a> and <code>other.text<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan union(SourceSpan other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \" \\\"${other.sourceUrl}\\\" don't match.\");\n  }\n\n  var start = min(this.start, other.start);\n  var end = max(this.end, other.end);\n  var beginSpan = start == this.start ? this : other;\n  var endSpan = end == this.end ? this : other;\n\n  if (beginSpan.end.compareTo(endSpan.start) &lt; 0) {\n    throw new ArgumentError(\"Spans $this and $other are disjoint.\");\n  }\n\n  var text = beginSpan.text +\n      endSpan.text.substring(beginSpan.end.distance(endSpan.start));\n  return new SourceSpan(start, end, text);\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/union.html",
                    "isDeprecated": false,
                    "type": "source_span.SourceSpan",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-source_span_source_span\/SourceSpanMixin\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; start.hashCode + (31 * end.hashCode);<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": []
                },
                {
                    "desc": "<p>The length of this span, in characters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; end.offset - start.offset;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": []
                },
                {
                    "desc": "<p>The URL of the source (typically a file) of this span.<\/p>\n<p>This may be null, indicating that the source URL is unknown or\nunavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl =&gt; start.sourceUrl;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanMixin\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanMixin",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class that describes a segment of source text with additional context.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-source_span_source_span\/SourceSpanWithContext-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "source_span",
            "name": "source_span.SourceSpanWithContext",
            "shortname": "SourceSpanWithContext",
            "extends": [
                "source_span.SourceSpanBase",
                "source_span.SourceSpanMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new span from <code>start<\/code> to <code>end<\/code> (exclusive) containing <code>text<\/code>, in\nthe given <a href=\"package-source_span_source_span\/SourceSpanWithContext\/context.html\">context<\/a>.<\/p>\n<p><code>start<\/code> and <code>end<\/code> must have the same source URL and <code>start<\/code> must come\nbefore <code>end<\/code>. <code>text<\/code> must have a number of characters equal to the\ndistance between <code>start<\/code> and <code>end<\/code>. <a href=\"package-source_span_source_span\/SourceSpanWithContext\/context.html\">context<\/a> must contain <code>text<\/code>, and\n<code>text<\/code> should start at <code>start.column<\/code> from the beginning of a line in\n<a href=\"package-source_span_source_span\/SourceSpanWithContext\/context.html\">context<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpanWithContext(\n    SourceLocation start, SourceLocation end, String text, this._context)\n    : super(start, end, text) {\n  if (!context.contains(text)) {\n    throw new ArgumentError(\n        'The context line \"$context\" must contain \"$text\".');\n  }\n\n  if (findLineStart(context, text, start.column) == null) {\n    throw new ArgumentError('The span text \"$text\" must start at '\n        'column ${start.column + 1} in a line within \"$context\".');\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-source_span_source_span\/SourceSpanWithContext\/SourceSpanWithContext.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SourceSpanWithContext",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "source_span.SourceSpanWithContext",
                    "params": [
                        {
                            "name": "_context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceLocation"
                        },
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Text around the span, which includes the line containing this span.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get context =&gt; _context;<\/code><\/pre>\n        ",
                    "href": "package-source_span_source_span\/SourceSpanWithContext\/context.html",
                    "name": "context",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "source_span.SourceSpanWithContext",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}