{
    "class": [
        {
            "desc": "<p>A map whose keys are converted to canonical values of type <code>C<\/code>.<\/p>\n<p>This is useful for using case-insensitive String keys, for example. It's\nmore efficient than a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> with a custom equality operator\nbecause it only canonicalizes each key once, rather than doing so for each\ncomparison.<\/p>\n<p>By default, <code>null<\/code> is allowed as a key. It can be forbidden via the\n<code>isValidKey<\/code> parameter.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/CanonicalizedMap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.CanonicalizedMap",
            "shortname": "CanonicalizedMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an empty canonicalized map.<\/p>\n<p>The <code>canonicalize<\/code> function should return the canonical value for the\ngiven key. Keys with the same canonical value are considered equivalent.<\/p>\n<p>The <code>isValidKey<\/code> function is called before calling <code>canonicalize<\/code> for\nmethods that take arbitrary objects. It can be used to filter out keys\nthat can't be canonicalized.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CanonicalizedMap(C canonicalize(K key), {bool isValidKey(Object key)})\n    : _canonicalize = canonicalize,\n      _isValidKeyFn = isValidKey;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/CanonicalizedMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CanonicalizedMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  other.forEach((key, value) =&gt; this[key] = value);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) =&gt;\n    _base.addEntries(entries.map(\n        (e) =&gt; new MapEntry(_canonicalize(e.key), new Pair(e.key, e.value))));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "entries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.MapEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; cast&lt;K2, V2&gt;() =&gt; _base.cast&lt;K2, V2&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _base.clear();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) {\n  if (!_isValidKey(key)) return false;\n  return _base.containsKey(_canonicalize(key as K));\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt;\n    _base.values.any((pair) =&gt; pair.last == value);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  _base.forEach((key, pair) =&gt; f(pair.first, pair.last));\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; transform(K key, V value)) =&gt;\n    _base.map((_, pair) =&gt; transform(pair.first, pair.last));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  return _base\n      .putIfAbsent(_canonicalize(key), () =&gt; new Pair(key, ifAbsent()))\n      .last;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  if (!_isValidKey(key)) return null;\n  var pair = _base.remove(_canonicalize(key as K));\n  return pair == null ? null : pair.last;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) =&gt;\n    _base.removeWhere((_, pair) =&gt; test(pair.first, pair.last));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() =&gt; cast&lt;K2, V2&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  \/\/ Detect toString() cycles.\n  if (_isToStringVisiting(this)) {\n    return '{...}';\n  }\n\n  var result = new StringBuffer();\n  try {\n    _toStringVisiting.add(this);\n    result.write('{');\n    bool first = true;\n    forEach((k, v) {\n      if (!first) {\n        result.write(', ');\n      }\n      first = false;\n      result.write('$k: $v');\n    });\n    result.write('}');\n  } finally {\n    assert(identical(_toStringVisiting.last, this));\n    _toStringVisiting.removeLast();\n  }\n\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) =&gt; _base\n    .update(_canonicalize(key), (pair) =&gt; new Pair(key, update(pair.last)),\n        ifAbsent: ifAbsent == null ? null : () =&gt; new Pair(key, ifAbsent()))\n    .last;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) =&gt; _base.updateAll(\n    (_, pair) =&gt; new Pair(pair.first, update(pair.first, pair.last)));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CanonicalizedMap\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The map entries of <a href=\"package-collection_collection\/CanonicalizedMap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt;\n    _base.entries.map((e) =&gt; new MapEntry(e.value.first, e.value.last));<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _base.isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _base.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"package-collection_collection\/CanonicalizedMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"package-collection_collection\/CanonicalizedMap\/length.html\">length<\/a> and <a href=\"package-collection_collection\/CanonicalizedMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _base.values.map((pair) =&gt; pair.first);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _base.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"package-collection_collection\/CanonicalizedMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"package-collection_collection\/CanonicalizedMap\/keys.html\">keys<\/a> and <a href=\"package-collection_collection\/CanonicalizedMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"package-collection_collection\/CanonicalizedMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _base.values.map((pair) =&gt; pair.last);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CanonicalizedMap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CanonicalizedMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>String equality that's insensitive to differences in ASCII case.<\/p>\n<p>Non-ASCII characters are compared as-is, with no conversion.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/CaseInsensitiveEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.CaseInsensitiveEquality",
            "shortname": "CaseInsensitiveEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CaseInsensitiveEquality();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CaseInsensitiveEquality\/CaseInsensitiveEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CaseInsensitiveEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.CaseInsensitiveEquality",
                    "params": []
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(String string1, String string2) =&gt;\n    equalsIgnoreAsciiCase(string1, string2);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CaseInsensitiveEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CaseInsensitiveEquality",
                    "params": [
                        {
                            "name": "string1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "string2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/CaseInsensitiveEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(String string) =&gt; hashIgnoreAsciiCase(string);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CaseInsensitiveEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CaseInsensitiveEquality",
                    "params": [
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/CaseInsensitiveEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/CaseInsensitiveEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object object) =&gt; object is String;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CaseInsensitiveEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CaseInsensitiveEquality",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A view of several iterables combined sequentially into a single iterable.<\/p>\n<p>All methods and accessors treat the <a href=\"package-collection_collection\/CombinedIterableView-class.html\">CombinedIterableView<\/a> as if it were a\nsingle concatenated iterable, but the underlying implementation is based on\nlazily accessing individual iterable instances. This means that if the\nunderlying iterables change, the <a href=\"package-collection_collection\/CombinedIterableView-class.html\">CombinedIterableView<\/a> will reflect those\nchanges.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/CombinedIterableView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.CombinedIterableView",
            "shortname": "CombinedIterableView",
            "extends": [
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a combined view of <code>iterables<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CombinedIterableView(this._iterables);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedIterableView\/CombinedIterableView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CombinedIterableView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.CombinedIterableView",
                    "params": [
                        {
                            "name": "_iterables",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:core.Iterable>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _iterables.any((i) =&gt; i.contains(element));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedIterableView\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CombinedIterableView",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _iterables.every((i) =&gt; i.isEmpty);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CombinedIterableView\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CombinedIterableView",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;T&gt; get iterator =&gt;\n    new _CombinedIterator&lt;T&gt;(_iterables.map((i) =&gt; i.iterator).iterator);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CombinedIterableView\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CombinedIterableView",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/CombinedIterableView-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _iterables.fold(0, (length, i) =&gt; length + i.length);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CombinedIterableView\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CombinedIterableView",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A view of several lists combined into a single list.<\/p>\n<p>All methods and accessors treat the <a href=\"package-collection_collection\/CombinedListView-class.html\">CombinedListView<\/a> list as if it were a\nsingle concatenated list, but the underlying implementation is based on\nlazily accessing individual list instances. This means that if the\nunderlying lists change, the <a href=\"package-collection_collection\/CombinedListView-class.html\">CombinedListView<\/a> will reflect those changes.<\/p>\n<p>The index operator (<code>[]<\/code>) and <a href=\"package-collection_collection\/CombinedListView\/length.html\">length<\/a> property of a <a href=\"package-collection_collection\/CombinedListView-class.html\">CombinedListView<\/a> are\nboth <code>O(lists)<\/code> rather than <code>O(1)<\/code>. A <a href=\"package-collection_collection\/CombinedListView-class.html\">CombinedListView<\/a> is unmodifiable.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/CombinedListView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.CombinedListView",
            "shortname": "CombinedListView",
            "extends": [
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a combined view of <code>lists<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CombinedListView(this._lists);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedListView\/CombinedListView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CombinedListView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.CombinedListView",
                    "params": [
                        {
                            "name": "_lists",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.List>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _throw();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedListView\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CombinedListView",
                    "params": []
                },
                {
                    "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object element) {\n  _throw();\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedListView\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CombinedListView",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(T element)) {\n  _throw();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedListView\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CombinedListView",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(T element)) {\n  _throw();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedListView\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.CombinedListView",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _lists.fold(0, (length, list) =&gt; length + list.length);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CombinedListView\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CombinedListView",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Returns a new map that represents maps flattened into a single map.<\/p>\n<p>All methods and accessors treat the new map as-if it were a single\nconcatenated map, but the underlying implementation is based on lazily\naccessing individual map instances. In the occasion where a key occurs in\nmultiple maps the first value is returned.<\/p>\n<p>The resulting map has an index operator (<code>[]<\/code>) and <code>length<\/code> property that\nare both <code>O(maps)<\/code>, rather than <code>O(1)<\/code>, and the map is unmodifiable - but\nunderlying changes to these maps are still accessible from the resulting\nmap.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/CombinedMapView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.CombinedMapView",
            "shortname": "CombinedMapView",
            "extends": [
                "dart:collection.UnmodifiableMapBase",
                "dart:collection.MapBase",
                "dart:collection.MapMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a new combined view into multiple maps.<\/p>\n<p>The iterable is accessed lazily so it should be collection type like\n<a href=\"dart-core\/List-class.html\">List<\/a> or <a href=\"dart-core\/Set-class.html\">Set<\/a> rather than a lazy iterable produced by <code>map()<\/code> et al.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CombinedMapView(this._maps);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/CombinedMapView\/CombinedMapView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CombinedMapView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.CombinedMapView",
                    "params": [
                        {
                            "name": "_maps",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:core.Map>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The keys of <a href=\"package-collection_collection\/CombinedMapView-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-collection\/MapMixin\/length.html\">length<\/a> and <a href=\"dart-collection\/MapMixin\/containsKey.html\">containsKey<\/a> of the individual maps.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementations,\nbut must be consistent between changes to the maps.<\/p>\n<p>Unlike most <a href=\"dart-core\/Map-class.html\">Map<\/a> implementations, modifying an individual map while\niterating the keys will <em>sometimes<\/em> throw. This behavior may change in\nthe future.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; new CombinedIterableView&lt;K&gt;(_maps.map((m) =&gt; m.keys));<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/CombinedMapView\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.CombinedMapView",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Deep equality on collections.<\/p>\n<p>Recognizes lists, sets, iterables and maps and compares their elements using\ndeep equality as well.<\/p>\n<p>Non-iterable\/map objects are compared using a configurable base equality.<\/p>\n<p>Works in one of two modes: ordered or unordered.<\/p>\n<p>In ordered mode, lists and iterables are required to have equal elements\nin the same order. In unordered mode, the order of elements in iterables\nand lists are not important.<\/p>\n<p>A list is only equal to another list, likewise for sets and maps. All other\niterables are compared as iterables only.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DeepCollectionEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DeepCollectionEquality",
            "shortname": "DeepCollectionEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DeepCollectionEquality([Equality base = const DefaultEquality()])\n    : _base = base,\n      _unordered = false;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DeepCollectionEquality\/DeepCollectionEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DeepCollectionEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DeepCollectionEquality",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(e1, e2) {\n  if (e1 is Set) {\n    return e2 is Set &amp;&amp; new SetEquality(this).equals(e1, e2);\n  }\n  if (e1 is Map) {\n    return e2 is Map &amp;&amp;\n        new MapEquality(keys: this, values: this).equals(e1, e2);\n  }\n  if (!_unordered) {\n    if (e1 is List) {\n      return e2 is List &amp;&amp; new ListEquality(this).equals(e1, e2);\n    }\n    if (e1 is Iterable) {\n      return e2 is Iterable &amp;&amp; new IterableEquality(this).equals(e1, e2);\n    }\n  } else if (e1 is Iterable) {\n    if (e1 is List != e2 is List) return false;\n    return e2 is Iterable &amp;&amp;\n        new UnorderedIterableEquality(this).equals(e1, e2);\n  }\n  return _base.equals(e1, e2);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DeepCollectionEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DeepCollectionEquality",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/DeepCollectionEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(Object o) {\n  if (o is Set) return new SetEquality(this).hash(o);\n  if (o is Map) return new MapEquality(keys: this, values: this).hash(o);\n  if (!_unordered) {\n    if (o is List) return new ListEquality(this).hash(o);\n    if (o is Iterable) return new IterableEquality(this).hash(o);\n  } else if (o is Iterable) {\n    return new UnorderedIterableEquality(this).hash(o);\n  }\n  return _base.hash(o);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DeepCollectionEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DeepCollectionEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/DeepCollectionEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/DeepCollectionEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Iterable || o is Map || _base.isValidKey(o);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DeepCollectionEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DeepCollectionEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Equality of objects that compares only the natural equality of the objects.<\/p>\n<p>This equality uses the objects' own <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> and <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> for\nthe equality.<\/p>\n<p>Note that <a href=\"package-collection_collection\/DefaultEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/DefaultEquality\/hash.html\">hash<\/a> take <code>Object<\/code>s rather than <code>E<\/code>s. This allows\n<code>E<\/code> to be inferred as <code>Null<\/code> in const contexts where <code>E<\/code> wouldn't be a\ncompile-time constant, while still allowing the class to be used at runtime.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DefaultEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DefaultEquality",
            "shortname": "DefaultEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DefaultEquality();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DefaultEquality\/DefaultEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DefaultEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DefaultEquality",
                    "params": []
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(Object e1, Object e2) =&gt; e1 == e2;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DefaultEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DefaultEquality",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/DefaultEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(Object e) =&gt; e.hashCode;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DefaultEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DefaultEquality",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/DefaultEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/DefaultEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; true;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DefaultEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DefaultEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that delegates all operations to a base iterable.<\/p>\n<p>This class can be used to hide non-<code>Iterable<\/code> methods of an iterable object,\nor it can be extended to add extra functionality on top of an existing\niterable object.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DelegatingIterable-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DelegatingIterable",
            "shortname": "DelegatingIterable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "collection.DelegatingList",
                "collection.DelegatingQueue",
                "collection.DelegatingSet",
                "collection.EqualitySet",
                "collection.NonGrowableListView",
                "collection.UnmodifiableSetView"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a wrapper that forwards operations to <code>base<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingIterable(Iterable&lt;E&gt; base) : _base = base;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/DelegatingIterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingIterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) =&gt; _base.any(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/any.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "any",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"package-collection_collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; cast&lt;T&gt;() =&gt; _base.cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _base.contains(element);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"package-collection_collection\/DelegatingIterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; _base.elementAt(index);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/elementAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) =&gt; _base.every(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt; _base.expand(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.firstWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/firstWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "firstWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) =&gt;\n    _base.fold(initialValue, combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/fold.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt; _base.followedBy(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/followedBy.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "followedBy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) =&gt; _base.forEach(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"package-collection_collection\/DelegatingIterable\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) =&gt; _base.join(separator);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.lastWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"package-collection_collection\/DelegatingIterable\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; _base.map(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) =&gt; _base.reduce(combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/reduce.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nIterable&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  return _base.singleWhere(test, orElse: orElse);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <a href=\"quiver.iterables\/count.html\">count<\/a> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <a href=\"quiver.iterables\/count.html\">count<\/a> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <a href=\"quiver.iterables\/count.html\">count<\/a> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int n) =&gt; _base.skip(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/skip.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) =&gt; _base.skipWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/skipWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skipWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the <a href=\"quiver.iterables\/count.html\">count<\/a> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/DelegatingIterable\/iterator.html\">iterator<\/a> until <a href=\"quiver.iterables\/count.html\">count<\/a>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int n) =&gt; _base.take(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/take.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "take",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/DelegatingIterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) =&gt; _base.takeWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/takeWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "takeWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) =&gt; _base.toList(growable: growable);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; _base.toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _base.toString();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Creates a wrapper that asserts the types of values in <code>base<\/code>.<\/p>\n<p>This soundly converts an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> without a generic type to an\n<code>Iterable&lt;E&gt;<\/code> by asserting that its elements are instances of <code>E<\/code> whenever\nthey're accessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingIterable-class.html\">this<\/a>. If <code>base<\/code> is already an <code>Iterable&lt;E&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use iterable.cast&lt;E&gt; instead.')\nstatic Iterable&lt;E&gt; typed&lt;E&gt;(Iterable base) =&gt; base.cast&lt;E&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/typed.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/DelegatingIterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; _base.where(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/where.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "where",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/DelegatingIterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; _base.whereType&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingIterable\/whereType.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "whereType",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _base.isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingIterable\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _base.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingIterable\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _base.iterator;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingIterable\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/DelegatingIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _base.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingIterable\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingIterable",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-core\/List-class.html\">List<\/a> that delegates all operations to a base list.<\/p>\n<p>This class can be used to hide non-<code>List<\/code> methods of a list object, or it\ncan be extended to add extra functionality on top of an existing list\nobject.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DelegatingList-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DelegatingList",
            "shortname": "DelegatingList",
            "extends": [
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "collection.NonGrowableListView"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingList(List&lt;E&gt; base) : super(base);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/DelegatingList.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingList",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _listBase.add(value);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  _listBase.addAll(iterable);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap() =&gt; _listBase.asMap();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.int>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"package-collection_collection\/DelegatingList\/add.html\">add<\/a> or <a href=\"package-collection_collection\/DelegatingList\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;T&gt; cast&lt;T&gt;() =&gt; _listBase.cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _listBase.clear();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]) {\n  _listBase.fillRange(start, end, fillValue);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/fillRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "fillRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "fillValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end) =&gt; _listBase.getRange(start, end);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/getRange.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "getRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(E element, [int start = 0]) =&gt; _listBase.indexOf(element, start);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/indexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]) =&gt;\n    _listBase.indexWhere(test, start);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/indexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  _listBase.insert(index, element);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">insertAll(int index, Iterable&lt;E&gt; iterable) {\n  _listBase.insertAll(index, iterable);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(E element, [int start]) =&gt;\n    _listBase.lastIndexOf(element, start);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/lastIndexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]) =&gt;\n    _listBase.lastIndexWhere(test, start);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/lastIndexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _listBase.remove(value);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) =&gt; _listBase.removeAt(index);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/removeAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; _listBase.removeLast();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) {\n  _listBase.removeRange(start, end);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/removeRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _listBase.removeWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"package-collection_collection\/DelegatingList\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; iterable) {\n  _listBase.replaceRange(start, end, iterable);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/replaceRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replaceRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _listBase.retainWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nList&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable) {\n  _listBase.setAll(index, iterable);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/setAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]) {\n  _listBase.setRange(start, end, iterable, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([math.Random random]) {\n  _listBase.shuffle(random);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/shuffle.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "shuffle",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "random",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:math.Random"
                        }
                    ]
                },
                {
                    "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]) {\n  _listBase.sort(compare);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/sort.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "a",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "b",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]) =&gt; _listBase.sublist(start, end);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/sublist.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "sublist",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a wrapper that asserts the types of values in <code>base<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-core\/List-class.html\">List<\/a> without a generic type to a <code>List&lt;E&gt;<\/code> by\nasserting that its elements are instances of <code>E<\/code> whenever they're\naccessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. Note that even if an\noperation throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>, it may still mutate the underlying\ncollection.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingList-class.html\">this<\/a>. If <code>base<\/code> is already a <code>List&lt;E&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use list.cast&lt;E&gt; instead.')\nstatic List&lt;E&gt; typed&lt;E&gt;(List base) =&gt; base.cast&lt;E&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingList\/typed.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingList",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/DelegatingList-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _base.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingList\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed =&gt; _listBase.reversed;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingList\/reversed.html",
                    "name": "reversed",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingList",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Map-class.html\">Map<\/a> that delegates all operations to a base map.<\/p>\n<p>This class can be used to hide non-<code>Map<\/code> methods of an object that extends\n<code>Map<\/code>, or it can be extended to add extra functionality on top of an\nexisting map object.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DelegatingMap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DelegatingMap",
            "shortname": "DelegatingMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "collection.EqualityMap"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingMap(Map&lt;K, V&gt; base) : _base = base;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/DelegatingMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  _base.addAll(other);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) {\n  _base.addEntries(entries);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "entries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.MapEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; cast&lt;K2, V2&gt;() =&gt; _base.cast&lt;K2, V2&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _base.clear();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; _base.containsKey(key);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; _base.containsValue(value);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  _base.forEach(f);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; transform(K key, V value)) =&gt;\n    _base.map(transform);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) =&gt; _base.putIfAbsent(key, ifAbsent);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) =&gt; _base.remove(key);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) =&gt; _base.removeWhere(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() =&gt; cast&lt;K2, V2&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _base.toString();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Creates a wrapper that asserts the types of keys and values in <code>base<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-core\/Map-class.html\">Map<\/a> without generic types to a <code>Map&lt;K, V&gt;<\/code> by\nasserting that its keys are instances of <code>E<\/code> and its values are instances\nof <code>V<\/code> whenever they're accessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>.\nNote that even if an operation throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>, it may still mutate\nthe underlying collection.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingMap-class.html\">this<\/a>. If <code>base<\/code> is already a <code>Map&lt;K, V&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use map.cast&lt;K, V&gt; instead.')\nstatic Map&lt;K, V&gt; typed&lt;K, V&gt;(Map base) =&gt; base.cast&lt;K, V&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/typed.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) =&gt;\n    _base.update(key, update, ifAbsent: ifAbsent);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) =&gt; _base.updateAll(update);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingMap\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The map entries of <a href=\"package-collection_collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt; _base.entries;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _base.isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _base.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"package-collection_collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"package-collection_collection\/DelegatingMap\/length.html\">length<\/a> and <a href=\"package-collection_collection\/DelegatingMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _base.keys;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _base.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"package-collection_collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"package-collection_collection\/DelegatingMap\/keys.html\">keys<\/a> and <a href=\"package-collection_collection\/DelegatingMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"package-collection_collection\/DelegatingMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _base.values;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/DelegatingMap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.DelegatingMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> that delegates all operations to a base queue.<\/p>\n<p>This class can be used to hide non-<code>Queue<\/code> methods of a queue object, or it\ncan be extended to add extra functionality on top of an existing queue\nobject.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DelegatingQueue-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DelegatingQueue",
            "shortname": "DelegatingQueue",
            "extends": [
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingQueue(Queue&lt;E&gt; queue) : super(queue);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/DelegatingQueue.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingQueue",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "queue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:collection.Queue"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _baseQueue.add(value);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  _baseQueue.addAll(iterable);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _baseQueue.addFirst(value);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/addFirst.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _baseQueue.addLast(value);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/addLast.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this queue as a queue of <code>R<\/code> instances, if necessary.<\/p>\n<p>If this queue contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the queue (e.g., by using <a href=\"package-collection_collection\/DelegatingQueue\/addFirst.html\">addFirst<\/a> or <a href=\"package-collection_collection\/DelegatingQueue\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis queue as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;T&gt; cast&lt;T&gt;() =&gt; _baseQueue.cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:collection.Queue",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _baseQueue.clear();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object object) =&gt; _baseQueue.remove(object);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() =&gt; _baseQueue.removeFirst();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/removeFirst.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; _baseQueue.removeLast();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _baseQueue.removeWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _baseQueue.retainWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nQueue&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:collection.Queue",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Creates a wrapper that asserts the types of values in <code>base<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> without a generic type to a <code>Queue&lt;E&gt;<\/code> by\nasserting that its elements are instances of <code>E<\/code> whenever they're\naccessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. Note that even if an\noperation throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>, it may still mutate the underlying\ncollection.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingQueue-class.html\">this<\/a>. If <code>base<\/code> is already a <code>Queue&lt;E&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use queue.cast&lt;E&gt; instead.')\nstatic Queue&lt;E&gt; typed&lt;E&gt;(Queue base) =&gt; base.cast&lt;E&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingQueue\/typed.html",
                    "isDeprecated": false,
                    "type": "dart:collection.Queue",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:collection.Queue"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Set-class.html\">Set<\/a> that delegates all operations to a base set.<\/p>\n<p>This class can be used to hide non-<code>Set<\/code> methods of a set object, or it can\nbe extended to add extra functionality on top of an existing set object.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/DelegatingSet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.DelegatingSet",
            "shortname": "DelegatingSet",
            "extends": [
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "collection.EqualitySet",
                "collection.UnmodifiableSetView"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingSet(Set&lt;E&gt; base) : super(base);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/DelegatingSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value) =&gt; _setBase.add(value);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"package-collection_collection\/DelegatingSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  _setBase.addAll(elements);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"package-collection_collection\/DelegatingSet\/add.html\">add<\/a> or <a href=\"package-collection_collection\/DelegatingSet\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;T&gt; cast&lt;T&gt;() =&gt; _setBase.cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _setBase.clear();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; _setBase.containsAll(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) =&gt; _setBase.difference(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) =&gt; _setBase.intersection(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"package-collection_collection\/DelegatingIterable\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"package-collection_collection\/DelegatingIterable\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object element) =&gt; _setBase.lookup(element);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _setBase.remove(value);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) {\n  _setBase.removeAll(elements);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _setBase.removeWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  _setBase.retainAll(elements);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _setBase.retainWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nSet&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; new DelegatingSet&lt;E&gt;(_setBase.toSet());<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Creates a wrapper that asserts the types of values in <code>base<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-core\/Set-class.html\">Set<\/a> without a generic type to a <code>Set&lt;E&gt;<\/code> by\nasserting that its elements are instances of <code>E<\/code> whenever they're\naccessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. Note that even if an\noperation throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>, it may still mutate the underlying\ncollection.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingSet-class.html\">this<\/a>. If <code>base<\/code> is already a <code>Set&lt;E&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use set.cast&lt;E&gt; instead.')\nstatic Set&lt;E&gt; typed&lt;E&gt;(Set base) =&gt; base.cast&lt;E&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/typed.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "typed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) =&gt; _setBase.union(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/DelegatingSet\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A generic equality relation on objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/Equality-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.Equality",
            "shortname": "Equality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory Equality() = DefaultEquality&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/Equality\/Equality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Equality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.Equality",
                    "params": []
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/Equality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.Equality",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/Equality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/Equality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.Equality",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/Equality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/Equality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/Equality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.Equality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Equality of objects based on derived values.<\/p>\n<p>For example, given the class:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">abstract class Employee {\n  int get employmentId;\n}\n<\/code><\/pre>\n<p>The following <a href=\"package-collection_collection\/Equality-class.html\">Equality<\/a> considers employees with the same IDs to be equal:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new EqualityBy((Employee e) =&gt; e.employmentId);\n<\/code><\/pre>\n<p>It's also possible to pass an additional equality instance that should be\nused to compare the value itself.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/EqualityBy-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.EqualityBy",
            "shortname": "EqualityBy",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EqualityBy(F getKey(E object), [Equality&lt;F&gt; inner = const DefaultEquality()])\n    : _getKey = getKey,\n      _inner = inner;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualityBy\/EqualityBy.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EqualityBy",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.EqualityBy",
                    "params": [
                        {
                            "name": "inner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2) =&gt; _inner.equals(_getKey(e1), _getKey(e2));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualityBy\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.EqualityBy",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/EqualityBy\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e) =&gt; _inner.hash(_getKey(e));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualityBy\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.EqualityBy",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/EqualityBy\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/EqualityBy\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) {\n  if (o is E) {\n    final value = _getKey(o);\n    return value is F &amp;&amp; _inner.isValidKey(value);\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualityBy\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.EqualityBy",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Map-class.html\">Map<\/a> whose key equality is determined by an <a href=\"package-collection_collection\/Equality-class.html\">Equality<\/a> object.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/EqualityMap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.EqualityMap",
            "shortname": "EqualityMap",
            "extends": [
                "collection.DelegatingMap",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a map with equality based on <code>equality<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EqualityMap(Equality&lt;K&gt; equality)\n    : super(new LinkedHashMap(\n          equals: equality.equals,\n          hashCode: equality.hash,\n          isValidKey: equality.isValidKey));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualityMap\/EqualityMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EqualityMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.EqualityMap",
                    "params": [
                        {
                            "name": "equality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Map-class.html\">Map<\/a> whose key equality is determined by an <a href=\"package-collection_collection\/Equality-class.html\">Equality<\/a> object.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/EqualitySet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.EqualitySet",
            "shortname": "EqualitySet",
            "extends": [
                "collection.DelegatingSet",
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a set with equality based on <code>equality<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EqualitySet(Equality&lt;E&gt; equality)\n    : super(new LinkedHashSet(\n          equals: equality.equals,\n          hashCode: equality.hash,\n          isValidKey: equality.isValidKey));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/EqualitySet\/EqualitySet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EqualitySet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.EqualitySet",
                    "params": [
                        {
                            "name": "equality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Heap based priority queue.<\/p>\n<p>The elements are kept in a heap structure,\nwhere the element with the highest priority is immediately accessible,\nand modifying a single element takes\nlogarithmic time in the number of elements on average.<\/p>\n<ul>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/add.html\">add<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a> operations take amortized logarithmic time,\nO(log(n)), but may occasionally take linear time when growing the capacity\nof the heap.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/addAll.html\">addAll<\/a> operation works as doing repeated <a href=\"package-collection_collection\/HeapPriorityQueue\/add.html\">add<\/a> operations.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/first.html\">first<\/a> getter takes constant time, O(1).<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/clear.html\">clear<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/removeAll.html\">removeAll<\/a> methods also take constant time, O(1).<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/contains.html\">contains<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/remove.html\">remove<\/a> operations may need to search the entire\nqueue for the elements, taking O(n) time.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/toList.html\">toList<\/a> operation effectively sorts the elements, taking O(n*log(n))\ntime.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/toSet.html\">toSet<\/a> operation effectively adds each element to the new set, taking\nan expected O(n*log(n)) time.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/HeapPriorityQueue-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.HeapPriorityQueue",
            "shortname": "HeapPriorityQueue",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The comparison being used to compare the priority of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Comparator&lt;E&gt; comparison\n\n<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/comparison.html",
                    "isDeprecated": false,
                    "type": "dart:core.Comparator",
                    "name": "comparison",
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Create a new priority queue.<\/p>\n<p>The <code>comparison<\/code> is a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> used to compare the priority of\nelements. An element that compares as less than another element has\na higher priority.<\/p>\n<p>If <code>comparison<\/code> is omitted, it defaults to <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a>. If this\nis the case, <code>E<\/code> must implement <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and this is checked at\nruntime for every comparison.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HeapPriorityQueue([int comparison(E e1, E e2)])\n    : comparison = comparison ?? defaultCompare&lt;E&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/HeapPriorityQueue.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HeapPriorityQueue",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds element to the queue.<\/p>\n<p>The element will become the next to be removed by <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a>\nwhen all elements with higher priority have been removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element) {\n  _add(element);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  for (E element in elements) {\n    _add(element);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all the elements from this queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _queue = const [];\n  _length = 0;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Checks if <code>object<\/code> is in the queue.<\/p>\n<p>Returns true if the element is found.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(E object) {\n  return _locate(object) &gt;= 0;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes an element that compares equal to <code>element<\/code> in the queue.<\/p>\n<p>Returns true if an element is found and removed,\nand false if no equal element is found.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(E element) {\n  int index = _locate(element);\n  if (index &lt; 0) return false;\n  E last = _removeLast();\n  if (index &lt; _length) {\n    int comp = comparison(last, element);\n    if (comp &lt;= 0) {\n      _bubbleUp(last, index);\n    } else {\n      _bubbleDown(last, index);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all the elements from this queue and returns them.<\/p>\n<p>The returned iterable has no specified order.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; removeAll() {\n  List&lt;E&gt; result = _queue;\n  int length = _length;\n  _queue = const [];\n  _length = 0;\n  return result.take(length);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/removeAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the element with the highest priority.<\/p>\n<p>Repeatedly calling this method, without adding element in between,\nis guaranteed to return elements in non-decreasing order as, specified by\n<a href=\"package-collection_collection\/HeapPriorityQueue\/comparison.html\">comparison<\/a>.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  if (_length == 0) throw new StateError(\"No such element\");\n  E result = _queue[0];\n  E last = _removeLast();\n  if (_length &gt; 0) {\n    _bubbleDown(last, 0);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/removeFirst.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Returns a list of the elements of this queue in priority order.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The order is the order that the elements would be in if they were\nremoved from this queue using <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList() {\n  List&lt;E&gt; list = new List&lt;E&gt;()..length = _length;\n  list.setRange(0, _length, _queue);\n  list.sort(comparison);\n  return list;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Return a comparator based set using the comparator of this queue.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The returned <a href=\"dart-core\/Set-class.html\">Set<\/a> is currently a <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a>,\nbut this may change as other ordered sets are implemented.<\/p>\n<p>The set contains all the elements of this queue.\nIf an element occurs more than once in the queue,\nthe set will contain it only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; set = new SplayTreeSet&lt;E&gt;(comparison);\n  for (int i = 0; i &lt; _length; i++) {\n    set.add(_queue[i]);\n  }\n  return set;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Returns some representation of the queue.<\/p>\n<p>The format isn't significant, and may change in the future.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return _queue.take(_length).toString();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether the queue is empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _length == 0;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Whether the queue has any elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _length != 0;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Number of elements in the queue.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/HeapPriorityQueue\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.HeapPriorityQueue",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Equality of objects that compares only the identity of the objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/IdentityEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.IdentityEquality",
            "shortname": "IdentityEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IdentityEquality();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IdentityEquality\/IdentityEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IdentityEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.IdentityEquality",
                    "params": []
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2) =&gt; identical(e1, e2);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IdentityEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IdentityEquality",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/IdentityEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e) =&gt; identityHashCode(e);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IdentityEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IdentityEquality",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/IdentityEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/IdentityEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; true;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IdentityEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IdentityEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Equality on iterables.<\/p>\n<p>Two iterables are equal if they have the same elements in the same order.<\/p>\n<p>The <a href=\"package-collection_collection\/IterableEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/IterableEquality\/hash.html\">hash<\/a> methods accepts <code>null<\/code> values,\neven if the <a href=\"package-collection_collection\/IterableEquality\/isValidKey.html\">isValidKey<\/a> returns <code>false<\/code> for <code>null<\/code>.\nThe <a href=\"package-collection_collection\/IterableEquality\/hash.html\">hash<\/a> of <code>null<\/code> is <code>null.hashCode<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/IterableEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.IterableEquality",
            "shortname": "IterableEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IterableEquality(\n    [Equality&lt;E&gt; elementEquality = const DefaultEquality()])\n    : _elementEquality = elementEquality;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IterableEquality\/IterableEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IterableEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.IterableEquality",
                    "params": [
                        {
                            "name": "elementEquality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(Iterable&lt;E&gt; elements1, Iterable&lt;E&gt; elements2) {\n  if (identical(elements1, elements2)) return true;\n  if (elements1 == null || elements2 == null) return false;\n  var it1 = elements1.iterator;\n  var it2 = elements2.iterator;\n  while (true) {\n    bool hasNext = it1.moveNext();\n    if (hasNext != it2.moveNext()) return false;\n    if (!hasNext) return true;\n    if (!_elementEquality.equals(it1.current, it2.current)) return false;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IterableEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IterableEquality",
                    "params": [
                        {
                            "name": "elements1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "elements2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/IterableEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(Iterable&lt;E&gt; elements) {\n  if (elements == null) return null.hashCode;\n  \/\/ Jenkins's one-at-a-time hash function.\n  int hash = 0;\n  for (E element in elements) {\n    int c = _elementEquality.hash(element);\n    hash = (hash + c) &amp; _HASH_MASK;\n    hash = (hash + (hash &lt;&lt; 10)) &amp; _HASH_MASK;\n    hash ^= (hash &gt;&gt; 6);\n  }\n  hash = (hash + (hash &lt;&lt; 3)) &amp; _HASH_MASK;\n  hash ^= (hash &gt;&gt; 11);\n  hash = (hash + (hash &lt;&lt; 15)) &amp; _HASH_MASK;\n  return hash;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IterableEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IterableEquality",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/IterableEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/IterableEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Iterable&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IterableEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.IterableEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Iterable that iterates over lists of values from other iterables.<\/p>\n<p>When <a href=\"package-collection_collection\/IterableZip\/iterator.html\">iterator<\/a> is read, an <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> is created for each <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> in\nthe <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> passed to the constructor.<\/p>\n<p>As long as all these iterators have a next value, those next values are\ncombined into a single list, which becomes the next value of this\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>'s <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a>. As soon as any of the iterators run out,\nthe zipped iterator also stops.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/IterableZip-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.IterableZip",
            "shortname": "IterableZip",
            "extends": [
                "dart:core.List",
                "dart:collection.IterableBase",
                "dart:core.List",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IterableZip(Iterable&lt;Iterable&lt;T&gt;&gt; iterables) : this._iterables = iterables;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/IterableZip\/IterableZip.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IterableZip",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.IterableZip",
                    "params": [
                        {
                            "name": "iterables",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:core.Iterable>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns an iterator that combines values of the iterables' iterators\nas long as they all have values.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;List&lt;T&gt;&gt; get iterator {\n  var iterators = _iterables.map((x) =&gt; x.iterator).toList(growable: false);\n  \/\/ TODO(lrn): Return an empty iterator directly if iterators is empty?\n  return new _IteratorZip&lt;T&gt;(iterators);\n}<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/IterableZip\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator<dart:core.List>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.IterableZip",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Equality on lists.<\/p>\n<p>Two lists are equal if they have the same length and their elements\nat each index are equal.<\/p>\n<p>This is effectively the same as <a href=\"package-collection_collection\/IterableEquality-class.html\">IterableEquality<\/a> except that it\naccesses elements by index instead of through iteration.<\/p>\n<p>The <a href=\"package-collection_collection\/ListEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/ListEquality\/hash.html\">hash<\/a> methods accepts <code>null<\/code> values,\neven if the <a href=\"package-collection_collection\/ListEquality\/isValidKey.html\">isValidKey<\/a> returns <code>false<\/code> for <code>null<\/code>.\nThe <a href=\"package-collection_collection\/ListEquality\/hash.html\">hash<\/a> of <code>null<\/code> is <code>null.hashCode<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/ListEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.ListEquality",
            "shortname": "ListEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ListEquality([Equality&lt;E&gt; elementEquality = const DefaultEquality()])\n    : _elementEquality = elementEquality;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/ListEquality\/ListEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ListEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.ListEquality",
                    "params": [
                        {
                            "name": "elementEquality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(List&lt;E&gt; list1, List&lt;E&gt; list2) {\n  if (identical(list1, list2)) return true;\n  if (list1 == null || list2 == null) return false;\n  int length = list1.length;\n  if (length != list2.length) return false;\n  for (int i = 0; i &lt; length; i++) {\n    if (!_elementEquality.equals(list1[i], list2[i])) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/ListEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.ListEquality",
                    "params": [
                        {
                            "name": "list1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        },
                        {
                            "name": "list2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/ListEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(List&lt;E&gt; list) {\n  if (list == null) return null.hashCode;\n  \/\/ Jenkins's one-at-a-time hash function.\n  \/\/ This code is almost identical to the one in IterableEquality, except\n  \/\/ that it uses indexing instead of iterating to get the elements.\n  int hash = 0;\n  for (int i = 0; i &lt; list.length; i++) {\n    int c = _elementEquality.hash(list[i]);\n    hash = (hash + c) &amp; _HASH_MASK;\n    hash = (hash + (hash &lt;&lt; 10)) &amp; _HASH_MASK;\n    hash ^= (hash &gt;&gt; 6);\n  }\n  hash = (hash + (hash &lt;&lt; 3)) &amp; _HASH_MASK;\n  hash ^= (hash &gt;&gt; 11);\n  hash = (hash + (hash &lt;&lt; 15)) &amp; _HASH_MASK;\n  return hash;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/ListEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.ListEquality",
                    "params": [
                        {
                            "name": "list",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/ListEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/ListEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is List&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/ListEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.ListEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Equality on maps.<\/p>\n<p>Two maps are equal if they have the same number of entries, and if the\nentries of the two maps are pairwise equal on both key and value.<\/p>\n<p>The <a href=\"package-collection_collection\/MapEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/MapEquality\/hash.html\">hash<\/a> methods accepts <code>null<\/code> values,\neven if the <a href=\"package-collection_collection\/MapEquality\/isValidKey.html\">isValidKey<\/a> returns <code>false<\/code> for <code>null<\/code>.\nThe <a href=\"package-collection_collection\/MapEquality\/hash.html\">hash<\/a> of <code>null<\/code> is <code>null.hashCode<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/MapEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.MapEquality",
            "shortname": "MapEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MapEquality(\n    {Equality&lt;K&gt; keys: const DefaultEquality(),\n    Equality&lt;V&gt; values: const DefaultEquality()})\n    : _keyEquality = keys,\n      _valueEquality = values;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapEquality\/MapEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MapEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.MapEquality",
                    "params": [
                        {
                            "name": "keys",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(Map&lt;K, V&gt; map1, Map&lt;K, V&gt; map2) {\n  if (identical(map1, map2)) return true;\n  if (map1 == null || map2 == null) return false;\n  int length = map1.length;\n  if (length != map2.length) return false;\n  Map&lt;_MapEntry, int&gt; equalElementCounts = new HashMap();\n  for (K key in map1.keys) {\n    _MapEntry entry = new _MapEntry(this, key, map1[key]);\n    int count = equalElementCounts[entry];\n    if (count == null) count = 0;\n    equalElementCounts[entry] = count + 1;\n  }\n  for (K key in map2.keys) {\n    _MapEntry entry = new _MapEntry(this, key, map2[key]);\n    int count = equalElementCounts[entry];\n    if (count == null || count == 0) return false;\n    equalElementCounts[entry] = count - 1;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapEquality",
                    "params": [
                        {
                            "name": "map1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "map2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/MapEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(Map&lt;K, V&gt; map) {\n  if (map == null) return null.hashCode;\n  int hash = 0;\n  for (K key in map.keys) {\n    int keyHash = _keyEquality.hash(key);\n    int valueHash = _valueEquality.hash(map[key]);\n    hash = (hash + 3 * keyHash + 7 * valueHash) &amp; _HASH_MASK;\n  }\n  hash = (hash + (hash &lt;&lt; 3)) &amp; _HASH_MASK;\n  hash ^= (hash &gt;&gt; 11);\n  hash = (hash + (hash &lt;&lt; 15)) &amp; _HASH_MASK;\n  return hash;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapEquality",
                    "params": [
                        {
                            "name": "map",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/MapEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/MapEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Map&lt;K, V&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An unmodifiable <a href=\"dart-core\/Set-class.html\">Set<\/a> view of the keys of a <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The set delegates all operations to the underlying map.<\/p>\n<p>A <code>Map<\/code> can only contain each key once, so its keys can always\nbe viewed as a <code>Set<\/code> without any loss, even if the <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a>\ngetter only shows an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> view of the keys.<\/p>\n<p>Note that <a href=\"package-collection_collection\/MapKeySet\/lookup.html\">lookup<\/a> is not supported for this set.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/MapKeySet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.MapKeySet",
            "shortname": "MapKeySet",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MapKeySet(Map&lt;E, dynamic&gt; base) : _baseMap = base;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/MapKeySet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MapKeySet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) =&gt; _base.any(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/any.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "any",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"package-collection_collection\/MapKeySet\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;T&gt; cast&lt;T&gt;() {\n  if (this is MapKeySet&lt;T&gt;) {\n    return this as MapKeySet&lt;T&gt;;\n  }\n  return Set.castFrom&lt;E, T&gt;(this);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _baseMap.containsKey(element);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; other.every(contains);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set with the the elements of <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that are\nnot elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) =&gt;\n    where((element) =&gt; !other.contains(element)).toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"package-collection_collection\/MapKeySet\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; _base.elementAt(index);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/elementAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) =&gt; _base.every(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt; _base.expand(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.firstWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/firstWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "firstWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) =&gt;\n    _base.fold(initialValue, combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/fold.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt; _base.followedBy(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/followedBy.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "followedBy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) =&gt; _base.forEach(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which is the intersection between <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that are\nalso elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) =&gt; where(other.contains).toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"package-collection_collection\/MapKeySet\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) =&gt; _base.join(separator);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.lastWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> since there's no corresponding method for\n<a href=\"dart-core\/Map-class.html\">Map<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object element) =&gt;\n    throw new UnsupportedError(\"MapKeySet doesn't support lookup().\");<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"package-collection_collection\/MapKeySet\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; _base.map(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) =&gt; _base.reduce(combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/reduce.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nSet&lt;T&gt; retype&lt;T&gt;() =&gt; Set.castFrom&lt;E, T&gt;(this);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  return _base.singleWhere(test, orElse: orElse);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <a href=\"quiver.iterables\/count.html\">count<\/a> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <a href=\"quiver.iterables\/count.html\">count<\/a> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <a href=\"quiver.iterables\/count.html\">count<\/a> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int n) =&gt; _base.skip(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/skip.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) =&gt; _base.skipWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/skipWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skipWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the <a href=\"quiver.iterables\/count.html\">count<\/a> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/MapKeySet\/iterator.html\">iterator<\/a> until <a href=\"quiver.iterables\/count.html\">count<\/a>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int n) =&gt; _base.take(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/take.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "take",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/MapKeySet\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) =&gt; _base.takeWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/takeWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "takeWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) =&gt; _base.toList(growable: growable);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; _base.toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"{${_base.join(', ')}}\";<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new set which contains all the elements of <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and all\nthe elements of <code>other<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) =&gt; toSet()..addAll(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/MapKeySet\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; _base.where(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/where.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "where",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/MapKeySet\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; _base.whereType&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapKeySet\/whereType.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "whereType",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _baseMap.isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapKeySet\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _baseMap.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapKeySet\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _base.iterator;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapKeySet\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/MapKeySet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _baseMap.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapKeySet\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapKeySet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Creates a modifiable <a href=\"dart-core\/Set-class.html\">Set<\/a> view of the values of a <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The <code>Set<\/code> view assumes that the keys of the <code>Map<\/code> can be uniquely determined\nfrom the values. The <code>keyForValue<\/code> function passed to the constructor finds\nthe key for a single value. The <code>keyForValue<\/code> function should be consistent\nwith equality. If <code>value1 == value2<\/code> then <code>keyForValue(value1)<\/code> and\n<code>keyForValue(value2)<\/code> should be considered equal keys by the underlying map,\nand vice versa.<\/p>\n<p>Modifying the set will modify the underlying map based on the key returned\nby <code>keyForValue<\/code>.<\/p>\n<p>If the <code>Map<\/code> contents are not compatible with the <code>keyForValue<\/code> function,\nthe set will not work consistently, and may give meaningless responses or do\ninconsistent updates.<\/p>\n<p>This set can, for example, be used on a map from database record IDs to the\nrecords. It exposes the records as a set, and allows for writing both\n<code>recordSet.add(databaseRecord)<\/code> and <code>recordMap[id]<\/code>.<\/p>\n<p>Effectively, the map will act as a kind of index for the set.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/MapValueSet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.MapValueSet",
            "shortname": "MapValueSet",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-collection_collection\/MapValueSet-class.html\">MapValueSet<\/a> based on <code>base<\/code>.<\/p>\n<p><code>keyForValue<\/code> returns the key in the map that should be associated with\nthe given value. The set's notion of equality is identical to the equality\nof the return values of <code>keyForValue<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MapValueSet(Map&lt;K, V&gt; base, K keyForValue(V value))\n    : _baseMap = base,\n      _keyForValue = keyForValue;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/MapValueSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MapValueSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "base",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(V value) {\n  K key = _keyForValue(value);\n  bool result = false;\n  _baseMap.putIfAbsent(key, () {\n    result = true;\n    return value;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"package-collection_collection\/MapValueSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;V&gt; elements) =&gt; elements.forEach(add);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) =&gt; _base.any(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/any.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "any",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"package-collection_collection\/MapValueSet\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;T&gt; cast&lt;T&gt;() {\n  if (this is Set&lt;T&gt;) {\n    return this as Set&lt;T&gt;;\n  }\n  return Set.castFrom&lt;V, T&gt;(this);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; _baseMap.clear();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  if (element != null &amp;&amp; element is! V) return false;\n  var key = _keyForValue(element as V);\n\n  return _baseMap.containsKey(key);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; other.every(contains);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set with the the elements of <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that are\nnot elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; difference(Set&lt;Object&gt; other) =&gt;\n    where((element) =&gt; !other.contains(element)).toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"package-collection_collection\/MapValueSet\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; _base.elementAt(index);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/elementAt.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) =&gt; _base.every(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt; _base.expand(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.firstWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/firstWhere.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "firstWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) =&gt;\n    _base.fold(initialValue, combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/fold.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt; _base.followedBy(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/followedBy.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "followedBy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) =&gt; _base.forEach(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which is the intersection between <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that are\nalso elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; intersection(Set&lt;Object&gt; other) =&gt; where(other.contains).toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"package-collection_collection\/MapValueSet\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) =&gt; _base.join(separator);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) =&gt;\n    _base.lastWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"package-collection_collection\/MapValueSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"package-collection_collection\/MapValueSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V lookup(Object element) {\n  if (element != null &amp;&amp; element is! V) return null;\n  var key = _keyForValue(element as V);\n\n  return _baseMap[key];\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"package-collection_collection\/MapValueSet\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; _base.map(f);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) =&gt; _base.reduce(combine);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/reduce.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object element) {\n  if (element != null &amp;&amp; element is! V) return false;\n  var key = _keyForValue(element as V);\n\n  if (!_baseMap.containsKey(key)) return false;\n  _baseMap.remove(key);\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) =&gt; elements.forEach(remove);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(V element)) {\n  var toRemove = [];\n  _baseMap.forEach((key, value) {\n    if (test(value)) toRemove.add(key);\n  });\n  toRemove.forEach(_baseMap.remove);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  var valuesToRetain = new Set&lt;V&gt;.identity();\n  for (var element in elements) {\n    if (element != null &amp;&amp; element is! V) continue;\n    var key = _keyForValue(element as V);\n\n    if (!_baseMap.containsKey(key)) continue;\n    valuesToRetain.add(_baseMap[key]);\n  }\n\n  var keysToRemove = [];\n  _baseMap.forEach((k, v) {\n    if (!valuesToRetain.contains(v)) keysToRemove.add(k);\n  });\n  keysToRemove.forEach(_baseMap.remove);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(V element)) =&gt;\n    removeWhere((element) =&gt; !test(element));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nSet&lt;T&gt; retype&lt;T&gt;() =&gt; Set.castFrom&lt;V, T&gt;(this);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  return _base.singleWhere(test, orElse: orElse);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <a href=\"quiver.iterables\/count.html\">count<\/a> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <a href=\"quiver.iterables\/count.html\">count<\/a> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <a href=\"quiver.iterables\/count.html\">count<\/a> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int n) =&gt; _base.skip(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/skip.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) =&gt; _base.skipWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/skipWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skipWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the <a href=\"quiver.iterables\/count.html\">count<\/a> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/MapValueSet\/iterator.html\">iterator<\/a> until <a href=\"quiver.iterables\/count.html\">count<\/a>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int n) =&gt; _base.take(n);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/take.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "take",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"package-collection_collection\/MapValueSet\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) =&gt; _base.takeWhile(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/takeWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "takeWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) =&gt; _base.toList(growable: growable);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; _base.toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; toSet().toString();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new set which contains all the elements of <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and all\nthe elements of <code>other<\/code>.<\/p>\n<p>Note that the returned set will use the default equality operation, which\nmay be different than the equality operation <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a> uses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; union(Set&lt;V&gt; other) =&gt; toSet()..addAll(other);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/MapValueSet\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; _base.where(test);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/where.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "where",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"package-collection_collection\/MapValueSet\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; _base.whereType&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MapValueSet\/whereType.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "whereType",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _baseMap.isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapValueSet\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _baseMap.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapValueSet\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _base.iterator;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapValueSet\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/MapValueSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _baseMap.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/MapValueSet\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.MapValueSet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Combines several equalities into a single equality.<\/p>\n<p>Tries each equality in order, using <a href=\"package-collection_collection\/MultiEquality\/isValidKey.html\">Equality.isValidKey<\/a>, and returns\nthe result of the first equality that applies to the argument or arguments.<\/p>\n<p>For <code>equals<\/code>, the first equality that matches the first argument is used,\nand if the second argument of <code>equals<\/code> is not valid for that equality,\nit returns false.<\/p>\n<p>Because the equalities are tried in order, they should generally work on\ndisjoint types. Otherwise the multi-equality may give inconsistent results\nfor <code>equals(e1, e2)<\/code> and <code>equals(e2, e1)<\/code>. This can happen if one equality\nconsiders only <code>e1<\/code> a valid key, and not <code>e2<\/code>, but an equality which is\nchecked later, allows both.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/MultiEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.MultiEquality",
            "shortname": "MultiEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MultiEquality(Iterable&lt;Equality&lt;E&gt;&gt; equalities)\n    : _equalities = equalities;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MultiEquality\/MultiEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MultiEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.MultiEquality",
                    "params": [
                        {
                            "name": "equalities",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<collection.Equality>"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(e1)) return eq.isValidKey(e2) &amp;&amp; eq.equals(e1, e2);\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MultiEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MultiEquality",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/MultiEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(e)) return eq.hash(e);\n  }\n  return 0;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MultiEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MultiEquality",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/MultiEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/MultiEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(o)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/MultiEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.MultiEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Mixin class that implements a throwing version of all list operations that\nchange the List's length.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/NonGrowableListMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.NonGrowableListMixin",
            "shortname": "NonGrowableListMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-collection_collection\/NonGrowableListMixin\/NonGrowableListMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "NonGrowableListMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/removeAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/removeRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; iterable) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/replaceRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replaceRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the length of the list are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/NonGrowableListMixin\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.NonGrowableListMixin",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A fixed-length list.<\/p>\n<p>A <code>NonGrowableListView<\/code> contains a <a href=\"dart-core\/List-class.html\">List<\/a> object and ensures that\nits length does not change.\nMethods that would change the length of the list,\nsuch as <a href=\"package-collection_collection\/NonGrowableListMixin\/add.html\">add<\/a> and <a href=\"package-collection_collection\/NonGrowableListMixin\/remove.html\">remove<\/a>, throw an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.\nAll other methods work directly on the underlying list.<\/p>\n<p>This class <em>does<\/em> allow changes to the contents of the wrapped list.\nYou can, for example, <a href=\"package-collection_collection\/DelegatingList\/sort.html\">sort<\/a> the list.\nPermitted operations defer to the wrapped list.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/NonGrowableListView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.NonGrowableListView",
            "shortname": "NonGrowableListView",
            "extends": [
                "collection.DelegatingList",
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NonGrowableListView(List&lt;E&gt; listBase) : super(listBase);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/NonGrowableListView\/NonGrowableListView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "NonGrowableListView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.NonGrowableListView",
                    "params": [
                        {
                            "name": "listBase",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A priority queue is a priority based work-list of elements.<\/p>\n<p>The queue allows adding elements, and removing them again in priority order.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/PriorityQueue-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.PriorityQueue",
            "shortname": "PriorityQueue",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an empty <a href=\"package-collection_collection\/PriorityQueue-class.html\">PriorityQueue<\/a>.<\/p>\n<p>The created <a href=\"package-collection_collection\/PriorityQueue-class.html\">PriorityQueue<\/a> is a plain <a href=\"package-collection_collection\/HeapPriorityQueue-class.html\">HeapPriorityQueue<\/a>.<\/p>\n<p>The <code>comparison<\/code> is a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> used to compare the priority of\nelements. An element that compares as less than another element has\na higher priority.<\/p>\n<p>If <code>comparison<\/code> is omitted, it defaults to <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a>. If this\nis the case, <code>E<\/code> must implement <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and this is checked at\nruntime for every comparison.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory PriorityQueue([int comparison(E e1, E e2)]) = HeapPriorityQueue&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/PriorityQueue.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PriorityQueue",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": [
                        {
                            "name": "e1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<E>"
                        },
                        {
                            "name": "e2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds element to the queue.<\/p>\n<p>The element will become the next to be removed by <a href=\"package-collection_collection\/PriorityQueue\/removeFirst.html\">removeFirst<\/a>\nwhen all elements with higher priority have been removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all the elements from this queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Checks if <code>object<\/code> is in the queue.<\/p>\n<p>Returns true if the element is found.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(E object);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes an element that compares equal to <code>element<\/code> in the queue.<\/p>\n<p>Returns true if an element is found and removed,\nand false if no equal element is found.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(E element);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all the elements from this queue and returns them.<\/p>\n<p>The returned iterable has no specified order.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; removeAll();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/removeAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the element with the highest priority.<\/p>\n<p>Repeatedly calling this method, without adding element in between,\nis guaranteed to return elements in non-decreasing order as, specified by\n<code>comparison<\/code>.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/removeFirst.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Returns a list of the elements of this queue in priority order.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The order is the order that the elements would be in if they were\nremoved from this queue using <a href=\"package-collection_collection\/PriorityQueue\/removeFirst.html\">removeFirst<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Return a comparator based set using the comparator of this queue.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The returned <a href=\"dart-core\/Set-class.html\">Set<\/a> is currently a <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a>,\nbut this may change as other ordered sets are implemented.<\/p>\n<p>The set contains all the elements of this queue.\nIf an element occurs more than once in the queue,\nthe set will contain it only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/PriorityQueue\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether the queue is empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/PriorityQueue\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Whether the queue has any elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/PriorityQueue\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                },
                {
                    "desc": "<p>Number of elements in the queue.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/PriorityQueue\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.PriorityQueue",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class that efficiently implements both <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> and <a href=\"dart-core\/List-class.html\">List<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/QueueList-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.QueueList",
            "shortname": "QueueList",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create an empty queue.<\/p>\n<p>If <code>initialCapacity<\/code> is given, prepare the queue for at least that many\nelements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">QueueList([int initialCapacity])\n    : _head = 0,\n      _tail = 0 {\n  if (initialCapacity == null || initialCapacity &lt; _INITIAL_CAPACITY) {\n    initialCapacity = _INITIAL_CAPACITY;\n  } else if (!_isPowerOf2(initialCapacity)) {\n    initialCapacity = _nextPowerOf2(initialCapacity);\n  }\n  assert(_isPowerOf2(initialCapacity));\n  _table = new List&lt;E&gt;(initialCapacity);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/QueueList.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "QueueList",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": [
                        {
                            "name": "initialCapacity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element) {\n  _add(element);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  if (iterable is List) {\n    var list = iterable;\n    int addCount = list.length;\n    int length = this.length;\n    if (length + addCount &gt;= _table.length) {\n      _preGrow(length + addCount);\n      \/\/ After preGrow, all elements are at the start of the list.\n      _table.setRange(length, length + addCount, list, 0);\n      _tail += addCount;\n    } else {\n      \/\/ Adding addCount elements won't reach _head.\n      int endSpace = _table.length - _tail;\n      if (addCount &lt; endSpace) {\n        _table.setRange(_tail, _tail + addCount, list, 0);\n        _tail += addCount;\n      } else {\n        int preSpace = addCount - endSpace;\n        _table.setRange(_tail, _tail + endSpace, list, 0);\n        _table.setRange(0, preSpace, list, endSpace);\n        _tail = preSpace;\n      }\n    }\n  } else {\n    for (E element in iterable) _add(element);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E element) {\n  _head = (_head - 1) &amp; (_table.length - 1);\n  _table[_head] = element;\n  if (_head == _tail) _grow();\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/addFirst.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E element) {\n  _add(element);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/addLast.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this queue as a queue of <code>R<\/code> instances, if necessary.<\/p>\n<p>If this queue contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the queue (e.g., by using <a href=\"package-collection_collection\/QueueList\/addFirst.html\">addFirst<\/a> or <a href=\"package-collection_collection\/QueueList\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis queue as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">QueueList&lt;T&gt; cast&lt;T&gt;() =&gt; QueueList._castFrom&lt;E, T&gt;(this);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/cast.html",
                    "isDeprecated": false,
                    "type": "collection.QueueList",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  if (_head == _tail) throw new StateError(\"No element\");\n  E result = _table[_head];\n  _table[_head] = null;\n  _head = (_head + 1) &amp; (_table.length - 1);\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/removeFirst.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  if (_head == _tail) throw new StateError(\"No element\");\n  _tail = (_tail - 1) &amp; (_table.length - 1);\n  E result = _table[_tail];\n  _table[_tail] = null;\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nQueueList&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/retype.html",
                    "isDeprecated": false,
                    "type": "collection.QueueList",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, \"{\", \"}\");<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/QueueList\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; (_tail - _head) &amp; (_table.length - 1);<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/QueueList\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.QueueList",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Equality of sets.<\/p>\n<p>Two sets are considered equal if they have the same number of elements,\nand the elements of one set can be paired with the elements\nof the other set, so that each pair are equal.<\/p>\n<p>This equality behaves the same as <a href=\"package-collection_collection\/UnorderedIterableEquality-class.html\">UnorderedIterableEquality<\/a> except that\nit expects sets instead of iterables as arguments.<\/p>\n<p>The <a href=\"package-collection_collection\/SetEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/SetEquality\/hash.html\">hash<\/a> methods accepts <code>null<\/code> values,\neven if the <a href=\"package-collection_collection\/SetEquality\/isValidKey.html\">isValidKey<\/a> returns <code>false<\/code> for <code>null<\/code>.\nThe <a href=\"package-collection_collection\/SetEquality\/hash.html\">hash<\/a> of <code>null<\/code> is <code>null.hashCode<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/SetEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.SetEquality",
            "shortname": "SetEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SetEquality([Equality&lt;E&gt; elementEquality = const DefaultEquality()])\n    : super(elementEquality);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/SetEquality\/SetEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SetEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.SetEquality",
                    "params": [
                        {
                            "name": "elementEquality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(T elements1, T elements2) {\n  if (identical(elements1, elements2)) return true;\n  if (elements1 == null || elements2 == null) return false;\n  HashMap&lt;E, int&gt; counts = new HashMap(\n      equals: _elementEquality.equals,\n      hashCode: _elementEquality.hash,\n      isValidKey: _elementEquality.isValidKey);\n  int length = 0;\n  for (var e in elements1) {\n    int count = counts[e];\n    if (count == null) count = 0;\n    counts[e] = count + 1;\n    length++;\n  }\n  for (var e in elements2) {\n    int count = counts[e];\n    if (count == null || count == 0) return false;\n    counts[e] = count - 1;\n    length--;\n  }\n  return length == 0;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/SetEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.SetEquality",
                    "params": [
                        {
                            "name": "elements1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        },
                        {
                            "name": "elements2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/SetEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(T elements) {\n  if (elements == null) return null.hashCode;\n  int hash = 0;\n  for (E element in elements) {\n    int c = _elementEquality.hash(element);\n    hash = (hash + c) &amp; _HASH_MASK;\n  }\n  hash = (hash + (hash &lt;&lt; 3)) &amp; _HASH_MASK;\n  hash ^= (hash &gt;&gt; 11);\n  hash = (hash + (hash &lt;&lt; 15)) &amp; _HASH_MASK;\n  return hash;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/SetEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.SetEquality",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/SetEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/SetEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Set&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/SetEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.SetEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A single set that provides a view of the union over a set of sets.<\/p>\n<p>Since this is just a view, it reflects all changes in the underlying sets.<\/p>\n<p>If an element is in multiple sets and the outer set is ordered, the version\nin the earliest inner set is preferred. Component sets are assumed to use\n<code>==<\/code> and <code>hashCode<\/code> for equality.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnionSet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnionSet",
            "shortname": "UnionSet",
            "extends": [
                "dart:collection.SetBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new set that's a view of the union of all sets in <code>sets<\/code>.<\/p>\n<p>If any sets in <code>sets<\/code> change, this <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> reflects that change. If a\nnew set is added to <code>sets<\/code>, this <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> reflects that as well.<\/p>\n<p>If <code>disjoint<\/code> is <code>true<\/code>, then all component sets must be disjoint. That\nis, that they contain no elements in common. This makes many operations\nincluding <a href=\"package-collection_collection\/UnionSet\/length.html\">length<\/a> more efficient. If the component sets turn out not to\nbe disjoint, some operations may behave inconsistently.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnionSet(this._sets, {bool disjoint: false}) : _disjoint = disjoint;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSet\/UnionSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnionSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnionSet",
                    "params": [
                        {
                            "name": "_sets",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Set<dart:core.Set>"
                        },
                        {
                            "name": "disjoint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if <code>value<\/code> is in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _sets.any((set) =&gt; set.contains(element));<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSet\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnionSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"package-collection_collection\/UnionSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"package-collection_collection\/UnionSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object element) {\n  if (element == null) return null;\n\n  return _sets\n      .map((set) =&gt; set.lookup(element))\n      .firstWhere((result) =&gt; result != null, orElse: () =&gt; null);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnionSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  var result = new Set&lt;E&gt;();\n  for (var set in _sets) {\n    result.addAll(set);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSet\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnionSet",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _iterable.iterator;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/UnionSet\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.UnionSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _disjoint\n    ? _sets.fold(0, (length, set) =&gt; length + set.length)\n    : _iterable.length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/UnionSet\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.UnionSet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A controller that exposes a view of the union of a collection of sets.<\/p>\n<p>This is a convenience class for creating a <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> whose contents change\nover the lifetime of a class. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class Engine {\n  Set&lt;Test&gt; get activeTests =&gt; _activeTestsGroup.set;\n  final _activeTestsGroup = new UnionSetController&lt;Test&gt;();\n\n  void addSuite(Suite suite) {\n    _activeTestsGroup.add(suite.tests);\n    _runSuite(suite);\n    _activeTestsGroup.remove(suite.tests);\n  }\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnionSetController-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnionSetController",
            "shortname": "UnionSetController",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a set of sets that provides a view of the union of those sets.<\/p>\n<p>If <code>disjoint<\/code> is <code>true<\/code>, this assumes that all component sets are\ndisjoint\u2014that is, that they contain no elements in common. This makes\nmany operations including <code>length<\/code> more efficient.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnionSetController({bool disjoint: false}) {\n  _set = new UnionSet&lt;E&gt;(_sets, disjoint: disjoint);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSetController\/UnionSetController.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnionSetController",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnionSetController",
                    "params": [
                        {
                            "name": "disjoint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds the contents of <code>component<\/code> to <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n<p>If the contents of <code>component<\/code> change over time, <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a> will change\naccordingly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(Set&lt;E&gt; component) {\n  _sets.add(component);\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSetController\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnionSetController",
                    "params": [
                        {
                            "name": "component",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the contents of <code>component<\/code> to <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n<p>If another set in <a href=\"package-collection_collection\/UnionSetController-class.html\">this<\/a> has overlapping elements with <code>component<\/code>, those\nelements will remain in <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Set&lt;E&gt; component) =&gt; _sets.remove(component);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnionSetController\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnionSetController",
                    "params": [
                        {
                            "name": "component",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> that provides a view of the union of sets in <a href=\"package-collection_collection\/UnionSetController-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">UnionSet&lt;E&gt; get set =&gt; _set;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/UnionSetController\/set.html",
                    "name": "set",
                    "isDeprecated": false,
                    "type": "collection.UnionSet",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.UnionSetController",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Mixin class that implements a throwing version of all map operations that\nchange the Map.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnmodifiableMapMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnmodifiableMapMixin",
            "shortname": "UnmodifiableMapMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-collection_collection\/UnmodifiableMapMixin\/UnmodifiableMapMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnmodifiableMapMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnmodifiableMapMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the map are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableMapMixin\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableMapMixin",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the map are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableMapMixin\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableMapMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the map are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableMapMixin\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableMapMixin",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the map are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableMapMixin\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableMapMixin",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Mixin class that implements a throwing version of all set operations that\nchange the Set.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnmodifiableSetMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnmodifiableSetMixin",
            "shortname": "UnmodifiableSetMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/UnmodifiableSetMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnmodifiableSetMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": []
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable elements) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable elements) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>;\noperations that change the set are disallowed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; _throw();<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "package-collection_collection\/UnmodifiableSetMixin\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "collection.UnmodifiableSetMixin",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An unmodifiable set.<\/p>\n<p>An UnmodifiableSetView contains a <a href=\"dart-core\/Set-class.html\">Set<\/a> object and ensures\nthat it does not change.\nMethods that would change the set,\nsuch as <a href=\"package-collection_collection\/UnmodifiableSetMixin\/add.html\">add<\/a> and <a href=\"package-collection_collection\/UnmodifiableSetMixin\/remove.html\">remove<\/a>, throw an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.\nPermitted operations defer to the wrapped set.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnmodifiableSetView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnmodifiableSetView",
            "shortname": "UnmodifiableSetView",
            "extends": [
                "collection.DelegatingSet",
                "collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnmodifiableSetView(Set&lt;E&gt; setBase) : super(setBase);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnmodifiableSetView\/UnmodifiableSetView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnmodifiableSetView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnmodifiableSetView",
                    "params": [
                        {
                            "name": "setBase",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Equality of the elements of two iterables without considering order.<\/p>\n<p>Two iterables are considered equal if they have the same number of elements,\nand the elements of one set can be paired with the elements\nof the other iterable, so that each pair are equal.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-collection_collection\/UnorderedIterableEquality-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "collection",
            "name": "collection.UnorderedIterableEquality",
            "shortname": "UnorderedIterableEquality",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const UnorderedIterableEquality(\n    [Equality&lt;E&gt; elementEquality = const DefaultEquality()])\n    : super(elementEquality);<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnorderedIterableEquality\/UnorderedIterableEquality.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnorderedIterableEquality",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "collection.UnorderedIterableEquality",
                    "params": [
                        {
                            "name": "elementEquality",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "collection.Equality"
                        }
                    ]
                },
                {
                    "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(T elements1, T elements2) {\n  if (identical(elements1, elements2)) return true;\n  if (elements1 == null || elements2 == null) return false;\n  HashMap&lt;E, int&gt; counts = new HashMap(\n      equals: _elementEquality.equals,\n      hashCode: _elementEquality.hash,\n      isValidKey: _elementEquality.isValidKey);\n  int length = 0;\n  for (var e in elements1) {\n    int count = counts[e];\n    if (count == null) count = 0;\n    counts[e] = count + 1;\n    length++;\n  }\n  for (var e in elements2) {\n    int count = counts[e];\n    if (count == null || count == 0) return false;\n    counts[e] = count - 1;\n    length--;\n  }\n  return length == 0;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnorderedIterableEquality\/equals.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "equals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnorderedIterableEquality",
                    "params": [
                        {
                            "name": "elements1",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "elements2",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/UnorderedIterableEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(T elements) {\n  if (elements == null) return null.hashCode;\n  int hash = 0;\n  for (E element in elements) {\n    int c = _elementEquality.hash(element);\n    hash = (hash + c) &amp; _HASH_MASK;\n  }\n  hash = (hash + (hash &lt;&lt; 3)) &amp; _HASH_MASK;\n  hash ^= (hash &gt;&gt; 11);\n  hash = (hash + (hash &lt;&lt; 15)) &amp; _HASH_MASK;\n  return hash;\n}<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnorderedIterableEquality\/hash.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "hash",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnorderedIterableEquality",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/UnorderedIterableEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/UnorderedIterableEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Iterable&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "package-collection_collection\/UnorderedIterableEquality\/isValidKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isValidKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "collection.UnorderedIterableEquality",
                    "params": [
                        {
                            "name": "o",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}