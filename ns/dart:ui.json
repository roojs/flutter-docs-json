{
    "name": "dart:ui",
    "href": "dart-ui\/dart-ui-library.html",
    "cn": [
        {
            "name": "dart:ui.AccessibilityFeatures",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/AccessibilityFeatures\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/AccessibilityFeatures\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final AccessibilityFeatures typedOther = other;\n  return _index == typedOther._index;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/AccessibilityFeatures\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; features = &lt;String&gt;[];\n  if (accessibleNavigation)\n    features.add('accessibleNavigation');\n  if (invertColors)\n    features.add('invertColors');\n  if (disableAnimations)\n    features.add('disableAnimations');\n  if (boldText)\n    features.add('boldText');\n  if (reduceMotion)\n    features.add('reduceMotion');\n  return 'AccessibilityFeatures$features';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "accessibleNavigation",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether there is a running accessibility service which is changing the\ninteraction model of the device.<\/p>\n<p>For example, TalkBack on Android and VoiceOver on iOS enable this flag.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/accessibleNavigation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get accessibleNavigation =&gt; _kAccessibleNavigation &amp; _index != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "boldText",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The platform is requesting that text be rendered at a bold font weight.<\/p>\n<p>Only supported on iOS.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/boldText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get boldText =&gt; _kBoldTextIndex &amp; _index != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "disableAnimations",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The platform is requesting that animations be disabled or simplified.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/disableAnimations.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get disableAnimations =&gt; _kDisableAnimationsIndex &amp; _index != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/AccessibilityFeatures\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/AccessibilityFeatures\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/AccessibilityFeatures\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/AccessibilityFeatures\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/AccessibilityFeatures\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/AccessibilityFeatures\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; _index.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "invertColors",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The platform is inverting the colors of the application.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/invertColors.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get invertColors =&gt; _kInvertColorsIndex &amp; _index != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "reduceMotion",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The platform is requesting that certain animations be simplified and\nparallax effects removed.<\/p>\n<p>Only supported on iOS.<\/p>\n        ",
                    "memberOf": "dart:ui.AccessibilityFeatures",
                    "isConstant": false,
                    "href": "dart-ui\/AccessibilityFeatures\/reduceMotion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get reduceMotion =&gt; _kReduceMotionIndex &amp; _index != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/AccessibilityFeatures-class.html",
            "desc": "<p>Additional accessibility features that may be enabled by the platform.<\/p>\n<p>It is not possible to enable these settings from Flutter, instead they are\nused by the platform to indicate that additional accessibility features are\nenabled.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AccessibilityFeatures"
        },
        {
            "type": "",
            "name": "dart:ui.AppLifecycleState",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.AppLifecycleState",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/AppLifecycleState\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/AppLifecycleState-class.html",
            "desc": "<p>States that an application can be in.<\/p>\n<p>The values below describe notifications from the operating system.\nApplications should not expect to always receive all possible\nnotifications. For example, if the users pulls out the battery from the\ndevice, no notification will be sent before the application is suddenly\nterminated, along with the rest of the operating system.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism to observe the lifecycle state\nfrom the widgets layer.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "AppLifecycleState"
        },
        {
            "type": "",
            "name": "dart:ui.BlendMode",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.BlendMode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/BlendMode\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/BlendMode-class.html",
            "desc": "<p>Algorithms to use when painting on the canvas.<\/p>\n<p>When drawing a shape or image onto a canvas, different algorithms can be\nused to blend the pixels. The different values of <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a> specify\ndifferent such algorithms.<\/p>\n<p>Each algorithm has two inputs, the <em>source<\/em>, which is the image being drawn,\nand the <em>destination<\/em>, which is the image into which the source image is\nbeing composited. The destination is often thought of as the <em>background<\/em>.\nThe source and destination both have four color channels, the red, green,\nblue, and alpha channels. These are typically represented as numbers in the\nrange 0.0 to 1.0. The output of the algorithm also has these same four\nchannels, with values computed from the source and destination.<\/p>\n<p>The documentation of each value below describes how the algorithm works. In\neach case, an image shows the output of blending a source image with a\ndestination image. In the images below, the destination is represented by an\nimage with horizontal lines and an opaque landscape photograph, and the\nsource is represented by an image with vertical lines (the same lines but\nrotated) and a bird clip-art image. The <a href=\"dart-ui\/BlendMode-class.html\">src<\/a> mode shows only the source\nimage, and the <a href=\"dart-ui\/BlendMode-class.html\">dst<\/a> mode shows only the destination image. In the\ndocumentation below, the transparency is illustrated by a checkerboard\npattern. The <a href=\"dart-ui\/BlendMode-class.html\">clear<\/a> mode drops both the source and destination, resulting\nin an output that is entirely transparent (illustrated by a solid\ncheckerboard pattern).<\/p>\n<p>The horizontal and vertical bars in these images show the red, green, and\nblue channels with varying opacity levels, then all three color channels\ntogether with those same varying opacity levels, then all three color\nchannels set to zero with those varying opacity levels, then two bars showing\na red\/green\/blue repeating gradient, the first with full opacity and the\nsecond with partial opacity, and finally a bar with the three color channels\nset to zero but the opacity varying in a repeating gradient.<\/p>\n<h2 id=\"application-to-the-canvas-api\">Application to the <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> API<\/h2>\n<p>When using <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a>, the blend mode of the\n<a href=\"dart-ui\/Paint-class.html\">Paint<\/a> given to the <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> will be applied when\n<a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> is called. Each call to <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> introduces a new\nlayer onto which shapes and images are painted; when <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> is\ncalled, that layer is then composited onto the parent layer, with the source\nbeing the most-recently-drawn shapes and images, and the destination being\nthe parent layer. (For the first <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> call, the parent layer\nis the canvas itself.)<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Paint\/blendMode.html\">Paint.blendMode<\/a>, which uses <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a> to define the compositing\nstrategy.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BlendMode"
        },
        {
            "type": "",
            "name": "dart:ui.BlurStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.BlurStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/BlurStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/BlurStyle-class.html",
            "desc": "<p>Styles to use for blurs in <a href=\"dart-ui\/MaskFilter-class.html\">MaskFilter<\/a> objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BlurStyle"
        },
        {
            "type": "",
            "name": "dart:ui.BoxHeightStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.BoxHeightStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/BoxHeightStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/BoxHeightStyle-class.html",
            "desc": "<p>Defines various ways to vertically bound the boxes returned by\n<a href=\"dart-ui\/Paragraph\/getBoxesForRange.html\">Paragraph.getBoxesForRange<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BoxHeightStyle"
        },
        {
            "type": "",
            "name": "dart:ui.BoxWidthStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.BoxWidthStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/BoxWidthStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/BoxWidthStyle-class.html",
            "desc": "<p>Defines various ways to horizontally bound the boxes returned by\n<a href=\"dart-ui\/Paragraph\/getBoxesForRange.html\">Paragraph.getBoxesForRange<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BoxWidthStyle"
        },
        {
            "type": "",
            "name": "dart:ui.Brightness",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Brightness",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Brightness\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Brightness-class.html",
            "desc": "<p>Describes the contrast of a theme or color palette.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "Brightness"
        },
        {
            "name": "dart:ui.CallbackHandle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/CallbackHandle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.CallbackHandle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/CallbackHandle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final CallbackHandle typedOther = other;\n  return _handle == typedOther._handle;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "CallbackHandle.fromRawHandle",
                    "type": "",
                    "desc": "<p>Create an instance using a raw callback handle.<\/p>\n<p>Only values produced by a call to <a href=\"dart-ui\/CallbackHandle\/toRawHandle.html\">CallbackHandle.toRawHandle<\/a> should be\nused, otherwise this object will be an invalid handle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.CallbackHandle",
                    "sig": "",
                    "params": [
                        {
                            "name": "_handle",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/CallbackHandle\/CallbackHandle.fromRawHandle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CallbackHandle.fromRawHandle(this._handle)\n    : assert(_handle != null, \"'_handle' must not be null.\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toRawHandle",
                    "type": "dart:core.int",
                    "desc": "<p>Get the raw callback handle to pass over a <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> or <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>\n(to pass to another <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.CallbackHandle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/CallbackHandle\/toRawHandle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toRawHandle() =&gt; _handle;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/CallbackHandle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/CallbackHandle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/CallbackHandle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/CallbackHandle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/CallbackHandle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/CallbackHandle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.CallbackHandle",
                    "isConstant": false,
                    "href": "dart-ui\/CallbackHandle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; _handle.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/CallbackHandle-class.html",
            "desc": "<p>A wrapper for a raw callback handle.<\/p>\n<p>This is the return type for <a href=\"dart-ui\/PluginUtilities\/getCallbackHandle.html\">PluginUtilities.getCallbackHandle<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CallbackHandle"
        },
        {
            "name": "dart:ui.Canvas",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Canvas",
                    "type": "",
                    "desc": "<p>Creates a canvas for recording graphical operations into the\ngiven picture recorder.<\/p>\n<p>Graphical operations that affect pixels entirely outside the given\n<code>cullRect<\/code> might be discarded by the implementation. However, the\nimplementation might draw outside these bounds if, for example, a command\ndraws partially inside and outside the <code>cullRect<\/code>. To ensure that pixels\noutside a given region are discarded, consider using a <a href=\"dart-ui\/Canvas\/clipRect.html\">clipRect<\/a>. The\n<code>cullRect<\/code> is optional; by default, all operations are kept.<\/p>\n<p>To end the recording, call <a href=\"dart-ui\/PictureRecorder\/endRecording.html\">PictureRecorder.endRecording<\/a> on the\ngiven recorder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "recorder",
                            "type": "dart:ui.PictureRecorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cullRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Canvas\/Canvas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nCanvas(PictureRecorder recorder, [ Rect cullRect ]) : assert(recorder != null) {\n  if (recorder.isRecording)\n    throw new ArgumentError('\"recorder\" must not already be associated with another Canvas.');\n  cullRect ??= Rect.largest;\n  _constructor(recorder, cullRect.left, cullRect.top, cullRect.right, cullRect.bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clipPath",
                    "type": "",
                    "desc": "<p>Reduces the clip region to the intersection of the current clip and the\ngiven <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/p>\n<p>If <code>doAntiAlias<\/code> is true, then the clip will be anti-aliased.<\/p>\n<p>If multiple draw commands intersect with the clip boundary, this can result\nmultiple draw commands intersect with the clip boundary, this can result\nin incorrect blending at the clip boundary. See <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> for a\ndiscussion of how to address that.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "doAntiAlias",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/clipPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipPath(Path path, {bool doAntiAlias = true}) {\n  assert(path != null); \/\/ path is checked on the engine side\n  assert(doAntiAlias != null);\n  _clipPath(path, doAntiAlias);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clipRRect",
                    "type": "",
                    "desc": "<p>Reduces the clip region to the intersection of the current clip and the\ngiven rounded rectangle.<\/p>\n<p>If <code>doAntiAlias<\/code> is true, then the clip will be anti-aliased.<\/p>\n<p>If multiple draw commands intersect with the clip boundary, this can result\nin incorrect blending at the clip boundary. See <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> for a\ndiscussion of how to address that and some examples of using <a href=\"dart-ui\/Canvas\/clipRRect.html\">clipRRect<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rrect",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "doAntiAlias",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/clipRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipRRect(RRect rrect, {bool doAntiAlias = true}) {\n  assert(_rrectIsValid(rrect));\n  assert(doAntiAlias != null);\n  _clipRRect(rrect._value, doAntiAlias);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clipRect",
                    "type": "",
                    "desc": "<p>Reduces the clip region to the intersection of the current clip and the\ngiven rectangle.<\/p>\n<p>If <code>doAntiAlias<\/code> is true, then the clip will be anti-aliased.<\/p>\n<p>If multiple draw commands intersect with the clip boundary, this can result\nin incorrect blending at the clip boundary. See <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> for a\ndiscussion of how to address that.<\/p>\n<p>Use <a href=\"dart-ui\/ClipOp-class.html\">ClipOp.difference<\/a> to subtract the provided rectangle from the\ncurrent clip.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipOp",
                            "type": "dart:ui.ClipOp",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "doAntiAlias",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/clipRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipRect(Rect rect, { ClipOp clipOp: ClipOp.intersect, bool doAntiAlias = true }) {\n  assert(_rectIsValid(rect));\n  assert(clipOp != null);\n  assert(doAntiAlias != null);\n  _clipRect(rect.left, rect.top, rect.right, rect.bottom, clipOp.index, doAntiAlias);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawArc",
                    "type": "",
                    "desc": "<p>Draw an arc scaled to fit inside the given rectangle. It starts from\nstartAngle radians around the oval up to startAngle + sweepAngle\nradians around the oval, with zero radians being the point on\nthe right hand side of the oval that crosses the horizontal line\nthat intersects the center of the rectangle and with positive\nangles going clockwise around the oval. If useCenter is true, the arc is\nclosed back to the center, forming a circle sector. Otherwise, the arc is\nnot closed, forming a circle segment.<\/p>\n<p>This method is optimized for drawing arcs and should be faster than <a href=\"dart-ui\/Path\/arcTo.html\">Path.arcTo<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sweepAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "useCenter",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawArc.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawArc(Rect rect, double startAngle, double sweepAngle, bool useCenter, Paint paint) {\n  assert(_rectIsValid(rect));\n  assert(paint != null);\n  _drawArc(rect.left, rect.top, rect.right, rect.bottom, startAngle,\n           sweepAngle, useCenter, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawAtlas",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "atlas",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "transforms",
                            "type": "dart:core.List<dart:ui.RSTransform>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.RSTransform"
                            ]
                        },
                        {
                            "name": "rects",
                            "type": "dart:core.List<dart:ui.Rect>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Rect"
                            ]
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cullRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawAtlas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawAtlas(Image atlas,\n               List&lt;RSTransform&gt; transforms,\n               List&lt;Rect&gt; rects,\n               List&lt;Color&gt; colors,\n               BlendMode blendMode,\n               Rect cullRect,\n               Paint paint) {\n  assert(atlas != null); \/\/ atlas is checked on the engine side\n  assert(transforms != null);\n  assert(rects != null);\n  assert(colors != null);\n  assert(blendMode != null);\n  assert(paint != null);\n\n  final int rectCount = rects.length;\n  if (transforms.length != rectCount)\n    throw new ArgumentError('\"transforms\" and \"rects\" lengths must match.');\n  if (colors.isNotEmpty &amp;&amp; colors.length != rectCount)\n    throw new ArgumentError('If non-null, \"colors\" length must match that of \"transforms\" and \"rects\".');\n\n  final Float32List rstTransformBuffer = new Float32List(rectCount * 4);\n  final Float32List rectBuffer = new Float32List(rectCount * 4);\n\n  for (int i = 0; i &lt; rectCount; ++i) {\n    final int index0 = i * 4;\n    final int index1 = index0 + 1;\n    final int index2 = index0 + 2;\n    final int index3 = index0 + 3;\n    final RSTransform rstTransform = transforms[i];\n    final Rect rect = rects[i];\n    assert(_rectIsValid(rect));\n    rstTransformBuffer[index0] = rstTransform.scos;\n    rstTransformBuffer[index1] = rstTransform.ssin;\n    rstTransformBuffer[index2] = rstTransform.tx;\n    rstTransformBuffer[index3] = rstTransform.ty;\n    rectBuffer[index0] = rect.left;\n    rectBuffer[index1] = rect.top;\n    rectBuffer[index2] = rect.right;\n    rectBuffer[index3] = rect.bottom;\n  }\n\n  final Int32List colorBuffer = colors.isEmpty ? null : _encodeColorList(colors);\n  final Float32List cullRectBuffer = cullRect?._value;\n\n  _drawAtlas(\n    paint._objects, paint._data, atlas, rstTransformBuffer, rectBuffer,\n    colorBuffer, blendMode.index, cullRectBuffer\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawCircle",
                    "type": "",
                    "desc": "<p>Draws a circle centered at the point given by the first argument and\nthat has the radius given by the second argument, with the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> given in\nthe third argument. Whether the circle is filled or stroked (or both) is\ncontrolled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "c",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawCircle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawCircle(Offset c, double radius, Paint paint) {\n  assert(_offsetIsValid(c));\n  assert(paint != null);\n  _drawCircle(c.dx, c.dy, radius, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawColor",
                    "type": "",
                    "desc": "<p>Paints the given <a href=\"dart-ui\/Color-class.html\">Color<\/a> onto the canvas, applying the given\n<a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>, with the given color being the source and the background\nbeing the destination.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawColor(Color color, BlendMode blendMode) {\n  assert(color != null);\n  assert(blendMode != null);\n  _drawColor(color.value, blendMode.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawDRRect",
                    "type": "",
                    "desc": "<p>Draws a shape consisting of the difference between two rounded rectangles\nwith the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. Whether this shape is filled or stroked (or both)\nis controlled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n<p>This shape is almost but not quite entirely unlike an annulus.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "outer",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "inner",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawDRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawDRRect(RRect outer, RRect inner, Paint paint) {\n  assert(_rrectIsValid(outer));\n  assert(_rrectIsValid(inner));\n  assert(paint != null);\n  _drawDRRect(outer._value, inner._value, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawImage",
                    "type": "",
                    "desc": "<p>Draws the given <a href=\"dart-ui\/Image-class.html\">Image<\/a> into the canvas with its top-left corner at the\ngiven <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>. The image is composited into the canvas using the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "p",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawImage(Image image, Offset p, Paint paint) {\n  assert(image != null); \/\/ image is checked on the engine side\n  assert(_offsetIsValid(p));\n  assert(paint != null);\n  _drawImage(image, p.dx, p.dy, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawImageNine",
                    "type": "",
                    "desc": "<p>Draws the given <a href=\"dart-ui\/Image-class.html\">Image<\/a> into the canvas using the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n<p>The image is drawn in nine portions described by splitting the image by\ndrawing two horizontal lines and two vertical lines, where the <code>center<\/code>\nargument describes the rectangle formed by the four points where these\nfour lines intersect each other. (This forms a 3-by-3 grid of regions,\nthe center region being described by the <code>center<\/code> argument.)<\/p>\n<p>The four regions in the corners are drawn, without scaling, in the four\ncorners of the destination rectangle described by <code>dst<\/code>. The remaining\nfive regions are drawn by stretching them to fit such that they exactly\ncover the destination rectangle while maintaining their relative\npositions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "center",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dst",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawImageNine.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawImageNine(Image image, Rect center, Rect dst, Paint paint) {\n  assert(image != null); \/\/ image is checked on the engine side\n  assert(_rectIsValid(center));\n  assert(_rectIsValid(dst));\n  assert(paint != null);\n  _drawImageNine(image,\n                 center.left,\n                 center.top,\n                 center.right,\n                 center.bottom,\n                 dst.left,\n                 dst.top,\n                 dst.right,\n                 dst.bottom,\n                 paint._objects,\n                 paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawImageRect",
                    "type": "",
                    "desc": "<p>Draws the subset of the given image described by the <code>src<\/code> argument into\nthe canvas in the axis-aligned rectangle given by the <code>dst<\/code> argument.<\/p>\n<p>This might sample from outside the <code>src<\/code> rect by up to half the width of\nan applied filter.<\/p>\n<p>Multiple calls to this method with different arguments (from the same\nimage) can be batched into a single call to <a href=\"dart-ui\/Canvas\/drawAtlas.html\">drawAtlas<\/a> to improve\nperformance.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "src",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dst",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawImageRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawImageRect(Image image, Rect src, Rect dst, Paint paint) {\n  assert(image != null); \/\/ image is checked on the engine side\n  assert(_rectIsValid(src));\n  assert(_rectIsValid(dst));\n  assert(paint != null);\n  _drawImageRect(image,\n                 src.left,\n                 src.top,\n                 src.right,\n                 src.bottom,\n                 dst.left,\n                 dst.top,\n                 dst.right,\n                 dst.bottom,\n                 paint._objects,\n                 paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawLine",
                    "type": "",
                    "desc": "<p>Draws a line between the given points using the given paint. The line is\nstroked, the value of the <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a> is ignored for this call.<\/p>\n<p>The <code>p1<\/code> and <code>p2<\/code> arguments are interpreted as offsets from the origin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "p1",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "p2",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawLine.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawLine(Offset p1, Offset p2, Paint paint) {\n  assert(_offsetIsValid(p1));\n  assert(_offsetIsValid(p2));\n  assert(paint != null);\n  _drawLine(p1.dx, p1.dy, p2.dx, p2.dy, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawOval",
                    "type": "",
                    "desc": "<p>Draws an axis-aligned oval that fills the given axis-aligned rectangle\nwith the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. Whether the oval is filled or stroked (or both) is\ncontrolled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawOval.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawOval(Rect rect, Paint paint) {\n  assert(_rectIsValid(rect));\n  assert(paint != null);\n  _drawOval(rect.left, rect.top, rect.right, rect.bottom,\n            paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawPaint",
                    "type": "",
                    "desc": "<p>Fills the canvas with the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n<p>To fill the canvas with a solid color and blend mode, consider\n<a href=\"dart-ui\/Canvas\/drawColor.html\">drawColor<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawPaint(Paint paint) {\n  assert(paint != null);\n  _drawPaint(paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawParagraph",
                    "type": "",
                    "desc": "<p>Draws the text in the given <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> into this canvas at the given\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a>.<\/p>\n<p>The <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> object must have had <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> called on it\nfirst.<\/p>\n<p>To align the text, set the <code>textAlign<\/code> on the <a href=\"dart-ui\/ParagraphStyle-class.html\">ParagraphStyle<\/a> object\npassed to the <a href=\"dart-ui\/ParagraphBuilder\/ParagraphBuilder.html\">new ParagraphBuilder<\/a> constructor. For more details see\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign<\/a> and the discussion at <a href=\"dart-ui\/ParagraphStyle\/ParagraphStyle.html\">new ParagraphStyle<\/a>.<\/p>\n<p>If the text is left aligned or justified, the left margin will be at the\nposition specified by the <code>offset<\/code> argument's <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> coordinate.<\/p>\n<p>If the text is right aligned or justified, the right margin will be at the\nposition described by adding the <a href=\"dart-ui\/ParagraphConstraints\/width.html\">ParagraphConstraints.width<\/a> given to\n<a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a>, to the <code>offset<\/code> argument's <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> coordinate.<\/p>\n<p>If the text is centered, the centering axis will be at the position\ndescribed by adding half of the <a href=\"dart-ui\/ParagraphConstraints\/width.html\">ParagraphConstraints.width<\/a> given to\n<a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a>, to the <code>offset<\/code> argument's <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> coordinate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "paragraph",
                            "type": "dart:ui.Paragraph",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawParagraph.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawParagraph(Paragraph paragraph, Offset offset) {\n  assert(paragraph != null);\n  assert(_offsetIsValid(offset));\n  paragraph._paint(this, offset.dx, offset.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawPath",
                    "type": "",
                    "desc": "<p>Draws the given <a href=\"dart-ui\/Path-class.html\">Path<\/a> with the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. Whether this shape is\nfilled or stroked (or both) is controlled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>. If the path is\nfilled, then sub-paths within it are implicitly closed (see <a href=\"dart-ui\/Path\/close.html\">Path.close<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawPath(Path path, Paint paint) {\n  assert(path != null); \/\/ path is checked on the engine side\n  assert(paint != null);\n  _drawPath(path, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawPicture",
                    "type": "",
                    "desc": "<p>Draw the given picture onto the canvas. To create a picture, see\n<a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "picture",
                            "type": "dart:ui.Picture",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawPicture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawPicture(Picture picture) {\n  assert(picture != null); \/\/ picture is checked on the engine side\n  _drawPicture(picture);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawPoints",
                    "type": "",
                    "desc": "<p>Draws a sequence of points according to the given <a href=\"dart-ui\/PointMode-class.html\">PointMode<\/a>.<\/p>\n<p>The <code>points<\/code> argument is interpreted as offsets from the origin.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Canvas\/drawRawPoints.html\">drawRawPoints<\/a>, which takes <code>points<\/code> as a <a href=\"dart-typed_data\/Float32List-class.html\">Float32List<\/a> rather than a\n<a href=\"dart-core\/List-class.html\">List&lt;Offset&gt;<\/a>.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "pointMode",
                            "type": "dart:ui.PointMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "points",
                            "type": "dart:core.List<dart:ui.Offset>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Offset"
                            ]
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawPoints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawPoints(PointMode pointMode, List&lt;Offset&gt; points, Paint paint) {\n  assert(pointMode != null);\n  assert(points != null);\n  assert(paint != null);\n  _drawPoints(paint._objects, paint._data, pointMode.index, _encodePointList(points));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawRRect",
                    "type": "",
                    "desc": "<p>Draws a rounded rectangle with the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. Whether the rectangle is\nfilled or stroked (or both) is controlled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rrect",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawRRect(RRect rrect, Paint paint) {\n  assert(_rrectIsValid(rrect));\n  assert(paint != null);\n  _drawRRect(rrect._value, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawRawAtlas",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "atlas",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rstTransforms",
                            "type": "dart:typed_data.Float32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rects",
                            "type": "dart:typed_data.Float32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cullRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawRawAtlas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawRawAtlas(Image atlas,\n                  Float32List rstTransforms,\n                  Float32List rects,\n                  Int32List colors,\n                  BlendMode blendMode,\n                  Rect cullRect,\n                  Paint paint) {\n  assert(atlas != null); \/\/ atlas is checked on the engine side\n  assert(rstTransforms != null);\n  assert(rects != null);\n  assert(colors != null);\n  assert(blendMode != null);\n  assert(paint != null);\n\n  final int rectCount = rects.length;\n  if (rstTransforms.length != rectCount)\n    throw new ArgumentError('\"rstTransforms\" and \"rects\" lengths must match.');\n  if (rectCount % 4 != 0)\n    throw new ArgumentError('\"rstTransforms\" and \"rects\" lengths must be a multiple of four.');\n  if (colors != null &amp;&amp; colors.length * 4 != rectCount)\n    throw new ArgumentError('If non-null, \"colors\" length must be one fourth the length of \"rstTransforms\" and \"rects\".');\n\n  _drawAtlas(\n    paint._objects, paint._data, atlas, rstTransforms, rects,\n    colors, blendMode.index, cullRect?._value\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawRawPoints",
                    "type": "",
                    "desc": "<p>Draws a sequence of points according to the given <a href=\"dart-ui\/PointMode-class.html\">PointMode<\/a>.<\/p>\n<p>The <code>points<\/code> argument is interpreted as a list of pairs of floating point\nnumbers, where each pair represents an x and y offset from the origin.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Canvas\/drawPoints.html\">drawPoints<\/a>, which takes <code>points<\/code> as a <a href=\"dart-core\/List-class.html\">List&lt;Offset&gt;<\/a> rather than a\n<a href=\"dart-core\/List-class.html\">List&lt;Float32List&gt;<\/a>.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "pointMode",
                            "type": "dart:ui.PointMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "points",
                            "type": "dart:typed_data.Float32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawRawPoints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawRawPoints(PointMode pointMode, Float32List points, Paint paint) {\n  assert(pointMode != null);\n  assert(points != null);\n  assert(paint != null);\n  if (points.length % 2 != 0)\n    throw new ArgumentError('\"points\" must have an even number of values.');\n  _drawPoints(paint._objects, paint._data, pointMode.index, points);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawRect",
                    "type": "",
                    "desc": "<p>Draws a rectangle with the given <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. Whether the rectangle is filled\nor stroked (or both) is controlled by <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawRect(Rect rect, Paint paint) {\n  assert(_rectIsValid(rect));\n  assert(paint != null);\n  _drawRect(rect.left, rect.top, rect.right, rect.bottom,\n            paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawShadow",
                    "type": "",
                    "desc": "<p>Draws a shadow for a <a href=\"dart-ui\/Path-class.html\">Path<\/a> representing the given material elevation.<\/p>\n<p>The <code>transparentOccluder<\/code> argument should be true if the occluding object\nis not opaque.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "elevation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "transparentOccluder",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawShadow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawShadow(Path path, Color color, double elevation, bool transparentOccluder) {\n  assert(path != null); \/\/ path is checked on the engine side\n  assert(color != null);\n  assert(transparentOccluder != null);\n  _drawShadow(path, color.value, elevation, transparentOccluder);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawVertices",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "vertices",
                            "type": "dart:ui.Vertices",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/drawVertices.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void drawVertices(Vertices vertices, BlendMode blendMode, Paint paint) {\n  assert(vertices != null); \/\/ vertices is checked on the engine side\n  assert(paint != null);\n  assert(blendMode != null);\n  _drawVertices(vertices, blendMode.index, paint._objects, paint._data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getSaveCount",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the number of items on the save stack, including the\ninitial state. This means it returns 1 for a clean canvas, and\nthat each call to <a href=\"dart-ui\/Canvas\/save.html\">save<\/a> and <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> increments it, and that\neach matching call to <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a> decrements it.<\/p>\n<p>This number cannot go below 1.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/getSaveCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getSaveCount() native 'Canvas_getSaveCount';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "restore",
                    "type": "",
                    "desc": "<p>Pops the current save stack, if there is anything to pop.\nOtherwise, does nothing.<\/p>\n<p>Use <a href=\"dart-ui\/Canvas\/save.html\">save<\/a> and <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> to push state onto the stack.<\/p>\n<p>If the state was pushed with with <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>, then this call will also\ncause the new layer to be composited into the previous layer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/restore.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void restore() native 'Canvas_restore';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "rotate",
                    "type": "",
                    "desc": "<p>Add a rotation to the current transform. The argument is in radians clockwise.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "radians",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/rotate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void rotate(double radians) native 'Canvas_rotate';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "save",
                    "type": "",
                    "desc": "<p>Saves a copy of the current transform and clip on the save stack.<\/p>\n<p>Call <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a> to pop the save stack.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>, which does the same thing but additionally also groups the\ncommands done until the matching <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a>.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/save.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void save() native 'Canvas_save';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "saveLayer",
                    "type": "",
                    "desc": "<p>Saves a copy of the current transform and clip on the save stack, and then\ncreates a new group which subsequent calls will become a part of. When the\nsave stack is later popped, the group will be flattened into a layer and\nhave the given <code>paint<\/code>'s <a href=\"dart-ui\/Paint\/colorFilter.html\">Paint.colorFilter<\/a> and <a href=\"dart-ui\/Paint\/blendMode.html\">Paint.blendMode<\/a>\napplied.<\/p>\n<p>This lets you create composite effects, for example making a group of\ndrawing commands semi-transparent. Without using <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>, each part of\nthe group would be painted individually, so where they overlap would be\ndarker than where they do not. By using <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> to group them\ntogether, they can be drawn with an opaque color at first, and then the\nentire group can be made transparent using the <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>'s paint.<\/p>\n<p>Call <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a> to pop the save stack and apply the paint to the group.<\/p>\n<h2 id=\"using-savelayer-with-clips\">Using saveLayer with clips<\/h2>\n<p>When a rectangular clip operation (from <a href=\"dart-ui\/Canvas\/clipRect.html\">clipRect<\/a>) is not axis-aligned\nwith the raster buffer, or when the clip operation is not rectilinear\n(e.g. because it is a rounded rectangle clip created by <a href=\"dart-ui\/Canvas\/clipRRect.html\">clipRRect<\/a> or an\narbitrarily complicated path clip created by <a href=\"dart-ui\/Canvas\/clipPath.html\">clipPath<\/a>), the edge of the\nclip needs to be anti-aliased.<\/p>\n<p>If two draw calls overlap at the edge of such a clipped region, without\nusing <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>, the first drawing will be anti-aliased with the\nbackground first, and then the second will be anti-aliased with the result\nof blending the first drawing and the background. On the other hand, if\n<a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> is used immediately after establishing the clip, the second\ndrawing will cover the first in the layer, and thus the second alone will\nbe anti-aliased with the background when the layer is clipped and\ncomposited (when <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a> is called).<\/p>\n<p>For example, this <a href=\"rendering\/CustomPainter\/paint.html\">CustomPainter.paint<\/a> method paints a clean white\nrounded rectangle:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Size size) {\n  Rect rect = Offset.zero &amp; size;\n  canvas.save();\n  canvas.clipRRect(new RRect.fromRectXY(rect, 100.0, 100.0));\n  canvas.saveLayer(rect, new Paint());\n  canvas.drawPaint(new Paint()..color = Colors.red);\n  canvas.drawPaint(new Paint()..color = Colors.white);\n  canvas.restore();\n  canvas.restore();\n}\n<\/code><\/pre>\n<p>On the other hand, this one renders a red outline, the result of the red\npaint being anti-aliased with the background at the clip edge, then the\nwhite paint being similarly anti-aliased with the background <em>including\nthe clipped red paint<\/em>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Size size) {\n  \/\/ (this example renders poorly, prefer the example above)\n  Rect rect = Offset.zero &amp; size;\n  canvas.save();\n  canvas.clipRRect(new RRect.fromRectXY(rect, 100.0, 100.0));\n  canvas.drawPaint(new Paint()..color = Colors.red);\n  canvas.drawPaint(new Paint()..color = Colors.white);\n  canvas.restore();\n}\n<\/code><\/pre>\n<p>This point is moot if the clip only clips one draw operation. For example,\nthe following paint method paints a pair of clean white rounded\nrectangles, even though the clips are not done on a separate layer:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Size size) {\n  canvas.save();\n  canvas.clipRRect(new RRect.fromRectXY(Offset.zero &amp; (size \/ 2.0), 50.0, 50.0));\n  canvas.drawPaint(new Paint()..color = Colors.white);\n  canvas.restore();\n  canvas.save();\n  canvas.clipRRect(new RRect.fromRectXY(size.center(Offset.zero) &amp; (size \/ 2.0), 50.0, 50.0));\n  canvas.drawPaint(new Paint()..color = Colors.white);\n  canvas.restore();\n}\n<\/code><\/pre>\n<p>(Incidentally, rather than using <a href=\"dart-ui\/Canvas\/clipRRect.html\">clipRRect<\/a> and <a href=\"dart-ui\/Canvas\/drawPaint.html\">drawPaint<\/a> to draw\nrounded rectangles like this, prefer the <a href=\"dart-ui\/Canvas\/drawRRect.html\">drawRRect<\/a> method. These\nexamples are using <a href=\"dart-ui\/Canvas\/drawPaint.html\">drawPaint<\/a> as a proxy for \"complicated draw operations\nthat will get clipped\", to illustrate the point.)<\/p>\n<h2 id=\"performance-considerations\">Performance considerations<\/h2>\n<p>Generally speaking, <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a> is relatively expensive.<\/p>\n<p>There are a several different hardware architectures for GPUs (graphics\nprocessing units, the hardware that handles graphics), but most of them\ninvolve batching commands and reordering them for performance. When layers\nare used, they cause the rendering pipeline to have to switch render\ntarget (from one layer to another). Render target switches can flush the\nGPU's command buffer, which typically means that optimizations that one\ncould get with larger batching are lost. Render target switches also\ngenerate a lot of memory churn because the GPU needs to copy out the\ncurrent frame buffer contents from the part of memory that's optimized for\nwriting, and then needs to copy it back in once the previous render target\n(layer) is restored.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas\/save.html\">save<\/a>, which saves the current state, but does not create a new layer\nfor subsequent commands.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>, which discusses the use of <a href=\"dart-ui\/Paint\/blendMode.html\">Paint.blendMode<\/a> with\n<a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "bounds",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "paint",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/saveLayer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void saveLayer(Rect bounds, Paint paint) {\n  assert(paint != null);\n  if (bounds == null) {\n    _saveLayerWithoutBounds(paint._objects, paint._data);\n  } else {\n    assert(_rectIsValid(bounds));\n    _saveLayer(bounds.left, bounds.top, bounds.right, bounds.bottom,\n               paint._objects, paint._data);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "",
                    "desc": "<p>Add an axis-aligned scale to the current transform, scaling by the first\nargument in the horizontal direction and the second in the vertical\ndirection.<\/p>\n<p>If <code>sy<\/code> is unspecified, <code>sx<\/code> will be used for the scale in both\ndirections.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "sx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void scale(double sx, [double sy]) =&gt; _scale(sx, sy ?? sx);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "skew",
                    "type": "",
                    "desc": "<p>Add an axis-aligned skew to the current transform, with the first argument\nbeing the horizontal skew in radians clockwise around the origin, and the\nsecond argument being the vertical skew in radians clockwise around the\norigin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "sx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/skew.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void skew(double sx, double sy) native 'Canvas_skew';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "transform",
                    "type": "",
                    "desc": "<p>Multiply the current transform by the specified 4\u2a094 transformation matrix\nspecified as a list of values in column-major order.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/transform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void transform(Float64List matrix4) {\n  assert(matrix4 != null);\n  if (matrix4.length != 16)\n    throw new ArgumentError('\"matrix4\" must have 16 entries.');\n  _transform(matrix4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "translate",
                    "type": "",
                    "desc": "<p>Add a translation to the current transform, shifting the coordinate space\nhorizontally by the first argument and vertically by the second argument.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Canvas",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Canvas\/translate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void translate(double dx, double dy) native 'Canvas_translate';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Canvas-class.html",
            "desc": "<p>An interface for recording graphical operations.<\/p>\n<p><a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> objects are used in creating <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> objects, which can\nthemselves be used with a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> to build a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a>. In\nnormal usage, however, this is all handled by the framework.<\/p>\n<p>A canvas has a current transformation matrix which is applied to all\noperations. Initially, the transformation matrix is the identity transform.\nIt can be modified using the <a href=\"dart-ui\/Canvas\/translate.html\">translate<\/a>, <a href=\"dart-ui\/Canvas\/scale.html\">scale<\/a>, <a href=\"dart-ui\/Canvas\/rotate.html\">rotate<\/a>, <a href=\"dart-ui\/Canvas\/skew.html\">skew<\/a>,\nand <a href=\"dart-ui\/Canvas\/transform.html\">transform<\/a> methods.<\/p>\n<p>A canvas also has a current clip region which is applied to all operations.\nInitially, the clip region is infinite. It can be modified using the\n<a href=\"dart-ui\/Canvas\/clipRect.html\">clipRect<\/a>, <a href=\"dart-ui\/Canvas\/clipRRect.html\">clipRRect<\/a>, and <a href=\"dart-ui\/Canvas\/clipPath.html\">clipPath<\/a> methods.<\/p>\n<p>The current transform and clip can be saved and restored using the stack\nmanaged by the <a href=\"dart-ui\/Canvas\/save.html\">save<\/a>, <a href=\"dart-ui\/Canvas\/saveLayer.html\">saveLayer<\/a>, and <a href=\"dart-ui\/Canvas\/restore.html\">restore<\/a> methods.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Canvas"
        },
        {
            "type": "",
            "name": "dart:ui.Clip",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Clip",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Clip\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Clip-class.html",
            "desc": "<p>Different ways to clip a widget's content.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "Clip"
        },
        {
            "type": "",
            "name": "dart:ui.ClipOp",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ClipOp",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ClipOp\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ClipOp-class.html",
            "desc": "<p>Defines how a new clip region should be merged with the existing clip\nregion.<\/p>\n<p>Used by <a href=\"dart-ui\/Canvas\/clipRect.html\">Canvas.clipRect<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "ClipOp"
        },
        {
            "name": "dart:ui.Codec",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Release the resources used by this object. The object is no longer usable\nafter this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Codec",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Codec\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'Codec_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getNextFrame",
                    "type": "dart:async.Future<dart:ui.FrameInfo>",
                    "desc": "<p>Fetches the next animation frame.<\/p>\n<p>Wraps back to the first frame after returning the last frame.<\/p>\n<p>The returned future can complete with an error if the decoding has failed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Codec",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Codec\/getNextFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FrameInfo&gt; getNextFrame() {\n  return _futurize(_getNextFrame);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:ui.FrameInfo"
                    ]
                }
            ],
            "props": [
                {
                    "name": "frameCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Number of frames in this image.<\/p>\n        ",
                    "memberOf": "dart:ui.Codec",
                    "isConstant": false,
                    "href": "dart-ui\/Codec\/frameCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get frameCount native 'Codec_frameCount';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "repetitionCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Number of times to repeat the animation.<\/p>\n<ul>\n<li>0 when the animation should be played once.<\/li>\n<li>-1 for infinity repetitions.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Codec",
                    "isConstant": false,
                    "href": "dart-ui\/Codec\/repetitionCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get repetitionCount native 'Codec_repetitionCount';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Codec-class.html",
            "desc": "<p>A handle to an image codec.<\/p>\n<p>This class is created by the engine, and should not be instantiated\nor extended directly.<\/p>\n<p>To obtain an instance of the <a href=\"dart-ui\/Codec-class.html\">Codec<\/a> interface, see\n<a href=\"dart-ui\/instantiateImageCodec.html\">instantiateImageCodec<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Codec"
        },
        {
            "name": "dart:ui.Color",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Color\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final Color typedOther = other;\n  return value == typedOther.value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Color",
                    "type": "",
                    "desc": "<p>Construct a color from the lower 32 bits of an <a href=\"dart-core\/int-class.html\">int<\/a>.<\/p>\n<p>The bits are interpreted as follows:<\/p>\n<ul>\n<li>Bits 24-31 are the alpha value.<\/li>\n<li>Bits 16-23 are the red value.<\/li>\n<li>Bits 8-15 are the green value.<\/li>\n<li>Bits 0-7 are the blue value.<\/li>\n<\/ul>\n<p>In other words, if AA is the alpha value in hex, RR the red value in hex,\nGG the green value in hex, and BB the blue value in hex, a color can be\nexpressed as <code>const Color(0xAARRGGBB)<\/code>.<\/p>\n<p>For example, to get a fully opaque orange, you would use <code>const\nColor(0xFFFF9000)<\/code> (<code>FF<\/code> for the alpha, <code>FF<\/code> for the red, <code>90<\/code> for the\ngreen, and <code>00<\/code> for the blue).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Color\/Color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nconst Color(int value) : value = value &amp; 0xFFFFFFFF;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "alphaBlend",
                    "type": "dart:ui.Color",
                    "desc": "<p>Combine the foreground color as a transparent color over top\nof a background color, and return the resulting combined color.<\/p>\n<p>This uses standard alpha blending (\"SRC over DST\") rules to produce a\nblended color from two colors. This can be used as a performance\nenhancement when trying to avoid needless alpha blending compositing\noperations for two things that are solid colors with the same shape, but\noverlay each other: instead, just paint one with the combined color.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "foreground",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "background",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/alphaBlend.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Color alphaBlend(Color foreground, Color background) {\n  final int alpha = foreground.alpha;\n  if (alpha == 0x00) { \/\/ Foreground completely transparent.\n    return background;\n  }\n  final int invAlpha = 0xff - alpha;\n  int backAlpha = background.alpha;\n  if (backAlpha == 0xff) { \/\/ Opaque background case\n    return new Color.fromARGB(\n      0xff,\n      (alpha * foreground.red + invAlpha * background.red) ~\/ 0xff,\n      (alpha * foreground.green + invAlpha * background.green) ~\/ 0xff,\n      (alpha * foreground.blue + invAlpha * background.blue) ~\/ 0xff,\n    );\n  } else { \/\/ General case\n    backAlpha = (backAlpha * invAlpha) ~\/ 0xff;\n    final int outAlpha = alpha + backAlpha;\n    assert(outAlpha != 0x00);\n    return new Color.fromARGB(\n      outAlpha,\n      (foreground.red * alpha + background.red * backAlpha) ~\/ outAlpha,\n      (foreground.green * alpha + background.green * backAlpha) ~\/ outAlpha,\n      (foreground.blue * alpha + background.blue * backAlpha) ~\/ outAlpha,\n    );\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "computeLuminance",
                    "type": "dart:core.double",
                    "desc": "<p>Returns a brightness value between 0 for darkest and 1 for lightest.<\/p>\n<p>Represents the relative luminance of the color. This value is computationally\nexpensive to calculate.<\/p>\n<p>See <a href=\"https:\/\/en.wikipedia.org\/wiki\/Relative_luminance\">en.wikipedia.org\/wiki\/Relative_luminance<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/computeLuminance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double computeLuminance() {\n  \/\/ See &lt;https:\/\/www.w3.org\/TR\/WCAG20\/#relativeluminancedef&gt;\n  final double R = _linearizeColorComponent(red \/ 0xFF);\n  final double G = _linearizeColorComponent(green \/ 0xFF);\n  final double B = _linearizeColorComponent(blue \/ 0xFF);\n  return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Color.fromARGB",
                    "type": "",
                    "desc": "<p>Construct a color from the lower 8 bits of four integers.<\/p>\n<ul>\n<li>\n<code>a<\/code> is the alpha value, with 0 being transparent and 255 being fully\nopaque.<\/li>\n<li>\n<code>r<\/code> is <a href=\"dart-ui\/Color\/red.html\">red<\/a>, from 0 to 255.<\/li>\n<li>\n<code>g<\/code> is <a href=\"dart-ui\/Color\/green.html\">green<\/a>, from 0 to 255.<\/li>\n<li>\n<code>b<\/code> is <a href=\"dart-ui\/Color\/blue.html\">blue<\/a>, from 0 to 255.<\/li>\n<\/ul>\n<p>Out of range values are brought into range using modulo 255.<\/p>\n<p>See also <a href=\"dart-ui\/Color\/Color.fromRGBO.html\">fromRGBO<\/a>, which takes the alpha value as a floating point\nvalue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "r",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "g",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Color\/Color.fromARGB.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Color.fromARGB(int a, int r, int g, int b) :\n  value = (((a &amp; 0xff) &lt;&lt; 24) |\n           ((r &amp; 0xff) &lt;&lt; 16) |\n           ((g &amp; 0xff) &lt;&lt; 8)  |\n           ((b &amp; 0xff) &lt;&lt; 0)) &amp; 0xFFFFFFFF;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Color.fromRGBO",
                    "type": "",
                    "desc": "<p>Create a color from red, green, blue, and opacity, similar to <code>rgba()<\/code> in CSS.<\/p>\n<ul>\n<li>\n<code>r<\/code> is <a href=\"dart-ui\/Color\/red.html\">red<\/a>, from 0 to 255.<\/li>\n<li>\n<code>g<\/code> is <a href=\"dart-ui\/Color\/green.html\">green<\/a>, from 0 to 255.<\/li>\n<li>\n<code>b<\/code> is <a href=\"dart-ui\/Color\/blue.html\">blue<\/a>, from 0 to 255.<\/li>\n<li>\n<code>opacity<\/code> is alpha channel of this color as a double, with 0.0 being\ntransparent and 1.0 being fully opaque.<\/li>\n<\/ul>\n<p>Out of range values are brought into range using modulo 255.<\/p>\n<p>See also <a href=\"dart-ui\/Color\/Color.fromARGB.html\">fromARGB<\/a>, which takes the opacity as an integer value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "r",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "g",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "opacity",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Color\/Color.fromRGBO.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Color.fromRGBO(int r, int g, int b, double opacity) :\n  value = ((((opacity * 0xff ~\/ 1) &amp; 0xff) &lt;&lt; 24) |\n            ((r                    &amp; 0xff) &lt;&lt; 16) |\n            ((g                    &amp; 0xff) &lt;&lt; 8)  |\n            ((b                    &amp; 0xff) &lt;&lt; 0)) &amp; 0xFFFFFFFF;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Color",
                    "desc": "<p>Linearly interpolate between two colors.<\/p>\n<p>This is intended to be fast but as a result may be ugly. Consider\n<a href=\"painting\/HSVColor-class.html\">HSVColor<\/a> or writing custom logic for interpolating colors.<\/p>\n<p>If either color is null, this function linearly interpolates from a\ntransparent instance of the other color. This is usually preferable to\ninterpolating from <a href=\"material\/Colors\/transparent-constant.html\">material.Colors.transparent<\/a> (<code>const\nColor(0x00000000)<\/code>), which is specifically transparent <em>black<\/em>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>). Each channel\nwill be clamped to the range 0 to 255.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Color lerp(Color a, Color b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return _scaleAlpha(b, t);\n  if (b == null)\n    return _scaleAlpha(a, 1.0 - t);\n  return new Color.fromARGB(\n    lerpDouble(a.alpha, b.alpha, t).toInt().clamp(0, 255),\n    lerpDouble(a.red, b.red, t).toInt().clamp(0, 255),\n    lerpDouble(a.green, b.green, t).toInt().clamp(0, 255),\n    lerpDouble(a.blue, b.blue, t).toInt().clamp(0, 255),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Color(0x${value.toRadixString(16).padLeft(8, '0')})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withAlpha",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns a new color that matches this color with the alpha channel\nreplaced with <code>a<\/code> (which ranges from 0 to 255).<\/p>\n<p>Out of range values will have unexpected effects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/withAlpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color withAlpha(int a) {\n  return new Color.fromARGB(a, red, green, blue);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withBlue",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns a new color that matches this color with the blue channel replaced\nwith <code>b<\/code> (which ranges from 0 to 255).<\/p>\n<p>Out of range values will have unexpected effects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/withBlue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color withBlue(int b) {\n  return new Color.fromARGB(alpha, red, green, b);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withGreen",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns a new color that matches this color with the green channel\nreplaced with <code>g<\/code> (which ranges from 0 to 255).<\/p>\n<p>Out of range values will have unexpected effects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "g",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/withGreen.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color withGreen(int g) {\n  return new Color.fromARGB(alpha, red, g, blue);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withOpacity",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns a new color that matches this color with the alpha channel\nreplaced with the given <code>opacity<\/code> (which ranges from 0.0 to 1.0).<\/p>\n<p>Out of range values will have unexpected effects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "opacity",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/withOpacity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color withOpacity(double opacity) {\n  assert(opacity &gt;= 0.0 &amp;&amp; opacity &lt;= 1.0);\n  return withAlpha((255.0 * opacity).round());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withRed",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns a new color that matches this color with the red channel replaced\nwith <code>r<\/code> (which ranges from 0 to 255).<\/p>\n<p>Out of range values will have unexpected effects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Color",
                    "sig": "",
                    "params": [
                        {
                            "name": "r",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Color\/withRed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color withRed(int r) {\n  return new Color.fromARGB(alpha, r, green, blue);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "alpha",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The alpha channel of this color in an 8 bit value.<\/p>\n<p>A value of 0 means this color is fully transparent. A value of 255 means\nthis color is fully opaque.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/alpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get alpha =&gt; (0xff000000 &amp; value) &gt;&gt; 24;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "blue",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The blue channel of this color in an 8 bit value.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/blue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get blue =&gt; (0x000000ff &amp; value) &gt;&gt; 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "green",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The green channel of this color in an 8 bit value.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/green.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get green =&gt; (0x0000ff00 &amp; value) &gt;&gt; 8;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Color\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Color\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Color\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Color\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Color\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Color\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; value.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "opacity",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The alpha channel of this color as a double.<\/p>\n<p>A value of 0.0 means this color is fully transparent. A value of 1.0 means\nthis color is fully opaque.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/opacity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get opacity =&gt; alpha \/ 0xFF;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "red",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The red channel of this color in an 8 bit value.<\/p>\n        ",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/red.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get red =&gt; (0x00ff0000 &amp; value) &gt;&gt; 16;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>A 32 bit value representing this color.<\/p>\n<p>The bits are assigned as follows:<\/p>\n<ul>\n<li>Bits 24-31 are the alpha value.<\/li>\n<li>Bits 16-23 are the red value.<\/li>\n<li>Bits 8-15 are the green value.<\/li>\n<li>Bits 0-7 are the blue value.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Color",
                    "isConstant": false,
                    "href": "dart-ui\/Color\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "animation.ColorTween",
                "material.MaterialAccentColor",
                "material.MaterialColor",
                "painting.ColorSwatch"
            ],
            "realImplementors": [
                "animation.ColorTween",
                "material.MaterialAccentColor",
                "material.MaterialColor",
                "painting.ColorSwatch"
            ],
            "cn": [],
            "href": "dart-ui\/Color-class.html",
            "desc": "<p>An immutable 32 bit color value in ARGB format.<\/p>\n<p>Consider the light teal of the Flutter logo. It is fully opaque, with a red\nchannel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue\nchannel value of 0xF5 (245). In the common \"hash syntax\" for color values,\nit would be described as <code>#42A5F5<\/code>.<\/p>\n<p>Here are some ways it could be constructed:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Color c = const Color(0xFF42A5F5);\nColor c = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);\nColor c = const Color.fromARGB(255, 66, 165, 245);\nColor c = const Color.fromRGBO(66, 165, 245, 1.0);\n<\/code><\/pre>\n<p>If you are having a problem with <code>Color<\/code> wherein it seems your color is just\nnot painting, check to make sure you are specifying the full 8 hexadecimal\ndigits. If you only specify six, then the leading two digits are assumed to\nbe zero, which means fully-transparent:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Color c1 = const Color(0xFFFFFF); \/\/ fully transparent white (invisible)\nColor c2 = const Color(0xFFFFFFFF); \/\/ fully opaque white (visible)\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/docs.flutter.io\/flutter\/material\/Colors-class.html\">Colors<\/a>, which\ndefines the colors found in the Material Design specification.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Color"
        },
        {
            "name": "dart:ui.ColorFilter",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/ColorFilter\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/ColorFilter\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! ColorFilter) {\n    return false;\n  }\n  final ColorFilter typedOther = other;\n\n  if (_type != typedOther._type) {\n    return false;\n  }\n  if (!_listEquals&lt;double&gt;(_matrix, typedOther._matrix)) {\n    return false;\n  }\n\n  return _color == typedOther._color &amp;&amp; _blendMode == typedOther._blendMode;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ColorFilter.linearToSrgbGamma",
                    "type": "",
                    "desc": "<p>Construct a color filter that applies the sRGB gamma curve to the RGB\nchannels.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/ColorFilter\/ColorFilter.linearToSrgbGamma.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorFilter.linearToSrgbGamma()\n    : _color = null,\n      _blendMode = null,\n      _matrix = null,\n      _type = _TypeLinearToSrgbGamma;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ColorFilter.matrix",
                    "type": "",
                    "desc": "<p>Construct a color filter that transforms a color by a 4x5 matrix. The\nmatrix is in row-major order and the translation column is specified in\nunnormalized, 0...255, space.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "matrix",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ColorFilter\/ColorFilter.matrix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorFilter.matrix(List&lt;double&gt; matrix)\n    : _color = null,\n      _blendMode = null,\n      _matrix = matrix,\n      _type = _TypeMatrix;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ColorFilter.mode",
                    "type": "",
                    "desc": "<p>Creates a color filter that applies the blend mode given as the second\nargument. The source color is the one given as the first argument, and the\ndestination color is the one from the layer being composited.<\/p>\n<p>The output of this filter is then composited into the background according\nto the <a href=\"dart-ui\/Paint\/blendMode.html\">Paint.blendMode<\/a>, using the output of this filter as the source\nand the background as the destination.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ColorFilter\/ColorFilter.mode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorFilter.mode(Color color, BlendMode blendMode)\n    : _color = color,\n      _blendMode = blendMode,\n      _matrix = null,\n      _type = _TypeMode;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ColorFilter.srgbToLinearGamma",
                    "type": "",
                    "desc": "<p>Creates a color filter that applies the inverse of the sRGB gamma curve\nto the RGB channels.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/ColorFilter\/ColorFilter.srgbToLinearGamma.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorFilter.srgbToLinearGamma()\n    : _color = null,\n      _blendMode = null,\n      _matrix = null,\n      _type = _TypeSrgbToLinearGamma;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ColorFilter",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ColorFilter\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  switch (_type) {\n    case _TypeMode:\n      return 'ColorFilter.mode($_color, $_blendMode)';\n    case _TypeMatrix:\n      return 'ColorFilter.matrix($_matrix)';\n    case _TypeLinearToSrgbGamma:\n      return 'ColorFilter.linearToSrgbGamma()';\n    case _TypeSrgbToLinearGamma:\n      return 'ColorFilter.srgbToLinearGamma()';\n    default:\n      return 'Unknown ColorFilter type. This is an error. If you\\'re seeing this, please file an issue at https:\/\/github.com\/flutter\/flutter\/issues\/new.';\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/ColorFilter\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/ColorFilter\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/ColorFilter\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/ColorFilter\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/ColorFilter\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/ColorFilter\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.ColorFilter",
                    "isConstant": false,
                    "href": "dart-ui\/ColorFilter\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_color, _blendMode, hashList(_matrix), _type);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ColorFilter-class.html",
            "desc": "<p>A description of a color filter to apply when drawing a shape or compositing\na layer with a particular <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>. A color filter is a function that takes\ntwo colors, and outputs one color. When applied during compositing, it is\nindependently applied to each pixel of the layer being drawn before the\nentire layer is merged with the destination.<\/p>\n<p>Instances of this class are used with <a href=\"dart-ui\/Paint\/colorFilter.html\">Paint.colorFilter<\/a> on <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>\nobjects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ColorFilter"
        },
        {
            "name": "dart:ui.EngineLayer",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/EngineLayer-class.html",
            "desc": "<p>A handle for the framework to hold and retain an engine layer across frames.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EngineLayer"
        },
        {
            "type": "",
            "name": "dart:ui.FilterQuality",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.FilterQuality",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/FilterQuality\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/FilterQuality-class.html",
            "desc": "<p>Quality levels for image filters.<\/p>\n<p>See <a href=\"dart-ui\/Paint\/filterQuality.html\">Paint.filterQuality<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "FilterQuality"
        },
        {
            "type": "",
            "name": "dart:ui.FontStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.FontStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/FontStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/FontStyle-class.html",
            "desc": "<p>Whether to slant the glyphs in the font<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "FontStyle"
        },
        {
            "name": "dart:ui.FontWeight",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "lerp",
                    "type": "dart:ui.FontWeight",
                    "desc": "<p>Linearly interpolates between two font weights.<\/p>\n<p>Rather than using fractional weights, the interpolation rounds to the\nnearest weight.<\/p>\n<p>Any null values for <code>a<\/code> or <code>b<\/code> are interpreted as equivalent to <a href=\"dart-ui\/FontWeight\/normal-constant.html\">normal<\/a>\n(also known as <a href=\"dart-ui\/FontWeight\/w400-constant.html\">w400<\/a>).<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>). The result\nis clamped to the range <a href=\"dart-ui\/FontWeight\/w100-constant.html\">w100<\/a>\u2013<a href=\"dart-ui\/FontWeight\/w900-constant.html\">w900<\/a>.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.FontWeight",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/FontWeight\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FontWeight lerp(FontWeight a, FontWeight b, double t) {\n  assert(t != null);\n  return values[lerpDouble(a?.index ?? normal.index, b?.index ?? normal.index, t).round().clamp(0, 8)];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.FontWeight",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/FontWeight\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return const &lt;int, String&gt;{\n    0: 'FontWeight.w100',\n    1: 'FontWeight.w200',\n    2: 'FontWeight.w300',\n    3: 'FontWeight.w400',\n    4: 'FontWeight.w500',\n    5: 'FontWeight.w600',\n    6: 'FontWeight.w700',\n    7: 'FontWeight.w800',\n    8: 'FontWeight.w900',\n  }[index];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/bold-constant.html",
                    "desc": "<p>A commonly used font weight that is heavier than normal.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight bold = w700\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bold",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The encoded integer value of this font weight.<\/p>\n        ",
                    "memberOf": "dart:ui.FontWeight",
                    "isConstant": false,
                    "href": "dart-ui\/FontWeight\/index.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/normal-constant.html",
                    "desc": "<p>The default font weight.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight normal = w400\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "normal",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/values-constant.html",
                    "desc": "<p>A list of all the font weights.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const List&lt;FontWeight&gt; values = const &lt;FontWeight&gt;[\n  w100, w200, w300, w400, w500, w600, w700, w800, w900\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "values",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w100-constant.html",
                    "desc": "<p>Thin, the least thick<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w100 = const FontWeight._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w100",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w200-constant.html",
                    "desc": "<p>Extra-light<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w200 = const FontWeight._(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w200",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w300-constant.html",
                    "desc": "<p>Light<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w300 = const FontWeight._(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w300",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w400-constant.html",
                    "desc": "<p>Normal \/ regular \/ plain<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w400 = const FontWeight._(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w400",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w500-constant.html",
                    "desc": "<p>Medium<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w500 = const FontWeight._(4)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w500",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w600-constant.html",
                    "desc": "<p>Semi-bold<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w600 = const FontWeight._(5)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w600",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w700-constant.html",
                    "desc": "<p>Bold<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w700 = const FontWeight._(6)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w700",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w800-constant.html",
                    "desc": "<p>Extra-bold<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w800 = const FontWeight._(7)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w800",
                    "memberOf": "dart:ui.FontWeight"
                },
                {
                    "type": "",
                    "href": "dart-ui\/FontWeight\/w900-constant.html",
                    "desc": "<p>Black, the most thick<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FontWeight w900 = const FontWeight._(8)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "w900",
                    "memberOf": "dart:ui.FontWeight"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/FontWeight-class.html",
            "desc": "<p>The thickness of the glyphs used to draw the text<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FontWeight"
        },
        {
            "name": "dart:ui.FrameCallback",
            "type": "",
            "desc": "<p>Signature for <a href=\"dart-ui\/Window\/onBeginFrame.html\">Window.onBeginFrame<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/FrameCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef FrameCallback = void Function(Duration duration);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.FrameInfo",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>The duration this frame should be shown.<\/p>\n        ",
                    "memberOf": "dart:ui.FrameInfo",
                    "isConstant": false,
                    "href": "dart-ui\/FrameInfo\/duration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get duration =&gt; new Duration(milliseconds: _durationMillis);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-ui\/Image-class.html\">Image<\/a> object for this frame.<\/p>\n        ",
                    "memberOf": "dart:ui.FrameInfo",
                    "isConstant": false,
                    "href": "dart-ui\/FrameInfo\/image.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Image get image native 'FrameInfo_image';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/FrameInfo-class.html",
            "desc": "<p>Information for a single frame of an animation.<\/p>\n<p>To obtain an instance of the <a href=\"dart-ui\/FrameInfo-class.html\">FrameInfo<\/a> interface, see\n<a href=\"dart-ui\/Codec\/getNextFrame.html\">Codec.getNextFrame<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FrameInfo"
        },
        {
            "name": "dart:ui.Gradient",
            "extends": [
                "dart:ui.Shader",
                "dart:core.Object"
            ],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Gradient.linear",
                    "type": "",
                    "desc": "<p>Creates a linear gradient from <code>from<\/code> to <code>to<\/code>.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before <code>from<\/code> and after <code>to<\/code> is described by the <code>tileMode<\/code>\nargument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_linear.png\"><\/p>\n<p>If <code>from<\/code>, <code>to<\/code>, <code>colors<\/code>, or <code>tileMode<\/code> are null, or if <code>colors<\/code> or\n<code>colorStops<\/code> contain null values, this constructor will throw a\n<a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "from",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "to",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "colorStops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Gradient\/Gradient.linear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.linear(\n  Offset from,\n  Offset to,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n]) : assert(_offsetIsValid(from)),\n     assert(_offsetIsValid(to)),\n     assert(colors != null),\n     assert(tileMode != null),\n     super._() {\n  _validateColorStops(colors, colorStops);\n  final Float32List endPointsBuffer = _encodeTwoPoints(from, to);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n  _constructor();\n  _initLinear(endPointsBuffer, colorsBuffer, colorStopsBuffer, tileMode.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Gradient.radial",
                    "type": "",
                    "desc": "<p>Creates a radial gradient centered at <code>center<\/code> that ends at <code>radius<\/code>\ndistance from the center.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before and after the radius is described by the <code>tileMode<\/code>\nargument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radial.png\"><\/p>\n<p>If <code>center<\/code>, <code>radius<\/code>, <code>colors<\/code>, or <code>tileMode<\/code> are null, or if <code>colors<\/code> or\n<code>colorStops<\/code> contain null values, this constructor will throw a\n<a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n<p>If <code>matrix4<\/code> is provided, the gradient fill will be transformed by the\nspecified 4x4 matrix relative to the local coordinate system. <code>matrix4<\/code> must\nbe a column-major matrix packed into a list of 16 values.<\/p>\n<p>If <code>focal<\/code> is provided and not equal to <code>center<\/code> and <code>focalRadius<\/code> is\nprovided and not equal to 0.0, the generated shader will be a two point\nconical radial gradient, with <code>focal<\/code> being the center of the focal\ncircle and <code>focalRadius<\/code> being the radius of that circle. If <code>focal<\/code> is\nprovided and not equal to <code>center<\/code>, at least one of the two offsets must\nnot be equal to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "center",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "colorStops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "focal",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "focalRadius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Gradient\/Gradient.radial.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.radial(\n  Offset center,\n  double radius,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n  Float64List matrix4,\n  Offset focal,\n  double focalRadius = 0.0\n]) : assert(_offsetIsValid(center)),\n     assert(colors != null),\n     assert(tileMode != null),\n     assert(matrix4 == null || _matrix4IsValid(matrix4)),\n     super._() {\n  focalRadius ??= 0.0;\n  _validateColorStops(colors, colorStops);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n\n  \/\/ If focal is null or focal radius is null, this should be treated as a regular radial gradient\n  \/\/ If focal == center and the focal radius is 0.0, it's still a regular radial gradient\n  if (focal == null || (focal == center &amp;&amp; focalRadius == 0.0)) {\n    _constructor();\n    _initRadial(center.dx, center.dy, radius, colorsBuffer, colorStopsBuffer, tileMode.index, matrix4);\n  } else {\n    assert(center != Offset.zero || focal != Offset.zero); \/\/ will result in exception(s) in Skia side\n    _constructor();\n    _initConical(focal.dx, focal.dy, focalRadius, center.dx, center.dy, radius, colorsBuffer, colorStopsBuffer, tileMode.index, matrix4);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Gradient.sweep",
                    "type": "",
                    "desc": "<p>Creates a sweep gradient centered at <code>center<\/code> that starts at <code>startAngle<\/code>\nand ends at <code>endAngle<\/code>.<\/p>\n<p><code>startAngle<\/code> and <code>endAngle<\/code> should be provided in radians, with zero\nradians being the horizontal line to the right of the <code>center<\/code> and with\npositive angles going clockwise around the <code>center<\/code>.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before <code>startAngle<\/code> and after <code>endAngle<\/code> is described by the\n<code>tileMode<\/code> argument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_sweep.png\"><\/p>\n<p>If <code>center<\/code>, <code>colors<\/code>, <code>tileMode<\/code>, <code>startAngle<\/code>, or <code>endAngle<\/code> are null,\nor if <code>colors<\/code> or <code>colorStops<\/code> contain null values, this constructor will\nthrow a <a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n<p>If <code>matrix4<\/code> is provided, the gradient fill will be transformed by the\nspecified 4x4 matrix relative to the local coordinate system. <code>matrix4<\/code> must\nbe a column-major matrix packed into a list of 16 values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "center",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "colorStops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "endAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Gradient\/Gradient.sweep.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.sweep(\n  Offset center,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n  double startAngle = 0.0,\n  double endAngle = math.pi * 2,\n  Float64List matrix4,\n]) : assert(_offsetIsValid(center)),\n     assert(colors != null),\n     assert(tileMode != null),\n     assert(startAngle != null),\n     assert(endAngle != null),\n     assert(startAngle &lt; endAngle),\n     assert(matrix4 == null || _matrix4IsValid(matrix4)),\n     super._() {\n  _validateColorStops(colors, colorStops);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n  _constructor();\n  _initSweep(center.dx, center.dy, colorsBuffer, colorStopsBuffer, tileMode.index, startAngle, endAngle, matrix4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Gradient-class.html",
            "desc": "<p>A shader (as used by <a href=\"dart-ui\/Paint\/shader.html\">Paint.shader<\/a>) that renders a color gradient.<\/p>\n<p>There are several types of gradients, represented by the various constructors\non this class.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/Gradient-class.html\">Gradient<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Gradient"
        },
        {
            "name": "dart:ui.Image",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Release the resources used by this object. The object is no longer usable\nafter this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Image",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Image\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'Image_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toByteData",
                    "type": "dart:async.Future<dart:typed_data.ByteData>",
                    "desc": "<p>Converts the <a href=\"dart-ui\/Image-class.html\">Image<\/a> object into a byte array.<\/p>\n<p>The <code>format<\/code> argument specifies the format in which the bytes will be\nreturned.<\/p>\n<p>Returns a future that completes with the binary image data or an error\nif encoding fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Image",
                    "sig": "",
                    "params": [
                        {
                            "name": "format",
                            "type": "dart:ui.ImageByteFormat",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Image\/toByteData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ByteData&gt; toByteData({ImageByteFormat format: ImageByteFormat.rawRgba}) {\n  return _futurize((_Callback&lt;ByteData&gt; callback) {\n    return _toByteData(format.index, (Uint8List encoded) {\n      callback(encoded?.buffer?.asByteData());\n    });\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:typed_data.ByteData"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Image",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Image\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '[$width\\u00D7$height]';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "height",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of image pixels along the image's vertical axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Image",
                    "isConstant": false,
                    "href": "dart-ui\/Image\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get height native 'Image_height';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of image pixels along the image's horizontal axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Image",
                    "isConstant": false,
                    "href": "dart-ui\/Image\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get width native 'Image_width';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Image-class.html",
            "desc": "<p>Opaque handle to raw decoded image data (pixels).<\/p>\n<p>To obtain an <a href=\"dart-ui\/Image-class.html\">Image<\/a> object, use <a href=\"dart-ui\/instantiateImageCodec.html\">instantiateImageCodec<\/a>.<\/p>\n<p>To draw an <a href=\"dart-ui\/Image-class.html\">Image<\/a>, use one of the methods on the <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> class, such as\n<a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/widgets\/Image-class.html\">Image<\/a>, the class in the <a href=\"widgets\/widgets-library.html\">widgets<\/a> library.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Image"
        },
        {
            "type": "",
            "name": "dart:ui.ImageByteFormat",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ImageByteFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ImageByteFormat\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ImageByteFormat-class.html",
            "desc": "<p>The format in which image bytes should be returned when using\n<a href=\"dart-ui\/Image\/toByteData.html\">Image.toByteData<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "ImageByteFormat"
        },
        {
            "name": "dart:ui.ImageDecoderCallback",
            "type": "",
            "desc": "<p>Callback signature for <a href=\"dart-ui\/decodeImageFromList.html\">decodeImageFromList<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "result",
                    "type": "dart:ui.Image",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/ImageDecoderCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ImageDecoderCallback = void Function(Image result);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.ImageFilter",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "ImageFilter.blur",
                    "type": "",
                    "desc": "<p>Creates an image filter that applies a Gaussian blur.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ImageFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "sigmaX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sigmaY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ImageFilter\/ImageFilter.blur.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageFilter.blur({ double sigmaX: 0.0, double sigmaY: 0.0 }) {\n  _constructor();\n  _initBlur(sigmaX, sigmaY);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ImageFilter.matrix",
                    "type": "",
                    "desc": "<p>Creates an image filter that applies a matrix transformation.<\/p>\n<p>For example, applying a positive scale matrix (see <a href=\"vector_math\/Matrix4\/Matrix4.diagonal3.html\">new Matrix4.diagonal3<\/a>)\nwhen used with <a href=\"widgets\/BackdropFilter-class.html\">BackdropFilter<\/a> would magnify the background image.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ImageFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "filterQuality",
                            "type": "dart:ui.FilterQuality",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ImageFilter\/ImageFilter.matrix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageFilter.matrix(Float64List matrix4,\n                   { FilterQuality filterQuality: FilterQuality.low }) {\n  if (matrix4.length != 16)\n    throw new ArgumentError('\"matrix4\" must have 16 entries.');\n  _constructor();\n  _initMatrix(matrix4, filterQuality.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ImageFilter-class.html",
            "desc": "<p>A filter operation to apply to a raster image.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/BackdropFilter-class.html\">BackdropFilter<\/a>, a widget that applies <a href=\"dart-ui\/ImageFilter-class.html\">ImageFilter<\/a> to its rendering.<\/li>\n<li>\n<a href=\"dart-ui\/SceneBuilder\/pushBackdropFilter.html\">SceneBuilder.pushBackdropFilter<\/a>, which is the low-level API for using\nthis class.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageFilter"
        },
        {
            "name": "dart:ui.ImageShader",
            "extends": [
                "dart:ui.Shader",
                "dart:core.Object"
            ],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "ImageShader",
                    "type": "",
                    "desc": "<p>Creates an image-tiling shader. The first argument specifies the image to\ntile. The second and third arguments specify the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> for the x\ndirection and y direction respectively. The fourth argument gives the\nmatrix to apply to the effect. All the arguments are required and must not\nbe null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ImageShader",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tmx",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tmy",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ImageShader\/ImageShader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nImageShader(Image image, TileMode tmx, TileMode tmy, Float64List matrix4) :\n  assert(image != null), \/\/ image is checked on the engine side\n  assert(tmx != null),\n  assert(tmy != null),\n  assert(matrix4 != null),\n  super._() {\n  if (matrix4.length != 16)\n    throw new ArgumentError('\"matrix4\" must have 16 entries.');\n  _constructor();\n  _initWithImage(image, tmx.index, tmy.index, matrix4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ImageShader-class.html",
            "desc": "<p>A shader (as used by <a href=\"dart-ui\/Paint\/shader.html\">Paint.shader<\/a>) that tiles an image.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageShader"
        },
        {
            "name": "dart:ui.IsolateNameServer",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "lookupPortByName",
                    "type": "dart:isolate.SendPort",
                    "desc": "<p>Looks up the <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> associated with a given name.<\/p>\n<p>Returns null if the name does not exist. To register the name in the first\nplace, consider <a href=\"dart-ui\/IsolateNameServer\/registerPortWithName.html\">registerPortWithName<\/a>.<\/p>\n<p>The <code>name<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.IsolateNameServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/IsolateNameServer\/lookupPortByName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static SendPort lookupPortByName(String name) {\n  assert(name != null, \"'name' cannot be null.\");\n  return _lookupPortByName(name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "registerPortWithName",
                    "type": "dart:core.bool",
                    "desc": "<p>Registers a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> with a given name.<\/p>\n<p>Returns true if registration is successful, and false if the name entry\nalready existed (in which case the earlier registration is left\nunchanged). To remove a registration, consider <a href=\"dart-ui\/IsolateNameServer\/removePortNameMapping.html\">removePortNameMapping<\/a>.<\/p>\n<p>Once a port has been registered with a name, it can be obtained from any\n<a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> using <a href=\"dart-ui\/IsolateNameServer\/lookupPortByName.html\">lookupPortByName<\/a>.<\/p>\n<p>Multiple isolates should avoid attempting to register ports with the same\nname, as there is an inherent race condition in doing so.<\/p>\n<p>The <code>port<\/code> and <code>name<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.IsolateNameServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "port",
                            "type": "dart:isolate.SendPort",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/IsolateNameServer\/registerPortWithName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool registerPortWithName(SendPort port, String name) {\n  assert(port != null, \"'port' cannot be null.\");\n  assert(name != null, \"'name' cannot be null.\");\n  return _registerPortWithName(port, name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removePortNameMapping",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes a name-to-<a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> mapping given its name.<\/p>\n<p>Returns true if the mapping was successfully removed, false if the mapping\ndid not exist. To add a registration, consider <a href=\"dart-ui\/IsolateNameServer\/registerPortWithName.html\">registerPortWithName<\/a>.<\/p>\n<p>Generally, removing a port name mapping is an inherently racy operation\n(another isolate could have obtained the name just prior to the name being\nremoved, and thus would still be able to communicate over the port even\nafter it has been removed).<\/p>\n<p>The <code>name<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.IsolateNameServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/IsolateNameServer\/removePortNameMapping.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool removePortNameMapping(String name) {\n  assert(name != null, \"'name' cannot be null.\");\n  return _removePortNameMapping(name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/IsolateNameServer-class.html",
            "desc": "<p>Static methods to allow for simple sharing of <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s across <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a>s.<\/p>\n<p>All isolates share a global mapping of names to ports. An isolate can\nregister a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> with a given name using <a href=\"dart-ui\/IsolateNameServer\/registerPortWithName.html\">registerPortWithName<\/a>;\nanother isolate can then look up that port using <a href=\"dart-ui\/IsolateNameServer\/lookupPortByName.html\">lookupPortByName<\/a>.<\/p>\n<p>To create a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>, first create a <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>, then use\n<a href=\"dart-isolate\/ReceivePort\/sendPort.html\">ReceivePort.sendPort<\/a>.<\/p>\n<p>Since multiple isolates can each obtain the same <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> associated with\na particular <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>, the protocol built on top of this mechanism\nshould typically consist of a single message. If more elaborate two-way\ncommunication or multiple-message communication is necessary, it is\nrecommended to establish a separate communication channel in that first\nmessage (e.g. by passing a dedicated <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IsolateNameServer"
        },
        {
            "name": "dart:ui.Locale",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Locale\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Locale",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Locale\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! Locale)\n    return false;\n  final Locale typedOther = other;\n  return languageCode == typedOther.languageCode\n      &amp;&amp; scriptCode == typedOther.scriptCode\n      &amp;&amp; countryCode == typedOther.countryCode;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Locale",
                    "type": "",
                    "desc": "<p>Creates a new Locale object. The first argument is the\nprimary language subtag, the second is the region (also\nreferred to as 'country') subtag.<\/p>\n<p>For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const Locale swissFrench = const Locale('fr', 'CH');\nconst Locale canadianFrench = const Locale('fr', 'CA');\n<\/code><\/pre>\n<p>The primary language subtag must not be null. The region subtag is\noptional. When there is no region\/country subtag, the parameter should\nbe omitted or passed <code>null<\/code> instead of an empty-string.<\/p>\n<p>The subtag values are <em>case sensitive<\/em> and must be one of the valid\nsubtags according to CLDR supplemental data:\n<a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/language.xml\">language<\/a>,\n<a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/region.xml\">region<\/a>. The\nprimary language subtag must be at least two and at most eight lowercase\nletters, but not four letters. The region region subtag must be two\nuppercase letters or three digits. See the <a href=\"https:\/\/www.unicode.org\/reports\/tr35\/#Unicode_language_identifier\">Unicode Language\nIdentifier<\/a>\nspecification.<\/p>\n<p>Validity is not checked by default, but some methods may throw away\ninvalid data.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">new Locale.fromSubtags<\/a>, which also allows a <a href=\"dart-ui\/Locale\/scriptCode.html\">scriptCode<\/a> to be\nspecified.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Locale",
                    "sig": "",
                    "params": [
                        {
                            "name": "_languageCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "_countryCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Locale\/Locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Locale(\n  this._languageCode, [\n  this._countryCode,\n]) : assert(_languageCode != null),\n     assert(_languageCode != ''),\n     scriptCode = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Locale.fromSubtags",
                    "type": "",
                    "desc": "<p>Creates a new Locale object.<\/p>\n<p>The keyword arguments specify the subtags of the Locale.<\/p>\n<p>The subtag values are <em>case sensitive<\/em> and must be valid subtags according\nto CLDR supplemental data:\n<a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/language.xml\">language<\/a>,\n<a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/script.xml\">script<\/a> and\n<a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/region.xml\">region<\/a> for\neach of languageCode, scriptCode and countryCode respectively.<\/p>\n<p>The <code>countryCode<\/code> subtag is optional. When there is no country subtag,\nthe parameter should be omitted or passed <code>null<\/code> instead of an empty-string.<\/p>\n<p>Validity is not checked by default, but some methods may throw away\ninvalid data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Locale",
                    "sig": "",
                    "params": [
                        {
                            "name": "languageCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scriptCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "countryCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Locale\/Locale.fromSubtags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Locale.fromSubtags({\n  String languageCode = 'und',\n  this.scriptCode,\n  String countryCode,\n}) : assert(languageCode != null),\n     assert(languageCode != ''),\n     _languageCode = languageCode,\n     assert(scriptCode != ''),\n     assert(countryCode != ''),\n     _countryCode = countryCode;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Locale",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Locale\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (!identical(cachedLocale, this)) {\n    cachedLocale = this;\n    cachedLocaleString = _rawToString();\n  }\n  return cachedLocaleString;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "cachedLocale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/cachedLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Locale cachedLocale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "cachedLocaleString",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/cachedLocaleString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String cachedLocaleString\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "countryCode",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The region subtag for the locale.<\/p>\n<p>This may be null, indicating that there is no specified region subtag.<\/p>\n<p>This is expected to be string registered in the <a href=\"https:\/\/www.iana.org\/assignments\/language-subtag-registry\/language-subtag-registry\">IANA Language Subtag\nRegistry<\/a>\nwith the type \"region\". The string specified must match the case of the\nstring in the registry.<\/p>\n<p>Region subtags that are deprecated in the registry and have a preferred\ncode are changed to their preferred code. For example, <code>const Locale('de',\n'DE')<\/code> and <code>const Locale('de', 'DD')<\/code> are equal, and both have the\n<a href=\"dart-ui\/Locale\/countryCode.html\">countryCode<\/a> <code>DE<\/code>, because <code>DD<\/code> is a deprecated language subtag that was\nreplaced by the subtag <code>DE<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">new Locale.fromSubtags<\/a>, which describes the conventions for creating\n<a href=\"dart-ui\/Locale-class.html\">Locale<\/a> objects.<\/li><\/ul>",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/countryCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get countryCode =&gt; _deprecatedRegionSubtagMap[_countryCode] ?? _countryCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Locale\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Locale\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Locale\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Locale\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Locale\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Locale\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(languageCode, scriptCode, countryCode);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "languageCode",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The primary language subtag for the locale.<\/p>\n<p>This must not be null. It may be 'und', representing 'undefined'.<\/p>\n<p>This is expected to be string registered in the <a href=\"https:\/\/www.iana.org\/assignments\/language-subtag-registry\/language-subtag-registry\">IANA Language Subtag\nRegistry<\/a>\nwith the type \"language\". The string specified must match the case of the\nstring in the registry.<\/p>\n<p>Language subtags that are deprecated in the registry and have a preferred\ncode are changed to their preferred code. For example, <code>const\nLocale('he')<\/code> and <code>const Locale('iw')<\/code> are equal, and both have the\n<a href=\"dart-ui\/Locale\/languageCode.html\">languageCode<\/a> <code>he<\/code>, because <code>iw<\/code> is a deprecated language subtag that was\nreplaced by the subtag <code>he<\/code>.<\/p>\n<p>This must be a valid Unicode Language subtag as listed in <a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/language.xml\">Unicode CLDR\nsupplemental\ndata<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">new Locale.fromSubtags<\/a>, which describes the conventions for creating\n<a href=\"dart-ui\/Locale-class.html\">Locale<\/a> objects.<\/li><\/ul>",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/languageCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get languageCode =&gt; _deprecatedLanguageSubtagMap[_languageCode] ?? _languageCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scriptCode",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The script subtag for the locale.<\/p>\n<p>This may be null, indicating that there is no specified script subtag.<\/p>\n<p>This must be a valid Unicode Language Identifier script subtag as listed\nin <a href=\"http:\/\/unicode.org\/cldr\/latest\/common\/validity\/script.xml\">Unicode CLDR supplemental\ndata<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">new Locale.fromSubtags<\/a>, which describes the conventions for creating\n<a href=\"dart-ui\/Locale-class.html\">Locale<\/a> objects.<\/li><\/ul>",
                    "memberOf": "dart:ui.Locale",
                    "isConstant": false,
                    "href": "dart-ui\/Locale\/scriptCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String scriptCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Locale-class.html",
            "desc": "<p>An identifier used to select a user's language and formatting preferences.<\/p>\n<p>This represents a <a href=\"https:\/\/www.unicode.org\/reports\/tr35\/#Unicode_language_identifier\">Unicode Language\nIdentifier<\/a>\n(i.e. without Locale extensions), except variants are not supported.<\/p>\n<p>Locales are canonicalized according to the \"preferred value\" entries in the\n<a href=\"https:\/\/www.iana.org\/assignments\/language-subtag-registry\/language-subtag-registry\">IANA Language Subtag\nRegistry<\/a>.\nFor example, <code>const Locale('he')<\/code> and <code>const Locale('iw')<\/code> are equal and\nboth have the <a href=\"dart-ui\/Locale\/languageCode.html\">languageCode<\/a> <code>he<\/code>, because <code>iw<\/code> is a deprecated language\nsubtag that was replaced by the subtag <code>he<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Window\/locale.html\">Window.locale<\/a>, which specifies the system's currently selected\n<a href=\"dart-ui\/Locale-class.html\">Locale<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Locale"
        },
        {
            "name": "dart:ui.MaskFilter",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/MaskFilter\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.MaskFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/MaskFilter\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! MaskFilter)\n    return false;\n  final MaskFilter typedOther = other;\n  return _style == typedOther._style &amp;&amp;\n         _sigma == typedOther._sigma;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "MaskFilter.blur",
                    "type": "",
                    "desc": "<p>Creates a mask filter that takes the shape being drawn and blurs it.<\/p>\n<p>This is commonly used to approximate shadows.<\/p>\n<p>The <code>style<\/code> argument controls the kind of effect to draw; see <a href=\"dart-ui\/BlurStyle-class.html\">BlurStyle<\/a>.<\/p>\n<p>The <code>sigma<\/code> argument controls the size of the effect. It is the standard\ndeviation of the Gaussian blur to apply. The value must be greater than\nzero. The sigma corresponds to very roughly half the radius of the effect\nin pixels.<\/p>\n<p>A blur is an expensive operation and should therefore be used sparingly.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Canvas\/drawShadow.html\">Canvas.drawShadow<\/a>, which is a more efficient way to draw shadows.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.MaskFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "_style",
                            "type": "dart:ui.BlurStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "_sigma",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/MaskFilter\/MaskFilter.blur.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MaskFilter.blur(\n  this._style,\n  this._sigma,\n) : assert(_style != null),\n    assert(_sigma != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.MaskFilter",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/MaskFilter\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'MaskFilter.blur($_style, ${_sigma.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/MaskFilter\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/MaskFilter\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/MaskFilter\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/MaskFilter\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/MaskFilter\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/MaskFilter\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.MaskFilter",
                    "isConstant": false,
                    "href": "dart-ui\/MaskFilter\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_style, _sigma);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/MaskFilter-class.html",
            "desc": "<p>A mask filter to apply to shapes as they are painted. A mask filter is a\nfunction that takes a bitmap of color pixels, and returns another bitmap of\ncolor pixels.<\/p>\n<p>Instances of this class are used with <a href=\"dart-ui\/Paint\/maskFilter.html\">Paint.maskFilter<\/a> on <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MaskFilter"
        },
        {
            "name": "dart:ui.Offset",
            "extends": [
                "dart:ui.OffsetBase",
                "dart:core.Object"
            ],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Modulo (remainder) operator.<\/p>\n<p>Returns an offset whose coordinates are the remainder of dividing the\ncoordinates of the left-hand-side operand (an Offset) by the scalar\nright-hand-side operand (a double).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator %(double operand) =&gt; new Offset(dx % operand, dy % operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator &",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Rectangle constructor operator.<\/p>\n<p>Combines an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and a <a href=\"dart-ui\/Size-class.html\">Size<\/a> to form a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> whose top-left\ncoordinate is the point given by adding this offset, the left-hand-side\noperand, to the origin, and whose size is the right-hand-side operand.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Rect myRect = Offset.zero &amp; const Size(100.0, 100.0);\n\/\/ same as: new Rect.fromLTWH(0.0, 0.0, 100.0, 100.0)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_bitwise_and.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect operator &amp;(Size other) =&gt; new Rect.fromLTWH(dx, dy, other.width, other.height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Multiplication operator.<\/p>\n<p>Returns an offset whose coordinates are the coordinates of the\nleft-hand-side operand (an Offset) multiplied by the scalar\nright-hand-side operand (a double).<\/p>\n<p>See also <a href=\"dart-ui\/Offset\/scale.html\">scale<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator *(double operand) =&gt; new Offset(dx * operand, dy * operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Binary addition operator.<\/p>\n<p>Returns an offset whose <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> value is the sum of the <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> values of the\ntwo operands, and whose <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> value is the sum of the <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> values of the\ntwo operands.<\/p>\n<p>See also <a href=\"dart-ui\/Offset\/translate.html\">translate<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator +(Offset other) =&gt; new Offset(dx + other.dx, dy + other.dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Binary subtraction operator.<\/p>\n<p>Returns an offset whose <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> value is the left-hand-side operand's <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a>\nminus the right-hand-side operand's <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> and whose <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> value is the\nleft-hand-side operand's <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> minus the right-hand-side operand's <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>.<\/p>\n<p>See also <a href=\"dart-ui\/Offset\/translate.html\">translate<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator -(Offset other) =&gt; new Offset(dx - other.dx, dy - other.dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Division operator.<\/p>\n<p>Returns an offset whose coordinates are the coordinates of the\nleft-hand-side operand (an Offset) divided by the scalar right-hand-side\noperand (a double).<\/p>\n<p>See also <a href=\"dart-ui\/Offset\/scale.html\">scale<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator \/(double operand) =&gt; new Offset(dx \/ operand, dy \/ operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>Compares two Offsets for equality.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! Offset)\n    return false;\n  final Offset typedOther = other;\n  return dx == typedOther.dx &amp;&amp;\n         dy == typedOther.dy;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Offset",
                    "type": "",
                    "desc": "<p>Creates an offset. The first argument sets <code>dx<\/code>, the horizontal component,\nand the second sets <code>dy<\/code>, the vertical component.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Offset\/Offset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Offset(double dx, double dy) : super(dx, dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Offset.fromDirection",
                    "type": "",
                    "desc": "<p>Creates an offset from its <code>direction<\/code> and <code>distance<\/code>.<\/p>\n<p>The direction is in radians clockwise from the positive x-axis.<\/p>\n<p>The distance can be omitted, to create a unit vector (distance = 1.0).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "distance",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Offset\/Offset.fromDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Offset.fromDirection(double direction, [ double distance = 1.0 ]) {\n  return new Offset(distance * math.cos(direction), distance * math.sin(direction));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Linearly interpolate between two offsets.<\/p>\n<p>If either offset is null, this function interpolates from <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Offset lerp(Offset a, Offset b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return new Offset(lerpDouble(a.dx, b.dx, t), lerpDouble(a.dy, b.dy, t));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns a new offset with the x component scaled by <code>scaleX<\/code> and the y\ncomponent scaled by <code>scaleY<\/code>.<\/p>\n<p>If the two scale arguments are the same, consider using the <code>*<\/code> operator\ninstead:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Offset a = const Offset(10.0, 10.0);\nOffset b = a * 2.0; \/\/ same as: a.scale(2.0, 2.0)\n<\/code><\/pre>\n<p>If the two arguments are -1, consider using the unary <code>-<\/code> operator\ninstead:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Offset a = const Offset(10.0, 10.0);\nOffset b = -a; \/\/ same as: a.scale(-1.0, -1.0)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "scaleX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scaleY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset scale(double scaleX, double scaleY) =&gt; new Offset(dx * scaleX, dy * scaleY);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Offset(${dx?.toStringAsFixed(1)}, ${dy?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "translate",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns a new offset with translateX added to the x component and\ntranslateY added to the y component.<\/p>\n<p>If the arguments come from another <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, consider using the <code>+<\/code> or <code>-<\/code>\noperators instead:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Offset a = const Offset(10.0, 10.0);\nOffset b = const Offset(10.0, 10.0);\nOffset c = a + b; \/\/ same as: a.translate(b.dx, b.dy)\nOffset d = a - b; \/\/ same as: a.translate(-b.dx, -b.dy)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "translateX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "translateY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/translate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset translate(double translateX, double translateY) =&gt; new Offset(dx + translateX, dy + translateY);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Unary negation operator.<\/p>\n<p>Returns an offset with the coordinates negated.<\/p>\n<p>If the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> represents an arrow on a plane, this operator returns the\nsame arrow but pointing in the reverse direction.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator -() =&gt; new Offset(-dx, -dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Integer (truncating) division operator.<\/p>\n<p>Returns an offset whose coordinates are the coordinates of the\nleft-hand-side operand (an Offset) divided by the scalar right-hand-side\noperand (a double), rounded towards zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Offset",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Offset\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset operator ~\/(double operand) =&gt; new Offset((dx ~\/ operand).toDouble(), (dy ~\/ operand).toDouble());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "direction",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The angle of this offset as radians clockwise from the positive x-axis, in\nthe range -<a href=\"dart-math\/pi-constant.html\">pi<\/a> to <a href=\"dart-math\/pi-constant.html\">pi<\/a>, assuming positive values of the x-axis go to the\nleft and positive values of the y-axis go down.<\/p>\n<p>Zero means that <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> is zero and <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> is zero or positive.<\/p>\n<p>Values from zero to <a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2 indicate positive values of <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> and <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>, the\nbottom-right quadrant.<\/p>\n<p>Values from <a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2 to <a href=\"dart-math\/pi-constant.html\">pi<\/a> indicate negative values of <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> and positive\nvalues of <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>, the bottom-left quadrant.<\/p>\n<p>Values from zero to -<a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2 indicate positive values of <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> and negative\nvalues of <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>, the top-right quadrant.<\/p>\n<p>Values from -<a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2 to -<a href=\"dart-math\/pi-constant.html\">pi<\/a> indicate negative values of <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> and <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>,\nthe top-left quadrant.<\/p>\n<p>When <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> is zero and <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> is negative, the <a href=\"dart-ui\/Offset\/direction.html\">direction<\/a> is <a href=\"dart-math\/pi-constant.html\">pi<\/a>.<\/p>\n<p>When <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a> is zero, <a href=\"dart-ui\/Offset\/direction.html\">direction<\/a> is <a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2 if <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> is positive and -<a href=\"dart-math\/pi-constant.html\">pi<\/a>\/2\nif <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a> is negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Offset\/distance.html\">distance<\/a>, to compute the magnitude of the vector.<\/li>\n<li>\n<a href=\"dart-ui\/Canvas\/rotate.html\">Canvas.rotate<\/a>, which uses the same convention for its angle.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/direction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get direction =&gt; math.atan2(dy, dx);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "distance",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The magnitude of the offset.<\/p>\n<p>If you need this value to compare it to another <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>'s distance,\nconsider using <a href=\"dart-ui\/Offset\/distanceSquared.html\">distanceSquared<\/a> instead, since it is cheaper to compute.<\/p>\n        ",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/distance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get distance =&gt; math.sqrt(dx * dx + dy * dy);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "distanceSquared",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The square of the magnitude of the offset.<\/p>\n<p>This is cheaper than computing the <a href=\"dart-ui\/Offset\/distance.html\">distance<\/a> itself.<\/p>\n        ",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/distanceSquared.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get distanceSquared =&gt; dx * dx + dy * dy;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dx",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The x component of the offset.<\/p>\n<p>The y component is given by <a href=\"dart-ui\/Offset\/dy.html\">dy<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/dx.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get dx =&gt; _dx;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dy",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The y component of the offset.<\/p>\n<p>The x component is given by <a href=\"dart-ui\/Offset\/dx.html\">dx<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/dy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get dy =&gt; _dy;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Offset\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Offset\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Offset\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Offset\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Offset\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Offset\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Offset",
                    "isConstant": false,
                    "href": "dart-ui\/Offset\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(dx, dy);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/Offset\/infinite-constant.html",
                    "desc": "<p>An offset with infinite x and y components.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isInfinite.html\">isInfinite<\/a>, which checks whether either component is infinite.<\/li>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isFinite.html\">isFinite<\/a>, which checks whether both components are finite.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Offset infinite = const Offset(double.infinity, double.infinity)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "infinite",
                    "memberOf": "dart:ui.Offset"
                },
                {
                    "type": "",
                    "href": "dart-ui\/Offset\/zero-constant.html",
                    "desc": "<p>An offset with zero magnitude.<\/p>\n<p>This can be used to represent the origin of a coordinate space.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Offset zero = const Offset(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "dart:ui.Offset"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "material.MaterialPointArcTween"
            ],
            "realImplementors": [
                "material.MaterialPointArcTween"
            ],
            "cn": [],
            "href": "dart-ui\/Offset-class.html",
            "desc": "<p>An immutable 2D floating-point offset.<\/p>\n<p>Generally speaking, Offsets can be interpreted in two ways:<\/p>\n<ol>\n<li>\n<p>As representing a point in Cartesian space a specified distance from a\nseparately-maintained origin. For example, the top-left position of\nchildren in the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> protocol is typically represented as an\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from the top left of the parent box.<\/p>\n<\/li>\n<li>\n<p>As a vector that can be applied to coordinates. For example, when\npainting a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, the parent is passed an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from the\nscreen's origin which it can add to the offsets of its children to find\nthe <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from the screen's origin to each of the children.<\/p>\n<\/li>\n<\/ol>\n<p>Because a particular <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> can be interpreted as one sense at one time\nthen as the other sense at a later time, the same class is used for both\nsenses.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Size-class.html\">Size<\/a>, which represents a vector describing the size of a rectangle.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Offset"
        },
        {
            "name": "dart:ui.OffsetBase",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator <",
                    "type": "dart:core.bool",
                    "desc": "<p>Less-than operator. Compares an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a> to another <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or\n<a href=\"dart-ui\/Size-class.html\">Size<\/a>, and returns true if both the horizontal and vertical values of the\nleft-hand-side operand are smaller than the horizontal and vertical values\nof the right-hand-side operand respectively. Returns false otherwise.<\/p>\n<p>This is a partial ordering. It is possible for two values to be neither\nless, nor greater than, nor equal to, another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.OffsetBase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/operator_less.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;(OffsetBase other) =&gt; _dx &lt; other._dx &amp;&amp; _dy &lt; other._dy;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator <=",
                    "type": "dart:core.bool",
                    "desc": "<p>Less-than-or-equal-to operator. Compares an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a> to another\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a>, and returns true if both the horizontal and vertical\nvalues of the left-hand-side operand are smaller than or equal to the\nhorizontal and vertical values of the right-hand-side operand\nrespectively. Returns false otherwise.<\/p>\n<p>This is a partial ordering. It is possible for two values to be neither\nless, nor greater than, nor equal to, another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.OffsetBase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/operator_less_equal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;=(OffsetBase other) =&gt; _dx &lt;= other._dx &amp;&amp; _dy &lt;= other._dy;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>Equality operator. Compares an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a> to another <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or\n<a href=\"dart-ui\/Size-class.html\">Size<\/a>, and returns true if the horizontal and vertical values of the\nleft-hand-side operand are equal to the horizontal and vertical values of\nthe right-hand-side operand respectively. Returns false otherwise.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! OffsetBase)\n    return false;\n  final OffsetBase typedOther = other;\n  return _dx == typedOther._dx &amp;&amp;\n         _dy == typedOther._dy;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator >",
                    "type": "dart:core.bool",
                    "desc": "<p>Greater-than operator. Compares an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a> to another <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>\nor <a href=\"dart-ui\/Size-class.html\">Size<\/a>, and returns true if both the horizontal and vertical values of\nthe left-hand-side operand are bigger than the horizontal and vertical\nvalues of the right-hand-side operand respectively. Returns false\notherwise.<\/p>\n<p>This is a partial ordering. It is possible for two values to be neither\nless, nor greater than, nor equal to, another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.OffsetBase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/operator_greater.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;(OffsetBase other) =&gt; _dx &gt; other._dx &amp;&amp; _dy &gt; other._dy;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator >=",
                    "type": "dart:core.bool",
                    "desc": "<p>Greater-than-or-equal-to operator. Compares an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a> to\nanother <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> or <a href=\"dart-ui\/Size-class.html\">Size<\/a>, and returns true if both the horizontal and\nvertical values of the left-hand-side operand are bigger than or equal to\nthe horizontal and vertical values of the right-hand-side operand\nrespectively. Returns false otherwise.<\/p>\n<p>This is a partial ordering. It is possible for two values to be neither\nless, nor greater than, nor equal to, another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.OffsetBase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/operator_greater_equal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;=(OffsetBase other) =&gt; _dx &gt;= other._dx &amp;&amp; _dy &gt;= other._dy;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "OffsetBase",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n<p>The first argument sets the horizontal component, and the second the\nvertical component.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "_dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "_dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/OffsetBase\/OffsetBase.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OffsetBase(this._dx, this._dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.OffsetBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/OffsetBase\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(${_dx?.toStringAsFixed(1)}, ${_dy?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/OffsetBase\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/OffsetBase\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/OffsetBase\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/OffsetBase\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/OffsetBase\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/OffsetBase\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.OffsetBase",
                    "isConstant": false,
                    "href": "dart-ui\/OffsetBase\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_dx, _dy);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isFinite",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether both components are finite (neither infinite nor NaN).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/OffsetBase\/isInfinite.html\">isInfinite<\/a>, which returns true if either component is equal to\npositive infinity.<\/li><\/ul>",
                    "memberOf": "dart:ui.OffsetBase",
                    "isConstant": false,
                    "href": "dart-ui\/OffsetBase\/isFinite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite =&gt; _dx.isFinite &amp;&amp; _dy.isFinite;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isInfinite",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if either component is <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>, and false if both\nare finite (or negative infinity, or NaN).<\/p>\n<p>This is different than comparing for equality with an instance that has\n<em>both<\/em> components set to <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/OffsetBase\/isFinite.html\">isFinite<\/a>, which is true if both components are finite (and not NaN).<\/li><\/ul>",
                    "memberOf": "dart:ui.OffsetBase",
                    "isConstant": false,
                    "href": "dart-ui\/OffsetBase\/isInfinite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInfinite =&gt; _dx &gt;= double.infinity || _dy &gt;= double.infinity;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "dart:ui.Offset",
                "dart:ui.Size"
            ],
            "realImplementors": [
                "dart:ui.Offset",
                "dart:ui.Size"
            ],
            "cn": [],
            "href": "dart-ui\/OffsetBase-class.html",
            "desc": "<p>Base class for <a href=\"dart-ui\/Size-class.html\">Size<\/a> and <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, which are both ways to describe\na distance as a two-dimensional axis-aligned vector.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "OffsetBase"
        },
        {
            "name": "dart:ui.Paint",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Paint",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Paint",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/Paint\/Paint.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Paint",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Paint\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final StringBuffer result = new StringBuffer();\n  String semicolon = '';\n  result.write('Paint(');\n  if (style == PaintingStyle.stroke) {\n    result.write('$style');\n    if (strokeWidth != 0.0)\n      result.write(' ${strokeWidth.toStringAsFixed(1)}');\n    else\n      result.write(' hairline');\n    if (strokeCap != StrokeCap.butt)\n      result.write(' $strokeCap');\n    if (strokeJoin == StrokeJoin.miter) {\n      if (strokeMiterLimit != _kStrokeMiterLimitDefault)\n        result.write(' $strokeJoin up to ${strokeMiterLimit.toStringAsFixed(1)}');\n    } else {\n      result.write(' $strokeJoin');\n    }\n    semicolon = '; ';\n  }\n  if (isAntiAlias != true) {\n    result.write('${semicolon}antialias off');\n    semicolon = '; ';\n  }\n  if (color != const Color(_kColorDefault)) {\n    if (color != null)\n      result.write('$semicolon$color');\n    else\n      result.write('${semicolon}no color');\n    semicolon = '; ';\n  }\n  if (blendMode.index != _kBlendModeDefault) {\n    result.write('$semicolon$blendMode');\n    semicolon = '; ';\n  }\n  if (colorFilter != null) {\n    result.write('${semicolon}colorFilter: $colorFilter');\n    semicolon = '; ';\n  }\n  if (maskFilter != null) {\n    result.write('${semicolon}maskFilter: $maskFilter');\n    semicolon = '; ';\n  }\n  if (filterQuality != FilterQuality.none) {\n    result.write('${semicolon}filterQuality: $filterQuality');\n    semicolon = '; ';\n  }\n  if (shader != null) {\n    result.write('${semicolon}shader: $shader');\n    semicolon = '; ';\n  }\n  if (invertColors)\n    result.write('${semicolon}invert: $invertColors');\n  result.write(')');\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "blendMode",
                    "type": "dart:ui.BlendMode",
                    "types": [],
                    "desc": "<p>A blend mode to apply when a shape is drawn or a layer is composited.<\/p>\n<p>The source colors are from the shape being drawn (e.g. from\n<a href=\"dart-ui\/Canvas\/drawPath.html\">Canvas.drawPath<\/a>) or layer being composited (the graphics that were drawn\nbetween the <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> calls), after applying\nthe <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, if any.<\/p>\n<p>The destination colors are from the background onto which the shape or\nlayer is being composited.<\/p>\n<p>Defaults to <a href=\"dart-ui\/BlendMode-class.html\">BlendMode.srcOver<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a>, which uses its <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>'s <a href=\"dart-ui\/Paint\/blendMode.html\">blendMode<\/a> to composite\nthe layer when <code>restore<\/code> is called.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>, which discusses the user of <code>saveLayer<\/code> with <a href=\"dart-ui\/Paint\/blendMode.html\">blendMode<\/a>.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/blendMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BlendMode get blendMode {\n  final int encoded = _data.getInt32(_kBlendModeOffset, _kFakeHostEndian);\n  return BlendMode.values[encoded ^ _kBlendModeDefault];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color to use when stroking or filling a shape.<\/p>\n<p>Defaults to opaque black.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/style.html\">style<\/a>, which controls whether to stroke or fill (or both).<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, which overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>, which overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a> with more elaborate effects.<\/li>\n<\/ul>\n<p>This color is not used when compositing. To colorize a layer, use\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get color {\n  final int encoded = _data.getInt32(_kColorOffset, _kFakeHostEndian);\n  return new Color(encoded ^ _kColorDefault);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "colorFilter",
                    "type": "dart:ui.ColorFilter",
                    "types": [],
                    "desc": "<p>A color filter to apply when a shape is drawn or when a layer is\ncomposited.<\/p>\n<p>See <a href=\"dart-ui\/ColorFilter-class.html\">ColorFilter<\/a> for details.<\/p>\n<p>When a shape is being drawn, <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a> overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a> and <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/colorFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ColorFilter get colorFilter {\n  switch (_data.getInt32(_kColorFilterOffset, _kFakeHostEndian)) {\n    case ColorFilter._TypeNone:\n      return null;\n    case ColorFilter._TypeMode:\n      return new ColorFilter.mode(\n        new Color(_data.getInt32(_kColorFilterColorOffset, _kFakeHostEndian)),\n        BlendMode.values[_data.getInt32(_kColorFilterBlendModeOffset, _kFakeHostEndian)],\n      );\n    case ColorFilter._TypeMatrix:\n      return new ColorFilter.matrix(_objects[_kColorFilterMatrixIndex]);\n    case ColorFilter._TypeLinearToSrgbGamma:\n      return const ColorFilter.linearToSrgbGamma();\n    case ColorFilter._TypeSrgbToLinearGamma:\n      return const ColorFilter.srgbToLinearGamma();\n  }\n\n  return null;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "filterQuality",
                    "type": "dart:ui.FilterQuality",
                    "types": [],
                    "desc": "<p>Controls the performance vs quality trade-off to use when applying\nfilters, such as <a href=\"dart-ui\/Paint\/maskFilter.html\">maskFilter<\/a>, or when drawing images, as with\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a> or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/FilterQuality-class.html\">FilterQuality.none<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/filterQuality.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(ianh): verify that the image drawing methods actually respect this\nFilterQuality get filterQuality {\n  return FilterQuality.values[_data.getInt32(_kFilterQualityOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "invertColors",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the colors of the image are inverted when drawn.<\/p>\n<p>inverting the colors of an image applies a new color filter that will\nbe composed with any user provided color filters. This is primarily\nused for implementing smart invert on iOS.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/invertColors.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get invertColors {\n  return _data.getInt32(_kInvertColorOffset, _kFakeHostEndian) == 1;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAntiAlias",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to apply anti-aliasing to lines and images drawn on the\ncanvas.<\/p>\n<p>Defaults to true.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/isAntiAlias.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAntiAlias {\n  return _data.getInt32(_kIsAntiAliasOffset, _kFakeHostEndian) == 0;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maskFilter",
                    "type": "dart:ui.MaskFilter",
                    "types": [],
                    "desc": "<p>A mask filter (for example, a blur) to apply to a shape after it has been\ndrawn but before it has been composited into the image.<\/p>\n<p>See <a href=\"dart-ui\/MaskFilter-class.html\">MaskFilter<\/a> for details.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/maskFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MaskFilter get maskFilter {\n  switch (_data.getInt32(_kMaskFilterOffset, _kFakeHostEndian)) {\n    case MaskFilter._TypeNone:\n      return null;\n    case MaskFilter._TypeBlur:\n      return new MaskFilter.blur(\n        BlurStyle.values[_data.getInt32(_kMaskFilterBlurStyleOffset, _kFakeHostEndian)],\n        _data.getFloat32(_kMaskFilterSigmaOffset, _kFakeHostEndian),\n      );\n  }\n  return null;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shader",
                    "type": "dart:ui.Shader",
                    "types": [],
                    "desc": "<p>The shader to use when stroking or filling a shape.<\/p>\n<p>When this is null, the <a href=\"dart-ui\/Paint\/color.html\">color<\/a> is used instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Gradient-class.html\">Gradient<\/a>, a shader that paints a color gradient.<\/li>\n<li>\n<a href=\"dart-ui\/ImageShader-class.html\">ImageShader<\/a>, a shader that tiles an <a href=\"dart-ui\/Image-class.html\">Image<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, which overrides <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/color.html\">color<\/a>, which is used if <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a> and <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a> are null.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/shader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Shader get shader {\n  if (_objects == null)\n    return null;\n  return _objects[_kShaderIndex];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strokeCap",
                    "type": "dart:ui.StrokeCap",
                    "types": [],
                    "desc": "<p>The kind of finish to place on the end of lines drawn when\n<a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/StrokeCap-class.html\">StrokeCap.butt<\/a>, i.e. no caps.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/strokeCap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrokeCap get strokeCap {\n  return StrokeCap.values[_data.getInt32(_kStrokeCapOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strokeJoin",
                    "type": "dart:ui.StrokeJoin",
                    "types": [],
                    "desc": "<p>The kind of finish to place on the joins between segments.<\/p>\n<p>This applies to paths drawn when <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>,\nIt does not apply to points drawn as lines with <a href=\"dart-ui\/Canvas\/drawPoints.html\">Canvas.drawPoints<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a>, i.e. sharp corners.<\/p>\n<p>Some examples of joins:<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_4_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/round_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/bevel_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>The centers of the line segments are colored in the diagrams above to\nhighlight the joins, but in normal usage the join is the same color as the\nline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeMiterLimit.html\">strokeMiterLimit<\/a> to control when miters are replaced by bevels when\nthis is set to <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/strokeCap.html\">strokeCap<\/a> to control what is drawn at the ends of the stroke.<\/li>\n<li>\n<a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin<\/a> for the definitive list of stroke joins.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/strokeJoin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrokeJoin get strokeJoin {\n  return StrokeJoin.values[_data.getInt32(_kStrokeJoinOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strokeMiterLimit",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The limit for miters to be drawn on segments when the join is set to\n<a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a> and the <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>. If\nthis limit is exceeded, then a <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.bevel<\/a> join will be drawn\ninstead. This may cause some 'popping' of the corners of a path if the\nangle between line segments is animated, as seen in the diagrams below.<\/p>\n<p>This limit is expressed as a limit on the length of the miter.<\/p>\n<p>Defaults to 4.0.  Using zero as a limit will cause a <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.bevel<\/a>\njoin to be used all the time.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_0_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_4_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_6_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>The centers of the line segments are colored in the diagrams above to\nhighlight the joins, but in normal usage the join is the same color as the\nline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeJoin.html\">strokeJoin<\/a> to control the kind of finish to place on the joins\nbetween segments.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/strokeCap.html\">strokeCap<\/a> to control what is drawn at the ends of the stroke.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/strokeMiterLimit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get strokeMiterLimit {\n  return _data.getFloat32(_kStrokeMiterLimitOffset, _kFakeHostEndian);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strokeWidth",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>How wide to make edges drawn when <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to\n<a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>. The width is given in logical pixels measured in\nthe direction orthogonal to the direction of the path.<\/p>\n<p>Defaults to 0.0, which correspond to a hairline width.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/strokeWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get strokeWidth {\n  return _data.getFloat32(_kStrokeWidthOffset, _kFakeHostEndian);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "dart:ui.PaintingStyle",
                    "types": [],
                    "desc": "<p>Whether to paint inside shapes, the edges of shapes, or both.<\/p>\n<p>Defaults to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.fill<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Paint",
                    "isConstant": false,
                    "href": "dart-ui\/Paint\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PaintingStyle get style {\n  return PaintingStyle.values[_data.getInt32(_kStyleOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Paint-class.html",
            "desc": "<p>A description of the style to use when drawing on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>Most APIs on <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> take a <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object to describe the style\nto use for that operation.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Paint"
        },
        {
            "type": "",
            "name": "dart:ui.PaintingStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PaintingStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PaintingStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PaintingStyle-class.html",
            "desc": "<p>Strategies for painting shapes and paths on a canvas.<\/p>\n<p>See <a href=\"dart-ui\/Paint\/style.html\">Paint.style<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PaintingStyle"
        },
        {
            "name": "dart:ui.Paragraph",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "getBoxesForRange",
                    "type": "dart:core.List<dart:ui.TextBox>",
                    "desc": "<p>Returns a list of text boxes that enclose the given text range.<\/p>\n<p>The <code>boxHeightStyle<\/code> and <code>boxWidthStyle<\/code> parameters allow customization\nof how the boxes are bound vertically and horizontally. Both style\nparameters default to the tight option, which will provide close-fitting\nboxes and will not account for any line spacing.<\/p>\n<p>The <code>boxHeightStyle<\/code> and <code>boxWidthStyle<\/code> parameters must not be null.<\/p>\n<p>See <a href=\"dart-ui\/BoxHeightStyle-class.html\">BoxHeightStyle<\/a> and <a href=\"dart-ui\/BoxWidthStyle-class.html\">BoxWidthStyle<\/a> for full descriptions of each option.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Paragraph",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "boxHeightStyle",
                            "type": "dart:ui.BoxHeightStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "boxWidthStyle",
                            "type": "dart:ui.BoxWidthStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Paragraph\/getBoxesForRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;TextBox&gt; getBoxesForRange(int start, int end, {BoxHeightStyle boxHeightStyle = BoxHeightStyle.tight, BoxWidthStyle boxWidthStyle = BoxWidthStyle.tight}) {\n  assert(boxHeightStyle != null);\n  assert(boxWidthStyle != null);\n  return _getBoxesForRange(start, end, boxHeightStyle.index, boxWidthStyle.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.TextBox"
                    ]
                },
                {
                    "name": "getPositionForOffset",
                    "type": "dart:ui.TextPosition",
                    "desc": "<p>Returns the text position closest to the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Paragraph",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Paragraph\/getPositionForOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForOffset(Offset offset) {\n  final List&lt;int&gt; encoded = _getPositionForOffset(offset.dx, offset.dy);\n  return new TextPosition(offset: encoded[0], affinity: TextAffinity.values[encoded[1]]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getWordBoundary",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Returns the <code>start, end<\/code> of the word at the given offset. Characters not\npart of a word, such as spaces, symbols, and punctuation, have word breaks\non both sides. In such cases, this method will return <code>offset, offset+1<\/code>.\nWord boundaries are defined more precisely in Unicode Standard Annex #29\n<a href=\"http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries\">http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries<\/a><\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Paragraph",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Paragraph\/getWordBoundary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; getWordBoundary(int offset) native 'Paragraph_getWordBoundary';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "layout",
                    "type": "",
                    "desc": "<p>Computes the size and position of each glyph in the paragraph.<\/p>\n<p>The <a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> control how wide the text is allowed to be.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Paragraph",
                    "sig": "",
                    "params": [
                        {
                            "name": "constraints",
                            "type": "dart:ui.ParagraphConstraints",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Paragraph\/layout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void layout(ParagraphConstraints constraints) =&gt; _layout(constraints.width);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "alphabeticBaseline",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the top of the paragraph to the alphabetic\nbaseline of the first line, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/alphabeticBaseline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get alphabeticBaseline native 'Paragraph_alphabeticBaseline';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "didExceedMaxLines",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>True if there is more vertical content, but the text was truncated, either\nbecause we reached <code>maxLines<\/code> lines of text or because the <code>maxLines<\/code> was\nnull, <code>ellipsis<\/code> was not null, and one of the lines exceeded the width\nconstraint.<\/p>\n<p>See the discussion of the <code>maxLines<\/code> and <code>ellipsis<\/code> arguments at <a href=\"dart-ui\/ParagraphStyle\/ParagraphStyle.html\">new\nParagraphStyle<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/didExceedMaxLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get didExceedMaxLines native 'Paragraph_didExceedMaxLines';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The amount of vertical space this paragraph occupies.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height native 'Paragraph_height';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ideographicBaseline",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the top of the paragraph to the ideographic\nbaseline of the first line, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/ideographicBaseline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get ideographicBaseline native 'Paragraph_ideographicBaseline';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxIntrinsicWidth",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Returns the smallest width beyond which increasing the width never\ndecreases the height.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/maxIntrinsicWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxIntrinsicWidth native 'Paragraph_maxIntrinsicWidth';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minIntrinsicWidth",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The minimum width that this paragraph could be without failing to paint\nits contents within itself.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/minIntrinsicWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minIntrinsicWidth native 'Paragraph_minIntrinsicWidth';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The amount of horizontal space this paragraph occupies.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "dart:ui.Paragraph",
                    "isConstant": false,
                    "href": "dart-ui\/Paragraph\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width native 'Paragraph_width';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Paragraph-class.html",
            "desc": "<p>A paragraph of text.<\/p>\n<p>A paragraph retains the size and position of each glyph in the text and can\nbe efficiently resized and painted.<\/p>\n<p>To create a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> object, use a <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>.<\/p>\n<p>Paragraphs can be displayed on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> using the <a href=\"dart-ui\/Canvas\/drawParagraph.html\">Canvas.drawParagraph<\/a>\nmethod.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Paragraph"
        },
        {
            "name": "dart:ui.ParagraphBuilder",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "ParagraphBuilder",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a> object, which is used to create a\n<a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "style",
                            "type": "dart:ui.ParagraphStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ParagraphBuilder\/ParagraphBuilder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nParagraphBuilder(ParagraphStyle style) {\n  List&lt;String&gt; strutFontFamilies;\n  if (style._strutStyle != null) {\n    strutFontFamilies = &lt;String&gt;[];\n    if (style._strutStyle._fontFamily != null)\n      strutFontFamilies.add(style._strutStyle._fontFamily);\n    if (style._strutStyle._fontFamilyFallback != null)\n      strutFontFamilies.addAll(style._strutStyle._fontFamilyFallback);\n  }\n  _constructor(\n    style._encoded,\n    style._strutStyle?._encoded,\n    style._fontFamily,\n    strutFontFamilies,\n    style._fontSize,\n    style._height,\n    style._ellipsis,\n    _encodeLocale(style._locale)\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addText",
                    "type": "",
                    "desc": "<p>Adds the given text to the paragraph.<\/p>\n<p>The text will be styled according to the current stack of text styles.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphBuilder\/addText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addText(String text) {\n  final String error = _addText(text);\n  if (error != null)\n    throw new ArgumentError(error);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "build",
                    "type": "dart:ui.Paragraph",
                    "desc": "<p>Applies the given paragraph style and returns a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> containing the\nadded text and associated styling.<\/p>\n<p>After calling this function, the paragraph builder object is invalid and\ncannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphBuilder\/build.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Paragraph build() native 'ParagraphBuilder_build';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pop",
                    "type": "",
                    "desc": "<p>Ends the effect of the most recent call to <a href=\"dart-ui\/ParagraphBuilder\/pushStyle.html\">pushStyle<\/a>.<\/p>\n<p>Internally, the paragraph builder maintains a stack of text styles. Text\nadded to the paragraph is affected by all the styles in the stack. Calling\n<a href=\"dart-ui\/ParagraphBuilder\/pop.html\">pop<\/a> removes the topmost style in the stack, leaving the remaining styles\nin effect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphBuilder\/pop.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pop() native 'ParagraphBuilder_pop';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pushStyle",
                    "type": "",
                    "desc": "<p>Applies the given style to the added text until <a href=\"dart-ui\/ParagraphBuilder\/pop.html\">pop<\/a> is called.<\/p>\n<p>See <a href=\"dart-ui\/ParagraphBuilder\/pop.html\">pop<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "style",
                            "type": "dart:ui.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphBuilder\/pushStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pushStyle(TextStyle style) {\n  final List&lt;String&gt; fullFontFamilies = &lt;String&gt;[];\n  if (style._fontFamily != null)\n    fullFontFamilies.add(style._fontFamily);\n  if (style._fontFamilyFallback != null)\n    fullFontFamilies.addAll(style._fontFamilyFallback);\n  _pushStyle(\n    style._encoded,\n    fullFontFamilies,\n    style._fontSize,\n    style._letterSpacing,\n    style._wordSpacing,\n    style._height,\n    style._decorationThickness,\n    _encodeLocale(style._locale),\n    style._background?._objects,\n    style._background?._data,\n    style._foreground?._objects,\n    style._foreground?._data,\n    Shadow._encodeShadows(style._shadows)\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ParagraphBuilder-class.html",
            "desc": "<p>Builds a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> containing text with the given styling information.<\/p>\n<p>To set the paragraph's alignment, truncation, and ellipsizing behavior, pass\nan appropriately-configured <a href=\"dart-ui\/ParagraphStyle-class.html\">ParagraphStyle<\/a> object to the <a href=\"dart-ui\/ParagraphBuilder\/ParagraphBuilder.html\">new\nParagraphBuilder<\/a> constructor.<\/p>\n<p>Then, call combinations of <a href=\"dart-ui\/ParagraphBuilder\/pushStyle.html\">pushStyle<\/a>, <a href=\"dart-ui\/ParagraphBuilder\/addText.html\">addText<\/a>, and <a href=\"dart-ui\/ParagraphBuilder\/pop.html\">pop<\/a> to add styled\ntext to the object.<\/p>\n<p>Finally, call <a href=\"dart-ui\/ParagraphBuilder\/build.html\">build<\/a> to obtain the constructed <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> object. After\nthis point, the builder is no longer usable.<\/p>\n<p>After constructing a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a>, call <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> on it and then\npaint it with <a href=\"dart-ui\/Canvas\/drawParagraph.html\">Canvas.drawParagraph<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ParagraphBuilder"
        },
        {
            "name": "dart:ui.ParagraphConstraints",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/ParagraphConstraints\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphConstraints",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphConstraints\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ParagraphConstraints typedOther = other;\n  return typedOther.width == width;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ParagraphConstraints",
                    "type": "",
                    "desc": "<p>Creates constraints for laying out a paragraph.<\/p>\n<p>The <code>width<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphConstraints",
                    "sig": "",
                    "params": [
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ParagraphConstraints\/ParagraphConstraints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ParagraphConstraints({\n  this.width,\n}) : assert(width != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphConstraints",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphConstraints\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(width: $width)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/ParagraphConstraints\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.ParagraphConstraints",
                    "isConstant": false,
                    "href": "dart-ui\/ParagraphConstraints\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; width.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The width the paragraph should use whey computing the positions of glyphs.<\/p>\n<p>If possible, the paragraph will select a soft line break prior to reaching\nthis width. If no soft line break is available, the paragraph will select\na hard line break prior to reaching this width. If that would force a line\nbreak without any characters having been placed (i.e. if the next\ncharacter to be laid out does not fit within the given width constraint)\nthen the next character is allowed to overflow the width constraint and a\nforced line break is placed after it (even if an explicit line break\nfollows).<\/p>\n<p>The width influences how ellipses are applied. See the discussion at <a href=\"dart-ui\/ParagraphStyle\/ParagraphStyle.html\">new\nParagraphStyle<\/a> for more details.<\/p>\n<p>This width is also used to position glyphs according to the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign<\/a>\nalignment described in the <a href=\"dart-ui\/ParagraphStyle-class.html\">ParagraphStyle<\/a> used when building the\n<a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> with a <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.ParagraphConstraints",
                    "isConstant": false,
                    "href": "dart-ui\/ParagraphConstraints\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ParagraphConstraints-class.html",
            "desc": "<p>Layout constraints for <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> objects.<\/p>\n<p>Instances of this class are typically used with <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a>.<\/p>\n<p>The only constraint that can be specified is the <a href=\"dart-ui\/ParagraphConstraints\/width.html\">width<\/a>. See the discussion\nat <a href=\"dart-ui\/ParagraphConstraints\/width.html\">width<\/a> for more details.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ParagraphConstraints"
        },
        {
            "name": "dart:ui.ParagraphStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/ParagraphStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ParagraphStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily ||\n      _fontSize != typedOther._fontSize ||\n      _height != typedOther._height ||\n      _strutStyle != typedOther._strutStyle ||\n      _ellipsis != typedOther._ellipsis ||\n      _locale != typedOther._locale)\n   return false;\n  for (int index = 0; index &lt; _encoded.length; index += 1) {\n    if (_encoded[index] != typedOther._encoded[index])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ParagraphStyle",
                    "type": "",
                    "desc": "<p>Creates a new ParagraphStyle object.<\/p>\n<ul>\n<li>\n<p><code>textAlign<\/code>: The alignment of the text within the lines of the\nparagraph. If the last line is ellipsized (see <code>ellipsis<\/code> below), the\nalignment is applied to that line after it has been truncated but before\nthe ellipsis has been added.<\/p>\n<\/li>\n<li>\n<p><code>textDirection<\/code>: The directionality of the text, left-to-right (e.g.\nNorwegian) or right-to-left (e.g. Hebrew). This controls the overall\ndirectionality of the paragraph, as well as the meaning of\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a> in the <code>textAlign<\/code> field.<\/p>\n<\/li>\n<li>\n<p><code>maxLines<\/code>: The maximum number of lines painted. Lines beyond this\nnumber are silently dropped. For example, if <code>maxLines<\/code> is 1, then only\none line is rendered. If <code>maxLines<\/code> is null, but <code>ellipsis<\/code> is not null,\nthen lines after the first one that overflows the width constraints are\ndropped. The width constraints are those set in the\n<a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> object passed to the <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> method.<\/p>\n<\/li>\n<li>\n<p><code>fontFamily<\/code>: The name of the font family to apply when painting the text,\nin the absence of a <code>textStyle<\/code> being attached to the span.<\/p>\n<\/li>\n<li>\n<p><code>fontSize<\/code>: The fallback size of glyphs (in logical pixels) to\nuse when painting the text. This is used when there is no <a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>height<\/code>: The height of the spans as a multiplier of the font size. The\nfallback height to use when no height is provided in through\n<a href=\"painting\/TextStyle\/height.html\">TextStyle.height<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>fontWeight<\/code>: The typeface thickness to use when painting the text\n(e.g., bold).<\/p>\n<\/li>\n<li>\n<p><code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g.,\nitalics).<\/p>\n<\/li>\n<li>\n<p><code>strutStyle<\/code>: The properties of the strut. Strut defines a set of minimum\nvertical line height related metrics and can be used to obtain more\nadvanced line spacing behavior.<\/p>\n<\/li>\n<li>\n<p><code>ellipsis<\/code>: String used to ellipsize overflowing text. If <code>maxLines<\/code> is\nnot null, then the <code>ellipsis<\/code>, if any, is applied to the last rendered\nline, if that line overflows the width constraints. If <code>maxLines<\/code> is\nnull, then the <code>ellipsis<\/code> is applied to the first line that overflows\nthe width constraints, and subsequent lines are dropped. The width\nconstraints are those set in the <a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> object passed to\nthe <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a> method. The empty string and the null value are\nconsidered equivalent and turn off this behavior.<\/p>\n<\/li>\n<li>\n<p><code>locale<\/code>: The locale used to select region-specific glyphs.<\/p>\n<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "textAlign",
                            "type": "dart:ui.TextAlign",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "maxLines",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strutStyle",
                            "type": "dart:ui.StrutStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ellipsis",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/ParagraphStyle\/ParagraphStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/   See: https:\/\/github.com\/flutter\/flutter\/issues\/9819\n\/\/\/\n\/\/\/ * `textDirection`: The directionality of the text, left-to-right (e.g.\n\/\/\/   Norwegian) or right-to-left (e.g. Hebrew). This controls the overall\n\/\/\/   directionality of the paragraph, as well as the meaning of\n\/\/\/   [TextAlign.start] and [TextAlign.end] in the `textAlign` field.\n\/\/\/\n\/\/\/ * `maxLines`: The maximum number of lines painted. Lines beyond this\n\/\/\/   number are silently dropped. For example, if `maxLines` is 1, then only\n\/\/\/   one line is rendered. If `maxLines` is null, but `ellipsis` is not null,\n\/\/\/   then lines after the first one that overflows the width constraints are\n\/\/\/   dropped. The width constraints are those set in the\n\/\/\/   [ParagraphConstraints] object passed to the [Paragraph.layout] method.\n\/\/\/\n\/\/\/ * `fontFamily`: The name of the font family to apply when painting the text,\n\/\/\/   in the absence of a `textStyle` being attached to the span.\n\/\/\/\n\/\/\/ * `fontSize`: The fallback size of glyphs (in logical pixels) to\n\/\/\/   use when painting the text. This is used when there is no [TextStyle].\n\/\/\/\n\/\/\/ * `height`: The height of the spans as a multiplier of the font size. The\n\/\/\/   fallback height to use when no height is provided in through\n\/\/\/   [TextStyle.height].\n\/\/\/\n\/\/\/ * `fontWeight`: The typeface thickness to use when painting the text\n\/\/\/   (e.g., bold).\n\/\/\/\n\/\/\/ * `fontStyle`: The typeface variant to use when drawing the letters (e.g.,\n\/\/\/   italics).\n\/\/\/\n\/\/\/ * `strutStyle`: The properties of the strut. Strut defines a set of minimum\n\/\/\/   vertical line height related metrics and can be used to obtain more\n\/\/\/   advanced line spacing behavior.\n\/\/\/\n\/\/\/ * `ellipsis`: String used to ellipsize overflowing text. If `maxLines` is\n\/\/\/   not null, then the `ellipsis`, if any, is applied to the last rendered\n\/\/\/   line, if that line overflows the width constraints. If `maxLines` is\n\/\/\/   null, then the `ellipsis` is applied to the first line that overflows\n\/\/\/   the width constraints, and subsequent lines are dropped. The width\n\/\/\/   constraints are those set in the [ParagraphConstraints] object passed to\n\/\/\/   the [Paragraph.layout] method. The empty string and the null value are\n\/\/\/   considered equivalent and turn off this behavior.\n\/\/\/\n\/\/\/ * `locale`: The locale used to select region-specific glyphs.\nParagraphStyle({\n  TextAlign textAlign,\n  TextDirection textDirection,\n  int maxLines,\n  String fontFamily,\n  double fontSize,\n  double height,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  StrutStyle strutStyle,\n  String ellipsis,\n  Locale locale,\n}) : _encoded = _encodeParagraphStyle(\n       textAlign,\n       textDirection,\n       maxLines,\n       fontFamily,\n       fontSize,\n       height,\n       fontWeight,\n       fontStyle,\n       strutStyle,\n       ellipsis,\n       locale,\n     ),\n     _fontFamily = fontFamily,\n     _fontSize = fontSize,\n     _height = height,\n     _strutStyle = strutStyle,\n     _ellipsis = ellipsis,\n     _locale = locale;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.ParagraphStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/ParagraphStyle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType('\n           'textAlign: ${     _encoded[0] &amp; 0x002 == 0x002 ? TextAlign.values[_encoded[1]]     : \"unspecified\"}, '\n           'textDirection: ${ _encoded[0] &amp; 0x004 == 0x004 ? TextDirection.values[_encoded[2]] : \"unspecified\"}, '\n           'fontWeight: ${    _encoded[0] &amp; 0x008 == 0x008 ? FontWeight.values[_encoded[3]]    : \"unspecified\"}, '\n           'fontStyle: ${     _encoded[0] &amp; 0x010 == 0x010 ? FontStyle.values[_encoded[4]]     : \"unspecified\"}, '\n           'maxLines: ${      _encoded[0] &amp; 0x020 == 0x020 ? _encoded[5]                       : \"unspecified\"}, '\n           'fontFamily: ${    _encoded[0] &amp; 0x040 == 0x040 ? _fontFamily                       : \"unspecified\"}, '\n           'fontSize: ${      _encoded[0] &amp; 0x080 == 0x080 ? _fontSize                         : \"unspecified\"}, '\n           'height: ${        _encoded[0] &amp; 0x100 == 0x100 ? \"${_height}x\"                     : \"unspecified\"}, '\n           'ellipsis: ${      _encoded[0] &amp; 0x200 == 0x200 ? \"\\\"$_ellipsis\\\"\"                  : \"unspecified\"}, '\n           'locale: ${        _encoded[0] &amp; 0x400 == 0x400 ? _locale                           : \"unspecified\"}'\n         ')';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/ParagraphStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/ParagraphStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.ParagraphStyle",
                    "isConstant": false,
                    "href": "dart-ui\/ParagraphStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded), _fontFamily, _fontSize, _height, _ellipsis, _locale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/ParagraphStyle-class.html",
            "desc": "<p>An opaque object that determines the configuration used by\n<a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a> to position lines within a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> of text.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ParagraphStyle"
        },
        {
            "name": "dart:ui.Path",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Path",
                    "type": "",
                    "desc": "<p>Create a new empty <a href=\"dart-ui\/Path-class.html\">Path<\/a> object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/Path\/Path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nPath() { _constructor(); }<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addArc",
                    "type": "",
                    "desc": "<p>Adds a new sub-path with one arc segment that consists of the arc\nthat follows the edge of the oval bounded by the given\nrectangle, from startAngle radians around the oval up to\nstartAngle + sweepAngle radians around the oval, with zero\nradians being the point on the right hand side of the oval that\ncrosses the horizontal line that intersects the center of the\nrectangle and with positive angles going clockwise around the\noval.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "oval",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sweepAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addArc.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addArc(Rect oval, double startAngle, double sweepAngle) {\n  assert(_rectIsValid(oval));\n  _addArc(oval.left, oval.top, oval.right, oval.bottom, startAngle, sweepAngle);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addOval",
                    "type": "",
                    "desc": "<p>Adds a new sub-path that consists of a curve that forms the\nellipse that fills the given rectangle.<\/p>\n<p>To add a circle, pass an appropriate rectangle as <code>oval<\/code>. <a href=\"dart-ui\/Rect\/Rect.fromCircle.html\">Rect.fromCircle<\/a>\ncan be used to easily describe the circle's center <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and radius.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "oval",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addOval.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addOval(Rect oval) {\n  assert(_rectIsValid(oval));\n  _addOval(oval.left, oval.top, oval.right, oval.bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addPath",
                    "type": "",
                    "desc": "<p>Adds a new sub-path that consists of the given <code>path<\/code> offset by the given\n<code>offset<\/code>.<\/p>\n<p>If <code>matrix4<\/code> is specified, the path will be transformed by this matrix\nafter the matrix is translated by the given offset. The matrix is a 4x4\nmatrix stored in column major order.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPath(Path path, Offset offset, {Float64List matrix4}) {\n  assert(path != null); \/\/ path is checked on the engine side\n  assert(_offsetIsValid(offset));\n  if (matrix4 != null) {\n    assert(_matrix4IsValid(matrix4));\n    _addPathWithMatrix(path, offset.dx, offset.dy, matrix4);\n  } else {\n    _addPath(path, offset.dx, offset.dy);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addPolygon",
                    "type": "",
                    "desc": "<p>Adds a new sub-path with a sequence of line segments that connect the given\npoints.<\/p>\n<p>If <code>close<\/code> is true, a final line segment will be added that connects the\nlast point to the first point.<\/p>\n<p>The <code>points<\/code> argument is interpreted as offsets from the origin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "points",
                            "type": "dart:core.List<dart:ui.Offset>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Offset"
                            ]
                        },
                        {
                            "name": "close",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addPolygon.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPolygon(List&lt;Offset&gt; points, bool close) {\n  assert(points != null);\n  _addPolygon(_encodePointList(points), close);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addRRect",
                    "type": "",
                    "desc": "<p>Adds a new sub-path that consists of the straight lines and\ncurves needed to form the rounded rectangle described by the\nargument.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "rrect",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addRRect(RRect rrect) {\n  assert(_rrectIsValid(rrect));\n  _addRRect(rrect._value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addRect",
                    "type": "",
                    "desc": "<p>Adds a new sub-path that consists of four lines that outline the\ngiven rectangle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/addRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addRect(Rect rect) {\n  assert(_rectIsValid(rect));\n  _addRect(rect.left, rect.top, rect.right, rect.bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "arcTo",
                    "type": "",
                    "desc": "<p>If the <code>forceMoveTo<\/code> argument is false, adds a straight line\nsegment and an arc segment.<\/p>\n<p>If the <code>forceMoveTo<\/code> argument is true, starts a new sub-path\nconsisting of an arc segment.<\/p>\n<p>In either case, the arc segment consists of the arc that follows\nthe edge of the oval bounded by the given rectangle, from\nstartAngle radians around the oval up to startAngle + sweepAngle\nradians around the oval, with zero radians being the point on\nthe right hand side of the oval that crosses the horizontal line\nthat intersects the center of the rectangle and with positive\nangles going clockwise around the oval.<\/p>\n<p>The line segment added if <code>forceMoveTo<\/code> is false starts at the\ncurrent point and ends at the start of the arc.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sweepAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "forceMoveTo",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/arcTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void arcTo(Rect rect, double startAngle, double sweepAngle, bool forceMoveTo) {\n  assert(_rectIsValid(rect));\n  _arcTo(rect.left, rect.top, rect.right, rect.bottom, startAngle, sweepAngle, forceMoveTo);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "arcToPoint",
                    "type": "",
                    "desc": "<p>Appends up to four conic curves weighted to describe an oval of <code>radius<\/code>\nand rotated by <code>rotation<\/code>.<\/p>\n<p>The first curve begins from the last point in the path and the last ends\nat <code>arcEnd<\/code>. The curves follow a path in a direction determined by\n<code>clockwise<\/code> and <code>largeArc<\/code> in such a way that the sweep angle\nis always less than 360 degrees.<\/p>\n<p>A simple line is appended if either either radii are zero or the last\npoint in the path is <code>arcEnd<\/code>. The radii are scaled to fit the last path\npoint if both are greater than zero but too small to describe an arc.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "arcEnd",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rotation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "largeArc",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clockwise",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/arcToPoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void arcToPoint(Offset arcEnd, {\n  Radius radius: Radius.zero,\n  double rotation: 0.0,\n  bool largeArc: false,\n  bool clockwise: true,\n  }) {\n  assert(_offsetIsValid(arcEnd));\n  assert(_radiusIsValid(radius));\n  _arcToPoint(arcEnd.dx, arcEnd.dy, radius.x, radius.y, rotation,\n              largeArc, clockwise);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Closes the last sub-path, as if a straight line had been drawn\nfrom the current point to the first point of the sub-path.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close() native 'Path_close';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "combine",
                    "type": "dart:ui.Path",
                    "desc": "<p>Combines the two paths according to the manner specified by the given\n<code>operation<\/code>.<\/p>\n<p>The resulting path will be constructed from non-overlapping contours. The\ncurve order is reduced where possible so that cubics may be turned into\nquadratics, and quadratics maybe turned into lines.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "operation",
                            "type": "dart:ui.PathOperation",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path1",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/combine.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Path combine(PathOperation operation, Path path1, Path path2) {\n  assert(path1 != null);\n  assert(path2 != null);\n  final Path path = new Path();\n  if (path._op(path1, path2, operation.index)) {\n    return path;\n  }\n  throw new StateError('Path.combine() failed.  This may be due an invalid path; in particular, check for NaN values.');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "computeMetrics",
                    "type": "dart:ui.PathMetrics",
                    "desc": "<p>Creates a <a href=\"dart-ui\/PathMetrics-class.html\">PathMetrics<\/a> object for this path.<\/p>\n<p>If <code>forceClosed<\/code> is set to true, the contours of the path will be measured\nas if they had been closed, even if they were not explicitly closed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "forceClosed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/computeMetrics.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathMetrics computeMetrics({bool forceClosed: false}) {\n  return new PathMetrics._(this, forceClosed);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "conicTo",
                    "type": "",
                    "desc": "<p>Adds a bezier segment that curves from the current point to the\ngiven point (x2,y2), using the control points (x1,y1) and the\nweight w. If the weight is greater than 1, then the curve is a\nhyperbola; if the weight equals 1, it's a parabola; and if it is\nless than 1, it is an ellipse.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "w",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/conicTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void conicTo(double x1, double y1, double x2, double y2, double w) native 'Path_conicTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests to see if the given point is within the path. (That is, whether the\npoint would be in the visible portion of the path if the path was used\nwith <a href=\"dart-ui\/Canvas\/clipPath.html\">Canvas.clipPath<\/a>.)<\/p>\n<p>The <code>point<\/code> argument is interpreted as an offset from the origin.<\/p>\n<p>Returns true if the point is in the path, and false otherwise.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset point) {\n  assert(_offsetIsValid(point));\n  return _contains(point.dx, point.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cubicTo",
                    "type": "",
                    "desc": "<p>Adds a cubic bezier segment that curves from the current point\nto the given point (x3,y3), using the control points (x1,y1) and\n(x2,y2).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x3",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y3",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/cubicTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cubicTo(double x1, double y1, double x2, double y2, double x3, double y3) native 'Path_cubicTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "extendWithPath",
                    "type": "",
                    "desc": "<p>Adds the given path to this path by extending the current segment of this\npath with the the first segment of the given path.<\/p>\n<p>If <code>matrix4<\/code> is specified, the path will be transformed by this matrix\nafter the matrix is translated by the given <code>offset<\/code>.  The matrix is a 4x4\nmatrix stored in column major order.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/extendWithPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void extendWithPath(Path path, Offset offset, {Float64List matrix4}) {\n  assert(path != null); \/\/ path is checked on the engine side\n  assert(_offsetIsValid(offset));\n  if (matrix4 != null) {\n    assert(_matrix4IsValid(matrix4));\n    _extendWithPathAndMatrix(path, offset.dx, offset.dy, matrix4);\n  } else {\n    _extendWithPath(path, offset.dx, offset.dy);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "Path.from",
                    "type": "",
                    "desc": "<p>Creates a copy of another <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/p>\n<p>This copy is fast and does not require additional memory unless either\nthe <code>source<\/code> path or the path returned by this constructor are modified.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Path\/Path.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Path.from(Path source) {\n  return source._clone();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getBounds",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Computes the bounding rectangle for this path.<\/p>\n<p>A path containing only axis-aligned points on the same straight line will\nhave no area, and therefore <code>Rect.isEmpty<\/code> will return true for such a\npath. Consider checking <code>rect.width + rect.height &gt; 0.0<\/code> instead, or\nusing the <a href=\"dart-ui\/Path\/computeMetrics.html\">computeMetrics<\/a> API to check the path length.<\/p>\n<p>For many more elaborate paths, the bounds may be inaccurate.  For example,\nwhen a path contains a circle, the points used to compute the bounds are\nthe circle's implied control points, which form a square around the circle;\nif the circle has a transformation applied using <a href=\"dart-ui\/Path\/transform.html\">transform<\/a> then that\nsquare is rotated, and the (axis-aligned, non-rotated) bounding box\ntherefore ends up grossly overestimating the actual area covered by the\ncircle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/getBounds.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ see https:\/\/skia.org\/user\/api\/SkPath_Reference#SkPath_getBounds\nRect getBounds() {\n  final Float32List rect = _getBounds();\n  return new Rect.fromLTRB(rect[0], rect[1], rect[2], rect[3]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lineTo",
                    "type": "",
                    "desc": "<p>Adds a straight line segment from the current point to the given\npoint.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/lineTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void lineTo(double x, double y) native 'Path_lineTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "moveTo",
                    "type": "",
                    "desc": "<p>Starts a new sub-path at the given coordinate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/moveTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void moveTo(double x, double y) native 'Path_moveTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "quadraticBezierTo",
                    "type": "",
                    "desc": "<p>Adds a quadratic bezier segment that curves from the current\npoint to the given point (x2,y2), using the control point\n(x1,y1).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/quadraticBezierTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void quadraticBezierTo(double x1, double y1, double x2, double y2) native 'Path_quadraticBezierTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeArcToPoint",
                    "type": "",
                    "desc": "<p>Appends up to four conic curves weighted to describe an oval of <code>radius<\/code>\nand rotated by <code>rotation<\/code>.<\/p>\n<p>The last path point is described by (px, py).<\/p>\n<p>The first curve begins from the last point in the path and the last ends\nat <code>arcEndDelta.dx + px<\/code> and <code>arcEndDelta.dy + py<\/code>. The curves follow a\npath in a direction determined by <code>clockwise<\/code> and <code>largeArc<\/code>\nin such a way that the sweep angle is always less than 360 degrees.<\/p>\n<p>A simple line is appended if either either radii are zero, or, both\n<code>arcEndDelta.dx<\/code> and <code>arcEndDelta.dy<\/code> are zero. The radii are scaled to\nfit the last path point if both are greater than zero but too small to\ndescribe an arc.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "arcEndDelta",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rotation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "largeArc",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clockwise",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeArcToPoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeArcToPoint(Offset arcEndDelta, {\n  Radius radius: Radius.zero,\n  double rotation: 0.0,\n  bool largeArc: false,\n  bool clockwise: true,\n  }) {\n  assert(_offsetIsValid(arcEndDelta));\n  assert(_radiusIsValid(radius));\n  _relativeArcToPoint(arcEndDelta.dx, arcEndDelta.dy, radius.x, radius.y,\n                      rotation, largeArc, clockwise);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeConicTo",
                    "type": "",
                    "desc": "<p>Adds a bezier segment that curves from the current point to the\npoint at the offset (x2,y2) from the current point, using the\ncontrol point at the offset (x1,y1) from the current point and\nthe weight w. If the weight is greater than 1, then the curve is\na hyperbola; if the weight equals 1, it's a parabola; and if it\nis less than 1, it is an ellipse.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "w",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeConicTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeConicTo(double x1, double y1, double x2, double y2, double w) native 'Path_relativeConicTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeCubicTo",
                    "type": "",
                    "desc": "<p>Adds a cubic bezier segment that curves from the current point\nto the point at the offset (x3,y3) from the current point, using\nthe control points at the offsets (x1,y1) and (x2,y2) from the\ncurrent point.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x3",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y3",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeCubicTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeCubicTo(double x1, double y1, double x2, double y2, double x3, double y3) native 'Path_relativeCubicTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeLineTo",
                    "type": "",
                    "desc": "<p>Adds a straight line segment from the current point to the point\nat the given offset from the current point.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeLineTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeLineTo(double dx, double dy) native 'Path_relativeLineTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeMoveTo",
                    "type": "",
                    "desc": "<p>Starts a new sub-path at the given offset from the current point.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeMoveTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeMoveTo(double dx, double dy) native 'Path_relativeMoveTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "relativeQuadraticBezierTo",
                    "type": "",
                    "desc": "<p>Adds a quadratic bezier segment that curves from the current\npoint to the point at the offset (x2,y2) from the current point,\nusing the control point at the offset (x1,y1) from the current\npoint.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "x1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y1",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y2",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/relativeQuadraticBezierTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void relativeQuadraticBezierTo(double x1, double y1, double x2, double y2) native 'Path_relativeQuadraticBezierTo';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reset",
                    "type": "",
                    "desc": "<p>Clears the <a href=\"dart-ui\/Path-class.html\">Path<\/a> object of all sub-paths, returning it to the\nsame state it had when it was created. The <em>current point<\/em> is\nreset to the origin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/reset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset() native 'Path_reset';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "shift",
                    "type": "dart:ui.Path",
                    "desc": "<p>Returns a copy of the path with all the segments of every\nsub-path translated by the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/shift.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path shift(Offset offset) {\n  assert(_offsetIsValid(offset));\n  return _shift(offset.dx, offset.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "transform",
                    "type": "dart:ui.Path",
                    "desc": "<p>Returns a copy of the path with all the segments of every\nsub-path transformed by the given matrix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Path",
                    "sig": "",
                    "params": [
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Path\/transform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path transform(Float64List matrix4) {\n  assert(_matrix4IsValid(matrix4));\n  return _transform(matrix4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "fillType",
                    "type": "dart:ui.PathFillType",
                    "types": [],
                    "desc": "<p>Determines how the interior of this path is calculated.<\/p>\n<p>Defaults to the non-zero winding rule, <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.nonZero<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Path",
                    "isConstant": false,
                    "href": "dart-ui\/Path\/fillType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PathFillType get fillType =&gt; PathFillType.values[_getFillType()];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "rendering.ShapeBorderClipper"
            ],
            "realImplementors": [
                "rendering.ShapeBorderClipper"
            ],
            "cn": [],
            "href": "dart-ui\/Path-class.html",
            "desc": "<p>A complex, one-dimensional subset of a plane.<\/p>\n<p>A path consists of a number of sub-paths, and a <em>current point<\/em>.<\/p>\n<p>Sub-paths consist of segments of various types, such as lines,\narcs, or beziers. Sub-paths can be open or closed, and can\nself-intersect.<\/p>\n<p>Closed sub-paths enclose a (possibly discontiguous) region of the\nplane based on the current <a href=\"dart-ui\/Path\/fillType.html\">fillType<\/a>.<\/p>\n<p>The <em>current point<\/em> is initially at the origin. After each\noperation adding a segment to a sub-path, the current point is\nupdated to the end of that segment.<\/p>\n<p>Paths can be drawn on canvases using <a href=\"dart-ui\/Canvas\/drawPath.html\">Canvas.drawPath<\/a>, and can\nused to create clip regions using <a href=\"dart-ui\/Canvas\/clipPath.html\">Canvas.clipPath<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Path"
        },
        {
            "type": "",
            "name": "dart:ui.PathFillType",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathFillType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PathFillType\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PathFillType-class.html",
            "desc": "<p>Determines the winding rule that decides how the interior of a <a href=\"dart-ui\/Path-class.html\">Path<\/a> is\ncalculated.<\/p>\n<p>This enum is used by the <a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> property.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PathFillType"
        },
        {
            "name": "dart:ui.PathMetric",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "extractPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Given a start and stop distance, return the intervening segment(s).<\/p>\n<p><code>start<\/code> and <code>end<\/code> are pinned to legal values (0..<a href=\"dart-ui\/PathMetric\/length.html\">length<\/a>)\nReturns null if the segment is 0 length or <code>start<\/code> &gt; <code>stop<\/code>.\nBegin the segment with a moveTo if <code>startWithMoveTo<\/code> is true.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathMetric",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startWithMoveTo",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/PathMetric\/extractPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path extractPath(double start, double end, {bool startWithMoveTo: true}) {\n  return _measure.extractPath(contourIndex, start, end, startWithMoveTo: startWithMoveTo);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getTangentForOffset",
                    "type": "dart:ui.Tangent",
                    "desc": "<p>Computes the position of the current contour at the given offset, and the\nangle of the path at that point.<\/p>\n<p>For example, calling this method with a distance of 1.41 for a line from\n0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees\n(but in radians).<\/p>\n<p>Returns null if the contour has zero <a href=\"dart-ui\/PathMetric\/length.html\">length<\/a>.<\/p>\n<p>The distance is clamped to the <a href=\"dart-ui\/PathMetric\/length.html\">length<\/a> of the current contour.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathMetric",
                    "sig": "",
                    "params": [
                        {
                            "name": "distance",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/PathMetric\/getTangentForOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Tangent getTangentForOffset(double distance) {\n  return _measure.getTangentForOffset(contourIndex, distance);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathMetric",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PathMetric\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType{length: $length, isClosed: $isClosed, contourIndex:$contourIndex}';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "contourIndex",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The zero-based index of the contour.<\/p>\n<p><a href=\"dart-ui\/Path-class.html\">Path<\/a> objects are made up of zero or more contours. The first contour is\ncreated once a drawing command (e.g. <a href=\"dart-ui\/Path\/lineTo.html\">Path.lineTo<\/a>) is issued. A\n<a href=\"dart-ui\/Path\/moveTo.html\">Path.moveTo<\/a> command after a drawing command may create a new contour,\nalthough it may not if optimizations are applied that determine the move\ncommand did not actually result in moving the pen.<\/p>\n<p>This property is only valid with reference to its original iterator and\nthe contours of the path at the time the path's metrics were computed. If\nadditional contours were added or existing contours updated, this metric\nwill be invalid for the current state of the path.<\/p>\n        ",
                    "memberOf": "dart:ui.PathMetric",
                    "isConstant": false,
                    "href": "dart-ui\/PathMetric\/contourIndex.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int contourIndex\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isClosed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the contour is closed.<\/p>\n<p>Returns true if the contour ends with a call to <a href=\"dart-ui\/Path\/close.html\">Path.close<\/a> (which may\nhave been implied when using <a href=\"dart-ui\/Path\/addRect.html\">Path.addRect<\/a>) or if <code>forceClosed<\/code> was\nspecified as true in the call to <a href=\"dart-ui\/Path\/computeMetrics.html\">Path.computeMetrics<\/a>.  Returns false\notherwise.<\/p>\n        ",
                    "memberOf": "dart:ui.PathMetric",
                    "isConstant": false,
                    "href": "dart-ui\/PathMetric\/isClosed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isClosed\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Return the total length of the current contour.<\/p>\n        ",
                    "memberOf": "dart:ui.PathMetric",
                    "isConstant": false,
                    "href": "dart-ui\/PathMetric\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double length\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:ui.PathMetrics"
            ],
            "realImplementors": [
                "dart:ui.PathMetrics"
            ],
            "cn": [],
            "href": "dart-ui\/PathMetric-class.html",
            "desc": "<p>Utilities for measuring a <a href=\"dart-ui\/Path-class.html\">Path<\/a> and extracting sub-paths.<\/p>\n<p>Iterate over the object returned by <a href=\"dart-ui\/Path\/computeMetrics.html\">Path.computeMetrics<\/a> to obtain\n<a href=\"dart-ui\/PathMetric-class.html\">PathMetric<\/a> objects.<\/p>\n<p>Once created, the methods on this class will only be valid while the\niterator is at the contour for which they were created. It will also only be\nvalid for the path as it was specified when <a href=\"dart-ui\/Path\/computeMetrics.html\">Path.computeMetrics<\/a> was called.\nIf additional contours are added or any contours are updated, the metrics\nneed to be recomputed.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathMetric"
        },
        {
            "name": "dart:ui.PathMetricIterator",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "moveNext",
                    "type": "dart:core.bool",
                    "desc": "<p>Moves to the next element.<\/p>\n<p>Returns true if <a href=\"dart-ui\/PathMetricIterator\/current.html\">current<\/a> contains the next element.\nReturns false if no elements are left.<\/p>\n<p>It is safe to invoke <a href=\"dart-ui\/PathMetricIterator\/moveNext.html\">moveNext<\/a> even when the iterator is already\npositioned after the last element.\nIn this case <a href=\"dart-ui\/PathMetricIterator\/moveNext.html\">moveNext<\/a> returns false again and has no effect.<\/p>\n<p>A call to <code>moveNext<\/code> may throw if iteration has been broken by\nchanging the underlying collection.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathMetricIterator",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PathMetricIterator\/moveNext.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool moveNext() {\n  if (_pathMeasure._nextContour()) {\n    _pathMetric = PathMetric._(_pathMeasure);\n    return true;\n  }\n  _pathMetric = null;\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "current",
                    "type": "dart:ui.PathMetric",
                    "types": [],
                    "desc": "<p>Returns the current element.<\/p>\n<p>Returns <code>null<\/code> if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved past the last element of the\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The <code>current<\/code> getter should keep its value until the next call to\n<a href=\"dart-ui\/PathMetricIterator\/moveNext.html\">moveNext<\/a>, even if an underlying collection changes.\nAfter a successful call to <code>moveNext<\/code>, the user doesn't need to cache\nthe current value, but can keep reading it from the iterator.<\/p>\n        ",
                    "memberOf": "dart:ui.PathMetricIterator",
                    "isConstant": false,
                    "href": "dart-ui\/PathMetricIterator\/current.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPathMetric get current =&gt; _pathMetric;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PathMetricIterator-class.html",
            "desc": "<p>Tracks iteration from one segment of a path to the next for measurement.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathMetricIterator"
        },
        {
            "name": "dart:ui.PathMetrics",
            "extends": [
                "dart:ui.PathMetric",
                "dart:collection.IterableBase",
                "dart:ui.PathMetric",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator<dart:ui.PathMetric>",
                    "types": [
                        "dart:core.Iterator",
                        "dart:ui.PathMetric"
                    ],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "dart:ui.PathMetrics",
                    "isConstant": false,
                    "href": "dart-ui\/PathMetrics\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;PathMetric&gt; get iterator =&gt; _iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PathMetrics-class.html",
            "desc": "<p>An iterable collection of <a href=\"dart-ui\/PathMetric-class.html\">PathMetric<\/a> objects describing a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/p>\n<p>A <a href=\"dart-ui\/PathMetrics-class.html\">PathMetrics<\/a> object is created by using the <a href=\"dart-ui\/Path\/computeMetrics.html\">Path.computeMetrics<\/a> method,\nand represents the path as it stood at the time of the call. Subsequent\nmodifications of the path do not affect the <a href=\"dart-ui\/PathMetrics-class.html\">PathMetrics<\/a> object.<\/p>\n<p>Each path metric corresponds to a segment, or contour, of a path.<\/p>\n<p>For example, a path consisting of a <a href=\"dart-ui\/Path\/lineTo.html\">Path.lineTo<\/a>, a <a href=\"dart-ui\/Path\/moveTo.html\">Path.moveTo<\/a>, and\nanother <a href=\"dart-ui\/Path\/lineTo.html\">Path.lineTo<\/a> will contain two contours and thus be represented by\ntwo <a href=\"dart-ui\/PathMetric-class.html\">PathMetric<\/a> objects.<\/p>\n<p>When iterating across a <a href=\"dart-ui\/PathMetrics-class.html\">PathMetrics<\/a>' contours, the <a href=\"dart-ui\/PathMetric-class.html\">PathMetric<\/a> objects are only\nvalid until the next one is obtained.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathMetrics"
        },
        {
            "type": "",
            "name": "dart:ui.PathOperation",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PathOperation",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PathOperation\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PathOperation-class.html",
            "desc": "<p>Strategies for combining paths.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Path\/combine.html\">Path.combine<\/a>, which uses this enum to decide how to combine two paths.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PathOperation"
        },
        {
            "name": "dart:ui.Picture",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Release the resources used by this object. The object is no longer usable\nafter this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Picture",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Picture\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'Picture_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toImage",
                    "type": "dart:async.Future<dart:ui.Image>",
                    "desc": "<p>Creates an image from this picture.<\/p>\n<p>The picture is rasterized using the number of pixels specified by the\ngiven width and height.<\/p>\n<p>Although the image is returned synchronously, the picture is actually\nrasterized the first time the image is drawn and then cached.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Picture",
                    "sig": "",
                    "params": [
                        {
                            "name": "width",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Picture\/toImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Image&gt; toImage(int width, int height) {\n  if (width &lt;= 0 || height &lt;= 0)\n    throw new Exception('Invalid image dimensions.');\n  return _futurize(\n    (_Callback&lt;Image&gt; callback) =&gt; _toImage(width, height, callback)\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:ui.Image"
                    ]
                }
            ],
            "props": [
                {
                    "name": "approximateBytesUsed",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the approximate number of bytes allocated for this object.<\/p>\n<p>The actual size of this picture may be larger, particularly if it contains\nreferences to image or other large objects.<\/p>\n        ",
                    "memberOf": "dart:ui.Picture",
                    "isConstant": false,
                    "href": "dart-ui\/Picture\/approximateBytesUsed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get approximateBytesUsed native 'Picture_GetAllocationSize';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Picture-class.html",
            "desc": "<p>An object representing a sequence of recorded graphical operations.<\/p>\n<p>To create a <a href=\"dart-ui\/Picture-class.html\">Picture<\/a>, use a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a>.<\/p>\n<p>A <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> can be placed in a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> using a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a>, via\nthe <a href=\"dart-ui\/SceneBuilder\/addPicture.html\">SceneBuilder.addPicture<\/a> method. A <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> can also be\ndrawn into a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, using the <a href=\"dart-ui\/Canvas\/drawPicture.html\">Canvas.drawPicture<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Picture"
        },
        {
            "name": "dart:ui.PictureRecorder",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "PictureRecorder",
                    "type": "",
                    "desc": "<p>Creates a new idle PictureRecorder. To associate it with a\n<a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> and begin recording, pass this <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to the\n<a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> constructor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PictureRecorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/PictureRecorder\/PictureRecorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nPictureRecorder() { _constructor(); }<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "endRecording",
                    "type": "dart:ui.Picture",
                    "desc": "<p>Finishes recording graphical operations.<\/p>\n<p>Returns a picture containing the graphical operations that have been\nrecorded thus far. After calling this function, both the picture recorder\nand the canvas objects are invalid and cannot be used further.<\/p>\n<p>Returns null if the PictureRecorder is not associated with a canvas.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PictureRecorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PictureRecorder\/endRecording.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Picture endRecording() native 'PictureRecorder_endRecording';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isRecording",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this object is currently recording commands.<\/p>\n<p>Specifically, this returns true if a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> object has been\ncreated to record commands and recording has not yet ended via a\ncall to <a href=\"dart-ui\/PictureRecorder\/endRecording.html\">endRecording<\/a>, and false if either this\n<a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> has not yet been associated with a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>,\nor the <a href=\"dart-ui\/PictureRecorder\/endRecording.html\">endRecording<\/a> method has already been called.<\/p>\n        ",
                    "memberOf": "dart:ui.PictureRecorder",
                    "isConstant": false,
                    "href": "dart-ui\/PictureRecorder\/isRecording.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRecording native 'PictureRecorder_isRecording';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PictureRecorder-class.html",
            "desc": "<p>Records a <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> containing a sequence of graphical operations.<\/p>\n<p>To begin recording, construct a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> to record the commands.\nTo end recording, use the <a href=\"dart-ui\/PictureRecorder\/endRecording.html\">PictureRecorder.endRecording<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PictureRecorder"
        },
        {
            "type": "",
            "name": "dart:ui.PixelFormat",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PixelFormat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PixelFormat\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PixelFormat-class.html",
            "desc": "<p>The format of pixel data given to <a href=\"dart-ui\/decodeImageFromPixels.html\">decodeImageFromPixels<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PixelFormat"
        },
        {
            "name": "dart:ui.PlatformMessageCallback",
            "type": "",
            "desc": "<p>Signature for <a href=\"dart-ui\/Window\/onPlatformMessage.html\">Window.onPlatformMessage<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "data",
                    "type": "dart:typed_data.ByteData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:ui.PlatformMessageResponseCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/PlatformMessageCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef PlatformMessageCallback = void Function(String name, ByteData data, PlatformMessageResponseCallback callback);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.PlatformMessageResponseCallback",
            "type": "",
            "desc": "<p>Signature for responses to platform messages.<\/p>\n<p>Used as a parameter to <a href=\"dart-ui\/Window\/sendPlatformMessage.html\">Window.sendPlatformMessage<\/a> and\n<a href=\"dart-ui\/Window\/onPlatformMessage.html\">Window.onPlatformMessage<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "data",
                    "type": "dart:typed_data.ByteData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/PlatformMessageResponseCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef PlatformMessageResponseCallback = void Function(ByteData data);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.PluginUtilities",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "getCallbackFromHandle",
                    "type": "dart:core.Function",
                    "desc": "<p>Get a tear-off of a named top-level or static callback represented by a\nhandle.<\/p>\n<p>The <code>handle<\/code> argument must not be null.<\/p>\n<p>If <code>handle<\/code> is not a valid handle returned by\n<a href=\"dart-ui\/PluginUtilities\/getCallbackHandle.html\">PluginUtilities.getCallbackHandle<\/a>, null is returned. Otherwise, a\ntear-off of the callback associated with <code>handle<\/code> is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PluginUtilities",
                    "sig": "",
                    "params": [
                        {
                            "name": "handle",
                            "type": "dart:ui.CallbackHandle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/PluginUtilities\/getCallbackFromHandle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Function getCallbackFromHandle(CallbackHandle handle) {\n  assert(handle != null, \"'handle' must not be null.\");\n  return _backwardCache.putIfAbsent(\n      handle, () =&gt; _getCallbackFromHandle(handle.toRawHandle()));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getCallbackHandle",
                    "type": "dart:ui.CallbackHandle",
                    "desc": "<p>Get a handle to a named top-level or static callback function which can\nbe easily passed between isolates.<\/p>\n<p>The <code>callback<\/code> argument must not be null.<\/p>\n<p>Returns a <a href=\"dart-ui\/CallbackHandle-class.html\">CallbackHandle<\/a> that can be provided to\n<a href=\"dart-ui\/PluginUtilities\/getCallbackFromHandle.html\">PluginUtilities.getCallbackFromHandle<\/a> to retrieve a tear-off of the\noriginal callback. If <code>callback<\/code> is not a top-level or static function,\nnull is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PluginUtilities",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/PluginUtilities\/getCallbackHandle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static CallbackHandle getCallbackHandle(Function callback) {\n  assert(callback != null, \"'callback' must not be null.\");\n  return _forwardCache.putIfAbsent(callback, () {\n    final int handle = _getCallbackHandle(callback);\n    return handle != null ? new CallbackHandle.fromRawHandle(handle) : null;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PluginUtilities-class.html",
            "desc": "<p>Functionality for Flutter plugin authors.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/IsolateNameServer-class.html\">IsolateNameServer<\/a>, which provides utilities for dealing with\n<a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a>s.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PluginUtilities"
        },
        {
            "type": "",
            "name": "dart:ui.PointMode",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointMode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointMode\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointMode-class.html",
            "desc": "<p>Defines how a list of points is interpreted when drawing a set of points.<\/p>\n<p>Used by <a href=\"dart-ui\/Canvas\/drawPoints.html\">Canvas.drawPoints<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PointMode"
        },
        {
            "type": "",
            "name": "dart:ui.PointerChange",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerChange",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointerChange\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointerChange-class.html",
            "desc": "<p>How the pointer has changed since the last report.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PointerChange"
        },
        {
            "name": "dart:ui.PointerData",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "PointerData",
                    "type": "",
                    "desc": "<p>Creates an object that represents the state of a pointer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerData",
                    "sig": "",
                    "params": [
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "change",
                            "type": "dart:ui.PointerChange",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "kind",
                            "type": "dart:ui.PointerDeviceKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "signalKind",
                            "type": "dart:ui.PointerSignalKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "device",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "physicalX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "physicalY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "buttons",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "obscured",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pressure",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pressureMin",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pressureMax",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "distance",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "distanceMax",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "size",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusMajor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusMinor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusMin",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusMax",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "orientation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tilt",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "platformData",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollDeltaX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollDeltaY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/PointerData\/PointerData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerData({\n  this.timeStamp: Duration.zero,\n  this.change: PointerChange.cancel,\n  this.kind: PointerDeviceKind.touch,\n  this.signalKind,\n  this.device: 0,\n  this.physicalX: 0.0,\n  this.physicalY: 0.0,\n  this.buttons: 0,\n  this.obscured: false,\n  this.pressure: 0.0,\n  this.pressureMin: 0.0,\n  this.pressureMax: 0.0,\n  this.distance: 0.0,\n  this.distanceMax: 0.0,\n  this.size: 0.0,\n  this.radiusMajor: 0.0,\n  this.radiusMinor: 0.0,\n  this.radiusMin: 0.0,\n  this.radiusMax: 0.0,\n  this.orientation: 0.0,\n  this.tilt: 0.0,\n  this.platformData: 0,\n  this.scrollDeltaX: 0.0,\n  this.scrollDeltaY: 0.0,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerData",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointerData\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(x: $physicalX, y: $physicalY)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringFull",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a complete textual description of the information in this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerData",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointerData\/toStringFull.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringFull() {\n  return '$runtimeType('\n           'timeStamp: $timeStamp, '\n           'change: $change, '\n           'kind: $kind, '\n           'signalKind: $signalKind, '\n           'device: $device, '\n           'physicalX: $physicalX, '\n           'physicalY: $physicalY, '\n           'buttons: $buttons, '\n           'pressure: $pressure, '\n           'pressureMin: $pressureMin, '\n           'pressureMax: $pressureMax, '\n           'distance: $distance, '\n           'distanceMax: $distanceMax, '\n           'size: $size, '\n           'radiusMajor: $radiusMajor, '\n           'radiusMinor: $radiusMinor, '\n           'radiusMin: $radiusMin, '\n           'radiusMax: $radiusMax, '\n           'orientation: $orientation, '\n           'tilt: $tilt, '\n           'platformData: $platformData, '\n           'scrollDeltaX: $scrollDeltaX, '\n           'scrollDeltaY: $scrollDeltaY'\n         ')';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "buttons",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Bit field using the *Button constants (primaryMouseButton,\nsecondaryStylusButton, etc). For example, if this has the value 6 and the\n<a href=\"dart-ui\/PointerData\/kind.html\">kind<\/a> is <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a>, then this indicates an\nupside-down stylus with both its primary and secondary buttons pressed.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/buttons.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int buttons\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "change",
                    "type": "dart:ui.PointerChange",
                    "types": [],
                    "desc": "<p>How the pointer has changed since the last report.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/change.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerChange change\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "device",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Unique identifier for the pointing device, reused across interactions.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/device.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int device\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "distance",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance of the detected object from the input surface (e.g. the\ndistance of a stylus or finger from a touch screen), in arbitrary units on\nan arbitrary (not necessarily linear) scale. If the pointer is down, this\nis 0.0 by definition.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/distance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distance\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "distanceMax",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The maximum value that a distance can return for this pointer. If this\ninput device cannot detect \"hover touch\" input events, then this will be\n0.0.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/distanceMax.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distanceMax\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "kind",
                    "type": "dart:ui.PointerDeviceKind",
                    "types": [],
                    "desc": "<p>The kind of input device for which the event was generated.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/kind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerDeviceKind kind\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "obscured",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set if an application from a different security domain is in any way\nobscuring this application's window. (Aspirational; not currently\nimplemented.)<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/obscured.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscured\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "orientation",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>For PointerDeviceKind.touch events:<\/p>\n<p>The angle of the contact ellipse, in radius in the range:<\/p>\n<p>   -pi\/2 &lt; orientation &lt;= pi\/2<\/p>\n<p>...giving the angle of the major axis of the ellipse with the y-axis\n(negative angles indicating an orientation along the top-left \/\nbottom-right diagonal, positive angles indicating an orientation along the\ntop-right \/ bottom-left diagonal, and zero indicating an orientation\nparallel with the y-axis).<\/p>\n<p>For PointerDeviceKind.stylus and PointerDeviceKind.invertedStylus events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   -pi &lt; orientation &lt;= pi<\/p>\n<p>...giving the angle of the axis of the stylus projected onto the input\nsurface, relative to the positive y-axis of that surface (thus 0.0\nindicates the stylus, if projected onto that surface, would go from the\ncontact point vertically up in the positive y-axis direction, pi would\nindicate that the stylus would go down in the negative y-axis direction;\npi\/4 would indicate that the stylus goes up and to the right, -pi\/2 would\nindicate that the stylus goes to the left, etc).<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/orientation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double orientation\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>X coordinate of the position of the pointer, in physical pixels in the\nglobal coordinate space.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/physicalX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double physicalX\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Y coordinate of the position of the pointer, in physical pixels in the\nglobal coordinate space.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/physicalY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double physicalY\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platformData",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Opaque platform-specific data associated with the event.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/platformData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int platformData\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pressure",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The pressure of the touch as a number ranging from 0.0, indicating a touch\nwith no discernible pressure, to 1.0, indicating a touch with \"normal\"\npressure, and possibly beyond, indicating a stronger touch. For devices\nthat do not detect pressure (e.g. mice), returns 1.0.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/pressure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressure\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pressureMax",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The maximum value that <a href=\"dart-ui\/PointerData\/pressure.html\">pressure<\/a> can return for this pointer. For devices\nthat do not detect pressure (e.g. mice), returns 1.0. This will always be\na greater than or equal to 1.0.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/pressureMax.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMax\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pressureMin",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The minimum value that <a href=\"dart-ui\/PointerData\/pressure.html\">pressure<\/a> can return for this pointer. For devices\nthat do not detect pressure (e.g. mice), returns 1.0. This will always be\na number less than or equal to 1.0.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/pressureMin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMin\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "radiusMajor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius of the contact ellipse along the major axis, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/radiusMajor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMajor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "radiusMax",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The minimum value that could be reported for radiusMajor and radiusMinor\nfor this pointer, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/radiusMax.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMax\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "radiusMin",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The minimum value that could be reported for radiusMajor and radiusMinor\nfor this pointer, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/radiusMin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMin\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "radiusMinor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius of the contact ellipse along the minor axis, in logical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/radiusMinor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMinor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDeltaX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>For events with signalKind of PointerSignalKind.scroll:<\/p>\n<p>The amount to scroll in the x direction, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/scrollDeltaX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollDeltaX\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDeltaY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>For events with signalKind of PointerSignalKind.scroll:<\/p>\n<p>The amount to scroll in the y direction, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/scrollDeltaY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollDeltaY\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "signalKind",
                    "type": "dart:ui.PointerSignalKind",
                    "types": [],
                    "desc": "<p>The kind of signal for a pointer signal event.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/signalKind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerSignalKind signalKind\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The area of the screen being pressed, scaled to a value between 0 and 1.\nThe value of size can be used to determine fat touch events. This value\nis only set on Android, and is a device specific approximation within\nthe range of detectable values. So, for example, the value of 0.1 could\nmean a touch with the tip of the finger, 0.2 a touch with full finger,\nand 0.3 the full palm.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tilt",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>For PointerDeviceKind.stylus and PointerDeviceKind.invertedStylus events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   0 &lt;= tilt &lt;= pi\/2<\/p>\n<p>...giving the angle of the axis of the stylus, relative to the axis\nperpendicular to the input surface (thus 0.0 indicates the stylus is\northogonal to the plane of the input surface, while pi\/2 indicates that\nthe stylus is flat on that surface).<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/tilt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double tilt\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "timeStamp",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Time of event dispatch, relative to an arbitrary timeline.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerData",
                    "isConstant": false,
                    "href": "dart-ui\/PointerData\/timeStamp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration timeStamp\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointerData-class.html",
            "desc": "<p>Information about the state of a pointer.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PointerData"
        },
        {
            "name": "dart:ui.PointerDataPacket",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "PointerDataPacket",
                    "type": "",
                    "desc": "<p>Creates a packet of pointer data reports.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerDataPacket",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:core.List<dart:ui.PointerData>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.PointerData"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/PointerDataPacket\/PointerDataPacket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerDataPacket({ this.data: const &lt;PointerData&gt;[] });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "data",
                    "type": "dart:core.List<dart:ui.PointerData>",
                    "types": [
                        "dart:core.List",
                        "dart:ui.PointerData"
                    ],
                    "desc": "<p>Data about the individual pointers in this packet.<\/p>\n<p>This list might contain multiple pieces of data about the same pointer.<\/p>\n        ",
                    "memberOf": "dart:ui.PointerDataPacket",
                    "isConstant": false,
                    "href": "dart-ui\/PointerDataPacket\/data.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;PointerData&gt; data\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointerDataPacket-class.html",
            "desc": "<p>A sequence of reports about the state of pointers.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PointerDataPacket"
        },
        {
            "name": "dart:ui.PointerDataPacketCallback",
            "type": "",
            "desc": "<p>Signature for <a href=\"dart-ui\/Window\/onPointerDataPacket.html\">Window.onPointerDataPacket<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "packet",
                    "type": "dart:ui.PointerDataPacket",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/PointerDataPacketCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef PointerDataPacketCallback = void Function(PointerDataPacket packet);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "type": "",
            "name": "dart:ui.PointerDeviceKind",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerDeviceKind",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointerDeviceKind\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointerDeviceKind-class.html",
            "desc": "<p>The kind of pointer device.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PointerDeviceKind"
        },
        {
            "type": "",
            "name": "dart:ui.PointerSignalKind",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.PointerSignalKind",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/PointerSignalKind\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/PointerSignalKind-class.html",
            "desc": "<p>The kind of <code>PointerDeviceKind.signal<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "PointerSignalKind"
        },
        {
            "name": "dart:ui.RRect",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/RRect\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final RRect typedOther = other;\n  for (int i = 0; i &lt; _kDataSize; i += 1) {\n    if (_value[i] != typedOther._value[i])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the origin) lies inside the rounded rectangle.<\/p>\n<p>This method may allocate (and cache) a copy of the object with normalized\nradii the first time it is called on a particular <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> instance. When\nusing this method, prefer to reuse existing <a href=\"dart-ui\/RRect-class.html\">RRect<\/a>s rather than\nrecreating the object each time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset point) {\n  if (point.dx &lt; left || point.dx &gt;= right || point.dy &lt; top || point.dy &gt;= bottom)\n    return false; \/\/ outside bounding box\n\n  _scaleRadii();\n\n  double x;\n  double y;\n  double radiusX;\n  double radiusY;\n  \/\/ check whether point is in one of the rounded corner areas\n  \/\/ x, y -&gt; translate to ellipse center\n  if (point.dx &lt; left + _scaled.tlRadiusX &amp;&amp;\n      point.dy &lt; top + _scaled.tlRadiusY) {\n    x = point.dx - left - _scaled.tlRadiusX;\n    y = point.dy - top - _scaled.tlRadiusY;\n    radiusX = _scaled.tlRadiusX;\n    radiusY = _scaled.tlRadiusY;\n  } else if (point.dx &gt; right - _scaled.trRadiusX &amp;&amp;\n             point.dy &lt; top + _scaled.trRadiusY) {\n    x = point.dx - right + _scaled.trRadiusX;\n    y = point.dy - top - _scaled.trRadiusY;\n    radiusX = _scaled.trRadiusX;\n    radiusY = _scaled.trRadiusY;\n  } else if (point.dx &gt; right - _scaled.brRadiusX &amp;&amp;\n             point.dy &gt; bottom - _scaled.brRadiusY) {\n    x = point.dx - right + _scaled.brRadiusX;\n    y = point.dy - bottom + _scaled.brRadiusY;\n    radiusX = _scaled.brRadiusX;\n    radiusY = _scaled.brRadiusY;\n  } else if (point.dx &lt; left + _scaled.blRadiusX &amp;&amp;\n             point.dy &gt; bottom - _scaled.blRadiusY) {\n    x = point.dx - left - _scaled.blRadiusX;\n    y = point.dy - bottom + _scaled.blRadiusY;\n    radiusX = _scaled.blRadiusX;\n    radiusY = _scaled.blRadiusY;\n  } else {\n    return true; \/\/ inside and not within the rounded corner area\n  }\n\n  x = x \/ radiusX;\n  y = y \/ radiusY;\n  \/\/ check if the point is outside the unit circle\n  if (x * x + y * y &gt; 1.0)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "deflate",
                    "type": "dart:ui.RRect",
                    "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> with edges and radii moved inwards by the given delta.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "delta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/deflate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect deflate(double delta) =&gt; inflate(-delta);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromLTRBAndCorners",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its left, top, right, and bottom edges,\nand topLeft, topRight, bottomRight, and bottomLeft radii.<\/p>\n<p>The corner radii default to <a href=\"dart-ui\/RRect\/zero.html\">Radius.zero<\/a>, i.e. right-angled corners.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromLTRBAndCorners.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromLTRBAndCorners(\n  double left,\n  double top,\n  double right,\n  double bottom, {\n  Radius topLeft: Radius.zero,\n  Radius topRight: Radius.zero,\n  Radius bottomRight: Radius.zero,\n  Radius bottomLeft: Radius.zero,\n}) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = right\n    ..[3] = bottom\n    ..[4] = topLeft.x\n    ..[5] = topLeft.y\n    ..[6] = topRight.x\n    ..[7] = topRight.y\n    ..[8] = bottomRight.x\n    ..[9] = bottomRight.y\n    ..[10] = bottomLeft.x\n    ..[11] = bottomLeft.y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromLTRBR",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its left, top, right, and bottom edges,\nand the same radius in each corner.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromLTRBR.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromLTRBR(double left, double top, double right, double bottom,\n                Radius radius) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = right\n    ..[3] = bottom\n    ..[4] = radius.x\n    ..[5] = radius.y\n    ..[6] = radius.x\n    ..[7] = radius.y\n    ..[8] = radius.x\n    ..[9] = radius.y\n    ..[10] = radius.x\n    ..[11] = radius.y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromLTRBXY",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its left, top, right, and bottom edges,\nand the same radii along its horizontal axis and its vertical axis.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromLTRBXY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromLTRBXY(double left, double top, double right, double bottom,\n                 double radiusX, double radiusY) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = right\n    ..[3] = bottom\n    ..[4] = radiusX\n    ..[5] = radiusY\n    ..[6] = radiusX\n    ..[7] = radiusY\n    ..[8] = radiusX\n    ..[9] = radiusY\n    ..[10] = radiusX\n    ..[11] = radiusY;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromRectAndCorners",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its bounding box and and topLeft,\ntopRight, bottomRight, and bottomLeft radii.<\/p>\n<p>The corner radii default to <a href=\"dart-ui\/RRect\/zero.html\">Radius.zero<\/a>, i.e. right-angled corners<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromRectAndCorners.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromRectAndCorners(\n  Rect rect,\n  {\n    Radius topLeft: Radius.zero,\n    Radius topRight: Radius.zero,\n    Radius bottomRight: Radius.zero,\n    Radius bottomLeft: Radius.zero\n  }\n) {\n  _value\n    ..[0] = rect.left\n    ..[1] = rect.top\n    ..[2] = rect.right\n    ..[3] = rect.bottom\n    ..[4] = topLeft.x\n    ..[5] = topLeft.y\n    ..[6] = topRight.x\n    ..[7] = topRight.y\n    ..[8] = bottomRight.x\n    ..[9] = bottomRight.y\n    ..[10] = bottomLeft.x\n    ..[11] = bottomLeft.y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromRectAndRadius",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its bounding box and a radius that is\nthe same in each corner.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromRectAndRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromRectAndRadius(Rect rect, Radius radius) {\n  _value\n    ..[0] = rect.left\n    ..[1] = rect.top\n    ..[2] = rect.right\n    ..[3] = rect.bottom\n    ..[4] = radius.x\n    ..[5] = radius.y\n    ..[6] = radius.x\n    ..[7] = radius.y\n    ..[8] = radius.x\n    ..[9] = radius.y\n    ..[10] = radius.x\n    ..[11] = radius.y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RRect.fromRectXY",
                    "type": "",
                    "desc": "<p>Construct a rounded rectangle from its bounding box and the same radii\nalong its horizontal axis and its vertical axis.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radiusY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RRect\/RRect.fromRectXY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect.fromRectXY(Rect rect, double radiusX, double radiusY) {\n  _value\n    ..[0] = rect.left\n    ..[1] = rect.top\n    ..[2] = rect.right\n    ..[3] = rect.bottom\n    ..[4] = radiusX\n    ..[5] = radiusY\n    ..[6] = radiusX\n    ..[7] = radiusY\n    ..[8] = radiusX\n    ..[9] = radiusY\n    ..[10] = radiusX\n    ..[11] = radiusY;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inflate",
                    "type": "dart:ui.RRect",
                    "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> with edges and radii moved outwards by the given\ndelta.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "delta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/inflate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect inflate(double delta) {\n  return new RRect.fromLTRBAndCorners(\n    _value[0] - delta,\n    _value[1] - delta,\n    _value[2] + delta,\n    _value[3] + delta,\n    topLeft: new Radius.elliptical(\n      _value[4] + delta,\n      _value[5] + delta\n    ),\n    topRight: new Radius.elliptical(\n      _value[6] + delta,\n      _value[7] + delta\n    ),\n    bottomRight: new Radius.elliptical(\n      _value[8] + delta,\n      _value[9] + delta\n    ),\n    bottomLeft: new Radius.elliptical(\n      _value[10] + delta,\n      _value[11] + delta\n    )\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.RRect",
                    "desc": "<p>Linearly interpolate between two rounded rectangles.<\/p>\n<p>If either is null, this function substitutes <a href=\"dart-ui\/RRect\/zero.html\">RRect.zero<\/a> instead.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RRect lerp(RRect a, RRect b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null) {\n    return new RRect._fromList(&lt;double&gt;[\n      b.left * t,\n      b.top * t,\n      b.right * t,\n      b.bottom * t,\n      b.tlRadiusX * t,\n      b.tlRadiusY * t,\n      b.trRadiusX * t,\n      b.trRadiusY * t,\n      b.brRadiusX * t,\n      b.brRadiusY * t,\n      b.blRadiusX * t,\n      b.blRadiusY * t,\n    ]);\n  }\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new RRect._fromList(&lt;double&gt;[\n      a.left * k,\n      a.top * k,\n      a.right * k,\n      a.bottom * k,\n      a.tlRadiusX * k,\n      a.tlRadiusY * k,\n      a.trRadiusX * k,\n      a.trRadiusY * k,\n      a.brRadiusX * k,\n      a.brRadiusY * k,\n      a.blRadiusX * k,\n      a.blRadiusY * k,\n    ]);\n  }\n  return new RRect._fromList(&lt;double&gt;[\n    lerpDouble(a.left, b.left, t),\n    lerpDouble(a.top, b.top, t),\n    lerpDouble(a.right, b.right, t),\n    lerpDouble(a.bottom, b.bottom, t),\n    lerpDouble(a.tlRadiusX, b.tlRadiusX, t),\n    lerpDouble(a.tlRadiusY, b.tlRadiusY, t),\n    lerpDouble(a.trRadiusX, b.trRadiusX, t),\n    lerpDouble(a.trRadiusY, b.trRadiusY, t),\n    lerpDouble(a.brRadiusX, b.brRadiusX, t),\n    lerpDouble(a.brRadiusY, b.brRadiusY, t),\n    lerpDouble(a.blRadiusX, b.blRadiusX, t),\n    lerpDouble(a.blRadiusY, b.blRadiusY, t),\n  ]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "shift",
                    "type": "dart:ui.RRect",
                    "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> translated by the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/shift.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect shift(Offset offset) {\n  return new RRect.fromLTRBAndCorners(\n    _value[0] + offset.dx,\n    _value[1] + offset.dy,\n    _value[2] + offset.dx,\n    _value[3] + offset.dy,\n    topLeft: new Radius.elliptical(\n      _value[4],\n      _value[5]\n    ),\n    topRight: new Radius.elliptical(\n      _value[6],\n      _value[7]\n    ),\n    bottomRight: new Radius.elliptical(\n      _value[8],\n      _value[9]\n    ),\n    bottomLeft: new Radius.elliptical(\n      _value[10],\n      _value[11]\n    )\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RRect",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/RRect\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String rect = '${left.toStringAsFixed(1)}, '\n                      '${top.toStringAsFixed(1)}, '\n                      '${right.toStringAsFixed(1)}, '\n                      '${bottom.toStringAsFixed(1)}';\n  if (tlRadius == trRadius &amp;&amp;\n      trRadius == brRadius &amp;&amp;\n      brRadius == blRadius) {\n    if (tlRadius.x == tlRadius.y)\n      return 'RRect.fromLTRBR($rect, ${tlRadius.x.toStringAsFixed(1)})';\n    return 'RRect.fromLTRBXY($rect, ${tlRadius.x.toStringAsFixed(1)}, ${tlRadius.y.toStringAsFixed(1)})';\n  }\n  return 'RRect.fromLTRBAndCorners('\n           '$rect, '\n           'topLeft: $tlRadius, '\n           'topRight: $trRadius, '\n           'bottomRight: $brRadius, '\n           'bottomLeft: $blRadius'\n         ')';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "blRadius",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/blRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get blRadius =&gt; new Radius.elliptical(_value[10], _value[11]);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "blRadiusX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The bottom-left horizontal radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/blRadiusX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blRadiusX =&gt; _value[10];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "blRadiusY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The bottom-left vertical radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/blRadiusY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blRadiusY =&gt; _value[11];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the bottom edge of this rectangle from the y axis.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get bottom =&gt; _value[3];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "brRadius",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/brRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get brRadius =&gt; new Radius.elliptical(_value[8], _value[9]);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "brRadiusX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The bottom-right horizontal radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/brRadiusX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get brRadiusX =&gt; _value[8];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "brRadiusY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The bottom-right vertical radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/brRadiusY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get brRadiusY =&gt; _value[9];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/center.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get center =&gt; new Offset(left + width \/ 2.0, top + height \/ 2.0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/RRect\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashList(_value);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance between the top and bottom edges of this rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; bottom - top;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isCircle",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rounded rectangle would draw as a circle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isCircle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCircle =&gt; width == height &amp;&amp; isEllipse;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEllipse",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rounded rectangle has no side with a straight section.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isEllipse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEllipse {\n  return tlRadius == trRadius\n      &amp;&amp; trRadius == brRadius\n      &amp;&amp; brRadius == blRadius\n      &amp;&amp; width &lt;= 2.0 * tlRadiusX\n      &amp;&amp; height &lt;= 2.0 * tlRadiusY;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rounded rectangle encloses a non-zero area.\nNegative areas are considered empty.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; left &gt;= right || top &gt;= bottom;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isFinite",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether all coordinates of this rounded rectangle are finite.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isFinite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite =&gt; left.isFinite &amp;&amp; top.isFinite &amp;&amp; right.isFinite &amp;&amp; bottom.isFinite;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isRect",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rounded rectangle is a simple rectangle with zero\ncorner radii.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRect {\n  return (tlRadiusX == 0.0 || tlRadiusY == 0.0) &amp;&amp;\n         (trRadiusX == 0.0 || trRadiusY == 0.0) &amp;&amp;\n         (blRadiusX == 0.0 || blRadiusY == 0.0) &amp;&amp;\n         (brRadiusX == 0.0 || brRadiusY == 0.0);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isStadium",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rounded rectangle has a side with no straight section.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/isStadium.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isStadium {\n  return tlRadius == trRadius\n      &amp;&amp; trRadius == brRadius\n      &amp;&amp; brRadius == blRadius\n      &amp;&amp; (width &lt;= 2.0 * tlRadiusX || height &lt;= 2.0 * tlRadiusY);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the left edge of this rectangle from the x axis.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get left =&gt; _value[0];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "longestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/RRect\/width.html\">width<\/a> and the <a href=\"dart-ui\/RRect\/height.html\">height<\/a> of this\nrounded rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/longestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "middleRect",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The rectangle that would be formed using the axis-aligned intersection of\nthe sides of the rectangle, i.e., the rectangle formed from the\ninner-most centers of the ellipses that form the corners. This is the\nintersection of the <a href=\"dart-ui\/RRect\/wideMiddleRect.html\">wideMiddleRect<\/a> and the <a href=\"dart-ui\/RRect\/tallMiddleRect.html\">tallMiddleRect<\/a>. If any of\nthe intersections are void, the resulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width\nor height.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/middleRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get middleRect {\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n  return new Rect.fromLTRB(\n    left + leftRadius,\n    top + topRadius,\n    right - rightRadius,\n    bottom - bottomRadius\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "outerRect",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The bounding box of this rounded rectangle (the rectangle with no rounded corners).<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/outerRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get outerRect =&gt; new Rect.fromLTRB(left, top, right, bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the right edge of this rectangle from the x axis.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get right =&gt; _value[2];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "safeInnerRect",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The non-rounded rectangle that is constrained by the smaller of the two\ndiagonals, with each diagonal traveling through the middle of the curve\ncorners. The middle of a corner is the intersection of the curve with its\nrespective quadrant bisector.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/safeInnerRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get safeInnerRect {\n  const double kInsetFactor = 0.29289321881; \/\/ 1-cos(pi\/4)\n\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n\n  return new Rect.fromLTRB(\n    left + leftRadius * kInsetFactor,\n    top + topRadius * kInsetFactor,\n    right - rightRadius * kInsetFactor,\n    bottom - bottomRadius * kInsetFactor\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shortestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/RRect\/width.html\">width<\/a> and the <a href=\"dart-ui\/RRect\/height.html\">height<\/a> of this\nrounded rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/shortestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tallMiddleRect",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The biggest rectangle that is entirely inside the rounded rectangle and\nhas the full height of the rounded rectangle. If the rounded rectangle\ndoes not have an axis-aligned intersection of its top and bottom side, the\nresulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width or height.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/tallMiddleRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get tallMiddleRect {\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  return new Rect.fromLTRB(\n    left + leftRadius,\n    top,\n    right - rightRadius,\n    bottom\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tlRadius",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/tlRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get tlRadius =&gt; new Radius.elliptical(_value[4], _value[5]);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tlRadiusX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The top-left horizontal radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/tlRadiusX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get tlRadiusX =&gt; _value[4];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tlRadiusY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The top-left vertical radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/tlRadiusY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get tlRadiusY =&gt; _value[5];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the top edge of this rectangle from the y axis.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get top =&gt; _value[1];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "trRadius",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/trRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get trRadius =&gt; new Radius.elliptical(_value[6], _value[7]);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "trRadiusX",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The top-right horizontal radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/trRadiusX.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get trRadiusX =&gt; _value[6];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "trRadiusY",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The top-right vertical radius.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/trRadiusY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get trRadiusY =&gt; _value[7];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "wideMiddleRect",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The biggest rectangle that is entirely inside the rounded rectangle and\nhas the full width of the rounded rectangle. If the rounded rectangle does\nnot have an axis-aligned intersection of its left and right side, the\nresulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width or height.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/wideMiddleRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get wideMiddleRect {\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n  return new Rect.fromLTRB(\n    left,\n    top + topRadius,\n    right,\n    bottom - bottomRadius\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance between the left and right edges of this rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; right - left;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "zero",
                    "type": "dart:ui.RRect",
                    "types": [],
                    "desc": "<p>A rounded rectangle with all the values set to zero.<\/p>\n        ",
                    "memberOf": "dart:ui.RRect",
                    "isConstant": false,
                    "href": "dart-ui\/RRect\/zero.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final RRect zero = new RRect._()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/RRect-class.html",
            "desc": "<p>An immutable rounded rectangle with the custom radii for all four corners.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RRect"
        },
        {
            "name": "dart:ui.RSTransform",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "RSTransform",
                    "type": "",
                    "desc": "<p>Creates an RSTransform.<\/p>\n<p>An <a href=\"dart-ui\/RSTransform-class.html\">RSTransform<\/a> expresses the combination of a translation, a rotation\naround a particular point, and a scale factor.<\/p>\n<p>The first argument, <code>scos<\/code>, is the cosine of the rotation, multiplied by\nthe scale factor.<\/p>\n<p>The second argument, <code>ssin<\/code>, is the sine of the rotation, multiplied by\nthat same scale factor.<\/p>\n<p>The third argument is the x coordinate of the translation, minus the\n<code>scos<\/code> argument multiplied by the x-coordinate of the rotation point, plus\nthe <code>ssin<\/code> argument multiplied by the y-coordinate of the rotation point.<\/p>\n<p>The fourth argument is the y coordinate of the translation, minus the <code>ssin<\/code>\nargument multiplied by the x-coordinate of the rotation point, minus the\n<code>scos<\/code> argument multiplied by the y-coordinate of the rotation point.<\/p>\n<p>The <a href=\"dart-ui\/RSTransform\/RSTransform.fromComponents.html\">new RSTransform.fromComponents<\/a> method may be a simpler way to\nconstruct these values. However, if there is a way to factor out the\ncomputations of the sine and cosine of the rotation so that they can be\nreused over multiple calls to this constructor, it may be more efficient\nto directly use this constructor instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RSTransform",
                    "sig": "",
                    "params": [
                        {
                            "name": "scos",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ssin",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ty",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RSTransform\/RSTransform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RSTransform(double scos, double ssin, double tx, double ty) {\n  _value\n    ..[0] = scos\n    ..[1] = ssin\n    ..[2] = tx\n    ..[3] = ty;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RSTransform.fromComponents",
                    "type": "",
                    "desc": "<p>Creates an RSTransform from its individual components.<\/p>\n<p>The <code>rotation<\/code> parameter gives the rotation in radians.<\/p>\n<p>The <code>scale<\/code> parameter describes the uniform scale factor.<\/p>\n<p>The <code>anchorX<\/code> and <code>anchorY<\/code> parameters give the coordinate of the point\naround which to rotate.<\/p>\n<p>The <code>translateX<\/code> and <code>translateY<\/code> parameters give the coordinate of the\noffset by which to translate.<\/p>\n<p>This constructor computes the arguments of the <a href=\"dart-ui\/RSTransform\/RSTransform.html\">new RSTransform<\/a>\nconstructor and then defers to that constructor to actually create the\nobject. If many <a href=\"dart-ui\/RSTransform-class.html\">RSTransform<\/a> objects are being created and there is a way\nto factor out the computations of the sine and cosine of the rotation\n(which are computed each time this constructor is called) and reuse them\nover multiple <a href=\"dart-ui\/RSTransform-class.html\">RSTransform<\/a> objects, it may be more efficient to directly\nuse the more direct <a href=\"dart-ui\/RSTransform\/RSTransform.html\">new RSTransform<\/a> constructor instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.RSTransform",
                    "sig": "",
                    "params": [
                        {
                            "name": "rotation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "anchorX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "anchorY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "translateX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "translateY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/RSTransform\/RSTransform.fromComponents.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RSTransform.fromComponents({\n  double rotation,\n  double scale,\n  double anchorX,\n  double anchorY,\n  double translateX,\n  double translateY\n}) {\n  final double scos = math.cos(rotation) * scale;\n  final double ssin = math.sin(rotation) * scale;\n  final double tx = translateX + -scos * anchorX + ssin * anchorY;\n  final double ty = translateY + -ssin * anchorX - scos * anchorY;\n  return new RSTransform(scos, ssin, tx, ty);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "scos",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The cosine of the rotation multiplied by the scale factor.<\/p>\n        ",
                    "memberOf": "dart:ui.RSTransform",
                    "isConstant": false,
                    "href": "dart-ui\/RSTransform\/scos.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scos =&gt; _value[0];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ssin",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The sine of the rotation multiplied by that same scale factor.<\/p>\n        ",
                    "memberOf": "dart:ui.RSTransform",
                    "isConstant": false,
                    "href": "dart-ui\/RSTransform\/ssin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get ssin =&gt; _value[1];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tx",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The x coordinate of the translation, minus <a href=\"dart-ui\/RSTransform\/scos.html\">scos<\/a> multiplied by the\nx-coordinate of the rotation point, plus <a href=\"dart-ui\/RSTransform\/ssin.html\">ssin<\/a> multiplied by the\ny-coordinate of the rotation point.<\/p>\n        ",
                    "memberOf": "dart:ui.RSTransform",
                    "isConstant": false,
                    "href": "dart-ui\/RSTransform\/tx.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get tx =&gt; _value[2];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ty",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The y coordinate of the translation, minus <a href=\"dart-ui\/RSTransform\/ssin.html\">ssin<\/a> multiplied by the\nx-coordinate of the rotation point, minus <a href=\"dart-ui\/RSTransform\/scos.html\">scos<\/a> multiplied by the\ny-coordinate of the rotation point.<\/p>\n        ",
                    "memberOf": "dart:ui.RSTransform",
                    "isConstant": false,
                    "href": "dart-ui\/RSTransform\/ty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get ty =&gt; _value[3];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/RSTransform-class.html",
            "desc": "<p>A transform consisting of a translation, a rotation, and a uniform scale.<\/p>\n<p>Used by <a href=\"dart-ui\/Canvas\/drawAtlas.html\">Canvas.drawAtlas<\/a>. This is a more efficient way to represent these\nsimple transformations than a full matrix.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RSTransform"
        },
        {
            "name": "dart:ui.Radius",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Modulo (remainder) operator.<\/p>\n<p>Returns a radius whose coordinates are the remainder of dividing the\ncoordinates of the left-hand-side operand (a radius) by the scalar\nright-hand-side operand (a double).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator %(double operand) =&gt; new Radius.elliptical(x % operand, y % operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Multiplication operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) multiplied by the scalar\nright-hand-side operand (a double).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator *(double operand) =&gt; new Radius.elliptical(x * operand, y * operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Binary addition operator.<\/p>\n<p>Returns a radius whose <a href=\"dart-ui\/Radius\/x.html\">x<\/a> value is the sum of the <a href=\"dart-ui\/Radius\/x.html\">x<\/a> values of the\ntwo operands, and whose <a href=\"dart-ui\/Radius\/y.html\">y<\/a> value is the sum of the <a href=\"dart-ui\/Radius\/y.html\">y<\/a> values of the\ntwo operands.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator +(Radius other) =&gt; new Radius.elliptical(x + other.x, y + other.y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Binary subtraction operator.<\/p>\n<p>Returns a radius whose <a href=\"dart-ui\/Radius\/x.html\">x<\/a> value is the left-hand-side operand's <a href=\"dart-ui\/Radius\/x.html\">x<\/a>\nminus the right-hand-side operand's <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and whose <a href=\"dart-ui\/Radius\/y.html\">y<\/a> value is the\nleft-hand-side operand's <a href=\"dart-ui\/Radius\/y.html\">y<\/a> minus the right-hand-side operand's <a href=\"dart-ui\/Radius\/y.html\">y<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator -(Radius other) =&gt; new Radius.elliptical(x - other.x, y - other.y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Division operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) divided by the scalar right-hand-side\noperand (a double).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator \/(double operand) =&gt; new Radius.elliptical(x \/ operand, y \/ operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Radius\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Radius typedOther = other;\n  return typedOther.x == x &amp;&amp; typedOther.y == y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Radius.circular",
                    "type": "",
                    "desc": "<p>Constructs a circular radius. <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">y<\/a> will have the same radius value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Radius\/Radius.circular.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Radius.circular(double radius) : this.elliptical(radius, radius);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Radius.elliptical",
                    "type": "",
                    "desc": "<p>Constructs an elliptical radius with the given radii.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "x",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Radius\/Radius.elliptical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Radius.elliptical(this.x, this.y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Linearly interpolate between two radii.<\/p>\n<p>If either is null, this function substitutes <a href=\"dart-ui\/Radius\/zero-constant.html\">Radius.zero<\/a> instead.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Radius lerp(Radius a, Radius b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return new Radius.elliptical(b.x * t, b.y * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new Radius.elliptical(a.x * k, a.y * k);\n  }\n  return new Radius.elliptical(\n    lerpDouble(a.x, b.x, t),\n    lerpDouble(a.y, b.y, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return x == y ? 'Radius.circular(${x.toStringAsFixed(1)})' :\n                  'Radius.elliptical(${x.toStringAsFixed(1)}, '\n                  '${y.toStringAsFixed(1)})';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Unary negation operator.<\/p>\n<p>Returns a Radius with the distances negated.<\/p>\n<p>Radiuses with negative values aren't geometrically meaningful, but could\noccur as part of expressions. For example, negating a radius of one pixel\nand then adding the result to another radius is equivalent to subtracting\na radius of one pixel from the other.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator -() =&gt; new Radius.elliptical(-x, -y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "dart:ui.Radius",
                    "desc": "<p>Integer (truncating) division operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) divided by the scalar right-hand-side\noperand (a double), rounded towards zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Radius",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Radius\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator ~\/(double operand) =&gt; new Radius.elliptical((x ~\/ operand).toDouble(), (y ~\/ operand).toDouble());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Radius\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Radius",
                    "isConstant": false,
                    "href": "dart-ui\/Radius\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(x, y);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius value on the horizontal axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Radius",
                    "isConstant": false,
                    "href": "dart-ui\/Radius\/x.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "y",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius value on the vertical axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Radius",
                    "isConstant": false,
                    "href": "dart-ui\/Radius\/y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/Radius\/zero-constant.html",
                    "desc": "<p>A radius with <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">y<\/a> values set to zero.<\/p>\n<p>You can use <a href=\"dart-ui\/Radius\/zero-constant.html\">Radius.zero<\/a> with <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> to have right-angle corners.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Radius zero = const Radius.circular(0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "dart:ui.Radius"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Radius-class.html",
            "desc": "<p>A radius for either circular or elliptical shapes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Radius"
        },
        {
            "name": "dart:ui.Rect",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Rect\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Rect typedOther = other;\n  for (int i = 0; i &lt; _kDataSize; i += 1) {\n    if (_value[i] != typedOther._value[i])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the origin) lies between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n<p>Rectangles include their top and left edges but exclude their bottom and\nright edges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset offset) {\n  return offset.dx &gt;= left &amp;&amp; offset.dx &lt; right &amp;&amp; offset.dy &gt;= top &amp;&amp; offset.dy &lt; bottom;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "deflate",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle with edges moved inwards by the given delta.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "delta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/deflate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect deflate(double delta) =&gt; inflate(-delta);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "expandToInclude",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle which is the bounding box containing this\nrectangle and the given rectangle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/expandToInclude.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect expandToInclude(Rect other) {\n  return new Rect.fromLTRB(\n      math.min(left, other.left),\n      math.min(top, other.top),\n      math.max(right, other.right),\n      math.max(bottom, other.bottom),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rect.fromCircle",
                    "type": "",
                    "desc": "<p>Construct a rectangle that bounds the given circle.<\/p>\n<p>The <code>center<\/code> argument is assumed to be an offset from the origin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "center",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Rect\/Rect.fromCircle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromCircle({ Offset center, double radius }) {\n  _value\n    ..[0] = center.dx - radius\n    ..[1] = center.dy - radius\n    ..[2] = center.dx + radius\n    ..[3] = center.dy + radius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rect.fromLTRB",
                    "type": "",
                    "desc": "<p>Construct a rectangle from its left, top, right, and bottom edges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Rect\/Rect.fromLTRB.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nRect.fromLTRB(double left, double top, double right, double bottom) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = right\n    ..[3] = bottom;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rect.fromLTWH",
                    "type": "",
                    "desc": "<p>Construct a rectangle from its left and top edges, its width, and its\nheight.<\/p>\n<p>To construct a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> from an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, you can use the\nrectangle constructor operator <code>&amp;<\/code>. See <a href=\"dart-ui\/Offset\/operator_bitwise_and.html\">Offset.&amp;<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Rect\/Rect.fromLTWH.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromLTWH(double left, double top, double width, double height) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = left + width\n    ..[3] = top + height;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rect.fromPoints",
                    "type": "",
                    "desc": "<p>Construct the smallest rectangle that encloses the given offsets, treating\nthem as vectors from the origin.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Rect\/Rect.fromPoints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromPoints(Offset a, Offset b) {\n  _value\n    ..[0] = math.min(a.dx, b.dx)\n    ..[1] = math.min(a.dy, b.dy)\n    ..[2] = math.max(a.dx, b.dx)\n    ..[3] = math.max(a.dy, b.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inflate",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle with edges moved outwards by the given delta.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "delta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/inflate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inflate(double delta) {\n  return new Rect.fromLTRB(left - delta, top - delta, right + delta, bottom + delta);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle that is the intersection of the given\nrectangle and this rectangle. The two rectangles must overlap\nfor this to be meaningful. If the two rectangles do not overlap,\nthen the resulting Rect will have a negative width or height.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/intersect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect intersect(Rect other) {\n  return new Rect.fromLTRB(\n    math.max(left, other.left),\n    math.max(top, other.top),\n    math.min(right, other.right),\n    math.min(bottom, other.bottom)\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Linearly interpolate between two rectangles.<\/p>\n<p>If either rect is null, <a href=\"dart-ui\/Rect\/zero.html\">Rect.zero<\/a> is used as a substitute.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Rect lerp(Rect a, Rect b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return new Rect.fromLTRB(b.left * t, b.top * t, b.right * t, b.bottom * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new Rect.fromLTRB(a.left * k, a.top * k, a.right * k, a.bottom * k);\n  }\n  return new Rect.fromLTRB(\n    lerpDouble(a.left, b.left, t),\n    lerpDouble(a.top, b.top, t),\n    lerpDouble(a.right, b.right, t),\n    lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "overlaps",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether <code>other<\/code> has a nonzero area of overlap with this rectangle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/overlaps.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool overlaps(Rect other) {\n  if (right &lt;= other.left || other.right &lt;= left)\n    return false;\n  if (bottom &lt;= other.top || other.bottom &lt;= top)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "shift",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle translated by the given offset.<\/p>\n<p>To translate a rectangle by separate x and y components rather than by an\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, consider <a href=\"dart-ui\/Rect\/translate.html\">translate<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/shift.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect shift(Offset offset) {\n  return new Rect.fromLTRB(left + offset.dx, top + offset.dy, right + offset.dx, bottom + offset.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Rect.fromLTRB(${left.toStringAsFixed(1)}, ${top.toStringAsFixed(1)}, ${right.toStringAsFixed(1)}, ${bottom.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "translate",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rectangle with translateX added to the x components and\ntranslateY added to the y components.<\/p>\n<p>To translate a rectangle by an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> rather than by separate x and y\ncomponents, consider <a href=\"dart-ui\/Rect\/shift.html\">shift<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Rect",
                    "sig": "",
                    "params": [
                        {
                            "name": "translateX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "translateY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Rect\/translate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect translate(double translateX, double translateY) {\n  return new Rect.fromLTRB(left + translateX, top + translateY, right + translateX, bottom + translateY);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the bottom edge of this rectangle from the y axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get bottom =&gt; _value[3];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomCenter",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the center of the bottom edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomLeft.html\">Size.bottomLeft<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/bottomCenter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomCenter =&gt; new Offset(left + width \/ 2.0, bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomLeft",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the intersection of the bottom and left edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomLeft.html\">Size.bottomLeft<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/bottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomLeft =&gt; new Offset(left, bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the intersection of the bottom and right edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomRight.html\">Size.bottomRight<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/bottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomRight =&gt; new Offset(right, bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/center.html\">Size.center<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/center.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get center =&gt; new Offset(left + width \/ 2.0, top + height \/ 2.0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "centerLeft",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the center of the left edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/centerLeft.html\">Size.centerLeft<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/centerLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get centerLeft =&gt; new Offset(left, top + height \/ 2.0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "centerRight",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the center of the right edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/centerLeft.html\">Size.centerLeft<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/centerRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get centerRight =&gt; new Offset(right, top + height \/ 2.0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Rect\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashList(_value);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance between the top and bottom edges of this rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; bottom - top;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this rectangle encloses a non-zero area. Negative areas are\nconsidered empty.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; left &gt;= right || top &gt;= bottom;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isFinite",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether all coordinates of this rectangle are finite.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/isFinite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite =&gt; left.isFinite &amp;&amp; top.isFinite &amp;&amp; right.isFinite &amp;&amp; bottom.isFinite;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isInfinite",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether any of the coordinates of this rectangle are equal to positive infinity.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/isInfinite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ included for consistency with Offset and Size\nbool get isInfinite {\n  return left &gt;= double.infinity\n      || top &gt;= double.infinity\n      || right &gt;= double.infinity\n      || bottom &gt;= double.infinity;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "largest",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>A rectangle that covers the entire coordinate space.<\/p>\n<p>This covers the space from -1e9,-1e9 to 1e9,1e9.\nThis is the space over which graphics operations are valid.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/largest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Rect largest = new Rect.fromLTRB(-_giantScalar, -_giantScalar, _giantScalar, _giantScalar)\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the left edge of this rectangle from the x axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get left =&gt; _value[0];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "longestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/Rect\/width.html\">width<\/a> and the <a href=\"dart-ui\/Rect\/height.html\">height<\/a> of this\nrectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/longestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the right edge of this rectangle from the x axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get right =&gt; _value[2];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shortestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/Rect\/width.html\">width<\/a> and the <a href=\"dart-ui\/Rect\/height.html\">height<\/a> of this\nrectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/shortestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The distance between the upper-left corner and the lower-right corner of\nthis rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get size =&gt; new Size(width, height);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset of the top edge of this rectangle from the y axis.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get top =&gt; _value[1];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topCenter",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the center of the top edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topCenter.html\">Size.topCenter<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/topCenter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topCenter =&gt; new Offset(left + width \/ 2.0, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topLeft",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the intersection of the top and left edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topLeft.html\">Size.topLeft<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/topLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topLeft =&gt; new Offset(left, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The offset to the intersection of the top and right edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topRight.html\">Size.topRight<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/topRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topRight =&gt; new Offset(right, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance between the left and right edges of this rectangle.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; right - left;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "zero",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>A rectangle with left, top, right, and bottom edges all at zero.<\/p>\n        ",
                    "memberOf": "dart:ui.Rect",
                    "isConstant": false,
                    "href": "dart-ui\/Rect\/zero.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Rect zero = new Rect._()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "animation.RectTween",
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween"
            ],
            "realImplementors": [
                "animation.RectTween",
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween"
            ],
            "cn": [],
            "href": "dart-ui\/Rect-class.html",
            "desc": "<p>An immutable, 2D, axis-aligned, floating-point rectangle whose coordinates\nare relative to a given origin.<\/p>\n<p>A Rect can be created with one its constructors or from an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and a\n<a href=\"dart-ui\/Size-class.html\">Size<\/a> using the <code>&amp;<\/code> operator:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Rect myRect = const Offset(1.0, 2.0) &amp; const Size(3.0, 4.0);\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Rect"
        },
        {
            "name": "dart:ui.Scene",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Releases the resources used by this scene.<\/p>\n<p>After calling this function, the scene is cannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Scene",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Scene\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'Scene_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toImage",
                    "type": "dart:async.Future<dart:ui.Image>",
                    "desc": "<p>Creates a raster image representation of the current state of the scene.\nThis is a slow operation that is performed on a background thread.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Scene",
                    "sig": "",
                    "params": [
                        {
                            "name": "width",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Scene\/toImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Image&gt; toImage(int width, int height) {\n  if (width &lt;= 0 || height &lt;= 0)\n    throw new Exception('Invalid image dimensions.');\n  return _futurize(\n    (_Callback&lt;Image&gt; callback) =&gt; _toImage(width, height, callback)\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:ui.Image"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Scene-class.html",
            "desc": "<p>An opaque object representing a composited scene.<\/p>\n<p>To create a Scene object, use a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a>.<\/p>\n<p>Scene objects can be displayed on the screen using the\n<a href=\"dart-ui\/Window\/render.html\">Window.render<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Scene"
        },
        {
            "name": "dart:ui.SceneBuilder",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "SceneBuilder",
                    "type": "",
                    "desc": "<p>Creates an empty <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/SceneBuilder\/SceneBuilder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nSceneBuilder() { _constructor(); }<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addChildScene",
                    "type": "",
                    "desc": "<p>(Fuchsia-only) Adds a scene rendered by another application to the scene\nfor this application.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sceneHost",
                            "type": "dart:ui.SceneHost",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hitTestable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addChildScene.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addChildScene({\n  Offset offset: Offset.zero,\n  double width: 0.0,\n  double height: 0.0,\n  SceneHost sceneHost,\n  bool hitTestable: true\n}) {\n  _addChildScene(offset.dx,\n                 offset.dy,\n                 width,\n                 height,\n                 sceneHost,\n                 hitTestable);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addPerformanceOverlay",
                    "type": "",
                    "desc": "<p>Adds an object to the scene that displays performance statistics.<\/p>\n<p>Useful during development to assess the performance of the application.\nThe enabledOptions controls which statistics are displayed. The bounds\ncontrols where the statistics are displayed.<\/p>\n<p>enabledOptions is a bit field with the following bits defined:<\/p>\n<ul>\n<li>0x01: displayRasterizerStatistics - show GPU thread frame time<\/li>\n<li>0x02: visualizeRasterizerStatistics - graph GPU thread frame times<\/li>\n<li>0x04: displayEngineStatistics - show UI thread frame time<\/li>\n<li>0x08: visualizeEngineStatistics - graph UI thread frame times\nSet enabledOptions to 0x0F to enable all the currently defined features.<\/li>\n<\/ul>\n<p>The \"UI thread\" is the thread that includes all the execution of\nthe main Dart isolate (the isolate that can call\n<a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>). The UI thread frame time is the total time\nspent executing the <a href=\"dart-ui\/Window\/onBeginFrame.html\">Window.onBeginFrame<\/a> callback. The \"GPU\nthread\" is the thread (running on the CPU) that subsequently\nprocesses the <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> provided by the Dart code to turn it into\nGPU commands and send it to the GPU.<\/p>\n<p>See also the <a href=\"rendering\/PerformanceOverlayOption-class.html\">PerformanceOverlayOption<\/a> enum in the rendering library.\nfor more details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "enabledOptions",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bounds",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addPerformanceOverlay.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Values above must match constants in \/\/engine\/src\/sky\/compositor\/performance_overlay_layer.h\nvoid addPerformanceOverlay(int enabledOptions, Rect bounds) {\n  _addPerformanceOverlay(enabledOptions,\n                         bounds.left,\n                         bounds.right,\n                         bounds.top,\n                         bounds.bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addPicture",
                    "type": "",
                    "desc": "<p>Adds a <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> to the scene.<\/p>\n<p>The picture is rasterized at the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "picture",
                            "type": "dart:ui.Picture",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isComplexHint",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "willChangeHint",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addPicture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPicture(Offset offset, Picture picture, { bool isComplexHint: false, bool willChangeHint: false }) {\n  int hints = 0;\n  if (isComplexHint)\n    hints |= 1;\n  if (willChangeHint)\n    hints |= 2;\n  _addPicture(offset.dx, offset.dy, picture, hints);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addPlatformView",
                    "type": "",
                    "desc": "<p>Adds a platform view (e.g an iOS UIView) to the scene.<\/p>\n<p>Only supported on iOS, this is currently a no-op on other platforms.<\/p>\n<p>On iOS this layer splits the current output surface into two surfaces, one for the scene nodes\npreceding the platform view, and one for the scene nodes following the platform view.<\/p>\n<h2 id=\"performance-impact\">Performance impact<\/h2>\n<p>Adding an additional surface doubles the amount of graphics memory directly used by Flutter\nfor output buffers. Quartz might allocated extra buffers for compositing the Flutter surfaces\nand the platform view.<\/p>\n<p>With a platform view in the scene, Quartz has to composite the two Flutter surfaces and the\nembedded UIView. In addition to that, on iOS versions greater than 9, the Flutter frames are\nsynchronized with the UIView frames adding additional performance overhead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "viewId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addPlatformView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPlatformView(int viewId, { Offset offset: Offset.zero, double width: 0.0, double height: 0.0}) {\n  assert(offset != null, 'Offset argument was null');\n  _addPlatformView(offset.dx, offset.dy, width, height, viewId);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addRetained",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Add a retained engine layer subtree from previous frames.<\/p>\n<p>All the engine layers that are in the subtree of the retained layer will\nbe automatically appended to the current engine layer tree.<\/p>\n<p>Therefore, when implementing a subclass of the <a href=\"rendering\/Layer-class.html\">Layer<\/a> concept defined in\nthe rendering layer of Flutter's framework, once this is called, there's\nno need to call <code>addToScene<\/code> for its children layers.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "retainedLayer",
                            "type": "dart:ui.EngineLayer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addRetained.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer addRetained(EngineLayer retainedLayer) native 'SceneBuilder_addRetained';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addTexture",
                    "type": "",
                    "desc": "<p>Adds a backend texture to the scene.<\/p>\n<p>The texture is scaled to the given size and rasterized at the given offset.<\/p>\n<p>If <code>freeze<\/code> is true the texture that is added to the scene will not\nbe updated with new frames. <code>freeze<\/code> is used when resizing an embedded\nAndroid view: When resizing an Android view there is a short period during\nwhich the framework cannot tell if the newest texture frame has the\nprevious or new size, to workaround this the framework \"freezes\" the\ntexture just before resizing the Android view and un-freezes it when it is\ncertain that a frame with the new size is ready.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "textureId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "freeze",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/addTexture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTexture(int textureId, { Offset offset: Offset.zero, double width: 0.0, double height: 0.0 , bool freeze: false}) {\n  assert(offset != null, 'Offset argument was null');\n  _addTexture(offset.dx, offset.dy, width, height, textureId, freeze);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "build",
                    "type": "dart:ui.Scene",
                    "desc": "<p>Finishes building the scene.<\/p>\n<p>Returns a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> containing the objects that have been added to\nthis scene builder. The <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> can then be displayed on the\nscreen with <a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>.<\/p>\n<p>After calling this function, the scene builder object is invalid and\ncannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/build.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Scene build() native 'SceneBuilder_build';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pop",
                    "type": "",
                    "desc": "<p>Ends the effect of the most recently pushed operation.<\/p>\n<p>Internally the scene builder maintains a stack of operations. Each of the\noperations in the stack applies to each of the objects added to the scene.\nCalling this function removes the most recently added operation from the\nstack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pop.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pop() native 'SceneBuilder_pop';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pushBackdropFilter",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a backdrop filter operation onto the operation stack.<\/p>\n<p>The given filter is applied to the current contents of the scene prior to\nrasterizing the given objects.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "filter",
                            "type": "dart:ui.ImageFilter",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushBackdropFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushBackdropFilter(ImageFilter filter) native 'SceneBuilder_pushBackdropFilter';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushClipPath",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a path clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given path is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack. See <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushClipPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipPath(Path path, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipPath(path, clipBehavior.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushClipRRect",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a rounded-rectangular clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given rounded rectangle is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rrect",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushClipRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipRRect(RRect rrect, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipRRect(rrect._value, clipBehavior.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushClipRect",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a rectangular clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given rectangle is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushClipRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipRect(Rect rect, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipRect(rect.left, rect.right, rect.top, rect.bottom, clipBehavior.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushColorFilter",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a color filter operation onto the operation stack.<\/p>\n<p>The given color is applied to the objects' rasterization using the given\nblend mode.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushColorFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushColorFilter(Color color, BlendMode blendMode) {\n  return _pushColorFilter(color.value, blendMode.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushOffset",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes an offset operation onto the operation stack.<\/p>\n<p>This is equivalent to <a href=\"dart-ui\/SceneBuilder\/pushTransform.html\">pushTransform<\/a> with a matrix with only translation.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushOffset(double dx, double dy) native 'SceneBuilder_pushOffset';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushOpacity",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes an opacity operation onto the operation stack.<\/p>\n<p>The given alpha value is blended into the alpha value of the objects'\nrasterization. An alpha value of 0 makes the objects entirely invisible.\nAn alpha value of 255 has no effect (i.e., the objects retain the current\nopacity).<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "alpha",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushOpacity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushOpacity(int alpha, {Offset offset = Offset.zero}) {\n  return _pushOpacity(alpha, offset.dx, offset.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushPhysicalShape",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a physical layer operation for an arbitrary shape onto the\noperation stack.<\/p>\n<p>By default, the layer's content will not be clipped (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a>).\nIf clip equals <a href=\"dart-ui\/Clip-class.html\">Clip.hardEdge<\/a>, <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>, or <a href=\"dart-ui\/Clip-class.html\">Clip.antiAliasWithSaveLayer<\/a>,\nthen the content is clipped to the given shape defined by <code>path<\/code>.<\/p>\n<p>If <code>elevation<\/code> is greater than 0.0, then a shadow is drawn around the layer.\n<code>shadowColor<\/code> defines the color of the shadow if present and <code>color<\/code> defines the\ncolor of the layer background.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "elevation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shadowColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushPhysicalShape.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: deprecated_member_use\nEngineLayer pushPhysicalShape({ Path path, double elevation, Color color, Color shadowColor, Clip clipBehavior = Clip.none}) {\n  return _pushPhysicalShape(path, elevation, color.value, shadowColor?.value ?? 0xFF000000, clipBehavior.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushShaderMask",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a shader mask operation onto the operation stack.<\/p>\n<p>The given shader is applied to the object's rasterization in the given\nrectangle using the given blend mode.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "shader",
                            "type": "dart:ui.Shader",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "maskRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushShaderMask.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushShaderMask(Shader shader, Rect maskRect, BlendMode blendMode) {\n  return _pushShaderMask(shader,\n                         maskRect.left,\n                         maskRect.right,\n                         maskRect.top,\n                         maskRect.bottom,\n                         blendMode.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pushTransform",
                    "type": "dart:ui.EngineLayer",
                    "desc": "<p>Pushes a transform operation onto the operation stack.<\/p>\n<p>The objects are transformed by the given matrix before rasterization.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "matrix4",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/pushTransform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushTransform(Float64List matrix4) {\n  if (matrix4 == null)\n    throw new ArgumentError('\"matrix4\" argument cannot be null');\n  if (matrix4.length != 16)\n    throw new ArgumentError('\"matrix4\" must have 16 entries.');\n  return _pushTransform(matrix4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setCheckerboardOffscreenLayers",
                    "type": "",
                    "desc": "<p>Sets whether the compositor should checkerboard layers that are rendered\nto offscreen bitmaps.<\/p>\n<p>This is only useful for debugging purposes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "checkerboard",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/setCheckerboardOffscreenLayers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCheckerboardOffscreenLayers(bool checkerboard) native 'SceneBuilder_setCheckerboardOffscreenLayers';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setCheckerboardRasterCacheImages",
                    "type": "",
                    "desc": "<p>Sets whether the raster cache should checkerboard cached entries. This is\nonly useful for debugging purposes.<\/p>\n<p>The compositor can sometimes decide to cache certain portions of the\nwidget hierarchy. Such portions typically don't change often from frame to\nframe and are expensive to render. This can speed up overall rendering. However,\nthere is certain upfront cost to constructing these cache entries. And, if\nthe cache entries are not used very often, this cost may not be worth the\nspeedup in rendering of subsequent frames. If the developer wants to be certain\nthat populating the raster cache is not causing stutters, this option can be\nset. Depending on the observations made, hints can be provided to the compositor\nthat aid it in making better decisions about caching.<\/p>\n<p>Currently this interface is difficult to use by end-developers. If you're\ninterested in using this feature, please contact <a href=\"https:\/\/groups.google.com\/forum\/#!forum\/flutter-dev\">flutter-dev<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "checkerboard",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/setCheckerboardRasterCacheImages.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCheckerboardRasterCacheImages(bool checkerboard) native 'SceneBuilder_setCheckerboardRasterCacheImages';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setRasterizerTracingThreshold",
                    "type": "",
                    "desc": "<p>Sets a threshold after which additional debugging information should be recorded.<\/p>\n<p>Currently this interface is difficult to use by end-developers. If you're\ninterested in using this feature, please contact <a href=\"https:\/\/groups.google.com\/forum\/#!forum\/flutter-dev\">flutter-dev<\/a>.\nWe'll hopefully be able to figure out how to make this feature more useful\nto you.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "frameInterval",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneBuilder\/setRasterizerTracingThreshold.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRasterizerTracingThreshold(int frameInterval) native 'SceneBuilder_setRasterizerTracingThreshold';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SceneBuilder-class.html",
            "desc": "<p>Builds a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> containing the given visuals.<\/p>\n<p>A <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> can then be rendered using <a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>.<\/p>\n<p>To draw graphical operations onto a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a>, first create a\n<a href=\"dart-ui\/Picture-class.html\">Picture<\/a> using a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> and a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, and then add\nit to the scene using <a href=\"dart-ui\/SceneBuilder\/addPicture.html\">addPicture<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SceneBuilder"
        },
        {
            "name": "dart:ui.SceneHost",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "SceneHost",
                    "type": "",
                    "desc": "<p>Creates a host for a child scene.<\/p>\n<p>The export token is bound to a scene graph node which acts as a container\nfor the child's content.  The creator of the scene host is responsible for\nsending the corresponding import token (the other endpoint of the event pair)\nto the child.<\/p>\n<p>The export token is a dart:zircon Handle, but that type isn't\navailable here. This is called by ChildViewConnection in\n\/\/topaz\/public\/dart\/fuchsia_scenic_flutter\/.<\/p>\n<p>The scene host takes ownership of the provided export token handle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneHost",
                    "sig": "",
                    "params": [
                        {
                            "name": "exportTokenHandle",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/SceneHost\/SceneHost.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SceneHost(dynamic exportTokenHandle) {\n  _constructor(exportTokenHandle);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Releases the resources associated with the child scene host.<\/p>\n<p>After calling this function, the child scene host cannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SceneHost",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SceneHost\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'SceneHost_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SceneHost-class.html",
            "desc": "<p>(Fuchsia-only) Hosts content provided by another application.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SceneHost"
        },
        {
            "name": "dart:ui.SemanticsAction",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsAction",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsAction\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  switch (index) {\n    case _kTapIndex:\n      return 'SemanticsAction.tap';\n    case _kLongPressIndex:\n      return 'SemanticsAction.longPress';\n    case _kScrollLeftIndex:\n      return 'SemanticsAction.scrollLeft';\n    case _kScrollRightIndex:\n      return 'SemanticsAction.scrollRight';\n    case _kScrollUpIndex:\n      return 'SemanticsAction.scrollUp';\n    case _kScrollDownIndex:\n      return 'SemanticsAction.scrollDown';\n    case _kIncreaseIndex:\n      return 'SemanticsAction.increase';\n    case _kDecreaseIndex:\n      return 'SemanticsAction.decrease';\n    case _kShowOnScreenIndex:\n      return 'SemanticsAction.showOnScreen';\n    case _kMoveCursorForwardByCharacterIndex:\n      return 'SemanticsAction.moveCursorForwardByCharacter';\n    case _kMoveCursorBackwardByCharacterIndex:\n      return 'SemanticsAction.moveCursorBackwardByCharacter';\n    case _kSetSelectionIndex:\n      return 'SemanticsAction.setSelection';\n    case _kCopyIndex:\n      return 'SemanticsAction.copy';\n    case _kCutIndex:\n      return 'SemanticsAction.cut';\n    case _kPasteIndex:\n      return 'SemanticsAction.paste';\n    case _kDidGainAccessibilityFocusIndex:\n      return 'SemanticsAction.didGainAccessibilityFocus';\n    case _kDidLoseAccessibilityFocusIndex:\n      return 'SemanticsAction.didLoseAccessibilityFocus';\n    case _kCustomAction:\n      return 'SemanticsAction.customAction';\n    case _kDismissIndex:\n      return 'SemanticsAction.dismiss';\n    case _kMoveCursorForwardByWordIndex:\n      return 'SemanticsAction.moveCursorForwardByWord';\n    case _kMoveCursorBackwardByWordIndex:\n      return 'SemanticsAction.moveCursorBackwardByWord';\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/copy-constant.html",
                    "desc": "<p>Copy the current selection to the clipboard.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction copy = const SemanticsAction._(_kCopyIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "copy",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/customAction-constant.html",
                    "desc": "<p>Indicates that the user has invoked a custom accessibility action.<\/p>\n<p>This handler is added automatically whenever a custom accessibility\naction is added to a semantics node.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction customAction = const SemanticsAction._(_kCustomAction)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "customAction",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/cut-constant.html",
                    "desc": "<p>Cut the current selection and place it in the clipboard.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction cut = const SemanticsAction._(_kCutIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "cut",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/decrease-constant.html",
                    "desc": "<p>A request to decrease the value represented by the semantics node.<\/p>\n<p>For example, this action might be recognized by a slider control.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction decrease = const SemanticsAction._(_kDecreaseIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "decrease",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html",
                    "desc": "<p>Indicates that the node has gained accessibility focus.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction didGainAccessibilityFocus = const SemanticsAction._(_kDidGainAccessibilityFocusIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "didGainAccessibilityFocus",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html",
                    "desc": "<p>Indicates that the node has lost accessibility focus.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction didLoseAccessibilityFocus = const SemanticsAction._(_kDidLoseAccessibilityFocusIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "didLoseAccessibilityFocus",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/dismiss-constant.html",
                    "desc": "<p>A request that the node should be dismissed.<\/p>\n<p>A <code>Snackbar<\/code>, for example, may have a dismiss action to indicate to the\nuser that it can be removed after it is no longer relevant. On Android,\n(with TalkBack) special hint text is spoken when focusing the node and\na custom action is available in the local context menu. On iOS,\n(with VoiceOver) users can perform a standard gesture to dismiss it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction dismiss = const SemanticsAction._(_kDismissIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "dismiss",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/increase-constant.html",
                    "desc": "<p>A request to increase the value represented by the semantics node.<\/p>\n<p>For example, this action might be recognized by a slider control.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction increase = const SemanticsAction._(_kIncreaseIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "increase",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The numerical value for this action.<\/p>\n<p>Each action has one bit set in this bit field.<\/p>\n        ",
                    "memberOf": "dart:ui.SemanticsAction",
                    "isConstant": false,
                    "href": "dart-ui\/SemanticsAction\/index.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/longPress-constant.html",
                    "desc": "<p>The equivalent of a user pressing and holding the screen with the finger\nfor a few seconds without moving it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction longPress = const SemanticsAction._(_kLongPressIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "longPress",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/moveCursorBackwardByCharacter-constant.html",
                    "desc": "<p>Move the cursor backward by one character.<\/p>\n<p>This is for example used by the cursor control in text fields.<\/p>\n<p>The action includes a boolean argument, which indicates whether the cursor\nmovement should extend (or start) a selection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction moveCursorBackwardByCharacter = const SemanticsAction._(_kMoveCursorBackwardByCharacterIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "moveCursorBackwardByCharacter",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/moveCursorBackwardByWord-constant.html",
                    "desc": "<p>Move the cursor backward by one word.<\/p>\n<p>This is for example used by the cursor control in text fields.<\/p>\n<p>The action includes a boolean argument, which indicates whether the cursor\nmovement should extend (or start) a selection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction moveCursorBackwardByWord = const SemanticsAction._(_kMoveCursorBackwardByWordIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "moveCursorBackwardByWord",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/moveCursorForwardByCharacter-constant.html",
                    "desc": "<p>Move the cursor forward by one character.<\/p>\n<p>This is for example used by the cursor control in text fields.<\/p>\n<p>The action includes a boolean argument, which indicates whether the cursor\nmovement should extend (or start) a selection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction moveCursorForwardByCharacter = const SemanticsAction._(_kMoveCursorForwardByCharacterIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "moveCursorForwardByCharacter",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/moveCursorForwardByWord-constant.html",
                    "desc": "<p>Move the cursor forward by one word.<\/p>\n<p>This is for example used by the cursor control in text fields.<\/p>\n<p>The action includes a boolean argument, which indicates whether the cursor\nmovement should extend (or start) a selection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction moveCursorForwardByWord = const SemanticsAction._(_kMoveCursorForwardByWordIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "moveCursorForwardByWord",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/paste-constant.html",
                    "desc": "<p>Paste the current content of the clipboard.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction paste = const SemanticsAction._(_kPasteIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "paste",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/scrollDown-constant.html",
                    "desc": "<p>The equivalent of a user moving their finger across the screen from top\nto bottom.<\/p>\n<p>This action should be recognized by controls that are vertically\nscrollable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction scrollDown = const SemanticsAction._(_kScrollDownIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollDown",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/scrollLeft-constant.html",
                    "desc": "<p>The equivalent of a user moving their finger across the screen from right\nto left.<\/p>\n<p>This action should be recognized by controls that are horizontally\nscrollable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction scrollLeft = const SemanticsAction._(_kScrollLeftIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollLeft",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/scrollRight-constant.html",
                    "desc": "<p>The equivalent of a user moving their finger across the screen from left\nto right.<\/p>\n<p>This action should be recognized by controls that are horizontally\nscrollable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction scrollRight = const SemanticsAction._(_kScrollRightIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollRight",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/scrollUp-constant.html",
                    "desc": "<p>The equivalent of a user moving their finger across the screen from\nbottom to top.<\/p>\n<p>This action should be recognized by controls that are vertically\nscrollable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction scrollUp = const SemanticsAction._(_kScrollUpIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollUp",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/setSelection-constant.html",
                    "desc": "<p>Set the text selection to the given range.<\/p>\n<p>The provided argument is a Map&lt;String, int&gt; which includes the keys <code>base<\/code>\nand <code>extent<\/code> indicating where the selection within the <code>value<\/code> of the\nsemantics node should start and where it should end. Values for both\nkeys can range from 0 to length of <code>value<\/code> (inclusive).<\/p>\n<p>Setting <code>base<\/code> and <code>extent<\/code> to the same value will move the cursor to\nthat position (without selecting anything).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction setSelection = const SemanticsAction._(_kSetSelectionIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "setSelection",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/showOnScreen-constant.html",
                    "desc": "<p>A request to fully show the semantics node on screen.<\/p>\n<p>For example, this action might be send to a node in a scrollable list that\nis partially off screen to bring it on screen.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction showOnScreen = const SemanticsAction._(_kShowOnScreenIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "showOnScreen",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/tap-constant.html",
                    "desc": "<p>The equivalent of a user briefly tapping the screen with the finger\nwithout moving it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsAction tap = const SemanticsAction._(_kTapIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "tap",
                    "memberOf": "dart:ui.SemanticsAction"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsAction\/values-constant.html",
                    "desc": "<p>The possible semantics actions.<\/p>\n<p>The map's key is the <a href=\"dart-ui\/SemanticsAction\/index.html\">index<\/a> of the action and the value is the action\nitself.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Map&lt;int, SemanticsAction&gt; values = const &lt;int, SemanticsAction&gt;{\n  _kTapIndex: tap,\n  _kLongPressIndex: longPress,\n  _kScrollLeftIndex: scrollLeft,\n  _kScrollRightIndex: scrollRight,\n  _kScrollUpIndex: scrollUp,\n  _kScrollDownIndex: scrollDown,\n  _kIncreaseIndex: increase,\n  _kDecreaseIndex: decrease,\n  _kShowOnScreenIndex: showOnScreen,\n  _kMoveCursorForwardByCharacterIndex: moveCursorForwardByCharacter,\n  _kMoveCursorBackwardByCharacterIndex: moveCursorBackwardByCharacter,\n  _kSetSelectionIndex: setSelection,\n  _kCopyIndex: copy,\n  _kCutIndex: cut,\n  _kPasteIndex: paste,\n  _kDidGainAccessibilityFocusIndex: didGainAccessibilityFocus,\n  _kDidLoseAccessibilityFocusIndex: didLoseAccessibilityFocus,\n  _kCustomAction: customAction,\n  _kDismissIndex: dismiss,\n  _kMoveCursorForwardByWordIndex: moveCursorForwardByWord,\n  _kMoveCursorBackwardByWordIndex: moveCursorBackwardByWord,\n}\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "values",
                    "memberOf": "dart:ui.SemanticsAction"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SemanticsAction-class.html",
            "desc": "<p>The possible actions that can be conveyed from the operating system\naccessibility APIs to a semantics node.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SemanticsAction"
        },
        {
            "name": "dart:ui.SemanticsActionCallback",
            "type": "",
            "desc": "<p>Signature for <a href=\"dart-ui\/Window\/onSemanticsAction.html\">Window.onSemanticsAction<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "action",
                    "type": "dart:ui.SemanticsAction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "args",
                    "type": "dart:typed_data.ByteData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/SemanticsActionCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef SemanticsActionCallback = void Function(int id, SemanticsAction action, ByteData args);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.SemanticsFlag",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsFlag",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsFlag\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  switch (index) {\n    case _kHasCheckedStateIndex:\n      return 'SemanticsFlag.hasCheckedState';\n    case _kIsCheckedIndex:\n      return 'SemanticsFlag.isChecked';\n    case _kIsSelectedIndex:\n      return 'SemanticsFlag.isSelected';\n    case _kIsButtonIndex:\n      return 'SemanticsFlag.isButton';\n    case _kIsTextFieldIndex:\n      return 'SemanticsFlag.isTextField';\n    case _kIsFocusedIndex:\n      return 'SemanticsFlag.isFocused';\n    case _kHasEnabledStateIndex:\n      return 'SemanticsFlag.hasEnabledState';\n    case _kIsEnabledIndex:\n      return 'SemanticsFlag.isEnabled';\n    case _kIsInMutuallyExclusiveGroupIndex:\n      return 'SemanticsFlag.isInMutuallyExclusiveGroup';\n    case _kIsHeaderIndex:\n      return 'SemanticsFlag.isHeader';\n    case _kIsObscuredIndex:\n      return 'SemanticsFlag.isObscured';\n    case _kScopesRouteIndex:\n      return 'SemanticsFlag.scopesRoute';\n    case _kNamesRouteIndex:\n      return 'SemanticsFlag.namesRoute';\n    case _kIsHiddenIndex:\n      return 'SemanticsFlag.isHidden';\n    case _kIsImageIndex:\n      return 'SemanticsFlag.isImage';\n    case _kIsLiveRegionIndex:\n      return 'SemanticsFlag.isLiveRegion';\n    case _kHasToggledStateIndex:\n      return 'SemanticsFlag.hasToggledState';\n    case _kIsToggledIndex:\n      return 'SemanticsFlag.isToggled';\n    case _kHasImplicitScrollingIndex:\n      return 'SemanticsFlag.hasImplicitScrolling';\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/hasCheckedState-constant.html",
                    "desc": "<p>The semantics node has the quality of either being \"checked\" or \"unchecked\".<\/p>\n<p>This flag is mutually exclusive with <a href=\"dart-ui\/SemanticsFlag\/hasToggledState-constant.html\">hasToggledState<\/a>.<\/p>\n<p>For example, a checkbox or a radio button widget has checked state.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/isChecked-constant.html\">SemanticsFlag.isChecked<\/a>, which controls whether the node is \"checked\" or \"unchecked\".<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag hasCheckedState = const SemanticsFlag._(_kHasCheckedStateIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hasCheckedState",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/hasEnabledState-constant.html",
                    "desc": "<p>The semantics node has the quality of either being \"enabled\" or\n\"disabled\".<\/p>\n<p>For example, a button can be enabled or disabled and therefore has an\n\"enabled\" state. Static text is usually neither enabled nor disabled and\ntherefore does not have an \"enabled\" state.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag hasEnabledState = const SemanticsFlag._(_kHasEnabledStateIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hasEnabledState",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/hasImplicitScrolling-constant.html",
                    "desc": "<p>Whether the platform can scroll the semantics node when the user attempts\nto move focus to an offscreen child.<\/p>\n<p>For example, a <a href=\"widgets\/ListView-class.html\">ListView<\/a> widget has implicit scrolling so that users can\neasily move the accessibility focus to the next set of children. A\n<a href=\"widgets\/PageView-class.html\">PageView<\/a> widget does not have implicit scrolling, so that users don't\nnavigate to the next page when reaching the end of the current one.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag hasImplicitScrolling = const SemanticsFlag._(_kHasImplicitScrollingIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hasImplicitScrolling",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/hasToggledState-constant.html",
                    "desc": "<p>The semantics node has the quality of either being \"on\" or \"off\".<\/p>\n<p>This flag is mutually exclusive with <a href=\"dart-ui\/SemanticsFlag\/hasCheckedState-constant.html\">hasCheckedState<\/a>.<\/p>\n<p>For example, a switch has toggled state.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/isToggled-constant.html\">SemanticsFlag.isToggled<\/a>, which controls whether the node is \"on\" or \"off\".<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag hasToggledState = const SemanticsFlag._(_kHasToggledStateIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hasToggledState",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The numerical value for this flag.<\/p>\n<p>Each flag has one bit set in this bit field.<\/p>\n        ",
                    "memberOf": "dart:ui.SemanticsFlag",
                    "isConstant": false,
                    "href": "dart-ui\/SemanticsFlag\/index.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isButton-constant.html",
                    "desc": "<p>Whether the semantic node represents a button.<\/p>\n<p>Platforms has special handling for buttons, for example Android's TalkBack\nand iOS's VoiceOver provides an additional hint when the focused object is\na button.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isButton = const SemanticsFlag._(_kIsButtonIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isButton",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isChecked-constant.html",
                    "desc": "<p>Whether a semantics node that <a href=\"dart-ui\/SemanticsFlag\/hasCheckedState-constant.html\">hasCheckedState<\/a> is checked.<\/p>\n<p>If true, the semantics node is \"checked\". If false, the semantics node is\n\"unchecked\".<\/p>\n<p>For example, if a checkbox has a visible checkmark, <a href=\"dart-ui\/SemanticsFlag\/isChecked-constant.html\">isChecked<\/a> is true.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/hasCheckedState-constant.html\">SemanticsFlag.hasCheckedState<\/a>, which enables a checked state.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isChecked = const SemanticsFlag._(_kIsCheckedIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isChecked",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isEnabled-constant.html",
                    "desc": "<p>Whether a semantic node that <a href=\"dart-ui\/SemanticsFlag\/hasEnabledState-constant.html\">hasEnabledState<\/a> is currently enabled.<\/p>\n<p>A disabled element does not respond to user interaction. For example, a\nbutton that currently does not respond to user interaction should be\nmarked as disabled.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isEnabled = const SemanticsFlag._(_kIsEnabledIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isEnabled",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isFocused-constant.html",
                    "desc": "<p>Whether the semantic node currently holds the user's focus.<\/p>\n<p>The focused element is usually the current receiver of keyboard inputs.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isFocused = const SemanticsFlag._(_kIsFocusedIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isFocused",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isHeader-constant.html",
                    "desc": "<p>Whether a semantic node is a header that divides content into sections.<\/p>\n<p>For example, headers can be used to divide a list of alphabetically\nsorted words into the sections A, B, C, etc. as can be found in many\naddress book applications.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isHeader = const SemanticsFlag._(_kIsHeaderIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isHeader",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isHidden-constant.html",
                    "desc": "<p>Whether the semantics node is considered hidden.<\/p>\n<p>Hidden elements are currently not visible on screen. They may be covered\nby other elements or positioned outside of the visible area of a viewport.<\/p>\n<p>Hidden elements cannot gain accessibility focus though regular touch. The\nonly way they can be focused is by moving the focus to them via linear\nnavigation.<\/p>\n<p>Platforms are free to completely ignore hidden elements and new platforms\nare encouraged to do so.<\/p>\n<p>Instead of marking an element as hidden it should usually be excluded from\nthe semantics tree altogether. Hidden elements are only included in the\nsemantics tree to work around platform limitations and they are mainly\nused to implement accessibility scrolling on iOS.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isHidden = const SemanticsFlag._(_kIsHiddenIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isHidden",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isImage-constant.html",
                    "desc": "<p>Whether the semantics node represents an image.<\/p>\n<p>Both TalkBack and VoiceOver will inform the user the the semantics node\nrepresents an image.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isImage = const SemanticsFlag._(_kIsImageIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isImage",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isInMutuallyExclusiveGroup-constant.html",
                    "desc": "<p>Whether a semantic node is in a mutually exclusive group.<\/p>\n<p>For example, a radio button is in a mutually exclusive group because\nonly one radio button in that group can be marked as <a href=\"dart-ui\/SemanticsFlag\/isChecked-constant.html\">isChecked<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isInMutuallyExclusiveGroup = const SemanticsFlag._(_kIsInMutuallyExclusiveGroupIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isInMutuallyExclusiveGroup",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isLiveRegion-constant.html",
                    "desc": "<p>Whether the semantics node is a live region.<\/p>\n<p>A live region indicates that updates to semantics node are important.\nPlatforms may use this information to make polite announcements to the\nuser to inform them of updates to this node.<\/p>\n<p>An example of a live region is a <a href=\"material\/SnackBar-class.html\">SnackBar<\/a> widget. On Android, A live\nregion causes a polite announcement to be generated automatically, even\nif the user does not have focus of the widget.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isLiveRegion = const SemanticsFlag._(_kIsLiveRegionIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isLiveRegion",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isObscured-constant.html",
                    "desc": "<p>Whether the value of the semantics node is obscured.<\/p>\n<p>This is usually used for text fields to indicate that its content\nis a password or contains other sensitive information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isObscured = const SemanticsFlag._(_kIsObscuredIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isObscured",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isSelected-constant.html",
                    "desc": "<p>Whether a semantics node is selected.<\/p>\n<p>If true, the semantics node is \"selected\". If false, the semantics node is\n\"unselected\".<\/p>\n<p>For example, the active tab in a tab bar has <a href=\"dart-ui\/SemanticsFlag\/isSelected-constant.html\">isSelected<\/a> set to true.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isSelected = const SemanticsFlag._(_kIsSelectedIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isSelected",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isTextField-constant.html",
                    "desc": "<p>Whether the semantic node represents a text field.<\/p>\n<p>Text fields are announced as such and allow text input via accessibility\naffordances.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isTextField = const SemanticsFlag._(_kIsTextFieldIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isTextField",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/isToggled-constant.html",
                    "desc": "<p>If true, the semantics node is \"on\". If false, the semantics node is\n\"off\".<\/p>\n<p>For example, if a switch is in the on position, <a href=\"dart-ui\/SemanticsFlag\/isToggled-constant.html\">isToggled<\/a> is true.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/hasToggledState-constant.html\">SemanticsFlag.hasToggledState<\/a>, which enables a toggled state.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag isToggled = const SemanticsFlag._(_kIsToggledIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "isToggled",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/namesRoute-constant.html",
                    "desc": "<p>Whether the semantics node label is the name of a visually distinct\nroute.<\/p>\n<p>This is used by certain widgets like Drawers and Dialogs, to indicate\nthat the node's semantic label can be used to announce an edge triggered\nsemantics update.<\/p>\n<p>Semantic nodes annotated with this flag will still receive a11y focus.<\/p>\n<p>Updating this label within the same active route subtree will not cause\nadditional announcements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag namesRoute = const SemanticsFlag._(_kNamesRouteIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "namesRoute",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/scopesRoute-constant.html",
                    "desc": "<p>Whether the semantics node is the root of a subtree for which a route name\nshould be announced.<\/p>\n<p>When a node with this flag is removed from the semantics tree, the\nframework will select the last in depth-first, paint order node with this\nflag.  When a node with this flag is added to the semantics tree, it is\nselected automatically, unless there were multiple nodes with this flag\nadded.  In this case, the last added node in depth-first, paint order\nwill be selected.<\/p>\n<p>From this selected node, the framework will search in depth-first, paint\norder for the first node with a <a href=\"dart-ui\/SemanticsFlag\/namesRoute-constant.html\">namesRoute<\/a> flag and a non-null,\nnon-empty label. The <a href=\"dart-ui\/SemanticsFlag\/namesRoute-constant.html\">namesRoute<\/a> and <a href=\"dart-ui\/SemanticsFlag\/scopesRoute-constant.html\">scopesRoute<\/a> flags may be on the\nsame node. The label of the found node will be announced as an edge\ntransition. If no non-empty, non-null label is found then:<\/p>\n<ul>\n<li>VoiceOver will make a chime announcement.<\/li>\n<li>TalkBack will make no announcement<\/li>\n<\/ul>\n<p>Semantic nodes annotated with this flag are generally not a11y focusable.<\/p>\n<p>This is used in widgets such as Routes, Drawers, and Dialogs to\ncommunicate significant changes in the visible screen.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SemanticsFlag scopesRoute = const SemanticsFlag._(_kScopesRouteIndex)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scopesRoute",
                    "memberOf": "dart:ui.SemanticsFlag"
                },
                {
                    "type": "",
                    "href": "dart-ui\/SemanticsFlag\/values-constant.html",
                    "desc": "<p>The possible semantics flags.<\/p>\n<p>The map's key is the <a href=\"dart-ui\/SemanticsFlag\/index.html\">index<\/a> of the flag and the value is the flag itself.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Map&lt;int, SemanticsFlag&gt; values = const &lt;int, SemanticsFlag&gt;{\n  _kHasCheckedStateIndex: hasCheckedState,\n  _kIsCheckedIndex: isChecked,\n  _kIsSelectedIndex: isSelected,\n  _kIsButtonIndex: isButton,\n  _kIsTextFieldIndex: isTextField,\n  _kIsFocusedIndex: isFocused,\n  _kHasEnabledStateIndex: hasEnabledState,\n  _kIsEnabledIndex: isEnabled,\n  _kIsInMutuallyExclusiveGroupIndex: isInMutuallyExclusiveGroup,\n  _kIsHeaderIndex: isHeader,\n  _kIsObscuredIndex: isObscured,\n  _kScopesRouteIndex: scopesRoute,\n  _kNamesRouteIndex: namesRoute,\n  _kIsHiddenIndex: isHidden,\n  _kIsImageIndex: isImage,\n  _kIsLiveRegionIndex: isLiveRegion,\n  _kHasToggledStateIndex: hasToggledState,\n  _kIsToggledIndex: isToggled,\n  _kHasImplicitScrollingIndex: hasImplicitScrolling,\n}\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "values",
                    "memberOf": "dart:ui.SemanticsFlag"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SemanticsFlag-class.html",
            "desc": "<p>A Boolean value that can be associated with a semantics node.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SemanticsFlag"
        },
        {
            "name": "dart:ui.SemanticsUpdate",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Releases the resources used by this semantics update.<\/p>\n<p>After calling this function, the semantics update is cannot be used\nfurther.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsUpdate",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsUpdate\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() native 'SemanticsUpdate_dispose';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SemanticsUpdate-class.html",
            "desc": "<p>An opaque object representing a batch of semantics updates.<\/p>\n<p>To create a SemanticsUpdate object, use a <a href=\"dart-ui\/SemanticsUpdateBuilder-class.html\">SemanticsUpdateBuilder<\/a>.<\/p>\n<p>Semantics updates can be applied to the system's retained semantics tree\nusing the <a href=\"dart-ui\/Window\/updateSemantics.html\">Window.updateSemantics<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SemanticsUpdate"
        },
        {
            "name": "dart:ui.SemanticsUpdateBuilder",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "SemanticsUpdateBuilder",
                    "type": "",
                    "desc": "<p>Creates an empty <a href=\"dart-ui\/SemanticsUpdateBuilder-class.html\">SemanticsUpdateBuilder<\/a> object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsUpdateBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-ui\/SemanticsUpdateBuilder\/SemanticsUpdateBuilder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nSemanticsUpdateBuilder() { _constructor(); }<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "build",
                    "type": "dart:ui.SemanticsUpdate",
                    "desc": "<p>Creates a <a href=\"dart-ui\/SemanticsUpdate-class.html\">SemanticsUpdate<\/a> object that encapsulates the updates recorded\nby this object.<\/p>\n<p>The returned object can be passed to <a href=\"dart-ui\/Window\/updateSemantics.html\">Window.updateSemantics<\/a> to actually\nupdate the semantics retained by the system.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsUpdateBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsUpdateBuilder\/build.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsUpdate build() native 'SemanticsUpdateBuilder_build';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "updateCustomAction",
                    "type": "",
                    "desc": "<p>Update the custom semantics action associated with the given <code>id<\/code>.<\/p>\n<p>The name of the action exposed to the user is the <code>label<\/code>. For overridden\nstandard actions this value is ignored.<\/p>\n<p>The <code>hint<\/code> should describe what happens when an action occurs, not the\nmanner in which a tap is accomplished. For example, use \"delete\" instead\nof \"double tap to delete\".<\/p>\n<p>The text direction of the <code>hint<\/code> and <code>label<\/code> is the same as the global\nwindow.<\/p>\n<p>For overridden standard actions, <code>overrideId<\/code> corresponds with a\n<a href=\"dart-ui\/SemanticsAction\/index.html\">SemanticsAction.index<\/a> value. For custom actions this argument should not be\nprovided.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsUpdateBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "label",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hint",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "overrideId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsUpdateBuilder\/updateCustomAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateCustomAction({int id, String label, String hint, int overrideId = -1}) {\n  assert(id != null);\n  assert(overrideId != null);\n  _updateCustomAction(id, label, hint, overrideId);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateNode",
                    "type": "",
                    "desc": "<p>Update the information associated with the node with the given <code>id<\/code>.<\/p>\n<p>The semantics nodes form a tree, with the root of the tree always having\nan id of zero. The <code>childrenInTraversalOrder<\/code> and <code>childrenInHitTestOrder<\/code>\nare the ids of the nodes that are immediate children of this node. The\nformer enumerates children in traversal order, and the latter enumerates\nthe same children in the hit test order. The two lists must have the same\nlength and contain the same ids. They may only differ in the order the\nids are listed in. For more information about different child orders, see\n<a href=\"semantics\/DebugSemanticsDumpOrder-class.html\">DebugSemanticsDumpOrder<\/a>.<\/p>\n<p>The system retains the nodes that are currently reachable from the root.\nA given update need not contain information for nodes that do not change\nin the update. If a node is not reachable from the root after an update,\nthe node will be discarded from the tree.<\/p>\n<p>The <code>flags<\/code> are a bit field of <a href=\"dart-ui\/SemanticsFlag-class.html\">SemanticsFlag<\/a>s that apply to this node.<\/p>\n<p>The <code>actions<\/code> are a bit field of <a href=\"dart-ui\/SemanticsAction-class.html\">SemanticsAction<\/a>s that can be undertaken\nby this node. If the user wishes to undertake one of these actions on this\nnode, the <a href=\"dart-ui\/Window\/onSemanticsAction.html\">Window.onSemanticsAction<\/a> will be called with <code>id<\/code> and one of\nthe possible <a href=\"dart-ui\/SemanticsAction-class.html\">SemanticsAction<\/a>s. Because the semantics tree is maintained\nasynchronously, the <a href=\"dart-ui\/Window\/onSemanticsAction.html\">Window.onSemanticsAction<\/a> callback might be called\nwith an action that is no longer possible.<\/p>\n<p>The <code>label<\/code> is a string that describes this node. The <code>value<\/code> property\ndescribes the current value of the node as a string. The <code>increasedValue<\/code>\nstring will become the <code>value<\/code> string after a <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>\naction is performed. The <code>decreasedValue<\/code> string will become the <code>value<\/code>\nstring after a <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action is performed. The <code>hint<\/code>\nstring describes what result an action performed on this node has. The\nreading direction of all these strings is given by <code>textDirection<\/code>.<\/p>\n<p>The fields 'textSelectionBase' and 'textSelectionExtent' describe the\ncurrently selected text within <code>value<\/code>.<\/p>\n<p>The field <code>platformViewId<\/code> references the platform view, whose semantics\nnodes will be added as children to this node. If a platform view is\nspecified, <code>childrenInHitTestOrder<\/code> and <code>childrenInTraversalOrder<\/code> must be\nempty.<\/p>\n<p>For scrollable nodes <code>scrollPosition<\/code> describes the current scroll\nposition in logical pixel. <code>scrollExtentMax<\/code> and <code>scrollExtentMin<\/code>\ndescribe the maximum and minimum in-rage values that <code>scrollPosition<\/code> can\nbe. Both or either may be infinity to indicate unbound scrolling. The\nvalue for <code>scrollPosition<\/code> can (temporarily) be outside this range, for\nexample during an overscroll. <code>scrollChildren<\/code> is the count of the\ntotal number of child nodes that contribute semantics and <code>scrollIndex<\/code>\nis the index of the first visible child node that contributes semantics.<\/p>\n<p>The <code>rect<\/code> is the region occupied by this node in its own coordinate\nsystem.<\/p>\n<p>The <code>transform<\/code> is a matrix that maps this node's coordinate system into\nits parent's coordinate system.<\/p>\n<p>The <code>elevation<\/code> describes the distance in z-direction between this node\nand the <code>elevation<\/code> of the parent.<\/p>\n<p>The <code>thickness<\/code> describes how much space this node occupies in the\nz-direction starting at <code>elevation<\/code>. Basically, in the z-direction the\nnode starts at <code>elevation<\/code> above the parent and ends at <code>elevation<\/code> +\n<code>thickness<\/code> above the parent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.SemanticsUpdateBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flags",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "actions",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textSelectionBase",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textSelectionExtent",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "platformViewId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollChildren",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollIndex",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollPosition",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollExtentMax",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scrollExtentMin",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "elevation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "thickness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "label",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hint",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "increasedValue",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decreasedValue",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "transform",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "childrenInTraversalOrder",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "childrenInHitTestOrder",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "additionalActions",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/SemanticsUpdateBuilder\/updateNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateNode({\n  int id,\n  int flags,\n  int actions,\n  int textSelectionBase,\n  int textSelectionExtent,\n  int platformViewId,\n  int scrollChildren,\n  int scrollIndex,\n  double scrollPosition,\n  double scrollExtentMax,\n  double scrollExtentMin,\n  double elevation,\n  double thickness,\n  Rect rect,\n  String label,\n  String hint,\n  String value,\n  String increasedValue,\n  String decreasedValue,\n  TextDirection textDirection,\n  Float64List transform,\n  Int32List childrenInTraversalOrder,\n  Int32List childrenInHitTestOrder,\n  Int32List additionalActions,\n}) {\n  if (transform.length != 16)\n    throw new ArgumentError('transform argument must have 16 entries.');\n  _updateNode(\n    id,\n    flags,\n    actions,\n    textSelectionBase,\n    textSelectionExtent,\n    platformViewId,\n    scrollChildren,\n    scrollIndex,\n    scrollPosition,\n    scrollExtentMax,\n    scrollExtentMin,\n    rect.left,\n    rect.top,\n    rect.right,\n    rect.bottom,\n    elevation,\n    thickness,\n    label,\n    hint,\n    value,\n    increasedValue,\n    decreasedValue,\n    textDirection != null ? textDirection.index + 1 : 0,\n    transform,\n    childrenInTraversalOrder,\n    childrenInHitTestOrder,\n    additionalActions,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/SemanticsUpdateBuilder-class.html",
            "desc": "<p>An object that creates <a href=\"dart-ui\/SemanticsUpdate-class.html\">SemanticsUpdate<\/a> objects.<\/p>\n<p>Once created, the <a href=\"dart-ui\/SemanticsUpdate-class.html\">SemanticsUpdate<\/a> objects can be passed to\n<a href=\"dart-ui\/Window\/updateSemantics.html\">Window.updateSemantics<\/a> to update the semantics conveyed to the user.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SemanticsUpdateBuilder"
        },
        {
            "name": "dart:ui.Shader",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:ui.Gradient",
                "dart:ui.ImageShader"
            ],
            "realImplementors": [
                "dart:ui.Gradient",
                "dart:ui.ImageShader"
            ],
            "cn": [],
            "href": "dart-ui\/Shader-class.html",
            "desc": "<p>Base class for objects such as <a href=\"dart-ui\/Gradient-class.html\">Gradient<\/a> and <a href=\"dart-ui\/ImageShader-class.html\">ImageShader<\/a> which\ncorrespond to shaders as used by <a href=\"dart-ui\/Paint\/shader.html\">Paint.shader<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Shader"
        },
        {
            "name": "dart:ui.Shadow",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Shadow\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! Shadow)\n    return false;\n  final Shadow typedOther = other;\n  return color == typedOther.color &amp;&amp;\n         offset == typedOther.offset &amp;&amp;\n         blurRadius == typedOther.blurRadius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Shadow",
                    "type": "",
                    "desc": "<p>Construct a shadow.<\/p>\n<p>The default shadow is a black shadow with zero offset and zero blur.\nDefault shadows should be completely covered by the casting element,\nand not be visible.<\/p>\n<p>Transparency should be adjusted through the <code>color<\/code> alpha.<\/p>\n<p>Shadow order matters due to compositing multiple translucent objects not\nbeing commutative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blurRadius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Shadow\/Shadow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Shadow({\n  this.color = const Color(_kColorDefault),\n  this.offset = Offset.zero,\n  this.blurRadius = 0.0,\n}) : assert(color != null, 'Text shadow color was null.'),\n     assert(offset != null, 'Text shadow offset was null.'),\n     assert(blurRadius &gt;= 0.0, 'Text shadow blur radius should be non-negative.');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "convertRadiusToSigma",
                    "type": "dart:core.double",
                    "desc": "<p>Converts a blur radius in pixels to sigmas.<\/p>\n<p>See the sigma argument to <a href=\"dart-ui\/MaskFilter\/MaskFilter.blur.html\">MaskFilter.blur<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/convertRadiusToSigma.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ See SkBlurMask::ConvertRadiusToSigma().\n\/\/ &lt;https:\/\/github.com\/google\/skia\/blob\/bb5b77db51d2e149ee66db284903572a5aac09be\/src\/effects\/SkBlurMask.cpp#L23&gt;\nstatic double convertRadiusToSigma(double radius) {\n  return radius * 0.57735 + 0.5;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Shadow",
                    "desc": "<p>Linearly interpolate between two shadows.<\/p>\n<p>If either shadow is null, this function linearly interpolates from a\na shadow that matches the other shadow in color but has a zero\noffset and a zero blurRadius.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Shadow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Shadow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Shadow lerp(Shadow a, Shadow b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return Shadow(\n    color: Color.lerp(a.color, b.color, t),\n    offset: Offset.lerp(a.offset, b.offset, t),\n    blurRadius: lerpDouble(a.blurRadius, b.blurRadius, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpList",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "<p>Linearly interpolate between two lists of shadows.<\/p>\n<p>If the lists differ in length, excess items are lerped with null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:core.List<dart:ui.Shadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Shadow"
                            ]
                        },
                        {
                            "name": "b",
                            "type": "dart:core.List<dart:ui.Shadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Shadow"
                            ]
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/lerpList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;Shadow&gt; lerpList(List&lt;Shadow&gt; a, List&lt;Shadow&gt; b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= &lt;Shadow&gt;[];\n  b ??= &lt;Shadow&gt;[];\n  final List&lt;Shadow&gt; result = &lt;Shadow&gt;[];\n  final int commonLength = math.min(a.length, b.length);\n  for (int i = 0; i &lt; commonLength; i += 1)\n    result.add(Shadow.lerp(a[i], b[i], t));\n  for (int i = commonLength; i &lt; a.length; i += 1)\n    result.add(a[i].scale(1.0 - t));\n  for (int i = commonLength; i &lt; b.length; i += 1)\n    result.add(b[i].scale(t));\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                },
                {
                    "name": "scale",
                    "type": "dart:ui.Shadow",
                    "desc": "<p>Returns a new shadow with its <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> and <a href=\"dart-ui\/Shadow\/blurRadius.html\">blurRadius<\/a> scaled by the given\nfactor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Shadow scale(double factor) {\n  return Shadow(\n    color: color,\n    offset: offset * factor,\n    blurRadius: blurRadius * factor,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toPaint",
                    "type": "dart:ui.Paint",
                    "desc": "<p>Create the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that corresponds to this shadow description.<\/p>\n<p>The <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> is not represented in the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object.\nTo honor this as well, the shape should be translated by <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> before\nbeing filled using this <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n<p>This class does not provide a way to disable shadows to avoid\ninconsistencies in shadow blur rendering, primarily as a method of\nreducing test flakiness. <a href=\"dart-ui\/Shadow\/toPaint.html\">toPaint<\/a> should be overridden in subclasses to\nprovide this functionality.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/toPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Paint toPaint() {\n  return Paint()\n    ..color = color\n    ..maskFilter = MaskFilter.blur(BlurStyle.normal, blurSigma);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Shadow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Shadow\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TextShadow($color, $offset, $blurRadius)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "blurRadius",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The standard deviation of the Gaussian to convolve with the shadow's shape.<\/p>\n        ",
                    "memberOf": "dart:ui.Shadow",
                    "isConstant": false,
                    "href": "dart-ui\/Shadow\/blurRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double blurRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "blurSigma",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-ui\/Shadow\/blurRadius.html\">blurRadius<\/a> in sigmas instead of logical pixels.<\/p>\n<p>See the sigma argument to <a href=\"dart-ui\/MaskFilter\/MaskFilter.blur.html\">MaskFilter.blur<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Shadow",
                    "isConstant": false,
                    "href": "dart-ui\/Shadow\/blurSigma.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blurSigma =&gt; convertRadiusToSigma(blurRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>Color that the shadow will be drawn with.<\/p>\n<p>The shadows are shapes composited directly over the base canvas, and do not\nrepresent optical occlusion.<\/p>\n        ",
                    "memberOf": "dart:ui.Shadow",
                    "isConstant": false,
                    "href": "dart-ui\/Shadow\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Shadow\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Shadow",
                    "isConstant": false,
                    "href": "dart-ui\/Shadow\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, offset, blurRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The displacement of the shadow from the casting element.<\/p>\n<p>Positive x\/y offsets will shift the shadow to the right and down, while\nnegative offsets shift the shadow to the left and up. The offsets are\nrelative to the position of the element that is casting it.<\/p>\n        ",
                    "memberOf": "dart:ui.Shadow",
                    "isConstant": false,
                    "href": "dart-ui\/Shadow\/offset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset offset\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.BoxShadow"
            ],
            "realImplementors": [
                "painting.BoxShadow"
            ],
            "cn": [],
            "href": "dart-ui\/Shadow-class.html",
            "desc": "<p>A single shadow.<\/p>\n<p>Multiple shadows are stacked together in a <a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Shadow"
        },
        {
            "name": "dart:ui.Size",
            "extends": [
                "dart:ui.OffsetBase",
                "dart:core.Object"
            ],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "dart:ui.Size",
                    "desc": "<p>Modulo (remainder) operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the remainder of dividing the\nleft-hand-side operand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator %(double operand) =&gt; new Size(width % operand, height % operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "dart:ui.Size",
                    "desc": "<p>Multiplication operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) multiplied by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator *(double operand) =&gt; new Size(width * operand, height * operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "dart:ui.Size",
                    "desc": "<p>Binary addition operator for adding an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> to a <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> is the sum of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> of the\nleft-hand-side operand, a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, and the <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> dimension of the\nright-hand-side operand, an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, and whose <a href=\"dart-ui\/Size\/height.html\">height<\/a> is the sum of the\n<a href=\"dart-ui\/Size\/height.html\">height<\/a> of the left-hand-side operand and the <a href=\"dart-ui\/Offset\/dy.html\">Offset.dy<\/a> dimension of\nthe right-hand-side operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator +(Offset other) =&gt; new Size(width + other.dx, height + other.dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "dart:ui.OffsetBase",
                    "desc": "<p>Binary subtraction operator for <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>Subtracting a <a href=\"dart-ui\/Size-class.html\">Size<\/a> from a <a href=\"dart-ui\/Size-class.html\">Size<\/a> returns the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> that describes how\nmuch bigger the left-hand-side operand is than the right-hand-side\noperand. Adding that resulting <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> to the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that was the\nright-hand-side operand would return a <a href=\"dart-ui\/Size-class.html\">Size<\/a> equal to the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that was\nthe left-hand-side operand. (i.e. if <code>sizeA - sizeB -&gt; offsetA<\/code>, then\n<code>offsetA + sizeB -&gt; sizeA<\/code>)<\/p>\n<p>Subtracting an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from a <a href=\"dart-ui\/Size-class.html\">Size<\/a> returns the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that is smaller than\nthe <a href=\"dart-ui\/Size-class.html\">Size<\/a> operand by the difference given by the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> operand. In other\nwords, the returned <a href=\"dart-ui\/Size-class.html\">Size<\/a> has a <a href=\"dart-ui\/Size\/width.html\">width<\/a> consisting of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> of the\nleft-hand-side operand minus the <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> dimension of the\nright-hand-side operand, and a <a href=\"dart-ui\/Size\/height.html\">height<\/a> consisting of the <a href=\"dart-ui\/Size\/height.html\">height<\/a> of the\nleft-hand-side operand minus the <a href=\"dart-ui\/Offset\/dy.html\">Offset.dy<\/a> dimension of the\nright-hand-side operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.OffsetBase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OffsetBase operator -(OffsetBase other) {\n  if (other is Size)\n    return new Offset(width - other.width, height - other.height);\n  if (other is Offset)\n    return new Size(width - other.dx, height - other.dy);\n  throw new ArgumentError(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "dart:ui.Size",
                    "desc": "<p>Division operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) divided by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator \/(double operand) =&gt; new Size(width \/ operand, height \/ operand);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>Compares two Sizes for equality.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ We don't compare the runtimeType because of _DebugSize in the framework.\n@override\nbool operator ==(dynamic other) {\n  if (other is! Size)\n    return false;\n  final Size typedOther = other;\n  return _dx == typedOther._dx &amp;&amp;\n         _dy == typedOther._dy;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>width<\/code> and <code>height<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size(double width, double height) : super(width, height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomCenter",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the center of the bottom edge of the rectangle described by\nthe given offset (which is interpreted as the top-left corner) and this\nsize.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomLeft.html\">Rect.bottomLeft<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/bottomCenter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomCenter(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy + height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomLeft",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the intersection of the bottom and left edges of the\nrectangle described by the given offset (which is interpreted as the\ntop-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomLeft.html\">Rect.bottomLeft<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/bottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomLeft(Offset origin) =&gt; new Offset(origin.dx, origin.dy + height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the intersection of the bottom and right edges of the\nrectangle described by the given offset (which is interpreted as the\ntop-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomRight.html\">Rect.bottomRight<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/bottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy + height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of the rectangle described by the given offset (which is\ninterpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/center.html\">Rect.center<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/center.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset center(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "centerLeft",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the center of the left edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/centerLeft.html\">Rect.centerLeft<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/centerLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset centerLeft(Offset origin) =&gt; new Offset(origin.dx, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "centerRight",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the center of the right edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/centerLeft.html\">Rect.centerLeft<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/centerRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset centerRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the top left of the size) lies between the left and right and\nthe top and bottom edges of a rectangle of this size.<\/p>\n<p>Rectangles include their top and left edges but exclude their bottom and\nright edges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset offset) {\n  return offset.dx &gt;= 0.0 &amp;&amp; offset.dx &lt; width &amp;&amp; offset.dy &gt;= 0.0 &amp;&amp; offset.dy &lt; height;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size.copy",
                    "type": "",
                    "desc": "<p>Creates an instance of <a href=\"dart-ui\/Size-class.html\">Size<\/a> that has the same values as another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.copy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Used by the rendering library's _DebugSize hack.\nSize.copy(Size source) : super(source.width, source.height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size.fromHeight",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>height<\/code> and an infinite <a href=\"dart-ui\/Size\/width.html\">width<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.fromHeight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromHeight(double height) : super(double.infinity, height);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size.fromRadius",
                    "type": "",
                    "desc": "<p>Creates a square <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are twice the given\ndimension.<\/p>\n<p>This is a square that contains a circle with the given radius.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Size\/Size.square.html\">new Size.square<\/a>, which creates a square with the given dimension.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.fromRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromRadius(double radius) : super(radius * 2.0, radius * 2.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size.fromWidth",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>width<\/code> and an infinite <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.fromWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromWidth(double width) : super(width, double.infinity);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "dart:ui.Size",
                    "desc": "<p>Linearly interpolate between two sizes<\/p>\n<p>If either size is null, this function interpolates from <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Size lerp(Size a, Size b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return new Size(lerpDouble(a.width, b.width, t), lerpDouble(a.height, b.height, t));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Size.square",
                    "type": "",
                    "desc": "<p>Creates a square <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are the given dimension.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Size\/Size.fromRadius.html\">new Size.fromRadius<\/a>, which is more convenient when the available size\nis the radius of a circle.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "dimension",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Size\/Size.square.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.square(double dimension) : super(dimension, dimension);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Size(${width?.toStringAsFixed(1)}, ${height?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "topCenter",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the center of the top edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topCenter.html\">Rect.topCenter<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/topCenter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topCenter(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "topLeft",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the intersection of the top and left edges of the rectangle\ndescribed by the given <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> (which is interpreted as the top-left corner)\nand this <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topLeft.html\">Rect.topLeft<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/topLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topLeft(Offset origin) =&gt; origin;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:ui.Offset",
                    "desc": "<p>The offset to the intersection of the top and right edges of the rectangle\ndescribed by the given offset (which is interpreted as the top-left corner)\nand this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topRight.html\">Rect.topRight<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "origin",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/topRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "dart:ui.Size",
                    "desc": "<p>Integer (truncating) division operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) divided by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>), rounded towards zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Size",
                    "sig": "",
                    "params": [
                        {
                            "name": "operand",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Size\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator ~\/(double operand) =&gt; new Size((width ~\/ operand).toDouble(), (height ~\/ operand).toDouble());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "aspectRatio",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The aspect ratio of this size.<\/p>\n<p>This returns the <a href=\"dart-ui\/Size\/width.html\">width<\/a> divided by the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n<p>If the <a href=\"dart-ui\/Size\/width.html\">width<\/a> is zero, the result will be zero. If the <a href=\"dart-ui\/Size\/height.html\">height<\/a> is zero\n(and the <a href=\"dart-ui\/Size\/width.html\">width<\/a> is not), the result will be <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a> or\n<a href=\"dart-core\/double\/negativeInfinity-constant.html\">double.negativeInfinity<\/a> as determined by the sign of <a href=\"dart-ui\/Size\/width.html\">width<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AspectRatio-class.html\">AspectRatio<\/a>, a widget for giving a child widget a specific aspect\nratio.<\/li>\n<li>\n<a href=\"widgets\/FittedBox-class.html\">FittedBox<\/a>, a widget that (in most modes) attempts to maintain a\nchild widget's aspect ratio while changing its size.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/aspectRatio.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get aspectRatio {\n  if (height != 0.0)\n    return width \/ height;\n  if (width &gt; 0.0)\n    return double.infinity;\n  if (width &lt; 0.0)\n    return double.negativeInfinity;\n  return 0.0;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flipped",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>A <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> swapped.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/flipped.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get flipped =&gt; new Size(height, width);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Size\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_dx, _dy);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The vertical extent of this size.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; _dy;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/Size\/infinite-constant.html",
                    "desc": "<p>A size whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are infinite.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isInfinite.html\">isInfinite<\/a>, which checks whether either dimension is infinite.<\/li>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isFinite.html\">isFinite<\/a>, which checks whether both dimensions are finite.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Size infinite = const Size(double.infinity, double.infinity)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "infinite",
                    "memberOf": "dart:ui.Size"
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this size encloses a non-zero area.<\/p>\n<p>Negative areas are considered empty.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; width &lt;= 0.0 || height &lt;= 0.0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "longestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/longestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shortestSide",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/shortestSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The horizontal extent of this size.<\/p>\n        ",
                    "memberOf": "dart:ui.Size",
                    "isConstant": false,
                    "href": "dart-ui\/Size\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; _dx;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/Size\/zero-constant.html",
                    "desc": "<p>An empty size, one with a zero width and a zero height.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Size zero = const Size(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "dart:ui.Size"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "animation.SizeTween"
            ],
            "realImplementors": [
                "animation.SizeTween"
            ],
            "cn": [],
            "href": "dart-ui\/Size-class.html",
            "desc": "<p>Holds a 2D floating-point size.<\/p>\n<p>You can think of this as an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from the origin.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Size"
        },
        {
            "type": "",
            "name": "dart:ui.StrokeCap",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.StrokeCap",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/StrokeCap\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/StrokeCap-class.html",
            "desc": "<p>Styles to use for line endings.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeCap.html\">Paint.strokeCap<\/a> for how this value is used.<\/li>\n<li>\n<a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin<\/a> for the different kinds of line segment joins.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "StrokeCap"
        },
        {
            "type": "",
            "name": "dart:ui.StrokeJoin",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.StrokeJoin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/StrokeJoin\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/StrokeJoin-class.html",
            "desc": "<p>Styles to use for line segment joins.<\/p>\n<p>This only affects line joins for polygons drawn by <a href=\"dart-ui\/Canvas\/drawPath.html\">Canvas.drawPath<\/a> and\nrectangles, not points drawn as lines with <a href=\"dart-ui\/Canvas\/drawPoints.html\">Canvas.drawPoints<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeJoin.html\">Paint.strokeJoin<\/a> and <a href=\"dart-ui\/Paint\/strokeMiterLimit.html\">Paint.strokeMiterLimit<\/a> for how this value is\nused.<\/li>\n<li>\n<a href=\"dart-ui\/StrokeCap-class.html\">StrokeCap<\/a> for the different kinds of line endings.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "StrokeJoin"
        },
        {
            "name": "dart:ui.StrutStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/StrutStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/StrutStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final StrutStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily)\n   return false;\n  final Int8List encodedList = _encoded.buffer.asInt8List();\n  final Int8List otherEncodedList = typedOther._encoded.buffer.asInt8List();\n  for (int index = 0; index &lt; _encoded.lengthInBytes; index += 1) {\n    if (encodedList[index] != otherEncodedList[index])\n      return false;\n  }\n  if (!_listEquals&lt;String&gt;(_fontFamilyFallback, typedOther._fontFamilyFallback))\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "StrutStyle",
                    "type": "",
                    "desc": "<p>Creates a new StrutStyle object.<\/p>\n<ul>\n<li>\n<p><code>fontFamily<\/code>: The name of the font to use when painting the text (e.g.,\nRoboto).<\/p>\n<\/li>\n<li>\n<p><code>fontFamilyFallback<\/code>: An ordered list of font family names that will be searched for when\n the font in <code>fontFamily<\/code> cannot be found.<\/p>\n<\/li>\n<li>\n<p><code>fontSize<\/code>: The size of glyphs (in logical pixels) to use when painting\nthe text.<\/p>\n<\/li>\n<li>\n<p><code>height<\/code>: The minimum height of the line boxes, as a multiplier of the\nfont size. The lines of the paragraph will be at least `(height + leading)<\/p>\n<ul><li>fontSize` tall when fontSize is not null. When fontSize is null, there\nis no minimum line height. Tall glyphs due to baseline alignment or large\n<a href=\"painting\/TextStyle\/fontSize.html\">TextStyle.fontSize<\/a> may cause the actual line height after layout to be\ntaller than specified here. <code>fontSize<\/code> must be provided for this property\nto take effect.<\/li><\/ul>\n<\/li>\n<li>\n<p><code>leading<\/code>: The minimum amount of leading between lines as a multiple of\nthe font size. <code>fontSize<\/code> must be provided for this property to take effect.<\/p>\n<\/li>\n<li>\n<p><code>fontWeight<\/code>: The typeface thickness to use when painting the text\n(e.g., bold).<\/p>\n<\/li>\n<li>\n<p><code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g.,\nitalics).<\/p>\n<\/li>\n<li>\n<p><code>forceStrutHeight<\/code>: When true, the paragraph will force all lines to be exactly\n<code>(height + leading) * fontSize<\/code> tall from baseline to baseline.\n<a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a> is no longer able to influence the line height, and any tall\nglyphs may overlap with lines above. If a <code>fontFamily<\/code> is specified, the\ntotal ascent of the first line will be the min of the <code>Ascent + half-leading<\/code>\nof the <code>fontFamily<\/code> and <code>(height + leading) * fontSize<\/code>. Otherwise, it\nwill be determined by the Ascent + half-leading of the first text.<\/p>\n<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "leading",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "forceStrutHeight",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/StrutStyle\/StrutStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle({\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double height,\n  double leading,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  bool forceStrutHeight,\n}) : _encoded = _encodeStrut(\n       fontFamily,\n       fontFamilyFallback,\n       fontSize,\n       height,\n       leading,\n       fontWeight,\n       fontStyle,\n       forceStrutHeight,\n     ),\n     _fontFamily = fontFamily,\n     _fontFamilyFallback = fontFamilyFallback;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/StrutStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.StrutStyle",
                    "isConstant": false,
                    "href": "dart-ui\/StrutStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded.buffer.asInt8List()), _fontFamily);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/StrutStyle-class.html",
            "desc": "<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/StrutStyle-class.html\">StrutStyle<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StrutStyle"
        },
        {
            "name": "dart:ui.Tangent",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Tangent",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Tangent-class.html\">Tangent<\/a> with the given values.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Tangent",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "vector",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Tangent\/Tangent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Tangent(this.position, this.vector)\n  : assert(position != null),\n    assert(vector != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Tangent.fromAngle",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Tangent-class.html\">Tangent<\/a> based on the angle rather than the vector.<\/p>\n<p>The <a href=\"dart-ui\/Tangent\/vector.html\">vector<\/a> is computed to be the unit vector at the given angle, interpreted\nas clockwise radians from the x axis.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Tangent",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "angle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Tangent\/Tangent.fromAngle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Tangent.fromAngle(Offset position, double angle) {\n  return new Tangent(position, new Offset(math.cos(angle), math.sin(angle)));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "angle",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The direction of the curve at <a href=\"dart-ui\/Tangent\/position.html\">position<\/a>.<\/p>\n<p>When used with <a href=\"dart-ui\/PathMetric\/getTangentForOffset.html\">PathMetric.getTangentForOffset<\/a>, this is the angle of the\ncurve that is the given offset along the path (i.e. the direction of the\ncurve at <a href=\"dart-ui\/Tangent\/position.html\">position<\/a>).<\/p>\n<p>This value is in radians, with 0.0 meaning pointing along the x axis in\nthe positive x-axis direction, positive numbers pointing downward toward\nthe negative y-axis, i.e. in a clockwise direction, and negative numbers\npointing upward toward the positive y-axis, i.e. in a counter-clockwise\ndirection.<\/p>\n        ",
                    "memberOf": "dart:ui.Tangent",
                    "isConstant": false,
                    "href": "dart-ui\/Tangent\/angle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ flip the sign to be consistent with [Path.arcTo]'s `sweepAngle`\ndouble get angle =&gt; -math.atan2(vector.dy, vector.dx);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>Position of the tangent.<\/p>\n<p>When used with <a href=\"dart-ui\/PathMetric\/getTangentForOffset.html\">PathMetric.getTangentForOffset<\/a>, this represents the precise\nposition that the given offset along the path corresponds to.<\/p>\n        ",
                    "memberOf": "dart:ui.Tangent",
                    "isConstant": false,
                    "href": "dart-ui\/Tangent\/position.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset position\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "vector",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The vector of the curve at <a href=\"dart-ui\/Tangent\/position.html\">position<\/a>.<\/p>\n<p>When used with <a href=\"dart-ui\/PathMetric\/getTangentForOffset.html\">PathMetric.getTangentForOffset<\/a>, this is the vector of the\ncurve that is at the given offset along the path (i.e. the direction of the\ncurve at <a href=\"dart-ui\/Tangent\/position.html\">position<\/a>).<\/p>\n        ",
                    "memberOf": "dart:ui.Tangent",
                    "isConstant": false,
                    "href": "dart-ui\/Tangent\/vector.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset vector\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Tangent-class.html",
            "desc": "<p>The geometric description of a tangent: the angle at a point.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/PathMetric\/getTangentForOffset.html\">PathMetric.getTangentForOffset<\/a>, which returns the tangent of an offset along a path.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Tangent"
        },
        {
            "type": "",
            "name": "dart:ui.TextAffinity",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextAffinity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextAffinity\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextAffinity-class.html",
            "desc": "<p>A way to disambiguate a <a href=\"dart-ui\/TextPosition-class.html\">TextPosition<\/a> when its offset could match two\ndifferent locations in the rendered string.<\/p>\n<p>For example, at an offset where the rendered text wraps, there are two\nvisual positions that the offset could represent: one prior to the line\nbreak (at the end of the first line) and one after the line break (at the\nstart of the second line). A text affinity disambiguates between these two\ncases.<\/p>\n<p>This affects only line breaks caused by wrapping, not explicit newline\ncharacters. For newline characters, the position is fully specified by the\noffset alone, and there is no ambiguity.<\/p>\n<p><a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a> also affects bidirectional text at the interface between LTR\nand RTL text. Consider the following string, where the lowercase letters\nwill be displayed as LTR and the uppercase letters RTL: \"helloHELLO\".  When\nrendered, the string would appear visually as \"helloOLLEH\".  An offset of 5\nwould be ambiguous without a corresponding <a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a>.  Looking at the\nstring in code, the offset represents the position just after the \"o\" and\njust before the \"H\".  When rendered, this offset could be either in the\nmiddle of the string to the right of the \"o\" or at the end of the string to\nthe right of the \"H\".<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextAffinity"
        },
        {
            "type": "",
            "name": "dart:ui.TextAlign",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextAlign",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextAlign\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextAlign-class.html",
            "desc": "<p>Whether and how to align text horizontally.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextAlign"
        },
        {
            "type": "",
            "name": "dart:ui.TextBaseline",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextBaseline",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextBaseline\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextBaseline-class.html",
            "desc": "<p>A horizontal line used for aligning text.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextBaseline"
        },
        {
            "name": "dart:ui.TextBox",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextBox\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextBox",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/TextBox\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextBox typedOther = other;\n  return typedOther.left == left\n      &amp;&amp; typedOther.top == top\n      &amp;&amp; typedOther.right == right\n      &amp;&amp; typedOther.bottom == bottom\n      &amp;&amp; typedOther.direction == direction;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextBox.fromLTRBD",
                    "type": "",
                    "desc": "<p>Creates an object that describes a box containing text.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextBox",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/TextBox\/TextBox.fromLTRBD.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextBox.fromLTRBD(\n  this.left,\n  this.top,\n  this.right,\n  this.bottom,\n  this.direction,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a rect of the same size as this box.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextBox",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextBox\/toRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect toRect() =&gt; new Rect.fromLTRB(left, top, right, bottom);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextBox",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextBox\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TextBox.fromLTRBD(${left.toStringAsFixed(1)}, ${top.toStringAsFixed(1)}, ${right.toStringAsFixed(1)}, ${bottom.toStringAsFixed(1)}, $direction)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The bottom edge of the text box.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "direction",
                    "type": "dart:ui.TextDirection",
                    "types": [],
                    "desc": "<p>The direction in which text inside this box flows.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/direction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection direction\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-ui\/TextBox\/right.html\">right<\/a> edge of the box for left-to-right text; the <a href=\"dart-ui\/TextBox\/left.html\">left<\/a> edge of the box for right-to-left text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/TextBox\/direction.html\">direction<\/a>, which specifies the text direction.<\/li><\/ul>",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get end {\n  return (direction == TextDirection.ltr) ? right : left;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextBox\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextBox\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextBox\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextBox\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextBox\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextBox\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(left, top, right, bottom, direction);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The left edge of the text box, irrespective of direction.<\/p>\n<p>To get the leading edge (which may depend on the <a href=\"dart-ui\/TextBox\/direction.html\">direction<\/a>), consider <a href=\"dart-ui\/TextBox\/start.html\">start<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The right edge of the text box, irrespective of direction.<\/p>\n<p>To get the trailing edge (which may depend on the <a href=\"dart-ui\/TextBox\/direction.html\">direction<\/a>), consider <a href=\"dart-ui\/TextBox\/end.html\">end<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double right\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-ui\/TextBox\/left.html\">left<\/a> edge of the box for left-to-right text; the <a href=\"dart-ui\/TextBox\/right.html\">right<\/a> edge of the box for right-to-left text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/TextBox\/direction.html\">direction<\/a>, which specifies the text direction.<\/li><\/ul>",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get start {\n  return (direction == TextDirection.ltr) ? left : right;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The top edge of the text box.<\/p>\n        ",
                    "memberOf": "dart:ui.TextBox",
                    "isConstant": false,
                    "href": "dart-ui\/TextBox\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextBox-class.html",
            "desc": "<p>A rectangle enclosing a run of text.<\/p>\n<p>This is similar to <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> but includes an inherent <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextBox"
        },
        {
            "name": "dart:ui.TextDecoration",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextDecoration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/TextDecoration\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! TextDecoration)\n    return false;\n  final TextDecoration typedOther = other;\n  return _mask == typedOther._mask;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextDecoration.combine",
                    "type": "",
                    "desc": "<p>Creates a decoration that paints the union of all the given decorations.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "decorations",
                            "type": "dart:core.List<dart:ui.TextDecoration>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.TextDecoration"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/TextDecoration\/TextDecoration.combine.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TextDecoration.combine(List&lt;TextDecoration&gt; decorations) {\n  int mask = 0;\n  for (TextDecoration decoration in decorations)\n    mask |= decoration._mask;\n  return new TextDecoration._(mask);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether this decoration will paint at least as much decoration as the given decoration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.TextDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/TextDecoration\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(TextDecoration other) {\n  return (_mask | other._mask) == _mask;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDecoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextDecoration\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_mask == 0)\n    return 'TextDecoration.none';\n  final List&lt;String&gt; values = &lt;String&gt;[];\n  if (_mask &amp; underline._mask != 0)\n    values.add('underline');\n  if (_mask &amp; overline._mask != 0)\n    values.add('overline');\n  if (_mask &amp; lineThrough._mask != 0)\n    values.add('lineThrough');\n  if (values.length == 1)\n    return 'TextDecoration.${values[0]}';\n  return 'TextDecoration.combine([${values.join(\", \")}])';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.TextDecoration",
                    "isConstant": false,
                    "href": "dart-ui\/TextDecoration\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; _mask.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/TextDecoration\/lineThrough-constant.html",
                    "desc": "<p>Draw a line through each line of text<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration lineThrough = const TextDecoration._(0x4)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lineThrough",
                    "memberOf": "dart:ui.TextDecoration"
                },
                {
                    "type": "",
                    "href": "dart-ui\/TextDecoration\/none-constant.html",
                    "desc": "<p>Do not draw a decoration<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration none = const TextDecoration._(0x0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "none",
                    "memberOf": "dart:ui.TextDecoration"
                },
                {
                    "type": "",
                    "href": "dart-ui\/TextDecoration\/overline-constant.html",
                    "desc": "<p>Draw a line above each line of text<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration overline = const TextDecoration._(0x2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "overline",
                    "memberOf": "dart:ui.TextDecoration"
                },
                {
                    "type": "",
                    "href": "dart-ui\/TextDecoration\/underline-constant.html",
                    "desc": "<p>Draw a line underneath each line of text<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration underline = const TextDecoration._(0x1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "underline",
                    "memberOf": "dart:ui.TextDecoration"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextDecoration-class.html",
            "desc": "<p>A linear decoration to draw near the text.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextDecoration"
        },
        {
            "type": "",
            "name": "dart:ui.TextDecorationStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDecorationStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextDecorationStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextDecorationStyle-class.html",
            "desc": "<p>The style in which to draw a text decoration<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextDecorationStyle"
        },
        {
            "type": "",
            "name": "dart:ui.TextDirection",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextDirection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextDirection\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextDirection-class.html",
            "desc": "<p>A direction in which text flows.<\/p>\n<p>Some languages are written from the left to the right (for example, English,\nTamil, or Chinese), while others are written from the right to the left (for\nexample Aramaic, Hebrew, or Urdu). Some are also written in a mixture, for\nexample Arabic is mostly written right-to-left, with numerals written\nleft-to-right.<\/p>\n<p>The text direction must be provided to APIs that render text or lay out\nboxes horizontally, so that they can determine which direction to start in:\neither right-to-left, <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>; or left-to-right,\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<p>Flutter is designed to address the needs of applications written in any of\nthe world's currently-used languages, whether they use a right-to-left or\nleft-to-right writing direction. Flutter does not support other writing\nmodes, such as vertical text or boustrophedon text, as these are rarely used\nin computer programs.<\/p>\n<p>It is common when developing user interface frameworks to pick a default\ntext direction \u2014 typically left-to-right, the direction most familiar to the\nengineers working on the framework \u2014 because this simplifies the development\nof applications on the platform. Unfortunately, this frequently results in\nthe platform having unexpected left-to-right biases or assumptions, as\nengineers will typically miss places where they need to support\nright-to-left text. This then results in bugs that only manifest in\nright-to-left environments.<\/p>\n<p>In an effort to minimize the extent to which Flutter experiences this\ncategory of issues, the lowest levels of the Flutter framework do not have a\ndefault text reading direction. Any time a reading direction is necessary,\nfor example when text is to be displayed, or when a\nwriting-direction-dependent value is to be interpreted, the reading\ndirection must be explicitly specified. Where possible, such as in <code>switch<\/code>\nstatements, the right-to-left case is listed first, to avoid the impression\nthat it is an afterthought.<\/p>\n<p>At the higher levels (specifically starting at the widgets library), an\nambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> is introduced, which provides a default. Thus, for\ninstance, a <a href=\"widgets\/Text-class.html\">Text<\/a> widget in the scope of a <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> widget does not\nneed to be given an explicit writing direction. The <a href=\"widgets\/Directionality\/of.html\">Directionality.of<\/a>\nstatic method can be used to obtain the ambient text direction for a\nparticular <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<h3 id=\"known-left-to-right-biases-in-flutter\">Known left-to-right biases in Flutter<\/h3>\n<p>Despite the design intent described above, certain left-to-right biases have\nnonetheless crept into Flutter's design. These include:<\/p>\n<ul>\n<li>\n<p>The <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> origin is at the top left, and the x-axis increases in a\nleft-to-right direction.<\/p>\n<\/li>\n<li>\n<p>The default localization in the widgets and material libraries is\nAmerican English, which is left-to-right.<\/p>\n<\/li>\n<\/ul>\n<h3 id=\"visual-properties-vs-directional-properties\">Visual properties vs directional properties<\/h3>\n<p>Many classes in the Flutter framework are offered in two versions, a\nvisually-oriented variant, and a text-direction-dependent variant. For\nexample, <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> is described in terms of top, left, right, and bottom,\nwhile <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> is described in terms of top, start, end, and\nbottom, where start and end correspond to right and left in right-to-left\ntext and left and right in left-to-right text.<\/p>\n<p>There are distinct use cases for each of these variants.<\/p>\n<p>Text-direction-dependent variants are useful when developing user interfaces\nthat should \"flip\" with the text direction. For example, a paragraph of text\nin English will typically be left-aligned and a quote will be indented from\nthe left, while in Arabic it will be right-aligned and indented from the\nright. Both of these cases are described by the direction-dependent\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/start.html\">EdgeInsetsDirectional.start<\/a>.<\/p>\n<p>In contrast, the visual variants are useful when the text direction is known\nand not affected by the reading direction. For example, an application\ngiving driving directions might show a \"turn left\" arrow on the left and a\n\"turn right\" arrow on the right \u2014 and would do so whether the application\nwas localized to French (left-to-right) or Hebrew (right-to-left).<\/p>\n<p>In practice, it is also expected that many developers will only be\ntargeting one language, and in that case it may be simpler to think in\nvisual terms.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextDirection"
        },
        {
            "name": "dart:ui.TextPosition",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextPosition\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextPosition",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/TextPosition\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextPosition typedOther = other;\n  return typedOther.offset == offset\n      &amp;&amp; typedOther.affinity == affinity;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextPosition",
                    "type": "",
                    "desc": "<p>Creates an object representing a particular position in a string.<\/p>\n<p>The arguments must not be null (so the <code>offset<\/code> argument is required).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextPosition",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "affinity",
                            "type": "dart:ui.TextAffinity",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/TextPosition\/TextPosition.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextPosition({\n  this.offset,\n  this.affinity: TextAffinity.downstream,\n}) : assert(offset != null),\n     assert(affinity != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextPosition",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextPosition\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(offset: $offset, affinity: $affinity)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "affinity",
                    "type": "dart:ui.TextAffinity",
                    "types": [],
                    "desc": "<p>Disambiguates cases where the position in the string given by <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a>\ncould represent two different visual positions in the rendered text. For\nexample, this can happen when text is forced to wrap, or when one string\nof text is rendered with multiple text directions.<\/p>\n<p>See the documentation for <a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a> for more information on how\nTextAffinity disambiguates situations like these.<\/p>\n        ",
                    "memberOf": "dart:ui.TextPosition",
                    "isConstant": false,
                    "href": "dart-ui\/TextPosition\/affinity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAffinity affinity\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextPosition\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.TextPosition",
                    "isConstant": false,
                    "href": "dart-ui\/TextPosition\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(offset, affinity);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The index of the character that immediately follows the position in the\nstring representation of the text.<\/p>\n<p>For example, given the string <code>'Hello'<\/code>, offset 0 represents the cursor\nbeing before the <code>H<\/code>, while offset 5 represents the cursor being just\nafter the <code>o<\/code>.<\/p>\n        ",
                    "memberOf": "dart:ui.TextPosition",
                    "isConstant": false,
                    "href": "dart-ui\/TextPosition\/offset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextPosition-class.html",
            "desc": "<p>A position in a string of text.<\/p>\n<p>A TextPosition can be used to locate a position in a string in code (using\nthe <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a> property), and it can also be used to locate the same position\nvisually in a rendered string of text (using <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a> and, when needed to\nresolve ambiguity, <a href=\"dart-ui\/TextPosition\/affinity.html\">affinity<\/a>).<\/p>\n<p>The location of an offset in a rendered string is ambiguous in two cases.\nOne happens when rendered text is forced to wrap. In this case, the offset\nwhere the wrap occurs could visually appear either at the end of the first\nline or the beginning of the second line. The second way is with\nbidirectional text.  An offset at the interface between two different text\ndirections could have one of two locations in the rendered text.<\/p>\n<p>See the documentation for <a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a> for more information on how\nTextAffinity disambiguates situations like these.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextPosition"
        },
        {
            "name": "dart:ui.TextStyle",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/TextStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextStyle)\n    return false;\n  final TextStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily ||\n      _fontSize != typedOther._fontSize ||\n      _letterSpacing != typedOther._letterSpacing ||\n      _wordSpacing != typedOther._wordSpacing ||\n      _height != typedOther._height ||\n      _decorationThickness != typedOther._decorationThickness ||\n      _locale != typedOther._locale ||\n      _background != typedOther._background ||\n      _foreground != typedOther._foreground)\n   return false;\n  for (int index = 0; index &lt; _encoded.length; index += 1) {\n    if (_encoded[index] != typedOther._encoded[index])\n      return false;\n  }\n  if (!_listEquals&lt;Shadow&gt;(_shadows, typedOther._shadows))\n    return false;\n  if (!_listEquals&lt;String&gt;(_fontFamilyFallback, typedOther._fontFamilyFallback))\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextStyle",
                    "type": "",
                    "desc": "<p>Creates a new TextStyle object.<\/p>\n<ul>\n<li>\n<code>color<\/code>: The color to use when painting the text. If this is specified, <code>foreground<\/code> must be null.<\/li>\n<li>\n<code>decoration<\/code>: The decorations to paint near the text (e.g., an underline).<\/li>\n<li>\n<code>decorationColor<\/code>: The color in which to paint the text decorations.<\/li>\n<li>\n<code>decorationStyle<\/code>: The style in which to paint the text decorations (e.g., dashed).<\/li>\n<li>\n<code>decorationThickness<\/code>: The thickness of the decoration as a muliplier on the thickness specified by the font.<\/li>\n<li>\n<code>fontWeight<\/code>: The typeface thickness to use when painting the text (e.g., bold).<\/li>\n<li>\n<code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g., italics).<\/li>\n<li>\n<code>fontFamily<\/code>: The name of the font to use when painting the text (e.g., Roboto). If a <code>fontFamilyFallback<\/code> is\nprovided and <code>fontFamily<\/code> is not, then the first font family in <code>fontFamilyFallback<\/code> will take the position of\nthe preferred font family. When a higher priority font cannot be found or does not contain a glyph, a lower\npriority font will be used.<\/li>\n<li>\n<code>fontFamilyFallback<\/code>: An ordered list of the names of the fonts to fallback on when a glyph cannot\nbe found in a higher priority font. When the <code>fontFamily<\/code> is null, the first font family in this list\nis used as the preferred font. Internally, the 'fontFamily<code>is concatenated to the front of this list.\nWhen no font family is provided through 'fontFamilyFallback' (null or empty) or<\/code>fontFamily`, then the\nplatform default font will be used.<\/li>\n<li>\n<code>fontSize<\/code>: The size of glyphs (in logical pixels) to use when painting the text.<\/li>\n<li>\n<code>letterSpacing<\/code>: The amount of space (in logical pixels) to add between each letter.<\/li>\n<li>\n<code>wordSpacing<\/code>: The amount of space (in logical pixels) to add at each sequence of white-space (i.e. between each word).<\/li>\n<li>\n<code>textBaseline<\/code>: The common baseline that should be aligned between this text span and its parent text span, or, for the root text spans, with the line box.<\/li>\n<li>\n<code>height<\/code>: The height of this text span, as a multiplier of the font size.<\/li>\n<li>\n<code>locale<\/code>: The locale used to select region-specific glyphs.<\/li>\n<li>\n<code>background<\/code>: The paint drawn as a background for the text.<\/li>\n<li>\n<code>foreground<\/code>: The paint used to draw the text. If this is specified, <code>color<\/code> must be null.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decoration",
                            "type": "dart:ui.TextDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationStyle",
                            "type": "dart:ui.TextDecorationStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationThickness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textBaseline",
                            "type": "dart:ui.TextBaseline",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "letterSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "wordSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "background",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "foreground",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shadows",
                            "type": "dart:core.List<dart:ui.Shadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Shadow"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/TextStyle\/TextStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle({\n  Color color,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThickness,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  TextBaseline textBaseline,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double letterSpacing,\n  double wordSpacing,\n  double height,\n  Locale locale,\n  Paint background,\n  Paint foreground,\n  List&lt;Shadow&gt; shadows,\n}) : assert(color == null || foreground == null,\n       'Cannot provide both a color and a foreground\\n'\n       'The color argument is just a shorthand for \"foreground: new Paint()..color = color\".'\n     ),\n     _encoded = _encodeTextStyle(\n       color,\n       decoration,\n       decorationColor,\n       decorationStyle,\n       decorationThickness,\n       fontWeight,\n       fontStyle,\n       textBaseline,\n       fontFamily,\n       fontFamilyFallback,\n       fontSize,\n       letterSpacing,\n       wordSpacing,\n       height,\n       locale,\n       background,\n       foreground,\n       shadows,\n     ),\n     _fontFamily = fontFamily ?? '',\n     _fontFamilyFallback = fontFamilyFallback,\n     _fontSize = fontSize,\n     _letterSpacing = letterSpacing,\n     _wordSpacing = wordSpacing,\n     _height = height,\n     _decorationThickness = decorationThickness,\n     _locale = locale,\n     _background = background,\n     _foreground = foreground,\n     _shadows = shadows;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TextStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TextStyle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'TextStyle('\n           'color: ${              _encoded[0] &amp; 0x00002 == 0x00002  ? new Color(_encoded[1])                  : \"unspecified\"}, '\n           'decoration: ${         _encoded[0] &amp; 0x00004 == 0x00004  ? new TextDecoration._(_encoded[2])       : \"unspecified\"}, '\n           'decorationColor: ${    _encoded[0] &amp; 0x00008 == 0x00008  ? new Color(_encoded[3])                  : \"unspecified\"}, '\n           'decorationStyle: ${    _encoded[0] &amp; 0x00010 == 0x00010  ? TextDecorationStyle.values[_encoded[4]] : \"unspecified\"}, '\n           \/\/ The decorationThickness is not in encoded order in order to keep it near the other decoration properties.\n           'decorationThickness: ${_encoded[0] &amp; 0x00100 == 0x00100  ? _decorationThickness                    : \"unspecified\"}, '\n           'fontWeight: ${         _encoded[0] &amp; 0x00020 == 0x00020  ? FontWeight.values[_encoded[5]]          : \"unspecified\"}, '\n           'fontStyle: ${          _encoded[0] &amp; 0x00040 == 0x00040  ? FontStyle.values[_encoded[6]]           : \"unspecified\"}, '\n           'textBaseline: ${       _encoded[0] &amp; 0x00080 == 0x00080  ? TextBaseline.values[_encoded[7]]        : \"unspecified\"}, '\n           'fontFamily: ${         _encoded[0] &amp; 0x00200 == 0x00200\n                                   &amp;&amp; _fontFamily != null            ? _fontFamily                             : \"unspecified\"}, '\n           'fontFamilyFallback: ${ _encoded[0] &amp; 0x00200 == 0x00200\n                                   &amp;&amp; _fontFamilyFallback != null\n                                   &amp;&amp; _fontFamilyFallback.isNotEmpty ? _fontFamilyFallback                     : \"unspecified\"}, '\n           'fontSize: ${           _encoded[0] &amp; 0x00400 == 0x00400  ? _fontSize                               : \"unspecified\"}, '\n           'letterSpacing: ${      _encoded[0] &amp; 0x00800 == 0x00800  ? \"${_letterSpacing}x\"                    : \"unspecified\"}, '\n           'wordSpacing: ${        _encoded[0] &amp; 0x01000 == 0x01000  ? \"${_wordSpacing}x\"                      : \"unspecified\"}, '\n           'height: ${             _encoded[0] &amp; 0x02000 == 0x02000  ? \"${_height}x\"                           : \"unspecified\"}, '\n           'locale: ${             _encoded[0] &amp; 0x04000 == 0x04000  ? _locale                                 : \"unspecified\"}, '\n           'background: ${         _encoded[0] &amp; 0x08000 == 0x08000  ? _background                             : \"unspecified\"}, '\n           'foreground: ${         _encoded[0] &amp; 0x10000 == 0x10000  ? _foreground                             : \"unspecified\"}, '\n           'shadows: ${            _encoded[0] &amp; 0x20000 == 0x20000  ? _shadows                                : \"unspecified\"}'\n         ')';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:ui.TextStyle",
                    "isConstant": false,
                    "href": "dart-ui\/TextStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded), _fontFamily, _fontFamilyFallback, _fontSize, _letterSpacing, _wordSpacing, _height, _locale, _background, _foreground, _shadows, _decorationThickness);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TextStyle-class.html",
            "desc": "<p>An opaque object that determines the size, position, and rendering of text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/TextStyle-class.html\">TextStyle<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextStyle"
        },
        {
            "type": "",
            "name": "dart:ui.TileMode",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.TileMode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/TileMode\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/TileMode-class.html",
            "desc": "<p>Defines what happens at the edge of the gradient.<\/p>\n<p>A gradient is defined along a finite inner area. In the case of a linear\ngradient, it's between the parallel lines that are orthogonal to the line\ndrawn between two points. In the case of radial gradients, it's the disc\nthat covers the circle centered on a particular point up to a given radius.<\/p>\n<p>This enum is used to define how the gradient should paint the regions\noutside that defined inner area.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Gradient-class.html\">painting.Gradient<\/a>, the superclass for <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> and\n<a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, as used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> et al, which works in\nrelative coordinates and can create a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> representing the gradient\nfor a particular <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on demand.<\/li>\n<li>\n<a href=\"dart-ui\/Gradient-class.html\">dart:ui.Gradient<\/a>, the low-level class used when dealing with the\n<a href=\"dart-ui\/Paint\/shader.html\">Paint.shader<\/a> property directly, with its <a href=\"dart-ui\/Gradient\/Gradient.linear.html\">new Gradient.linear<\/a> and <a href=\"dart-ui\/Gradient\/Gradient.radial.html\">new\nGradient.radial<\/a> constructors.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TileMode"
        },
        {
            "name": "dart:ui.Versions",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "dartVersion",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:ui.Versions",
                    "isConstant": false,
                    "href": "dart-ui\/Versions\/dartVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String dartVersion\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flutterEngineVersion",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:ui.Versions",
                    "isConstant": false,
                    "href": "dart-ui\/Versions\/flutterEngineVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String flutterEngineVersion\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "skiaVersion",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:ui.Versions",
                    "isConstant": false,
                    "href": "dart-ui\/Versions\/skiaVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String skiaVersion\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Versions-class.html",
            "desc": "<p>Wraps version information for Dart, Skia and Flutter.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Versions"
        },
        {
            "type": "",
            "name": "dart:ui.VertexMode",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.VertexMode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/VertexMode\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/VertexMode-class.html",
            "desc": "<p>Defines how a list of points is interpreted when drawing a set of triangles.<\/p>\n<p>Used by <a href=\"dart-ui\/Canvas\/drawVertices.html\">Canvas.drawVertices<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "VertexMode"
        },
        {
            "name": "dart:ui.Vertices",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "Vertices",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Vertices",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:ui.VertexMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "positions",
                            "type": "dart:core.List<dart:ui.Offset>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Offset"
                            ]
                        },
                        {
                            "name": "textureCoordinates",
                            "type": "dart:core.List<dart:ui.Offset>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Offset"
                            ]
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "indices",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Vertices\/Vertices.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Vertices(\n  VertexMode mode,\n  List&lt;Offset&gt; positions, {\n  List&lt;Offset&gt; textureCoordinates,\n  List&lt;Color&gt; colors,\n  List&lt;int&gt; indices,\n}) : assert(mode != null),\n     assert(positions != null) {\n  if (textureCoordinates != null &amp;&amp; textureCoordinates.length != positions.length)\n    throw new ArgumentError('\"positions\" and \"textureCoordinates\" lengths must match.');\n  if (colors != null &amp;&amp; colors.length != positions.length)\n    throw new ArgumentError('\"positions\" and \"colors\" lengths must match.');\n  if (indices != null &amp;&amp; indices.any((int i) =&gt; i &lt; 0 || i &gt;= positions.length))\n    throw new ArgumentError('\"indices\" values must be valid indices in the positions list.');\n\n  final Float32List encodedPositions = _encodePointList(positions);\n  final Float32List encodedTextureCoordinates = (textureCoordinates != null)\n    ? _encodePointList(textureCoordinates)\n    : null;\n  final Int32List encodedColors = colors != null\n    ? _encodeColorList(colors)\n    : null;\n  final Int32List encodedIndices = indices != null\n    ? new Int32List.fromList(indices)\n    : null;\n\n  _constructor();\n  _init(mode.index, encodedPositions, encodedTextureCoordinates, encodedColors, encodedIndices);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Vertices.raw",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:ui.Vertices",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:ui.VertexMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "positions",
                            "type": "dart:typed_data.Float32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textureCoordinates",
                            "type": "dart:typed_data.Float32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "indices",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-ui\/Vertices\/Vertices.raw.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Vertices.raw(\n  VertexMode mode,\n  Float32List positions, {\n  Float32List textureCoordinates,\n  Int32List colors,\n  Int32List indices,\n}) : assert(mode != null),\n     assert(positions != null) {\n  if (textureCoordinates != null &amp;&amp; textureCoordinates.length != positions.length)\n    throw new ArgumentError('\"positions\" and \"textureCoordinates\" lengths must match.');\n  if (colors != null &amp;&amp; colors.length * 2 != positions.length)\n    throw new ArgumentError('\"positions\" and \"colors\" lengths must match.');\n  if (indices != null &amp;&amp; indices.any((int i) =&gt; i &lt; 0 || i &gt;= positions.length))\n    throw new ArgumentError('\"indices\" values must be valid indices in the positions list.');\n\n  _constructor();\n  _init(mode.index, positions, textureCoordinates, colors, indices);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Vertices-class.html",
            "desc": "<p>A set of vertex data used by <a href=\"dart-ui\/Canvas\/drawVertices.html\">Canvas.drawVertices<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Vertices"
        },
        {
            "name": "dart:ui.VoidCallback",
            "type": "",
            "desc": "<p>Signature of callbacks that have no arguments and return no data.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/VoidCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef VoidCallback = void Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:ui.Window",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [
                {
                    "name": "onAccessibilityFeaturesChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked when the value of <a href=\"dart-ui\/Window\/accessibilityFeatures.html\">accessibilityFeatures<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onAccessibilityFeaturesChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onAccessibilityFeaturesChanged =&gt; _onAccessibilityFeaturesChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onBeginFrame",
                    "type": "dart:ui.FrameCallback",
                    "desc": "<p>A callback that is invoked to notify the application that it is an\nappropriate time to provide a scene using the <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> API and the\n<a href=\"dart-ui\/Window\/render.html\">render<\/a> method. When possible, this is driven by the hardware VSync\nsignal. This is only called if <a href=\"dart-ui\/Window\/scheduleFrame.html\">scheduleFrame<\/a> has been called since the\nlast time this callback was invoked.<\/p>\n<p>The <a href=\"dart-ui\/Window\/onDrawFrame.html\">onDrawFrame<\/a> callback is invoked immediately after <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a>,\nafter draining any microtasks (e.g. completions of any <a href=\"dart-async\/Future-class.html\">Future<\/a>s) queued\nby the <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a> handler.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.FrameCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onBeginFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FrameCallback get onBeginFrame =&gt; _onBeginFrame;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onDrawFrame",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked for each frame after <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a> has\ncompleted and after the microtask queue has been drained. This can be\nused to implement a second phase of frame rendering that happens\nafter any deferred work queued by the <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a> phase.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onDrawFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDrawFrame =&gt; _onDrawFrame;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onLocaleChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"dart-ui\/Window\/locale.html\">locale<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onLocaleChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onLocaleChanged =&gt; _onLocaleChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onMetricsChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever the <a href=\"dart-ui\/Window\/devicePixelRatio.html\">devicePixelRatio<\/a>,\n<a href=\"dart-ui\/Window\/physicalSize.html\">physicalSize<\/a>, <a href=\"dart-ui\/Window\/padding.html\">padding<\/a>, or <a href=\"dart-ui\/Window\/viewInsets.html\">viewInsets<\/a> values change, for example\nwhen the device is rotated or when the application is resized (e.g. when\nshowing applications side-by-side on Android).<\/p>\n<p>The engine invokes this callback in the same zone in which the callback\nwas set.<\/p>\n<p>The framework registers with this callback and updates the layout\nappropriately.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nregister for notifications when this is called.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onMetricsChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onMetricsChanged =&gt; _onMetricsChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPlatformBrightnessChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"dart-ui\/Window\/platformBrightness.html\">platformBrightness<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onPlatformBrightnessChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onPlatformBrightnessChanged =&gt; _onPlatformBrightnessChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPlatformMessage",
                    "type": "dart:ui.PlatformMessageCallback",
                    "desc": "<p>Called whenever this window receives a message from a platform-specific\nplugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin sent the message. The <code>data<\/code>\nparameter is the payload and is typically UTF-8 encoded JSON but can be\narbitrary data.<\/p>\n<p>Message handlers must call the function given in the <code>callback<\/code> parameter.\nIf the handler does not need to respond, the handler should pass null to\nthe callback.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.PlatformMessageCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onPlatformMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PlatformMessageCallback get onPlatformMessage =&gt; _onPlatformMessage;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPointerDataPacket",
                    "type": "dart:ui.PointerDataPacketCallback",
                    "desc": "<p>A callback that is invoked when pointer data is available.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a>, the Flutter framework class which manages pointer\nevents.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.PointerDataPacketCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onPointerDataPacket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PointerDataPacketCallback get onPointerDataPacket =&gt; _onPointerDataPacket;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onSemanticsAction",
                    "type": "dart:ui.SemanticsActionCallback",
                    "desc": "<p>A callback that is invoked whenever the user requests an action to be\nperformed.<\/p>\n<p>This callback is used when the user expresses the action they wish to\nperform based on the semantics supplied by <a href=\"dart-ui\/Window\/updateSemantics.html\">updateSemantics<\/a>.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.SemanticsActionCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onSemanticsAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsActionCallback get onSemanticsAction =&gt; _onSemanticsAction;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onSemanticsEnabledChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked when the value of <a href=\"dart-ui\/Window\/semanticsEnabled.html\">semanticsEnabled<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onSemanticsEnabledChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onSemanticsEnabledChanged =&gt; _onSemanticsEnabledChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onTextScaleFactorChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"dart-ui\/Window\/textScaleFactor.html\">textScaleFactor<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/onTextScaleFactorChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onTextScaleFactorChanged =&gt; _onTextScaleFactorChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "type": "",
                    "desc": "<p>Updates the application's rendering on the GPU with the newly provided\n<a href=\"dart-ui\/Scene-class.html\">Scene<\/a>. This function must be called within the scope of the\n<a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a> or <a href=\"dart-ui\/Window\/onDrawFrame.html\">onDrawFrame<\/a> callbacks being invoked. If this function\nis called a second time during a single <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a>\/<a href=\"dart-ui\/Window\/onDrawFrame.html\">onDrawFrame<\/a>\ncallback sequence or called outside the scope of those callbacks, the call\nwill be ignored.<\/p>\n<p>To record graphical operations, first create a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a>, then\nconstruct a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, passing that <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to its constructor.\nAfter issuing all the graphical operations, call the\n<a href=\"dart-ui\/PictureRecorder\/endRecording.html\">PictureRecorder.endRecording<\/a> function on the <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to obtain\nthe final <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> that represents the issued graphical operations.<\/p>\n<p>Next, create a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a>, and add the <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> to it using\n<a href=\"dart-ui\/SceneBuilder\/addPicture.html\">SceneBuilder.addPicture<\/a>. With the <a href=\"dart-ui\/SceneBuilder\/build.html\">SceneBuilder.build<\/a> method you can\nthen obtain a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> object, which you can display to the user via this\n<a href=\"dart-ui\/Window\/render.html\">render<\/a> function.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Window",
                    "sig": "",
                    "params": [
                        {
                            "name": "scene",
                            "type": "dart:ui.Scene",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/render.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void render(Scene scene) native 'Window_render';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scheduleFrame",
                    "type": "",
                    "desc": "<p>Requests that, at the next appropriate opportunity, the <a href=\"dart-ui\/Window\/onBeginFrame.html\">onBeginFrame<\/a>\nand <a href=\"dart-ui\/Window\/onDrawFrame.html\">onDrawFrame<\/a> callbacks be invoked.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "dart:ui.Window",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/scheduleFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void scheduleFrame() native 'Window_scheduleFrame';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sendPlatformMessage",
                    "type": "",
                    "desc": "<p>Sends a message to a platform-specific plugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin receives the message. The\n<code>data<\/code> parameter contains the message payload and is typically UTF-8\nencoded JSON but can be arbitrary data. If the plugin replies to the\nmessage, <code>callback<\/code> will be called with the response.<\/p>\n<p>The framework invokes <code>callback<\/code> in the same zone in which this method\nwas called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Window",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "data",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "callback",
                            "type": "dart:ui.PlatformMessageResponseCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/sendPlatformMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sendPlatformMessage(String name,\n                         ByteData data,\n                         PlatformMessageResponseCallback callback) {\n  final String error =\n      _sendPlatformMessage(name, _zonedPlatformMessageResponseCallback(callback), data);\n  if (error != null)\n    throw new Exception(error);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setIsolateDebugName",
                    "type": "",
                    "desc": "<p>Set the debug name associated with this window's root isolate.<\/p>\n<p>Normally debug names are automatically generated from the Dart port, entry\npoint, and source file. For example: <code>main.dart$main-1234<\/code>.<\/p>\n<p>This can be combined with flutter tools <code>--isolate-filter<\/code> flag to debug\nspecific root isolates. For example: <code>flutter attach --isolate-filter=[name]<\/code>.\nNote that this does not rename any child isolates of the root.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Window",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/setIsolateDebugName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setIsolateDebugName(String name) native 'Window_setIsolateDebugName';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateSemantics",
                    "type": "",
                    "desc": "<p>Change the retained semantics data about this window.<\/p>\n<p>If <a href=\"dart-ui\/Window\/semanticsEnabled.html\">semanticsEnabled<\/a> is true, the user has requested that this function\nbe called whenever the semantic content of this window changes.<\/p>\n<p>In either case, this function disposes the given update, which means the\nsemantics update cannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.Window",
                    "sig": "",
                    "params": [
                        {
                            "name": "update",
                            "type": "dart:ui.SemanticsUpdate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-ui\/Window\/updateSemantics.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateSemantics(SemanticsUpdate update) native 'Window_updateSemantics';<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "accessibilityFeatures",
                    "type": "dart:ui.AccessibilityFeatures",
                    "types": [],
                    "desc": "<p>Additional accessibility features that may be enabled by the platform.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/accessibilityFeatures.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AccessibilityFeatures get accessibilityFeatures =&gt; _accessibilityFeatures;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "alwaysUse24HourFormat",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The setting indicating whether time should always be shown in the 24-hour\nformat.<\/p>\n<p>This option is used by <a href=\"material\/showTimePicker.html\">showTimePicker<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/alwaysUse24HourFormat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get alwaysUse24HourFormat =&gt; _alwaysUse24HourFormat;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultRouteName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The route or path that the embedder requested when the application was\nlaunched.<\/p>\n<p>This will be the string \"<code>\/<\/code>\" if no particular route was requested.<\/p>\n<h2 id=\"android\">Android<\/h2>\n<p>On Android, calling\n<a href=\"\/javadoc\/io\/flutter\/view\/FlutterView.html#setInitialRoute-java.lang.String-\"><code>FlutterView.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>createFlutterView<\/code> method in your <code>FlutterActivity<\/code>\nsubclass is a suitable time to set the value. The application's\n<code>AndroidManifest.xml<\/code> file must also be updated to have a suitable\n<a href=\"https:\/\/developer.android.com\/guide\/topics\/manifest\/intent-filter-element.html\"><code>&lt;intent-filter&gt;<\/code><\/a>.<\/p>\n<h2 id=\"ios\">iOS<\/h2>\n<p>On iOS, calling\n<a href=\"\/objcdoc\/Classes\/FlutterViewController.html#\/c:objc%28cs%29FlutterViewController%28im%29setInitialRoute:\"><code>FlutterViewController.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>application:didFinishLaunchingWithOptions:<\/code> method is a\nsuitable time to set this value.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, a widget that handles routing.<\/li>\n<li>\n<a href=\"services\/SystemChannels\/navigation-constant.html\">SystemChannels.navigation<\/a>, which handles subsequent navigation\nrequests from the embedder.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/defaultRouteName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get defaultRouteName =&gt; _defaultRouteName();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "devicePixelRatio",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The number of device pixels for each logical pixel. This number might not\nbe a power of two. Indeed, it might not even be an integer. For example,\nthe Nexus 6 has a device pixel ratio of 3.5.<\/p>\n<p>Device pixels are also referred to as physical pixels. Logical pixels are\nalso referred to as device-independent or resolution-independent pixels.<\/p>\n<p>By definition, there are roughly 38 logical pixels per centimeter, or\nabout 96 logical pixels per inch, of the physical display. The value\nreturned by <a href=\"dart-ui\/Window\/devicePixelRatio.html\">devicePixelRatio<\/a> is ultimately obtained either from the\nhardware itself, the device drivers, or a hard-coded value stored in the\noperating system or firmware, and may be inaccurate, sometimes by a\nsignificant margin.<\/p>\n<p>The Flutter framework operates in logical pixels, so it is rarely\nnecessary to directly deal with this property.<\/p>\n<p>When this changes, <a href=\"dart-ui\/Window\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/devicePixelRatio.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get devicePixelRatio =&gt; _devicePixelRatio;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "initialLifecycleState",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The lifecycle state immediately after dart isolate initialization.<\/p>\n<p>This property will not be updated as the lifecycle changes.<\/p>\n<p>It is used to initialize <a href=\"scheduler\/SchedulerBinding\/lifecycleState.html\">SchedulerBinding.lifecycleState<\/a> at startup\nwith any buffered lifecycle state events.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/initialLifecycleState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get initialLifecycleState {\n  _initialLifecycleStateAccessed = true;\n  return _initialLifecycleState;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "<p>The system-reported default locale of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>This is the first locale selected by the user and is the user's\nprimary locale (the locale the device UI is displayed in)<\/p>\n<p>This is equivalent to <code>locales.first<\/code> and will provide an empty non-null locale\nif the <a href=\"dart-ui\/Window\/locales.html\">locales<\/a> list has not been set or is empty.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Locale get locale {\n  if (_locales != null &amp;&amp; _locales.isNotEmpty) {\n    return _locales.first;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locales",
                    "type": "dart:core.List<dart:ui.Locale>",
                    "types": [
                        "dart:core.List",
                        "dart:ui.Locale"
                    ],
                    "desc": "<p>The full system-reported supported locales of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>The list is ordered in order of priority, with lower-indexed locales being\npreferred over higher-indexed ones. The first element is the primary <a href=\"dart-ui\/Window\/locale.html\">locale<\/a>.<\/p>\n<p>The <a href=\"dart-ui\/Window\/onLocaleChanged.html\">onLocaleChanged<\/a> callback is called whenever this value changes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/locales.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Locale&gt; get locales =&gt; _locales;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "dart:ui.WindowPadding",
                    "types": [],
                    "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but which may be partially obscured by\nsystem UI (such as the system notification area), or or physical\nintrusions in the display (e.g. overscan regions on television screens or\nphone sensor housings).<\/p>\n<p>When this changes, <a href=\"dart-ui\/Window\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the padding in material design\napplications.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/padding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">WindowPadding get padding =&gt; _padding;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalSize",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The dimensions of the rectangle into which the application will be drawn,\nin physical pixels.<\/p>\n<p>When this changes, <a href=\"dart-ui\/Window\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>At startup, the size of the application window may not be known before Dart\ncode runs. If this value is observed early in the application lifecycle,\nit may report <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>This value does not take into account any on-screen keyboards or other\nsystem UI. The <a href=\"dart-ui\/Window\/padding.html\">padding<\/a> and <a href=\"dart-ui\/Window\/viewInsets.html\">viewInsets<\/a> properties provide a view into\nhow much of each side of the application may be obscured by system UI.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/physicalSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get physicalSize =&gt; _physicalSize;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platformBrightness",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The setting indicating the current brightness mode of the host platform.\nIf the platform has no preference, <a href=\"dart-ui\/Window\/platformBrightness.html\">platformBrightness<\/a> defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/platformBrightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Brightness get platformBrightness =&gt; _platformBrightness;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the user has requested that <a href=\"dart-ui\/Window\/updateSemantics.html\">updateSemantics<\/a> be called when\nthe semantic contents of window changes.<\/p>\n<p>The <a href=\"dart-ui\/Window\/onSemanticsEnabledChanged.html\">onSemanticsEnabledChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n        ",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/semanticsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get semanticsEnabled =&gt; _semanticsEnabled;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textScaleFactor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The system-reported text scale.<\/p>\n<p>This establishes the text scaling factor to use when rendering text,\naccording to the user's platform preferences.<\/p>\n<p>The <a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">onTextScaleFactorChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/textScaleFactor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get textScaleFactor =&gt; _textScaleFactor;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "viewInsets",
                    "type": "dart:ui.WindowPadding",
                    "types": [],
                    "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but over which the operating system\nwill likely place system UI, such as the keyboard, that fully obscures\nany content.<\/p>\n<p>When this changes, <a href=\"dart-ui\/Window\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the view insets in material\ndesign applications.<\/li>\n<\/ul>",
                    "memberOf": "dart:ui.Window",
                    "isConstant": false,
                    "href": "dart-ui\/Window\/viewInsets.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">WindowPadding get viewInsets =&gt; _viewInsets;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/Window-class.html",
            "desc": "<p>The most basic interface to the host operating system's user interface.<\/p>\n<p>There is a single Window instance in the system, which you can\nobtain from the <a href=\"dart-ui\/window.html\">window<\/a> property.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Window"
        },
        {
            "name": "dart:ui.WindowPadding",
            "extends": [],
            "memberOf": "dart:ui",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:ui.WindowPadding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-ui\/WindowPadding\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(left: $left, top: $top, right: $right, bottom: $bottom)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the bottom edge to the first unpadded pixel, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.WindowPadding",
                    "isConstant": false,
                    "href": "dart-ui\/WindowPadding\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the left edge to the first unpadded pixel, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.WindowPadding",
                    "isConstant": false,
                    "href": "dart-ui\/WindowPadding\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the right edge to the first unpadded pixel, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.WindowPadding",
                    "isConstant": false,
                    "href": "dart-ui\/WindowPadding\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double right\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance from the top edge to the first unpadded pixel, in physical pixels.<\/p>\n        ",
                    "memberOf": "dart:ui.WindowPadding",
                    "isConstant": false,
                    "href": "dart-ui\/WindowPadding\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-ui\/WindowPadding\/zero-constant.html",
                    "desc": "<p>A window padding that has zeros for each edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WindowPadding zero = const WindowPadding._(left: 0.0, top: 0.0, right: 0.0, bottom: 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "dart:ui.WindowPadding"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-ui\/WindowPadding-class.html",
            "desc": "<p>A representation of distances for each of the four edges of a rectangle,\nused to encode the view insets and padding that applications should place\naround their user interface, as exposed by <a href=\"dart-ui\/Window\/viewInsets.html\">Window.viewInsets<\/a> and\n<a href=\"dart-ui\/Window\/padding.html\">Window.padding<\/a>. View insets and padding are preferably read via\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>.<\/p>\n<p>For a generic class that represents distances around a rectangle, see the\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> class.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a widgets layer mechanism to receive\nnotifications when the padding changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, for the preferred mechanism for accessing these values.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the padding in material design\napplications.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WindowPadding"
        },
        {
            "name": "decodeImageFromList",
            "type": "",
            "desc": "<p>Loads a single image frame from a byte array into an <a href=\"dart-ui\/Image-class.html\">Image<\/a> object.<\/p>\n<p>This is a convenience wrapper around <a href=\"dart-ui\/instantiateImageCodec.html\">instantiateImageCodec<\/a>. Prefer using\n<a href=\"dart-ui\/instantiateImageCodec.html\">instantiateImageCodec<\/a> which also supports multi frame images.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "list",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:ui.ImageDecoderCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/decodeImageFromList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void decodeImageFromList(Uint8List list, ImageDecoderCallback callback) {\n  _decodeImageFromListAsync(list, callback);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "decodeImageFromPixels",
            "type": "",
            "desc": "<p>Convert an array of pixel values into an <a href=\"dart-ui\/Image-class.html\">Image<\/a> object.<\/p>\n<p><code>pixels<\/code> is the pixel data in the encoding described by <code>format<\/code>.<\/p>\n<p><code>rowBytes<\/code> is the number of bytes consumed by each row of pixels in the\ndata buffer.  If unspecified, it defaults to <code>width<\/code> multiplied by the\nnumber of bytes per pixel in the provided <code>format<\/code>.<\/p>\n<p>The <code>decodedCacheRatioCap<\/code> is the default maximum multiple of the compressed\nimage size to cache when decoding animated image frames. For example,\nsetting this to <code>2.0<\/code> means that a 400KB GIF would be allowed at most to use\n800KB of memory caching unessential decoded frames. Caching decoded frames\nsaves CPU but can result in out-of-memory crashes when decoding large (or\nmultiple) animated images. Note that GIFs are highly compressed, and it's\nunlikely that a factor that low will be sufficient to cache all decoded\nframes. The default value is <code>25.0<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "pixels",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "format",
                    "type": "dart:ui.PixelFormat",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:ui.ImageDecoderCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rowBytes",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodedCacheRatioCap",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "pixels",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "format",
                    "type": "dart:ui.PixelFormat",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:ui.ImageDecoderCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rowBytes",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodedCacheRatioCap",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/decodeImageFromPixels.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void decodeImageFromPixels(\n  Uint8List pixels,\n  int width,\n  int height,\n  PixelFormat format,\n  ImageDecoderCallback callback,\n  {int rowBytes, double decodedCacheRatioCap = double.infinity}\n) {\n  final _ImageInfo imageInfo = new _ImageInfo(width, height, format.index, rowBytes);\n  final Future&lt;Codec&gt; codecFuture = _futurize(\n    (_Callback&lt;Codec&gt; callback) =&gt; _instantiateImageCodec(pixels, callback, imageInfo, decodedCacheRatioCap)\n  );\n  codecFuture.then((Codec codec) =&gt; codec.getNextFrame())\n      .then((FrameInfo frameInfo) =&gt; callback(frameInfo.image));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hashList",
            "type": "dart:core.int",
            "desc": "<p>Combine the <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> values of an arbitrary number of objects from\nan <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into one value. This function will return the same value if\ngiven null as if given an empty list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "arguments",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "arguments",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/hashList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hashList(Iterable&lt;Object&gt; arguments) {\n  int result = 0;\n  if (arguments != null) {\n    for (Object argument in arguments)\n      result = _Jenkins.combine(result, argument);\n  }\n  return _Jenkins.finish(result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hashValues",
            "type": "dart:core.int",
            "desc": "<p>Combine up to twenty objects' hash codes into one value.<\/p>\n<p>If you only need to handle one object's hash code, then just refer to its\n<a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> getter directly.<\/p>\n<p>If you need to combine an arbitrary number of objects from a <a href=\"dart-core\/List-class.html\">List<\/a> or other\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>, use <a href=\"dart-ui\/hashList.html\">hashList<\/a>. The output of <a href=\"dart-ui\/hashList.html\">hashList<\/a> can be used as one of\nthe arguments to this function.<\/p>\n<p>For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">int hashCode =&gt; hashValues(foo, bar, hashList(quux), baz);\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "arg01",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg02",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg03",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg04",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg05",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg06",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg07",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg08",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg09",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg10",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg11",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg12",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg13",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg14",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg15",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg16",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg17",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg18",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg19",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg20",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg01",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg02",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg03",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg04",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg05",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg06",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg07",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg08",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg09",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg10",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg11",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg12",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg13",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg14",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg15",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg16",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg17",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg18",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg19",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arg20",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/hashValues.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hashValues(\n  Object arg01,            Object arg02,          [ Object arg03 = _hashEnd,\n  Object arg04 = _hashEnd, Object arg05 = _hashEnd, Object arg06 = _hashEnd,\n  Object arg07 = _hashEnd, Object arg08 = _hashEnd, Object arg09 = _hashEnd,\n  Object arg10 = _hashEnd, Object arg11 = _hashEnd, Object arg12 = _hashEnd,\n  Object arg13 = _hashEnd, Object arg14 = _hashEnd, Object arg15 = _hashEnd,\n  Object arg16 = _hashEnd, Object arg17 = _hashEnd, Object arg18 = _hashEnd,\n  Object arg19 = _hashEnd, Object arg20 = _hashEnd ]) {\n  int result = 0;\n  result = _Jenkins.combine(result, arg01);\n  result = _Jenkins.combine(result, arg02);\n  if (arg03 != _hashEnd) {\n    result = _Jenkins.combine(result, arg03);\n    if (arg04 != _hashEnd) {\n      result = _Jenkins.combine(result, arg04);\n      if (arg05 != _hashEnd) {\n        result = _Jenkins.combine(result, arg05);\n        if (arg06 != _hashEnd) {\n          result = _Jenkins.combine(result, arg06);\n          if (arg07 != _hashEnd) {\n            result = _Jenkins.combine(result, arg07);\n            if (arg08 != _hashEnd) {\n              result = _Jenkins.combine(result, arg08);\n              if (arg09 != _hashEnd) {\n                result = _Jenkins.combine(result, arg09);\n                if (arg10 != _hashEnd) {\n                  result = _Jenkins.combine(result, arg10);\n                  if (arg11 != _hashEnd) {\n                    result = _Jenkins.combine(result, arg11);\n                    if (arg12 != _hashEnd) {\n                      result = _Jenkins.combine(result, arg12);\n                      if (arg13 != _hashEnd) {\n                        result = _Jenkins.combine(result, arg13);\n                        if (arg14 != _hashEnd) {\n                          result = _Jenkins.combine(result, arg14);\n                          if (arg15 != _hashEnd) {\n                            result = _Jenkins.combine(result, arg15);\n                            if (arg16 != _hashEnd) {\n                              result = _Jenkins.combine(result, arg16);\n                              if (arg17 != _hashEnd) {\n                                result = _Jenkins.combine(result, arg17);\n                                if (arg18 != _hashEnd) {\n                                  result = _Jenkins.combine(result, arg18);\n                                  if (arg19 != _hashEnd) {\n                                    result = _Jenkins.combine(result, arg19);\n                                    if (arg20 != _hashEnd) {\n                                      result = _Jenkins.combine(result, arg20);\n                                      \/\/ I can see my house from here!\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return _Jenkins.finish(result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "instantiateImageCodec",
            "type": "dart:async.Future<dart:ui.Codec>",
            "desc": "<p>Instantiates an image codec <a href=\"dart-ui\/Codec-class.html\">Codec<\/a> object.<\/p>\n<p><code>list<\/code> is the binary image data (e.g a PNG or GIF binary data).\nThe data can be for either static or animated images. The following image\nformats are supported: JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP<\/p>\n<p>The <code>decodedCacheRatioCap<\/code> is the default maximum multiple of the compressed\nimage size to cache when decoding animated image frames. For example,\nsetting this to <code>2.0<\/code> means that a 400KB GIF would be allowed at most to use\n800KB of memory caching unessential decoded frames. Caching decoded frames\nsaves CPU but can result in out-of-memory crashes when decoding large (or\nmultiple) animated images. Note that GIFs are highly compressed, and it's\nunlikely that a factor that low will be sufficient to cache all decoded\nframes. The default value is <code>25.0<\/code>.<\/p>\n<p>The returned future can complete with an error if the image decoding has\nfailed.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "list",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodedCacheRatioCap",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodedCacheRatioCap",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/instantiateImageCodec.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Codec&gt; instantiateImageCodec(Uint8List list, {\n  double decodedCacheRatioCap = double.infinity,\n}) {\n  return _futurize(\n    (_Callback&lt;Codec&gt; callback) =&gt; _instantiateImageCodec(list, callback, null, decodedCacheRatioCap),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:ui.Codec"
            ]
        },
        {
            "name": "lerpDouble",
            "type": "dart:core.double",
            "desc": "<p>Linearly interpolate between two numbers.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/lerpDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double lerpDouble(num a, num b, double t) {\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= 0.0;\n  b ??= 0.0;\n  return a + (b - a) * t;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "loadFontFromList",
            "type": "dart:async.Future",
            "desc": "<p>Loads a font from a buffer and makes it available for rendering text.<\/p>\n<ul>\n<li>\n<code>list<\/code>: A list of bytes containing the font file.<\/li>\n<li>\n<code>fontFamily<\/code>: The family name used to identify the font in text styles.\n If this is not provided, then the family name will be extracted from the font file.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [
                {
                    "name": "list",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/loadFontFromList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; loadFontFromList(Uint8List list, {String fontFamily}) {\n  return _futurize(\n    (_Callback&lt;void&gt; callback) =&gt; _loadFontFromList(list, callback, fontFamily)\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "saveCompilationTrace",
            "type": "dart:core.List<dart:core.int>",
            "desc": "<p>Returns runtime Dart compilation trace as a UTF-8 encoded memory buffer.<\/p>\n<p>The buffer contains a list of symbols compiled by the Dart JIT at runtime up\nto the point when this function was called. This list can be saved to a text\nfile and passed to tools such as <code>flutter build<\/code> or Dart <code>gen_snapshot<\/code> in\norder to pre-compile this code offline.<\/p>\n<p>The list has one symbol per line of the following format:\n<code>&lt;namespace&gt;,&lt;class&gt;,&lt;symbol&gt;\\n<\/code>.<\/p>\n<p>Here are some examples:<\/p>\n<pre class=\"language-dart\"><code>dart:core,Duration,get:inMilliseconds\npackage:flutter\/src\/widgets\/binding.dart,::,runApp\nfile:\/\/\/...\/my_app.dart,::,main\n<\/code><\/pre>\n<p>This function is only effective in debug and dynamic modes, and will throw in AOT mode.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/saveCompilationTrace.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; saveCompilationTrace() {\n  final dynamic result = _saveCompilationTrace();\n  if (result is Error)\n    throw result;\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:core.int"
            ]
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}