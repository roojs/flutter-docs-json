{
    "name": "dart:developer",
    "href": "dart-developer\/dart-developer-library.html",
    "cn": [
        {
            "name": "dart:developer.Counter",
            "extends": [
                "dart:developer.Metric",
                "dart:core.Object"
            ],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Counter",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Counter",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/Counter\/Counter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Counter(String name, String description) : super(name, description);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:developer.Counter",
                    "isConstant": false,
                    "href": "dart-developer\/Counter\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get value =&gt; _value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Counter-class.html",
            "desc": "<p>A changing value. Initial value is 0.0.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Counter"
        },
        {
            "name": "dart:developer.Flow",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "begin",
                    "type": "dart:developer.Flow",
                    "desc": "<p>A \"begin\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"begin\" Flow event.\nIf <code>id<\/code> is not provided, an id that conflicts with no other Dart-generated\nflow id's will be generated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Flow\/begin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow begin({int id}) {\n  return new Flow._(_begin, id ?? _getNextAsyncId());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:developer.Flow",
                    "desc": "<p>An \"end\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"end\" Flow event.\nThe <code>id<\/code> argument is required. It can come either from another <a href=\"dart-developer\/Flow-class.html\">Flow<\/a>\nevent, or some id that comes from the environment.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Flow\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow end(int id) =&gt; new Flow._(_end, id);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "step",
                    "type": "dart:developer.Flow",
                    "desc": "<p>A \"step\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"step\" Flow event.\nThe <code>id<\/code> argument is required. It can come either from another <a href=\"dart-developer\/Flow-class.html\">Flow<\/a>\nevent, or some id that comes from the environment.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Flow\/step.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow step(int id) =&gt; new Flow._(_step, id);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The flow id of the flow event.<\/p>\n        ",
                    "memberOf": "dart:developer.Flow",
                    "isConstant": false,
                    "href": "dart-developer\/Flow\/id.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Flow-class.html",
            "desc": "<p>A class to represent Flow events.<\/p>\n<p><a href=\"dart-developer\/Flow-class.html\">Flow<\/a> objects are used to thread flow events between timeline slices,\nfor example, those created with the <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> class below. Adding\n<a href=\"dart-developer\/Flow-class.html\">Flow<\/a> objects cause arrows to be drawn between slices in Chrome's trace\nviewer. The arrows start at e.g <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/begin.html\">Flow.begin<\/a> object, go through <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/step.html\">Flow.step<\/a> object, and end at <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/end.html\">Flow.end<\/a> object, all having the same <a href=\"dart-developer\/Flow\/id.html\">Flow.id<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var flow = Flow.begin();\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: flow);\n\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: Flow.step(flow.id));\n\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: Flow.end(flow.id));\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Flow"
        },
        {
            "name": "dart:developer.Gauge",
            "extends": [
                "dart:developer.Metric",
                "dart:core.Object"
            ],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Gauge",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Gauge",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "min",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "max",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/Gauge\/Gauge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gauge(String name, String description, this.min, this.max)\n    : super(name, description) {\n  ArgumentError.checkNotNull(min, 'min');\n  ArgumentError.checkNotNull(max, 'max');\n  if (!(min &lt; max)) throw new ArgumentError('min must be less than max');\n  _value = min;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "max",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:developer.Gauge",
                    "isConstant": false,
                    "href": "dart-developer\/Gauge\/max.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double max\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "min",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:developer.Gauge",
                    "isConstant": false,
                    "href": "dart-developer\/Gauge\/min.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double min\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:developer.Gauge",
                    "isConstant": false,
                    "href": "dart-developer\/Gauge\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get value =&gt; _value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Gauge-class.html",
            "desc": "<p>A measured value with a min and max. Initial value is min. Value will\nbe clamped to the interval <code>min, max<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Gauge"
        },
        {
            "name": "dart:developer.Metric",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Metric",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Metric",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/Metric\/Metric.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Metric(this.name, this.description) {\n  if ((name == 'vm') || name.contains('\/')) {\n    throw new ArgumentError('Invalid Metric name.');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p><a href=\"dart-developer\/Metric\/description.html\">description<\/a> of this metric.<\/p>\n        ",
                    "memberOf": "dart:developer.Metric",
                    "isConstant": false,
                    "href": "dart-developer\/Metric\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String description\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p><a href=\"dart-developer\/Metric\/name.html\">name<\/a> of this metric.<\/p>\n        ",
                    "memberOf": "dart:developer.Metric",
                    "isConstant": false,
                    "href": "dart-developer\/Metric\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "dart:developer.Counter",
                "dart:developer.Gauge"
            ],
            "realImplementors": [
                "dart:developer.Counter",
                "dart:developer.Gauge"
            ],
            "cn": [],
            "href": "dart-developer\/Metric-class.html",
            "desc": "<p>Abstract <a href=\"dart-developer\/Metric-class.html\">Metric<\/a> class. Metric names must be unique, are hierarchical,\nand use periods as separators. For example, 'a.b.c'. Uniqueness is only\nenforced when a Metric is registered. The name of a metric cannot contain\nthe slash ('\/') character.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Metric"
        },
        {
            "name": "dart:developer.Metrics",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Metrics",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-developer\/Metrics\/Metrics.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "deregister",
                    "type": "",
                    "desc": "<p>Deregister <a href=\"dart-developer\/Metric-class.html\">Metric<\/a>s to make them not visible to Observatory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "sig": "",
                    "params": [
                        {
                            "name": "metric",
                            "type": "dart:developer.Metric",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Metrics\/deregister.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void deregister(Metric metric) {\n  ArgumentError.checkNotNull(metric, 'metric');\n  _metrics.remove(metric.name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "register",
                    "type": "",
                    "desc": "<p>Register <a href=\"dart-developer\/Metric-class.html\">Metric<\/a>s to make them visible to Observatory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "sig": "",
                    "params": [
                        {
                            "name": "metric",
                            "type": "dart:developer.Metric",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Metrics\/register.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void register(Metric metric) {\n  ArgumentError.checkNotNull(metric, 'metric');\n  if (_metrics[metric.name] != null) {\n    throw new ArgumentError('Registered metrics have unique names');\n  }\n  _metrics[metric.name] = metric;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Metrics-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Metrics"
        },
        {
            "name": "dart:developer.Service",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Service",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-developer\/Service\/Service.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controlWebServer",
                    "type": "dart:async.Future<dart:developer.ServiceProtocolInfo>",
                    "desc": "<p>Control the web server that the service protocol is accessed through.\nThe <code>enable<\/code> argument must be a boolean and is used as a toggle to\nenable (true) or disable (false) the web server servicing requests.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "sig": "",
                    "params": [
                        {
                            "name": "enable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Service\/controlWebServer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ServiceProtocolInfo&gt; controlWebServer(\n    {bool enable: false}) async {\n  ArgumentError.checkNotNull(enable, 'enable');\n  \/\/ Port to receive response from service isolate.\n  final RawReceivePort receivePort = new RawReceivePort();\n  final Completer&lt;Uri&gt; uriCompleter = new Completer&lt;Uri&gt;();\n  receivePort.handler = (Uri uri) =&gt; uriCompleter.complete(uri);\n  \/\/ Request the information from the service isolate.\n  _webServerControl(receivePort.sendPort, enable);\n  \/\/ Await the response from the service isolate.\n  Uri uri = await uriCompleter.future;\n  \/\/ Close the port.\n  receivePort.close();\n  return new ServiceProtocolInfo(uri);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:developer.ServiceProtocolInfo"
                    ]
                },
                {
                    "name": "getInfo",
                    "type": "dart:async.Future<dart:developer.ServiceProtocolInfo>",
                    "desc": "<p>Get information about the service protocol (version number and\nUri to access the service).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/Service\/getInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ServiceProtocolInfo&gt; getInfo() async {\n  \/\/ Port to receive response from service isolate.\n  final RawReceivePort receivePort = new RawReceivePort();\n  final Completer&lt;Uri&gt; uriCompleter = new Completer&lt;Uri&gt;();\n  receivePort.handler = (Uri uri) =&gt; uriCompleter.complete(uri);\n  \/\/ Request the information from the service isolate.\n  _getServerInfo(receivePort.sendPort);\n  \/\/ Await the response from the service isolate.\n  Uri uri = await uriCompleter.future;\n  \/\/ Close the port.\n  receivePort.close();\n  return new ServiceProtocolInfo(uri);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:developer.ServiceProtocolInfo"
                    ]
                },
                {
                    "name": "getIsolateID",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a <a href=\"dart-core\/String-class.html\">String<\/a> token representing the ID of <code>isolate<\/code>.<\/p>\n<p>Returns null if the running Dart environment does not support the service\nprotocol.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "sig": "",
                    "params": [
                        {
                            "name": "isolate",
                            "type": "dart:isolate.Isolate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Service\/getIsolateID.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String getIsolateID(Isolate isolate) {\n  ArgumentError.checkNotNull(isolate, 'isolate');\n  return _getIsolateIDFromSendPort(isolate.controlPort);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Service-class.html",
            "desc": "<p>Access information about the service protocol and control the web server\nthat provides access to the services provided by the Dart VM for\ndebugging and inspecting Dart programs.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Service"
        },
        {
            "name": "dart:developer.ServiceExtensionHandler",
            "type": "dart:async.Future<dart:developer.ServiceExtensionResponse>",
            "desc": "<p>A service protocol extension handler. Registered with <a href=\"dart-developer\/registerExtension.html\">registerExtension<\/a>.<\/p>\n<p>Must complete to a <a href=\"dart-developer\/ServiceExtensionResponse-class.html\">ServiceExtensionResponse<\/a>. <code>method<\/code> is the method name\nof the service protocol request, and <code>parameters<\/code> is a map holding the\nparameters to the service protocol request.<\/p>\n<p><em>NOTE<\/em>: all parameter names and values are encoded as strings.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "parameters",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/ServiceExtensionHandler.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef Future&lt;ServiceExtensionResponse&gt; ServiceExtensionHandler(\n    String method, Map&lt;String, String&gt; parameters);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": [
                "dart:async.Future",
                "dart:developer.ServiceExtensionResponse"
            ]
        },
        {
            "name": "dart:developer.ServiceExtensionResponse",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "ServiceExtensionResponse.error",
                    "type": "",
                    "desc": "<p>Creates an error response to a service protocol extension RPC.<\/p>\n<p>Requires <code>errorCode<\/code> to be <a href=\"dart-developer\/ServiceExtensionResponse\/invalidParams-constant.html\">invalidParams<\/a> or between <a href=\"dart-developer\/ServiceExtensionResponse\/extensionErrorMin-constant.html\">extensionErrorMin<\/a>\nand <a href=\"dart-developer\/ServiceExtensionResponse\/extensionErrorMax-constant.html\">extensionErrorMax<\/a>. Requires <code>errorDetail<\/code> to be a JSON object\nencoded as a string. When forming the JSON-RPC message <code>errorDetail<\/code> will\nbe inlined directly.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "sig": "",
                    "params": [
                        {
                            "name": "errorCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "errorDetail",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.error.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ServiceExtensionResponse.error(int errorCode, String errorDetail)\n    : _result = null,\n      _errorCode = errorCode,\n      _errorDetail = errorDetail {\n  _validateErrorCode(_errorCode);\n  ArgumentError.checkNotNull(_errorDetail, \"errorDetail\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ServiceExtensionResponse.result",
                    "type": "",
                    "desc": "<p>Creates a successful response to a service protocol extension RPC.<\/p>\n<p>Requires <code>result<\/code> to be a JSON object encoded as a string. When forming\nthe JSON-RPC message <code>result<\/code> will be inlined directly.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "sig": "",
                    "params": [
                        {
                            "name": "result",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.result.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ServiceExtensionResponse.result(String result)\n    : _result = result,\n      _errorCode = null,\n      _errorDetail = null {\n  ArgumentError.checkNotNull(_result, \"result\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionError-constant.html",
                    "desc": "<p>Generic extension error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionError = -32000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "extensionError",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionErrorMax-constant.html",
                    "desc": "<p>Maximum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionErrorMax = -32000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "extensionErrorMax",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionErrorMin-constant.html",
                    "desc": "<p>Minimum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionErrorMin = -32016\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "extensionErrorMin",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/invalidParams-constant.html",
                    "desc": "<p>Invalid method parameter(s) error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const invalidParams = -32602\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "invalidParams",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionError-constant.html",
                    "desc": "<p>Generic extension error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionError = extensionError\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kExtensionError",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionErrorMax-constant.html",
                    "desc": "<p>Maximum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionErrorMax = extensionErrorMax\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kExtensionErrorMax",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionErrorMin-constant.html",
                    "desc": "<p>Minimum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionErrorMin = extensionErrorMin\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kExtensionErrorMin",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                },
                {
                    "type": "",
                    "href": "dart-developer\/ServiceExtensionResponse\/kInvalidParams-constant.html",
                    "desc": "<p>Invalid method parameter(s) error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kInvalidParams = invalidParams\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kInvalidParams",
                    "memberOf": "dart:developer.ServiceExtensionResponse"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/ServiceExtensionResponse-class.html",
            "desc": "<p>A response to a service protocol extension RPC.<\/p>\n<p>If the RPC was successful, use <a href=\"dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.result.html\">ServiceExtensionResponse.result<\/a>, otherwise\nuse <a href=\"dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.error.html\">ServiceExtensionResponse.error<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ServiceExtensionResponse"
        },
        {
            "name": "dart:developer.ServiceProtocolInfo",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "ServiceProtocolInfo",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "sig": "",
                    "params": [
                        {
                            "name": "serverUri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/ServiceProtocolInfo\/ServiceProtocolInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ServiceProtocolInfo(this.serverUri);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/ServiceProtocolInfo\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  if (serverUri != null) {\n    return 'Dart VM Service Protocol v$majorVersion.$minorVersion '\n        'listening on $serverUri';\n  } else {\n    return 'Dart VM Service Protocol v$majorVersion.$minorVersion';\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "majorVersion",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The major version of the protocol. If the running Dart environment does\nnot support the service protocol, this is 0.<\/p>\n        ",
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "isConstant": false,
                    "href": "dart-developer\/ServiceProtocolInfo\/majorVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int majorVersion = _getServiceMajorVersion()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minorVersion",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The minor version of the protocol. If the running Dart environment does\nnot support the service protocol, this is 0.<\/p>\n        ",
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "isConstant": false,
                    "href": "dart-developer\/ServiceProtocolInfo\/minorVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minorVersion = _getServiceMinorVersion()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "serverUri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The Uri to access the service. If the web server is not running, this\nwill be null.<\/p>\n        ",
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "isConstant": false,
                    "href": "dart-developer\/ServiceProtocolInfo\/serverUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri serverUri\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/ServiceProtocolInfo-class.html",
            "desc": "<p>Service protocol is the protocol that a client like the Observatory\ncould use to access the services provided by the Dart VM for\ndebugging and inspecting Dart programs. This class encapsulates the\nversion number and Uri for accessing this service.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ServiceProtocolInfo"
        },
        {
            "name": "dart:developer.Timeline",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "Timeline",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-developer\/Timeline\/Timeline.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "finishSync",
                    "type": "",
                    "desc": "<p>Finish the last synchronous operation that was started.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/Timeline\/finishSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void finishSync() {\n  if (!_hasTimeline) {\n    return;\n  }\n  if (_stack.length == 0) {\n    throw new StateError('Uneven calls to startSync and finishSync');\n  }\n  \/\/ Pop top item off of stack.\n  var block = _stack.removeLast();\n  if (block == null) {\n    \/\/ Dart stream was disabled when startSync was called.\n    return;\n  }\n  \/\/ Finish it.\n  block.finish();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "instantSync",
                    "type": "",
                    "desc": "<p>Emit an instant event.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Timeline\/instantSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void instantSync(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Stream is disabled.\n    return;\n  }\n  Map instantArguments;\n  if (arguments != null) {\n    instantArguments = new Map.from(arguments);\n  }\n  _reportInstantEvent(\n      _getTraceClock(), 'Dart', name, _argumentsAsJson(instantArguments));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "startSync",
                    "type": "",
                    "desc": "<p>Start a synchronous operation labeled <code>name<\/code>. Optionally takes\na <a href=\"dart-core\/Map-class.html\">Map<\/a> of <code>arguments<\/code>. This slice may also optionally be associated with\na <a href=\"dart-developer\/Flow-class.html\">Flow<\/a> event. This operation must be finished before\nreturning to the event queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flow",
                            "type": "dart:developer.Flow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Timeline\/startSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void startSync(String name, {Map arguments, Flow flow}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Push a null onto the stack and return.\n    _stack.add(null);\n    return;\n  }\n  var block = new _SyncBlock._(name, _getTraceClock(), _getThreadCpuClock());\n  if (arguments != null) {\n    block._arguments = arguments;\n  }\n  if (flow != null) {\n    block.flow = flow;\n  }\n  _stack.add(block);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "timeSync",
                    "type": "",
                    "desc": "<p>A utility method to time a synchronous <code>function<\/code>. Internally calls\n<code>function<\/code> bracketed by calls to <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "function",
                            "type": "dart:developer.TimelineSyncFunction",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flow",
                            "type": "dart:developer.Flow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/Timeline\/timeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T timeSync&lt;T&gt;(String name, TimelineSyncFunction&lt;T&gt; function,\n    {Map arguments, Flow flow}) {\n  startSync(name, arguments: arguments, flow: flow);\n  try {\n    return function();\n  } finally {\n    finishSync();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "now",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current time stamp from the clock used by the timeline. Units are\nmicroseconds.<\/p>\n        ",
                    "memberOf": "dart:developer.Timeline",
                    "isConstant": false,
                    "href": "dart-developer\/Timeline\/now.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get now =&gt; _getTraceClock();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/Timeline-class.html",
            "desc": "<p>Add to the timeline.<\/p>\n<p><a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s methods add synchronous events to the timeline. When\ngenerating a timeline in Chrome's tracing format, using <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> generates\n\"Complete\" events. <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a> can be used\nexplicitly, or implicitly by wrapping a closure in <a href=\"dart-developer\/Timeline\/timeSync.html\">timeSync<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.startSync(\"Doing Something\");\ndoSomething();\nTimeline.finishSync();\n<\/code><\/pre>\n<p>Or:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.timeSync(\"Doing Something\", () {\n  doSomething();\n});\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Timeline"
        },
        {
            "name": "dart:developer.TimelineAsyncFunction",
            "type": "dart:async.Future",
            "desc": "",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-developer\/TimelineAsyncFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef Future TimelineAsyncFunction();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "dart:developer.TimelineSyncFunction",
            "type": "",
            "desc": "<p>A typedef for the function argument to <a href=\"dart-developer\/Timeline\/timeSync.html\">Timeline.timeSync<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-developer\/TimelineSyncFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef TimelineSyncFunction&lt;T&gt; = T Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "dart:developer.TimelineTask",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "TimelineTask",
                    "type": "",
                    "desc": "<p>Create a task. The task ID will be set by the system.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-developer\/TimelineTask\/TimelineTask.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TimelineTask() : _taskId = _getNextAsyncId() {}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "finish",
                    "type": "",
                    "desc": "<p>Finish the last synchronous operation that was started.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/TimelineTask\/finish.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void finish() {\n  if (!_hasTimeline) {\n    return;\n  }\n  if (_stack.length == 0) {\n    throw new StateError('Uneven calls to start and finish');\n  }\n  \/\/ Pop top item off of stack.\n  var block = _stack.removeLast();\n  block._finish();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "instant",
                    "type": "",
                    "desc": "<p>Emit an instant event for this task.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/TimelineTask\/instant.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void instant(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  Map instantArguments;\n  if (arguments != null) {\n    instantArguments = new Map.from(arguments);\n  }\n  _reportTaskEvent(_getTraceClock(), _taskId, 'n', 'Dart', name,\n      _argumentsAsJson(instantArguments));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pass",
                    "type": "dart:core.int",
                    "desc": "<p>Retrieve the <a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a>'s task id. Will throw an exception if the\nstack is not empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/TimelineTask\/pass.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int pass() {\n  if (_stack.length &gt; 0) {\n    throw new StateError(\n        'You cannot pass a TimelineTask without finishing all started '\n        'operations');\n  }\n  int r = _taskId;\n  return r;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "",
                    "desc": "<p>Start a synchronous operation within this task named <code>name<\/code>.\nOptionally takes a <a href=\"dart-core\/Map-class.html\">Map<\/a> of <code>arguments<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-developer\/TimelineTask\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void start(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  var block = new _AsyncBlock._(name, _taskId);\n  if (arguments != null) {\n    block._arguments = arguments;\n  }\n  _stack.add(block);\n  block._start();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "TimelineTask.withTaskId",
                    "type": "",
                    "desc": "<p>Create a task with an explicit <code>taskId<\/code>. This is useful if you are\npassing a task from one isolate to another.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "sig": "",
                    "params": [
                        {
                            "name": "taskId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/TimelineTask\/TimelineTask.withTaskId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TimelineTask.withTaskId(int taskId) : _taskId = taskId {\n  ArgumentError.checkNotNull(taskId, 'taskId');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/TimelineTask-class.html",
            "desc": "<p>An asynchronous task on the timeline. An asynchronous task can have many\n(nested) synchronous operations. Synchronous operations can live longer than\nthe current isolate event. To pass a <a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a> to another isolate,\nyou must first call <a href=\"dart-developer\/TimelineTask\/pass.html\">pass<\/a> to get the task id and then construct a new\n<a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a> in the other isolate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TimelineTask"
        },
        {
            "name": "dart:developer.UserTag",
            "extends": [],
            "memberOf": "dart:developer",
            "events": [],
            "methods": [
                {
                    "name": "UserTag",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:developer.UserTag",
                    "sig": "",
                    "params": [
                        {
                            "name": "label",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-developer\/UserTag\/UserTag.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory UserTag(String label);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "makeCurrent",
                    "type": "dart:developer.UserTag",
                    "desc": "<p>Make <a href=\"dart-developer\/UserTag-class.html\">this<\/a> the current tag for the isolate. Returns the current tag\nbefore setting.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:developer.UserTag",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-developer\/UserTag\/makeCurrent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UserTag makeCurrent();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-developer\/UserTag\/MAX_USER_TAGS-constant.html",
                    "desc": "<p>The maximum number of UserTag instances that can be created by a program.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MAX_USER_TAGS = 64\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MAX_USER_TAGS",
                    "memberOf": "dart:developer.UserTag"
                },
                {
                    "name": "defaultTag",
                    "type": "dart:developer.UserTag",
                    "types": [],
                    "desc": "<p>The default <a href=\"dart-developer\/UserTag-class.html\">UserTag<\/a> with label 'Default'.<\/p>\n        ",
                    "memberOf": "dart:developer.UserTag",
                    "isConstant": false,
                    "href": "dart-developer\/UserTag\/defaultTag.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static UserTag get defaultTag;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Label of <a href=\"dart-developer\/UserTag-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "dart:developer.UserTag",
                    "isConstant": false,
                    "href": "dart-developer\/UserTag\/label.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-developer\/UserTag-class.html",
            "desc": "<p>A UserTag can be used to group samples in the Observatory profiler.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "UserTag"
        },
        {
            "name": "debugger",
            "type": "dart:core.bool",
            "desc": "<p>If <code>when<\/code> is true, stop the program as if a breakpoint were hit at the\nfollowing statement.<\/p>\n<p>Returns the value of <code>when<\/code>. Some debuggers may display <code>message<\/code>.<\/p>\n<p>NOTE: When invoked, the isolate will not return until a debugger\ncontinues execution. When running in the Dart VM, the behaviour is the same\nregardless of whether or not a debugger is connected. When compiled to\nJavaScript, this uses the \"debugger\" statement, and behaves exactly as\nthat does.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "when",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "when",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/debugger.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool debugger({bool when: true, String message});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getCurrentTag",
            "type": "dart:developer.UserTag",
            "desc": "<p>Returns the current <a href=\"dart-developer\/UserTag-class.html\">UserTag<\/a> for the isolate.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-developer\/getCurrentTag.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external UserTag getCurrentTag();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "inspect",
            "type": "dart:core.Object",
            "desc": "<p>Send a reference to <code>object<\/code> to any attached debuggers.<\/p>\n<p>Debuggers may open an inspector on the object. Returns the argument.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/inspect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Object inspect(Object object);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "log",
            "type": "",
            "desc": "<p>Emit a log event.<\/p>\n<p>This function was designed to map closely to the logging information\ncollected by <code>package:logging<\/code>.<\/p>\n<ul>\n<li>\n<code>message<\/code> is the log message<\/li>\n<li>\n<code>time<\/code> (optional) is the timestamp<\/li>\n<li>\n<code>sequenceNumber<\/code> (optional) is a monotonically increasing sequence number<\/li>\n<li>\n<code>level<\/code> (optional) is the severity level (a value between 0 and 2000); see\nthe <code>package:logging<\/code> <code>Level<\/code> class for an overview of the possible values<\/li>\n<li>\n<code>name<\/code> (optional) is the name of the source of the log message<\/li>\n<li>\n<code>zone<\/code> (optional) the zone where the log was emitted<\/li>\n<li>\n<code>error<\/code> (optional) an error object associated with this log event<\/li>\n<li>\n<code>stackTrace<\/code> (optional) a stack trace associated with this log event<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "time",
                    "type": "dart:core.DateTime",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sequenceNumber",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "zone",
                    "type": "dart:async.Zone",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "error",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/log.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void log(\n  String message, {\n  DateTime time,\n  int sequenceNumber,\n  int level: 0,\n  String name: '',\n  Zone zone,\n  Object error,\n  StackTrace stackTrace,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "postEvent",
            "type": "",
            "desc": "<p>Post an event of <code>eventKind<\/code> with payload of <code>eventData<\/code> to the <code>Extension<\/code>\nevent stream.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "eventKind",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "eventData",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "eventKind",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "eventData",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/postEvent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void postEvent(String eventKind, Map eventData) {\n  ArgumentError.checkNotNull(eventKind, 'eventKind');\n  ArgumentError.checkNotNull(eventData, 'eventData');\n  String eventDataAsString = json.encode(eventData);\n  _postEvent(eventKind, eventDataAsString);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "registerExtension",
            "type": "",
            "desc": "<p>Register a <a href=\"dart-developer\/ServiceExtensionHandler.html\">ServiceExtensionHandler<\/a> that will be invoked in this isolate\nfor <code>method<\/code>. <em>NOTE<\/em>: Service protocol extensions must be registered\nin each isolate.<\/p>\n<p><em>NOTE<\/em>: <code>method<\/code> must begin with 'ext.' and you should use the following\nstructure to avoid conflicts with other packages: 'ext.package.command'.\nThat is, immediately following the 'ext.' prefix, should be the registering\npackage name followed by another period ('.') and then the command name.\nFor example: 'ext.dart.io.getOpenFiles'.<\/p>\n<p>Because service extensions are isolate specific, clients using extensions\nmust always include an 'isolateId' parameter with each RPC.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:developer",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "handler",
                    "type": "dart:developer.ServiceExtensionHandler",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "handler",
                    "type": "dart:developer.ServiceExtensionHandler",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-developer\/registerExtension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerExtension(String method, ServiceExtensionHandler handler) {\n  ArgumentError.checkNotNull(method, 'method');\n  if (!method.startsWith('ext.')) {\n    throw new ArgumentError.value(method, 'method', 'Must begin with ext.');\n  }\n  if (_lookupExtension(method) != null) {\n    throw new ArgumentError('Extension already registered: $method');\n  }\n  ArgumentError.checkNotNull(handler, 'handler');\n  _registerExtension(method, handler);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}