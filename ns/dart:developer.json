{
    "class": [
        {
            "desc": "<p>A changing value. Initial value is 0.0.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Counter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Counter",
            "shortname": "Counter",
            "extends": [
                "dart:developer.Metric",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Counter(String name, String description) : super(name, description);<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Counter\/Counter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Counter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Counter",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get value =&gt; _value;<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Counter\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Counter",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class to represent Flow events.<\/p>\n<p><a href=\"dart-developer\/Flow-class.html\">Flow<\/a> objects are used to thread flow events between timeline slices,\nfor example, those created with the <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> class below. Adding\n<a href=\"dart-developer\/Flow-class.html\">Flow<\/a> objects cause arrows to be drawn between slices in Chrome's trace\nviewer. The arrows start at e.g <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/begin.html\">Flow.begin<\/a> object, go through <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/step.html\">Flow.step<\/a> object, and end at <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> events that are passed a\n<a href=\"dart-developer\/Flow\/end.html\">Flow.end<\/a> object, all having the same <a href=\"dart-developer\/Flow\/id.html\">Flow.id<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var flow = Flow.begin();\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: flow);\n\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: Flow.step(flow.id));\n\nTimeline.timeSync('flow_test', () {\n  doSomething();\n}, flow: Flow.end(flow.id));\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Flow-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Flow",
            "shortname": "Flow",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>A \"begin\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"begin\" Flow event.\nIf <code>id<\/code> is not provided, an id that conflicts with no other Dart-generated\nflow id's will be generated.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow begin({int id}) {\n  return new Flow._(_begin, id ?? _getNextAsyncId());\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Flow\/begin.html",
                    "isDeprecated": false,
                    "type": "dart:developer.Flow",
                    "name": "begin",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>An \"end\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"end\" Flow event.\nThe <code>id<\/code> argument is required. It can come either from another <a href=\"dart-developer\/Flow-class.html\">Flow<\/a>\nevent, or some id that comes from the environment.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow end(int id) =&gt; new Flow._(_end, id);<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Flow\/end.html",
                    "isDeprecated": false,
                    "type": "dart:developer.Flow",
                    "name": "end",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>A \"step\" Flow event.<\/p>\n<p>When passed to a <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> method, generates a \"step\" Flow event.\nThe <code>id<\/code> argument is required. It can come either from another <a href=\"dart-developer\/Flow-class.html\">Flow<\/a>\nevent, or some id that comes from the environment.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Flow step(int id) =&gt; new Flow._(_step, id);<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Flow\/step.html",
                    "isDeprecated": false,
                    "type": "dart:developer.Flow",
                    "name": "step",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Flow",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The flow id of the flow event.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Flow\/id.html",
                    "name": "id",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Flow",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A measured value with a min and max. Initial value is min. Value will\nbe clamped to the interval <code>min, max<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Gauge-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Gauge",
            "shortname": "Gauge",
            "extends": [
                "dart:developer.Metric",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gauge(String name, String description, this.min, this.max)\n    : super(name, description) {\n  ArgumentError.checkNotNull(min, 'min');\n  ArgumentError.checkNotNull(max, 'max');\n  if (!(min &lt; max)) throw new ArgumentError('min must be less than max');\n  _value = min;\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Gauge\/Gauge.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Gauge",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Gauge",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "max",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "min",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double max\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Gauge\/max.html",
                    "name": "max",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Gauge",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double min\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Gauge\/min.html",
                    "name": "min",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Gauge",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get value =&gt; _value;<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Gauge\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Gauge",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Abstract <a href=\"dart-developer\/Metric-class.html\">Metric<\/a> class. Metric names must be unique, are hierarchical,\nand use periods as separators. For example, 'a.b.c'. Uniqueness is only\nenforced when a Metric is registered. The name of a metric cannot contain\nthe slash ('\/') character.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Metric-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Metric",
            "shortname": "Metric",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:developer.Counter",
                "dart:developer.Gauge"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Metric(this.name, this.description) {\n  if ((name == 'vm') || name.contains('\/')) {\n    throw new ArgumentError('Invalid Metric name.');\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Metric\/Metric.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Metric",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Metric",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p><a href=\"dart-developer\/Metric\/description.html\">description<\/a> of this metric.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String description\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Metric\/description.html",
                    "name": "description",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Metric",
                    "params": []
                },
                {
                    "desc": "<p><a href=\"dart-developer\/Metric\/name.html\">name<\/a> of this metric.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Metric\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Metric",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Metrics-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Metrics",
            "shortname": "Metrics",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-developer\/Metrics\/Metrics.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Metrics",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "params": []
                },
                {
                    "desc": "<p>Deregister <a href=\"dart-developer\/Metric-class.html\">Metric<\/a>s to make them not visible to Observatory.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void deregister(Metric metric) {\n  ArgumentError.checkNotNull(metric, 'metric');\n  _metrics.remove(metric.name);\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Metrics\/deregister.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "deregister",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "params": [
                        {
                            "name": "metric",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:developer.Metric"
                        }
                    ]
                },
                {
                    "desc": "<p>Register <a href=\"dart-developer\/Metric-class.html\">Metric<\/a>s to make them visible to Observatory.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void register(Metric metric) {\n  ArgumentError.checkNotNull(metric, 'metric');\n  if (_metrics[metric.name] != null) {\n    throw new ArgumentError('Registered metrics have unique names');\n  }\n  _metrics[metric.name] = metric;\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Metrics\/register.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "register",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Metrics",
                    "params": [
                        {
                            "name": "metric",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:developer.Metric"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Access information about the service protocol and control the web server\nthat provides access to the services provided by the Dart VM for\ndebugging and inspecting Dart programs.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Service-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Service",
            "shortname": "Service",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-developer\/Service\/Service.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Service",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "params": []
                },
                {
                    "desc": "<p>Control the web server that the service protocol is accessed through.\nThe <code>enable<\/code> argument must be a boolean and is used as a toggle to\nenable (true) or disable (false) the web server servicing requests.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ServiceProtocolInfo&gt; controlWebServer(\n    {bool enable: false}) async {\n  ArgumentError.checkNotNull(enable, 'enable');\n  \/\/ Port to receive response from service isolate.\n  final RawReceivePort receivePort = new RawReceivePort();\n  final Completer&lt;Uri&gt; uriCompleter = new Completer&lt;Uri&gt;();\n  receivePort.handler = (Uri uri) =&gt; uriCompleter.complete(uri);\n  \/\/ Request the information from the service isolate.\n  _webServerControl(receivePort.sendPort, enable);\n  \/\/ Await the response from the service isolate.\n  Uri uri = await uriCompleter.future;\n  \/\/ Close the port.\n  receivePort.close();\n  return new ServiceProtocolInfo(uri);\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Service\/controlWebServer.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:developer.ServiceProtocolInfo>",
                    "name": "controlWebServer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "params": [
                        {
                            "name": "enable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Get information about the service protocol (version number and\nUri to access the service).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ServiceProtocolInfo&gt; getInfo() async {\n  \/\/ Port to receive response from service isolate.\n  final RawReceivePort receivePort = new RawReceivePort();\n  final Completer&lt;Uri&gt; uriCompleter = new Completer&lt;Uri&gt;();\n  receivePort.handler = (Uri uri) =&gt; uriCompleter.complete(uri);\n  \/\/ Request the information from the service isolate.\n  _getServerInfo(receivePort.sendPort);\n  \/\/ Await the response from the service isolate.\n  Uri uri = await uriCompleter.future;\n  \/\/ Close the port.\n  receivePort.close();\n  return new ServiceProtocolInfo(uri);\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Service\/getInfo.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:developer.ServiceProtocolInfo>",
                    "name": "getInfo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "params": []
                },
                {
                    "desc": "<p>Returns a <a href=\"dart-core\/String-class.html\">String<\/a> token representing the ID of <code>isolate<\/code>.<\/p>\n<p>Returns null if the running Dart environment does not support the service\nprotocol.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String getIsolateID(Isolate isolate) {\n  ArgumentError.checkNotNull(isolate, 'isolate');\n  return _getIsolateIDFromSendPort(isolate.controlPort);\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Service\/getIsolateID.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "getIsolateID",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Service",
                    "params": [
                        {
                            "name": "isolate",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.Isolate"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A response to a service protocol extension RPC.<\/p>\n<p>If the RPC was successful, use <a href=\"dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.result.html\">ServiceExtensionResponse.result<\/a>, otherwise\nuse <a href=\"dart-developer\/ServiceExtensionResponse\/ServiceExtensionResponse.error.html\">ServiceExtensionResponse.error<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/ServiceExtensionResponse-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.ServiceExtensionResponse",
            "shortname": "ServiceExtensionResponse",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "<p>Generic extension error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionError = -32000\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionError-constant.html",
                    "name": "extensionError",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Maximum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionErrorMax = -32000\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionErrorMax-constant.html",
                    "name": "extensionErrorMax",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Minimum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const extensionErrorMin = -32016\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/extensionErrorMin-constant.html",
                    "name": "extensionErrorMin",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Invalid method parameter(s) error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const invalidParams = -32602\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/invalidParams-constant.html",
                    "name": "invalidParams",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Generic extension error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionError = extensionError\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionError-constant.html",
                    "name": "kExtensionError",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Maximum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionErrorMax = extensionErrorMax\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionErrorMax-constant.html",
                    "name": "kExtensionErrorMax",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Minimum extension provided error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kExtensionErrorMin = extensionErrorMin\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/kExtensionErrorMin-constant.html",
                    "name": "kExtensionErrorMin",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                },
                {
                    "desc": "<p>Invalid method parameter(s) error code.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const kInvalidParams = invalidParams\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceExtensionResponse\/kInvalidParams-constant.html",
                    "name": "kInvalidParams",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.ServiceExtensionResponse",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Service protocol is the protocol that a client like the Observatory\ncould use to access the services provided by the Dart VM for\ndebugging and inspecting Dart programs. This class encapsulates the\nversion number and Uri for accessing this service.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/ServiceProtocolInfo-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.ServiceProtocolInfo",
            "shortname": "ServiceProtocolInfo",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ServiceProtocolInfo(this.serverUri);<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceProtocolInfo\/ServiceProtocolInfo.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ServiceProtocolInfo",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "params": [
                        {
                            "name": "serverUri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Uri"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  if (serverUri != null) {\n    return 'Dart VM Service Protocol v$majorVersion.$minorVersion '\n        'listening on $serverUri';\n  } else {\n    return 'Dart VM Service Protocol v$majorVersion.$minorVersion';\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/ServiceProtocolInfo\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The major version of the protocol. If the running Dart environment does\nnot support the service protocol, this is 0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int majorVersion = _getServiceMajorVersion()\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/ServiceProtocolInfo\/majorVersion.html",
                    "name": "majorVersion",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "params": []
                },
                {
                    "desc": "<p>The minor version of the protocol. If the running Dart environment does\nnot support the service protocol, this is 0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minorVersion = _getServiceMinorVersion()\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/ServiceProtocolInfo\/minorVersion.html",
                    "name": "minorVersion",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "params": []
                },
                {
                    "desc": "<p>The Uri to access the service. If the web server is not running, this\nwill be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri serverUri\n\n<\/code><\/pre>\n        ",
                    "href": "dart-developer\/ServiceProtocolInfo\/serverUri.html",
                    "name": "serverUri",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.ServiceProtocolInfo",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Add to the timeline.<\/p>\n<p><a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s methods add synchronous events to the timeline. When\ngenerating a timeline in Chrome's tracing format, using <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a> generates\n\"Complete\" events. <a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>'s <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a> can be used\nexplicitly, or implicitly by wrapping a closure in <a href=\"dart-developer\/Timeline\/timeSync.html\">timeSync<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.startSync(\"Doing Something\");\ndoSomething();\nTimeline.finishSync();\n<\/code><\/pre>\n<p>Or:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Timeline.timeSync(\"Doing Something\", () {\n  doSomething();\n});\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/Timeline-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.Timeline",
            "shortname": "Timeline",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-developer\/Timeline\/Timeline.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Timeline",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": []
                },
                {
                    "desc": "<p>Finish the last synchronous operation that was started.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void finishSync() {\n  if (!_hasTimeline) {\n    return;\n  }\n  if (_stack.length == 0) {\n    throw new StateError('Uneven calls to startSync and finishSync');\n  }\n  \/\/ Pop top item off of stack.\n  var block = _stack.removeLast();\n  if (block == null) {\n    \/\/ Dart stream was disabled when startSync was called.\n    return;\n  }\n  \/\/ Finish it.\n  block.finish();\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Timeline\/finishSync.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "finishSync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": []
                },
                {
                    "desc": "<p>Emit an instant event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void instantSync(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Stream is disabled.\n    return;\n  }\n  Map instantArguments;\n  if (arguments != null) {\n    instantArguments = new Map.from(arguments);\n  }\n  _reportInstantEvent(\n      _getTraceClock(), 'Dart', name, _argumentsAsJson(instantArguments));\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Timeline\/instantSync.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "instantSync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": [
                        {
                            "name": "arguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Start a synchronous operation labeled <code>name<\/code>. Optionally takes\na <a href=\"dart-core\/Map-class.html\">Map<\/a> of <code>arguments<\/code>. This slice may also optionally be associated with\na <a href=\"dart-developer\/Flow-class.html\">Flow<\/a> event. This operation must be finished before\nreturning to the event queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void startSync(String name, {Map arguments, Flow flow}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  if (!_isDartStreamEnabled()) {\n    \/\/ Push a null onto the stack and return.\n    _stack.add(null);\n    return;\n  }\n  var block = new _SyncBlock._(name, _getTraceClock(), _getThreadCpuClock());\n  if (arguments != null) {\n    block._arguments = arguments;\n  }\n  if (flow != null) {\n    block.flow = flow;\n  }\n  _stack.add(block);\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Timeline\/startSync.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "startSync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": [
                        {
                            "name": "arguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "flow",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:developer.Flow"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>A utility method to time a synchronous <code>function<\/code>. Internally calls\n<code>function<\/code> bracketed by calls to <a href=\"dart-developer\/Timeline\/startSync.html\">startSync<\/a> and <a href=\"dart-developer\/Timeline\/finishSync.html\">finishSync<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T timeSync&lt;T&gt;(String name, TimelineSyncFunction&lt;T&gt; function,\n    {Map arguments, Flow flow}) {\n  startSync(name, arguments: arguments, flow: flow);\n  try {\n    return function();\n  } finally {\n    finishSync();\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/Timeline\/timeSync.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "timeSync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": [
                        {
                            "name": "arguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "flow",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:developer.Flow"
                        },
                        {
                            "name": "function",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:developer.TimelineSyncFunction"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The current time stamp from the clock used by the timeline. Units are\nmicroseconds.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get now =&gt; _getTraceClock();<\/code><\/pre>\n        ",
                    "href": "dart-developer\/Timeline\/now.html",
                    "name": "now",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.Timeline",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An asynchronous task on the timeline. An asynchronous task can have many\n(nested) synchronous operations. Synchronous operations can live longer than\nthe current isolate event. To pass a <a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a> to another isolate,\nyou must first call <a href=\"dart-developer\/TimelineTask\/pass.html\">pass<\/a> to get the task id and then construct a new\n<a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a> in the other isolate.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/TimelineTask-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.TimelineTask",
            "shortname": "TimelineTask",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a task. The task ID will be set by the system.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TimelineTask() : _taskId = _getNextAsyncId() {}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/TimelineTask\/TimelineTask.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TimelineTask",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "params": []
                },
                {
                    "desc": "<p>Finish the last synchronous operation that was started.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void finish() {\n  if (!_hasTimeline) {\n    return;\n  }\n  if (_stack.length == 0) {\n    throw new StateError('Uneven calls to start and finish');\n  }\n  \/\/ Pop top item off of stack.\n  var block = _stack.removeLast();\n  block._finish();\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/TimelineTask\/finish.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "finish",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "params": []
                },
                {
                    "desc": "<p>Emit an instant event for this task.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void instant(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  Map instantArguments;\n  if (arguments != null) {\n    instantArguments = new Map.from(arguments);\n  }\n  _reportTaskEvent(_getTraceClock(), _taskId, 'n', 'Dart', name,\n      _argumentsAsJson(instantArguments));\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/TimelineTask\/instant.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "instant",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "params": [
                        {
                            "name": "arguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Retrieve the <a href=\"dart-developer\/TimelineTask-class.html\">TimelineTask<\/a>'s task id. Will throw an exception if the\nstack is not empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int pass() {\n  if (_stack.length &gt; 0) {\n    throw new StateError(\n        'You cannot pass a TimelineTask without finishing all started '\n        'operations');\n  }\n  int r = _taskId;\n  return r;\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/TimelineTask\/pass.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "pass",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "params": []
                },
                {
                    "desc": "<p>Start a synchronous operation within this task named <code>name<\/code>.\nOptionally takes a <a href=\"dart-core\/Map-class.html\">Map<\/a> of <code>arguments<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void start(String name, {Map arguments}) {\n  if (!_hasTimeline) return;\n  ArgumentError.checkNotNull(name, 'name');\n  var block = new _AsyncBlock._(name, _taskId);\n  if (arguments != null) {\n    block._arguments = arguments;\n  }\n  _stack.add(block);\n  block._start();\n}<\/code><\/pre>\n    ",
                    "href": "dart-developer\/TimelineTask\/start.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "start",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.TimelineTask",
                    "params": [
                        {
                            "name": "arguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A UserTag can be used to group samples in the Observatory profiler.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-developer\/UserTag-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:developer",
            "name": "dart:developer.UserTag",
            "shortname": "UserTag",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory UserTag(String label);<\/code><\/pre>\n    ",
                    "href": "dart-developer\/UserTag\/UserTag.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UserTag",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:developer.UserTag",
                    "params": [
                        {
                            "name": "label",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Make <a href=\"dart-developer\/UserTag-class.html\">this<\/a> the current tag for the isolate. Returns the current tag\nbefore setting.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UserTag makeCurrent();<\/code><\/pre>\n    ",
                    "href": "dart-developer\/UserTag\/makeCurrent.html",
                    "isDeprecated": false,
                    "type": "dart:developer.UserTag",
                    "name": "makeCurrent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:developer.UserTag",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The maximum number of UserTag instances that can be created by a program.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MAX_USER_TAGS = 64\n\n<\/code><\/pre>\n    ",
                    "href": "dart-developer\/UserTag\/MAX_USER_TAGS-constant.html",
                    "name": "MAX_USER_TAGS",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:developer.UserTag",
                    "params": []
                },
                {
                    "desc": "<p>The default <a href=\"dart-developer\/UserTag-class.html\">UserTag<\/a> with label 'Default'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static UserTag get defaultTag;<\/code><\/pre>\n        ",
                    "href": "dart-developer\/UserTag\/defaultTag.html",
                    "name": "defaultTag",
                    "isDeprecated": false,
                    "type": "dart:developer.UserTag",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.UserTag",
                    "params": []
                },
                {
                    "desc": "<p>Label of <a href=\"dart-developer\/UserTag-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label;<\/code><\/pre>\n        ",
                    "href": "dart-developer\/UserTag\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:developer.UserTag",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}