{
    "class": [
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Float32Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Float32Buffer",
            "shortname": "Float32Buffer",
            "extends": [
                "dart:core.double",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Float32Buffer([int initialLength = 0])\n    : super(new Float32List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/Float32Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Float32Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Float32Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Float32Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Float32x4Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Float32x4Buffer",
            "shortname": "Float32x4Buffer",
            "extends": [
                "dart:typed_data.Float32x4",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Float32x4Buffer([int initialLength = 0])\n    : super(new Float32x4List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/Float32x4Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Float32x4Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Float32x4"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Float32x4>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Float32x4"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Float32x4>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Float32x4>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Float32x4Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Float32x4Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float32x4Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float32x4Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Float64Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Float64Buffer",
            "shortname": "Float64Buffer",
            "extends": [
                "dart:core.double",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Float64Buffer([int initialLength = 0])\n    : super(new Float64List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/Float64Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Float64Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.double>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Float64Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Float64Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Float64Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Float64Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Int16Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Int16Buffer",
            "shortname": "Int16Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int16Buffer([int initialLength = 0]) : super(new Int16List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/Int16Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Int16Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Int16Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Int16Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int16Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int16Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Int32Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Int32Buffer",
            "shortname": "Int32Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int32Buffer([int initialLength = 0]) : super(new Int32List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/Int32Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Int32Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Int32Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Int32Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Int32x4Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Int32x4Buffer",
            "shortname": "Int32x4Buffer",
            "extends": [
                "dart:typed_data.Int32x4",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int32x4Buffer([int initialLength = 0])\n    : super(new Int32x4List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/Int32x4Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Int32x4Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Int32x4"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Int32x4>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Int32x4"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Int32x4>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:typed_data.Int32x4>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Int32x4Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Int32x4Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int32x4Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int32x4Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Int64Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Int64Buffer",
            "shortname": "Int64Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int64Buffer([int initialLength = 0]) : super(new Int64List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/Int64Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Int64Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Int64Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Int64Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int64Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int64Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Int8Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Int8Buffer",
            "shortname": "Int8Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int8Buffer([int initialLength = 0]) : super(new Int8List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/Int8Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Int8Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Int8Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Int8Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Int8Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Int8Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Uint16Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Uint16Buffer",
            "shortname": "Uint16Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint16Buffer([int initialLength = 0]) : super(new Uint16List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/Uint16Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uint16Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Uint16Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Uint16Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint16Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint16Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Uint32Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Uint32Buffer",
            "shortname": "Uint32Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint32Buffer([int initialLength = 0]) : super(new Uint32List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/Uint32Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uint32Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Uint32Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Uint32Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint32Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint32Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Uint64Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Uint64Buffer",
            "shortname": "Uint64Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint64Buffer([int initialLength = 0]) : super(new Uint64List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/Uint64Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uint64Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Uint64Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Uint64Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint64Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint64Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Uint8Buffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Uint8Buffer",
            "shortname": "Uint8Buffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8Buffer([int initialLength = 0]) : super(new Uint8List(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/Uint8Buffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uint8Buffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Uint8Buffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Uint8Buffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8Buffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8Buffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "typed_data.typed_buffers\/Uint8ClampedBuffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "typed_data.typed_buffers",
            "name": "typed_data.typed_buffers.Uint8ClampedBuffer",
            "shortname": "Uint8ClampedBuffer",
            "extends": [
                "dart:core.int",
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8ClampedBuffer([int initialLength = 0])\n    : super(new Uint8ClampedList(initialLength));<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/Uint8ClampedBuffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uint8ClampedBuffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "initialLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>values<\/code> to the end of this buffer.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null &amp;&amp; start &gt; end) {\n    throw new RangeError.range(end, start, null, \"end\");\n  }\n\n  _addAll(values, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  if (index &lt; 0 || index &gt; _length) {\n    throw new RangeError.range(index, 0, _length);\n  }\n  if (_length &lt; _buffer.length) {\n    _buffer.setRange(index + 1, _length + 1, _buffer, index);\n    _buffer[index] = element;\n    _length++;\n    return;\n  }\n  List&lt;E&gt; newBuffer = _createBiggerBuffer(null);\n  newBuffer.setRange(0, index, _buffer);\n  newBuffer.setRange(index + 1, _length + 1, _buffer, index);\n  newBuffer[index] = element;\n  _length++;\n  _buffer = newBuffer;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>values<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This adds values from <code>start<\/code> (inclusive) to <code>end<\/code> (exclusive) in\n<code>values<\/code>. If <code>end<\/code> is omitted, it defaults to adding all elements of\n<code>values<\/code> after <code>start<\/code>.<\/p>\n<p>The <code>start<\/code> value must be non-negative. The <code>values<\/code> iterable must have at\nleast <code>start<\/code> elements, and if <code>end<\/code> is specified, it must be greater than\nor equal to <code>start<\/code> and <code>values<\/code> must have at least <code>end<\/code> elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; values, [int start = 0, int end]) {\n  RangeError.checkValidIndex(index, this, \"index\", _length + 1);\n  RangeError.checkNotNegative(start, \"start\");\n  if (end != null) {\n    if (start &gt; end) {\n      throw new RangeError.range(end, start, null, \"end\");\n    }\n    if (start == end) return;\n  }\n\n  \/\/ If we're adding to the end of the list anyway, use [_addAll]. This lets\n  \/\/ us avoid converting [values] into a list even if [end] is null, since we\n  \/\/ can add values iteratively to the end of the list. We can't do so in the\n  \/\/ center because copying the trailing elements every time is non-linear.\n  if (index == _length) {\n    _addAll(values, start, end);\n    return;\n  }\n\n  if (end == null &amp;&amp; values is List) {\n    end = values.length;\n  }\n  if (end != null) {\n    _insertKnownLength(index, values, start, end);\n    return;\n  }\n\n  \/\/ Add elements at end, growing as appropriate, then put them back at\n  \/\/ position [index] using flip-by-double-reverse.\n  var writeIndex = _length;\n  var skipCount = start;\n  for (var value in values) {\n    if (skipCount &gt; 0) {\n      skipCount--;\n      continue;\n    }\n    if (writeIndex == _buffer.length) {\n      _grow(writeIndex);\n    }\n    _buffer[writeIndex++] = value;\n  }\n\n  if (skipCount &gt; 0) {\n    throw new StateError(\"Too few elements\");\n  }\n  if (end != null &amp;&amp; writeIndex &lt; end) {\n    throw new RangeError.range(end, start, writeIndex, \"end\");\n  }\n\n  \/\/ Swap [index.._length) and [_length..writeIndex) by double-reversing.\n  _reverse(_buffer, index, _length);\n  _reverse(_buffer, _length, writeIndex);\n  _reverse(_buffer, index, writeIndex);\n  _length = writeIndex;\n  return;\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; source, [int skipCount = 0]) {\n  if (end &gt; _length) throw new RangeError.range(end, 0, _length);\n  _setRange(start, end, source, skipCount);\n}<\/code><\/pre>\n    ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.int>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the underlying <a href=\"dart-typed_data\/ByteBuffer-class.html\">ByteBuffer<\/a>.<\/p>\n<p>The returned buffer may be replaced by operations that change the <a href=\"typed_data.typed_buffers\/Uint8ClampedBuffer\/length.html\">length<\/a>\nof this list.<\/p>\n<p>The buffer may be larger than <a href=\"typed_data.typed_buffers\/Uint8ClampedBuffer\/lengthInBytes.html\">lengthInBytes<\/a> bytes, but never smaller.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; _typedBuffer.buffer;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.ByteBuffer",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/elementSizeInBytes.html",
                    "name": "elementSizeInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _length * _typedBuffer.elementSizeInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/lengthInBytes.html",
                    "name": "lengthInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _typedBuffer.offsetInBytes;<\/code><\/pre>\n        ",
                    "href": "typed_data.typed_buffers\/Uint8ClampedBuffer\/offsetInBytes.html",
                    "name": "offsetInBytes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "typed_data.typed_buffers.Uint8ClampedBuffer",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}