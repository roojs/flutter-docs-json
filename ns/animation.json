{
    "class": [
        {
            "desc": "<p>An animation that is always stopped at a given value.<\/p>\n<p>The <a href=\"animation\/AlwaysStoppedAnimation\/status.html\">status<\/a> is always <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.forward<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/AlwaysStoppedAnimation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AlwaysStoppedAnimation",
            "shortname": "AlwaysStoppedAnimation",
            "extends": [
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an <a href=\"animation\/AlwaysStoppedAnimation-class.html\">AlwaysStoppedAnimation<\/a> with the given value.<\/p>\n<p>Since the <code>value<\/code> and <a href=\"animation\/AlwaysStoppedAnimation\/status.html\">status<\/a> of an <a href=\"animation\/AlwaysStoppedAnimation-class.html\">AlwaysStoppedAnimation<\/a> can never\nchange, the listeners can never be called. It is therefore safe to reuse\nan <a href=\"animation\/AlwaysStoppedAnimation-class.html\">AlwaysStoppedAnimation<\/a> instance in multiple places. If the <code>value<\/code> to\nbe used is known at compile time, the constructor should be called as a\n<code>const<\/code> constructor.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlwaysStoppedAnimation(this.value);<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/AlwaysStoppedAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AlwaysStoppedAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/AlwaysStoppedAnimation\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener) { }<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/addListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Calls listener every time the status of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/AlwaysStoppedAnimation\/removeStatusListener.html\">removeStatusListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addStatusListener(AnimationStatusListener listener) { }<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/addStatusListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addStatusListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.AnimationStatusListener"
                        }
                    ]
                },
                {
                    "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/AlwaysStoppedAnimation\/addListener.html\">addListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener) { }<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/removeListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops calling the listener every time the status of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/AlwaysStoppedAnimation\/addStatusListener.html\">addStatusListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeStatusListener(AnimationStatusListener listener) { }<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/removeStatusListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeStatusListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.AnimationStatusListener"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a string describing the status of this object, but not including\ninformation about the object itself.<\/p>\n<p>This function is used by <a href=\"animation\/Animation\/toString.html\">Animation.toString<\/a> so that <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses can provide additional details while ensuring all <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses have a consistent <a href=\"animation\/Animation\/toString.html\">toString<\/a> style.<\/p>\n<p>The result of this function includes an icon describing the status of this\n<a href=\"animation\/Animation-class.html\">Animation<\/a> object:<\/p>\n<ul>\n<li>\"\u25b6\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.forward<\/a> (<a href=\"animation\/AlwaysStoppedAnimation\/value.html\">value<\/a> increasing)<\/li>\n<li>\"\u25c0\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.reverse<\/a> (<a href=\"animation\/AlwaysStoppedAnimation\/value.html\">value<\/a> decreasing)<\/li>\n<li>\"\u23ed\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> (<a href=\"animation\/AlwaysStoppedAnimation\/value.html\">value<\/a> == 1.0)<\/li>\n<li>\"\u23ee\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> (<a href=\"animation\/AlwaysStoppedAnimation\/value.html\">value<\/a> == 0.0)<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringDetails() {\n  return '${super.toStringDetails()} $value; paused';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AlwaysStoppedAnimation\/toStringDetails.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringDetails",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status =&gt; AnimationStatus.forward;<\/code><\/pre>\n        ",
                    "href": "animation\/AlwaysStoppedAnimation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AlwaysStoppedAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An object that can produce a value of type <code>T<\/code> given an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>\nas input.<\/p>\n<p>Typically, the values of the input animation are nominally in the range 0.0\nto 1.0. In principle, however, any value could be provided.<\/p>\n<p>The main subclass of <a href=\"animation\/Animatable-class.html\">Animatable<\/a> is <a href=\"animation\/Tween-class.html\">Tween<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/Animatable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Animatable",
            "shortname": "Animatable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.ColorTween",
                "animation.ConstantTween",
                "animation.CurveTween",
                "animation.IntTween",
                "animation.RectTween",
                "animation.ReverseTween",
                "animation.SizeTween",
                "animation.StepTween",
                "animation.Tween",
                "animation.TweenSequence",
                "material.MaterialPointArcTween",
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween",
                "material.ShapeBorderTween",
                "material.ThemeDataTween",
                "rendering.AlignmentGeometryTween",
                "rendering.AlignmentTween",
                "rendering.FractionalOffsetTween",
                "widgets.BorderRadiusTween",
                "widgets.BorderTween",
                "widgets.BoxConstraintsTween",
                "widgets.DecorationTween",
                "widgets.EdgeInsetsGeometryTween",
                "widgets.EdgeInsetsTween",
                "widgets.Matrix4Tween",
                "widgets.RelativeRectTween",
                "widgets.TextStyleTween"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Animatable();<\/code><\/pre>\n    ",
                    "href": "animation\/Animatable\/Animatable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Animatable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Animatable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <a href=\"animation\/Animation-class.html\">Animation<\/a> that is driven by the given animation but that\ntakes on values determined by this object.<\/p>\n<p>Essentially this returns an <a href=\"animation\/Animation-class.html\">Animation<\/a> that automatically applies the\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a> method to the parent's value.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Animation\/drive.html\">AnimationController.drive<\/a>, which does the same thing from the\nopposite starting point.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;T&gt; animate(Animation&lt;double&gt; parent) {\n  return _AnimatedEvaluation&lt;T&gt;(parent, this);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Animatable\/animate.html",
                    "isDeprecated": false,
                    "type": "animation.Animation",
                    "name": "animate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animatable",
                    "params": [
                        {
                            "name": "parent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"animation\/Animatable-class.html\">Animatable<\/a> whose value is determined by first evaluating\nthe given parent and then evaluating this object.<\/p>\n<p>This allows <a href=\"animation\/Tween-class.html\">Tween<\/a>s to be chained before obtaining an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Animatable&lt;T&gt; chain(Animatable&lt;double&gt; parent) {\n  return _ChainedEvaluation&lt;T&gt;(parent, this);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Animatable\/chain.html",
                    "isDeprecated": false,
                    "type": "animation.Animatable",
                    "name": "chain",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animatable",
                    "params": [
                        {
                            "name": "parent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animatable<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>The current value of this object for the given <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n<p>This function is implemented by deferring to <a href=\"animation\/Animatable\/transform.html\">transform<\/a>. Subclasses that\nwant to provide custom behavior should override <a href=\"animation\/Animatable\/transform.html\">transform<\/a>, not\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/transform.html\">transform<\/a>, which is similar but takes a <code>t<\/code> value directly instead of\nan <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"animation\/Animatable\/animate.html\">animate<\/a>, which creates an <a href=\"animation\/Animation-class.html\">Animation<\/a> out of this object, continually\napplying <a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T evaluate(Animation&lt;double&gt; animation) =&gt; transform(animation.value);<\/code><\/pre>\n    ",
                    "href": "animation\/Animatable\/evaluate.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "evaluate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animatable",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value of the object at point <code>t<\/code>.<\/p>\n<p>The value of <code>t<\/code> is nominally a fraction in the range 0.0 to 1.0, though\nin practice it may extend outside this range.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>, which is a shorthand for applying <a href=\"animation\/Animatable\/transform.html\">transform<\/a> to the value\nof an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"animation\/Animatable\/transform.html\">Curve.transform<\/a>, a similar method for easing curves.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T transform(double t);<\/code><\/pre>\n    ",
                    "href": "animation\/Animatable\/transform.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animatable",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An animation with a value of type <code>T<\/code>.<\/p>\n<p>An animation consists of a value (of type <code>T<\/code>) together with a status. The\nstatus indicates whether the animation is conceptually running from\nbeginning to end or from the end back to the beginning, although the actual\nvalue of the animation might not change monotonically (e.g., if the\nanimation uses a curve that bounces).<\/p>\n<p>Animations also let other objects listen for changes to either their value\nor their status. These callbacks are called during the \"animation\" phase of\nthe pipeline, just prior to rebuilding widgets.<\/p>\n<p>To create a new animation that you can run forward and backward, consider\nusing <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Tween-class.html\">Tween<\/a>, which can be used to create <a href=\"animation\/Animation-class.html\">Animation<\/a> subclasses that\nconvert <code>Animation&lt;double&gt;<\/code>s into other kinds of <code>Animation<\/code>s.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/Animation-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Animation",
            "shortname": "Animation",
            "extends": [
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.AlwaysStoppedAnimation",
                "animation.AnimationController",
                "animation.AnimationMax",
                "animation.AnimationMean",
                "animation.AnimationMin",
                "animation.CurvedAnimation",
                "animation.ProxyAnimation",
                "animation.ReverseAnimation",
                "animation.TrainHoppingAnimation"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Animation();<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/Animation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Animation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": []
                },
                {
                    "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/Animation\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener);<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/addListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Calls listener every time the status of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/Animation\/removeStatusListener.html\">removeStatusListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addStatusListener(AnimationStatusListener listener);<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/addStatusListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addStatusListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.AnimationStatusListener"
                        }
                    ]
                },
                {
                    "desc": "<p>Chains a <a href=\"animation\/Tween-class.html\">Tween<\/a> (or <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>) to this <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n<p>This method is only valid for <code>Animation&lt;double&gt;<\/code> instances (i.e. when <code>T<\/code>\nis <code>double<\/code>). This means, for instance, that it can be called on\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> objects, as well as <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>s,\n<a href=\"animation\/ProxyAnimation-class.html\">ProxyAnimation<\/a>s, <a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a>s, <a href=\"animation\/TrainHoppingAnimation-class.html\">TrainHoppingAnimation<\/a>s, etc.<\/p>\n<p>It returns an <a href=\"animation\/Animation-class.html\">Animation<\/a> specialized to the same type, <code>U<\/code>, as the\nargument to the method (<code>child<\/code>), whose value is derived by applying the\ngiven <a href=\"animation\/Tween-class.html\">Tween<\/a> to the value of this <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nGiven an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> <code>_controller<\/code>, the following code creates\nan <code>Animation&lt;Alignment&gt;<\/code> that swings from top left to top right as the\ncontroller goes from 0.0 to 1.0:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Animation&lt;Alignment&gt; _alignment1 = _controller.drive(\n  AlignmentTween(\n    begin: Alignment.topLeft,\n    end: Alignment.topRight,\n  ),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe <code>_alignment.value<\/code> could then be used in a widget's build method, for\ninstance, to position a child using an <a href=\"widgets\/Align-class.html\">Align<\/a> widget such that the\nposition of the child shifts over time from the top left to the top right.\n<p>It is common to ease this kind of curve, e.g. making the transition slower\nat the start and faster at the end. The following snippet shows one way to\nchain the alignment tween in the previous example to an easing curve (in\nthis case, <a href=\"animation\/Curves\/easeIn-constant.html\">Curves.easeIn<\/a>). In this example, the tween is created\nelsewhere as a variable that can be reused, since none of its arguments\nvary.\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animatable&lt;Alignment&gt; _tween = AlignmentTween(begin: Alignment.topLeft, end: Alignment.topRight)\n  .chain(CurveTween(curve: Curves.easeIn));\n\/\/ ...\nAnimation&lt;Alignment&gt; _alignment2 = _controller.drive(_tween);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code is exactly equivalent, and is typically clearer when\nthe tweens are created inline, as might be preferred when the tweens have\nvalues that depend on other variables:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Animation&lt;Alignment&gt; _alignment3 = _controller\n  .drive(CurveTween(curve: Curves.easeIn))\n  .drive(AlignmentTween(\n    begin: Alignment.topLeft,\n    end: Alignment.topRight,\n  ));<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/animate.html\">Animatable.animate<\/a>, which does the same thing.<\/li>\n<li>\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, which is usually used to drive animations.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, an alternative to <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a> for applying easing\ncurves, which supports distinct curves in the forward direction and the\nreverse direction.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@optionalTypeArgs\nAnimation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child) {\n  assert(this is Animation&lt;double&gt;);\n  return child.animate(this as dynamic); \/\/ TODO(ianh): Clean this once https:\/\/github.com\/dart-lang\/sdk\/issues\/32120 is fixed.\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/drive.html",
                    "isDeprecated": false,
                    "type": "animation.Animation",
                    "name": "drive",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animatable"
                        }
                    ]
                },
                {
                    "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/Animation\/addListener.html\">addListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener);<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/removeListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops calling the listener every time the status of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/Animation\/addStatusListener.html\">addStatusListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeStatusListener(AnimationStatusListener listener);<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/removeStatusListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeStatusListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.AnimationStatusListener"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '${describeIdentity(this)}(${toStringDetails()})';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": []
                },
                {
                    "desc": "<p>Provides a string describing the status of this object, but not including\ninformation about the object itself.<\/p>\n<p>This function is used by <a href=\"animation\/Animation\/toString.html\">Animation.toString<\/a> so that <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses can provide additional details while ensuring all <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses have a consistent <a href=\"animation\/Animation\/toString.html\">toString<\/a> style.<\/p>\n<p>The result of this function includes an icon describing the status of this\n<a href=\"animation\/Animation-class.html\">Animation<\/a> object:<\/p>\n<ul>\n<li>\"\u25b6\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.forward<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> increasing)<\/li>\n<li>\"\u25c0\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.reverse<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> decreasing)<\/li>\n<li>\"\u23ed\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> == 1.0)<\/li>\n<li>\"\u23ee\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> == 0.0)<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringDetails() {\n  assert(status != null);\n  String icon;\n  switch (status) {\n    case AnimationStatus.forward:\n      icon = '\\u25B6'; \/\/ &gt;\n      break;\n    case AnimationStatus.reverse:\n      icon = '\\u25C0'; \/\/ &lt;\n      break;\n    case AnimationStatus.completed:\n      icon = '\\u23ED'; \/\/ &gt;&gt;|\n      break;\n    case AnimationStatus.dismissed:\n      icon = '\\u23EE'; \/\/ |&lt;&lt;\n      break;\n  }\n  assert(icon != null);\n  return '$icon';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Animation\/toStringDetails.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringDetails",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Animation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether this animation is stopped at the end.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCompleted =&gt; status == AnimationStatus.completed;<\/code><\/pre>\n        ",
                    "href": "animation\/Animation\/isCompleted.html",
                    "name": "isCompleted",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Animation",
                    "params": []
                },
                {
                    "desc": "<p>Whether this animation is stopped at the beginning.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDismissed =&gt; status == AnimationStatus.dismissed;<\/code><\/pre>\n        ",
                    "href": "animation\/Animation\/isDismissed.html",
                    "name": "isDismissed",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Animation",
                    "params": []
                },
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AnimationStatus get status;<\/code><\/pre>\n        ",
                    "href": "animation\/Animation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Animation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A controller for an animation.<\/p>\n<p>This class lets you perform tasks such as:<\/p>\n<ul>\n<li>Play an animation <a href=\"animation\/AnimationController\/forward.html\">forward<\/a> or in <a href=\"animation\/AnimationController\/reverse.html\">reverse<\/a>, or <a href=\"animation\/AnimationController\/stop.html\">stop<\/a> an animation.<\/li>\n<li>Set the animation to a specific <a href=\"animation\/AnimationController\/value.html\">value<\/a>.<\/li>\n<li>Define the <a href=\"animation\/AnimationController\/upperBound.html\">upperBound<\/a> and <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a> values of an animation.<\/li>\n<li>Create a <a href=\"animation\/AnimationController\/fling.html\">fling<\/a> animation effect using a physics simulation.<\/li>\n<\/ul>\n<p>By default, an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> linearly produces values that range\nfrom 0.0 to 1.0, during a given duration. The animation controller generates\na new value whenever the device running your app is ready to display a new\nframe (typically, this rate is around 60 values per second).<\/p>\n<h2 id=\"ticker-providers\">Ticker providers<\/h2>\n<p>An <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> needs a <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a>, which is configured using\nthe <code>vsync<\/code> argument on the constructor.<\/p>\n<p>The <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> interface describes a factory for <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> objects. A\n<a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> is an object that knows how to register itself with the\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a> and fires a callback every frame. The\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> class uses a <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> to step through the animation\nthat it controls.<\/p>\n<p>If an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> is being created from a <a href=\"widgets\/State-class.html\">State<\/a>, then the State\ncan use the <a href=\"widgets\/TickerProviderStateMixin-mixin.html\">TickerProviderStateMixin<\/a> and <a href=\"widgets\/SingleTickerProviderStateMixin-mixin.html\">SingleTickerProviderStateMixin<\/a>\nclasses to implement the <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> interface. The\n<a href=\"widgets\/TickerProviderStateMixin-mixin.html\">TickerProviderStateMixin<\/a> class always works for this purpose; the\n<a href=\"widgets\/SingleTickerProviderStateMixin-mixin.html\">SingleTickerProviderStateMixin<\/a> is slightly more efficient in the case of\nthe class only ever needing one <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> (e.g. if the class creates only a\nsingle <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> during its entire lifetime).<\/p>\n<p>The widget test framework <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> object can be used as a ticker\nprovider in the context of tests. In other contexts, you will have to either\npass a <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> from a higher level (e.g. indirectly from a <a href=\"widgets\/State-class.html\">State<\/a>\nthat mixes in <a href=\"widgets\/TickerProviderStateMixin-mixin.html\">TickerProviderStateMixin<\/a>), or create a custom\n<a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> subclass.<\/p>\n<h2 id=\"life-cycle\">Life cycle<\/h2>\n<p>An <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> should be <a href=\"animation\/AnimationController\/dispose.html\">dispose<\/a>d when it is no longer needed.\nThis reduces the likelihood of leaks. When used with a <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, it\nis common for an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> to be created in the\n<a href=\"widgets\/State\/initState.html\">State.initState<\/a> method and then disposed in the <a href=\"animation\/AnimationController\/dispose.html\">State.dispose<\/a> method.<\/p>\n<h2 id=\"using-futures-with-animationcontroller\">Using <a href=\"dart-async\/Future-class.html\">Future<\/a>s with <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>\n<\/h2>\n<p>The methods that start animations return a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> object which\ncompletes when the animation completes successfully, and never throws an\nerror; if the animation is canceled, the future never completes. This object\nalso has a <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a> property which returns a future that\ncompletes when the animation completes successfully, and completes with an\nerror when the animation is aborted.<\/p>\n<p>This can be used to write code such as the <code>fadeOutAndUpdateState<\/code> method\nbelow.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere is a stateful <code>Foo<\/code> widget. Its <a href=\"widgets\/State-class.html\">State<\/a> uses the\n<a href=\"widgets\/SingleTickerProviderStateMixin-mixin.html\">SingleTickerProviderStateMixin<\/a> to implement the necessary\n<a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a>, creating its controller in the <code>initState<\/code> method and\ndisposing of it in the <a href=\"animation\/AnimationController\/dispose.html\">dispose<\/a> method. The duration of the controller is\nconfigured from a property in the <code>Foo<\/code> widget; as that changes, the\n<code>didUpdateWidget<\/code> method is used to update the controller.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Foo extends StatefulWidget {\n  Foo({ Key key, this.duration }) : super(key: key);\n\n  final Duration duration;\n\n  @override\n  _FooState createState() =&gt; _FooState();\n}\n\nclass _FooState extends State&lt;Foo&gt; with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      vsync: this, \/\/ the SingleTickerProviderStateMixin\n      duration: widget.duration,\n    );\n  }\n\n  @override\n  void didUpdateWidget(Foo oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    _controller.duration = widget.duration;\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(); \/\/ ...\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following method (for a <a href=\"widgets\/State-class.html\">State<\/a> subclass) drives two animation\ncontrollers using Dart's asynchronous syntax for awaiting <a href=\"dart-async\/Future-class.html\">Future<\/a> objects:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Future&lt;void&gt; fadeOutAndUpdateState() async {\n  try {\n    await fadeAnimationController.forward().orCancel;\n    await sizeAnimationController.forward().orCancel;\n    setState(() {\n      dismissed = true;\n    });\n  } on TickerCanceled {\n    \/\/ the animation got canceled, probably because we were disposed\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The assumption in the code above is that the animation controllers are being\ndisposed in the <a href=\"widgets\/State-class.html\">State<\/a> subclass' override of the <a href=\"animation\/AnimationController\/dispose.html\">State.dispose<\/a> method.\nSince disposing the controller cancels the animation (raising a\n<a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> exception), the code here can skip verifying whether\n<a href=\"widgets\/State\/mounted.html\">State.mounted<\/a> is still true at each step. (Again, this assumes that the\ncontrollers are created in <a href=\"widgets\/State\/initState.html\">State.initState<\/a> and disposed in\n<a href=\"animation\/AnimationController\/dispose.html\">State.dispose<\/a>, as described in the previous section.)<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Tween-class.html\">Tween<\/a>, the base class for converting an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> to a\nrange of values of other types.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/AnimationController-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationController",
            "shortname": "AnimationController",
            "extends": [
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an animation controller.<\/p>\n<ul>\n<li>\n<p><code>value<\/code> is the initial value of the animation. If defaults to the lower\nbound.<\/p>\n<\/li>\n<li>\n<p><code>duration<\/code> is the length of time this animation should last.<\/p>\n<\/li>\n<li>\n<p><code>debugLabel<\/code> is a string to help identify this animation during\ndebugging (used by <a href=\"animation\/Animation\/toString.html\">toString<\/a>).<\/p>\n<\/li>\n<li>\n<p><code>lowerBound<\/code> is the smallest value this animation can obtain and the\nvalue at which this animation is deemed to be dismissed. It cannot be\nnull.<\/p>\n<\/li>\n<li>\n<p><code>upperBound<\/code> is the largest value this animation can obtain and the\nvalue at which this animation is deemed to be completed. It cannot be\nnull.<\/p>\n<\/li>\n<li>\n<p><code>vsync<\/code> is the <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> for the current context. It can be\nchanged by calling <a href=\"animation\/AnimationController\/resync.html\">resync<\/a>. It is required and must not be null. See\n<a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> for advice on obtaining a ticker provider.<\/p>\n<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AnimationController({\n  double value,\n  this.duration,\n  this.debugLabel,\n  this.lowerBound = 0.0,\n  this.upperBound = 1.0,\n  this.animationBehavior = AnimationBehavior.normal,\n  @required TickerProvider vsync,\n}) : assert(lowerBound != null),\n     assert(upperBound != null),\n     assert(upperBound &gt;= lowerBound),\n     assert(vsync != null),\n     _direction = _AnimationDirection.forward {\n  _ticker = vsync.createTicker(_tick);\n  _internalSetValue(value ?? lowerBound);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/AnimationController.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AnimationController",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "animationBehavior",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.AnimationBehavior"
                        },
                        {
                            "name": "debugLabel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "lowerBound",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "upperBound",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "vsync",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "scheduler.TickerProvider"
                        }
                    ]
                },
                {
                    "desc": "<p>Drives the animation from its current value to target.<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is complete.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n<p>During the animation, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as <a href=\"animation\/AnimationController\/reverse.html\">AnimationStatus.reverse<\/a>\nregardless of whether <code>target<\/code> &lt; <a href=\"animation\/AnimationController\/value.html\">value<\/a> or not. At the end of the\nanimation, when <code>target<\/code> is reached, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as\n<a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture animateBack(double target, { Duration duration, Curve curve = Curves.linear }) {\n  assert(\n    _ticker != null,\n    'AnimationController.animateBack() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  _direction = _AnimationDirection.reverse;\n  return _animateToInternal(target, duration: duration, curve: curve);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/animateBack.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "animateBack",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Curve"
                        },
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "target",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Drives the animation from its current value to target.<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is complete.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n<p>During the animation, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as <a href=\"animation\/AnimationController\/forward.html\">AnimationStatus.forward<\/a>\nregardless of whether <code>target<\/code> &gt; <a href=\"animation\/AnimationController\/value.html\">value<\/a> or not. At the end of the\nanimation, when <code>target<\/code> is reached, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as\n<a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture animateTo(double target, { Duration duration, Curve curve = Curves.linear }) {\n  assert(\n    _ticker != null,\n    'AnimationController.animateTo() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  _direction = _AnimationDirection.forward;\n  return _animateToInternal(target, duration: duration, curve: curve);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/animateTo.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "animateTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Curve"
                        },
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "target",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Drives the animation according to the given simulation.<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is complete.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture animateWith(Simulation simulation) {\n  assert(\n    _ticker != null,\n    'AnimationController.animateWith() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  stop();\n  return _startSimulation(simulation);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/animateWith.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "animateWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "simulation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "physics.Simulation"
                        }
                    ]
                },
                {
                    "desc": "<p>Release the resources used by this object. The object is no longer usable\nafter this method is called.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  assert(() {\n    if (_ticker == null) {\n      throw FlutterError(\n        'AnimationController.dispose() called more than once.\\n'\n        'A given $runtimeType cannot be disposed more than once.\\n'\n        'The following $runtimeType object was disposed multiple times:\\n'\n        '  $this'\n      );\n    }\n    return true;\n  }());\n  _ticker.dispose();\n  _ticker = null;\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>Drives the animation with a critically damped spring (within <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a>\nand <a href=\"animation\/AnimationController\/upperBound.html\">upperBound<\/a>) and initial velocity.<\/p>\n<p>If velocity is positive, the animation will complete, otherwise it will\ndismiss.<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is complete.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture fling({ double velocity = 1.0, AnimationBehavior animationBehavior }) {\n  _direction = velocity &lt; 0.0 ? _AnimationDirection.reverse : _AnimationDirection.forward;\n  final double target = velocity &lt; 0.0 ? lowerBound - _kFlingTolerance.distance\n                                       : upperBound + _kFlingTolerance.distance;\n  double scale = 1.0;\n  final AnimationBehavior behavior = animationBehavior ?? this.animationBehavior;\n  if (SemanticsBinding.instance.disableAnimations) {\n    switch (behavior) {\n      case AnimationBehavior.normal:\n        \/\/ TODO(jonahwilliams): determine a better process for setting velocity.\n        \/\/ the value below was arbitrarily chosen because it worked for the drawer widget.\n        scale = 200.0;\n        break;\n      case AnimationBehavior.preserve:\n        break;\n    }\n  }\n  final Simulation simulation = SpringSimulation(_kFlingSpringDescription, value, target, velocity * scale)\n    ..tolerance = _kFlingTolerance;\n  return animateWith(simulation);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/fling.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "fling",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "animationBehavior",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.AnimationBehavior"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts running this animation forwards (towards the end).<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is complete.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n<p>During the animation, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as <a href=\"animation\/AnimationController\/forward.html\">AnimationStatus.forward<\/a>,\nwhich switches to <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> when <a href=\"animation\/AnimationController\/upperBound.html\">upperBound<\/a> is\nreached at the end of the animation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture forward({ double from }) {\n  assert(() {\n    if (duration == null) {\n      throw FlutterError(\n        'AnimationController.forward() called with no default Duration.\\n'\n        'The \"duration\" property should be set, either in the constructor or later, before '\n        'calling the forward() function.'\n      );\n    }\n    return true;\n  }());\n  assert(\n    _ticker != null,\n    'AnimationController.forward() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  _direction = _AnimationDirection.forward;\n  if (from != null)\n    value = from;\n  return _animateToInternal(upperBound);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/forward.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "forward",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts running this animation in the forward direction, and\nrestarts the animation when it completes.<\/p>\n<p>Defaults to repeating between the <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a> and <a href=\"animation\/AnimationController\/upperBound.html\">upperBound<\/a> of the\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> when no explicit value is set for <code>min<\/code> and <code>max<\/code>.<\/p>\n<p>With <code>reverse<\/code> set to true, instead of always starting over at <code>min<\/code>\nthe value will alternate between <code>min<\/code> and <code>max<\/code> values on each repeat.<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that never completes. The <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a> future\ncompletes with an error when the animation is stopped (e.g. with <a href=\"animation\/AnimationController\/stop.html\">stop<\/a>).<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture repeat({ double min, double max, bool reverse = false, Duration period }) {\n  min ??= lowerBound;\n  max ??= upperBound;\n  period ??= duration;\n  assert(() {\n    if (period == null) {\n      throw FlutterError(\n        'AnimationController.repeat() called without an explicit period and with no default Duration.\\n'\n        'Either the \"period\" argument to the repeat() method should be provided, or the '\n        '\"duration\" property should be set, either in the constructor or later, before '\n        'calling the repeat() function.'\n      );\n    }\n    return true;\n  }());\n  assert(max &gt;= min);\n  assert(max &lt;= upperBound &amp;&amp; min &gt;= lowerBound);\n  assert(reverse != null);\n  return animateWith(_RepeatingSimulation(_value, min, max, reverse, period));\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/repeat.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "repeat",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "max",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "min",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "period",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "reverse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Sets the controller's value to <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a>, stopping the animation (if\nin progress), and resetting to its beginning point, or dismissed state.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/AnimationController\/value.html\">value<\/a>, which can be explicitly set to a specific value as desired.<\/li>\n<li>\n<a href=\"animation\/AnimationController\/forward.html\">forward<\/a>, which starts the animation in the forward direction.<\/li>\n<li>\n<a href=\"animation\/AnimationController\/stop.html\">stop<\/a>, which aborts the animation without changing its value or status\nand without dispatching any notifications other than completing or\ncanceling the <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset() {\n  value = lowerBound;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/reset.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "reset",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>Recreates the <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> with the new <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void resync(TickerProvider vsync) {\n  final Ticker oldTicker = _ticker;\n  _ticker = vsync.createTicker(_tick);\n  _ticker.absorbTicker(oldTicker);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/resync.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resync",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "vsync",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "scheduler.TickerProvider"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts running this animation in reverse (towards the beginning).<\/p>\n<p>Returns a <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> that completes when the animation is dismissed.<\/p>\n<p>The most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a>, if any, is marked as having been\ncanceled, meaning the future never completes and its <a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a>\nderivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a> error.<\/p>\n<p>During the animation, <a href=\"animation\/AnimationController\/status.html\">status<\/a> is reported as <a href=\"animation\/AnimationController\/reverse.html\">AnimationStatus.reverse<\/a>,\nwhich switches to <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> when <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a> is\nreached at the end of the animation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TickerFuture reverse({ double from }) {\n  assert(() {\n    if (duration == null) {\n      throw FlutterError(\n        'AnimationController.reverse() called with no default Duration.\\n'\n        'The \"duration\" property should be set, either in the constructor or later, before '\n        'calling the reverse() function.'\n      );\n    }\n    return true;\n  }());\n  assert(\n    _ticker != null,\n    'AnimationController.reverse() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  _direction = _AnimationDirection.reverse;\n  if (from != null)\n    value = from;\n  return _animateToInternal(lowerBound);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/reverse.html",
                    "isDeprecated": false,
                    "type": "scheduler.TickerFuture",
                    "name": "reverse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops running this animation.<\/p>\n<p>This does not trigger any notifications. The animation stops in its\ncurrent state.<\/p>\n<p>By default, the most recently returned <a href=\"scheduler\/TickerFuture-class.html\">TickerFuture<\/a> is marked as having\nbeen canceled, meaning the future never completes and its\n<a href=\"scheduler\/TickerFuture\/orCancel.html\">TickerFuture.orCancel<\/a> derivative future completes with a <a href=\"scheduler\/TickerCanceled-class.html\">TickerCanceled<\/a>\nerror. By passing the <code>canceled<\/code> argument with the value false, this is\nreversed, and the futures complete successfully.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/AnimationController\/reset.html\">reset<\/a>, which stops the animation and resets it to the <a href=\"animation\/AnimationController\/lowerBound.html\">lowerBound<\/a>,\nand which does send notifications.<\/li>\n<li>\n<a href=\"animation\/AnimationController\/forward.html\">forward<\/a>, <a href=\"animation\/AnimationController\/reverse.html\">reverse<\/a>, <a href=\"animation\/AnimationController\/animateTo.html\">animateTo<\/a>, <a href=\"animation\/AnimationController\/animateWith.html\">animateWith<\/a>, <a href=\"animation\/AnimationController\/fling.html\">fling<\/a>, and <a href=\"animation\/AnimationController\/repeat.html\">repeat<\/a>,\nwhich restart the animation controller.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void stop({ bool canceled = true }) {\n  assert(\n    _ticker != null,\n    'AnimationController.stop() called after AnimationController.dispose()\\n'\n    'AnimationController methods should not be used after calling dispose.'\n  );\n  _simulation = null;\n  _lastElapsedDuration = null;\n  _ticker.stop(canceled: canceled);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/stop.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "stop",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": [
                        {
                            "name": "canceled",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a string describing the status of this object, but not including\ninformation about the object itself.<\/p>\n<p>This function is used by <a href=\"animation\/Animation\/toString.html\">Animation.toString<\/a> so that <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses can provide additional details while ensuring all <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses have a consistent <a href=\"animation\/Animation\/toString.html\">toString<\/a> style.<\/p>\n<p>The result of this function includes an icon describing the status of this\n<a href=\"animation\/Animation-class.html\">Animation<\/a> object:<\/p>\n<ul>\n<li>\"\u25b6\": <a href=\"animation\/AnimationController\/forward.html\">AnimationStatus.forward<\/a> (<a href=\"animation\/AnimationController\/value.html\">value<\/a> increasing)<\/li>\n<li>\"\u25c0\": <a href=\"animation\/AnimationController\/reverse.html\">AnimationStatus.reverse<\/a> (<a href=\"animation\/AnimationController\/value.html\">value<\/a> decreasing)<\/li>\n<li>\"\u23ed\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> (<a href=\"animation\/AnimationController\/value.html\">value<\/a> == 1.0)<\/li>\n<li>\"\u23ee\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> (<a href=\"animation\/AnimationController\/value.html\">value<\/a> == 0.0)<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringDetails() {\n  final String paused = isAnimating ? '' : '; paused';\n  final String ticker = _ticker == null ? '; DISPOSED' : (_ticker.muted ? '; silenced' : '');\n  final String label = debugLabel == null ? '' : '; for $debugLabel';\n  final String more = '${super.toStringDetails()} ${value.toStringAsFixed(3)}';\n  return '$more$paused$ticker$label';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationController\/toStringDetails.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringDetails",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The behavior of the controller when <a href=\"dart-ui\/AccessibilityFeatures\/disableAnimations.html\">AccessibilityFeatures.disableAnimations<\/a>\nis true.<\/p>\n<p>Defaults to <a href=\"animation\/AnimationBehavior-class.html\">AnimationBehavior.normal<\/a> for the <a href=\"animation\/AnimationController\/AnimationController.html\">new AnimationController<\/a>\nconstructor, and <a href=\"animation\/AnimationBehavior-class.html\">AnimationBehavior.preserve<\/a> for the\n<a href=\"animation\/AnimationController\/AnimationController.unbounded.html\">new AnimationController.unbounded<\/a> constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimationBehavior animationBehavior\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/animationBehavior.html",
                    "name": "animationBehavior",
                    "isDeprecated": false,
                    "type": "animation.AnimationBehavior",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>A label that is used in the <a href=\"animation\/Animation\/toString.html\">toString<\/a> output. Intended to aid with\nidentifying animation controller instances in debug output.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugLabel\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/debugLabel.html",
                    "name": "debugLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The length of time this animation should last.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration duration\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/duration.html",
                    "name": "duration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>Whether this animation is currently animating in either the forward or reverse direction.<\/p>\n<p>This is separate from whether it is actively ticking. An animation\ncontroller's ticker might get muted, in which case the animation\ncontroller's callbacks will no longer fire even though time is continuing\nto pass. See <a href=\"scheduler\/Ticker\/muted.html\">Ticker.muted<\/a> and <a href=\"widgets\/TickerMode-class.html\">TickerMode<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAnimating =&gt; _ticker != null &amp;&amp; _ticker.isActive;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/isAnimating.html",
                    "name": "isAnimating",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The amount of time that has passed between the time the animation started\nand the most recent tick of the animation.<\/p>\n<p>If the controller is not animating, the last elapsed duration is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get lastElapsedDuration =&gt; _lastElapsedDuration;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/lastElapsedDuration.html",
                    "name": "lastElapsedDuration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The value at which this animation is deemed to be dismissed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double lowerBound\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/lowerBound.html",
                    "name": "lowerBound",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status =&gt; _status;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The value at which this animation is deemed to be completed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double upperBound\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/upperBound.html",
                    "name": "upperBound",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The current value of the animation.<\/p>\n<p>Setting this value notifies all the listeners that the value\nchanged.<\/p>\n<p>Setting this value also stops the controller if it is currently\nrunning; if this happens, it also notifies all the status\nlisteners.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value =&gt; _value;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>The rate of change of <a href=\"animation\/AnimationController\/value.html\">value<\/a> per second.<\/p>\n<p>If <a href=\"animation\/AnimationController\/isAnimating.html\">isAnimating<\/a> is false, then <a href=\"animation\/AnimationController\/value.html\">value<\/a> is not changing and the rate of\nchange is zero.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get velocity {\n  if (!isAnimating)\n    return 0.0;\n  return _simulation.dx(lastElapsedDuration.inMicroseconds.toDouble() \/ Duration.microsecondsPerSecond);\n}<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/velocity.html",
                    "name": "velocity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a> for this animation controller, so that a\npointer to this object can be passed around without allowing users of that\npointer to mutate the <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get view =&gt; this;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationController\/view.html",
                    "name": "view",
                    "isDeprecated": false,
                    "type": "animation.Animation<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationController",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An animation that tracks the maximum of two other animations.<\/p>\n<p>The <a href=\"animation\/AnimationMax\/value.html\">value<\/a> of this animation is the maximum of the values of\n<a href=\"animation\/CompoundAnimation\/first.html\">first<\/a> and <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/AnimationMax-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationMax",
            "shortname": "AnimationMax",
            "extends": [
                "animation.CompoundAnimation",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an <a href=\"animation\/AnimationMax-class.html\">AnimationMax<\/a>.<\/p>\n<p>Both arguments must be non-null. Either can be an <a href=\"animation\/AnimationMax-class.html\">AnimationMax<\/a> itself\nto combine multiple animations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AnimationMax(Animation&lt;T&gt; first, Animation&lt;T&gt; next) : super(first: first, next: next);<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationMax\/AnimationMax.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AnimationMax",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.AnimationMax",
                    "params": [
                        {
                            "name": "first",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        },
                        {
                            "name": "next",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An animation of <a href=\"dart-core\/double-class.html\">double<\/a>s that tracks the mean of two other animations.<\/p>\n<p>The <a href=\"animation\/CompoundAnimation\/status.html\">status<\/a> of this animation is the status of the <code>right<\/code> animation if it is\nmoving, and the <code>left<\/code> animation otherwise.<\/p>\n<p>The <a href=\"animation\/AnimationMean\/value.html\">value<\/a> of this animation is the <a href=\"dart-core\/double-class.html\">double<\/a> that represents the mean value\nof the values of the <code>left<\/code> and <code>right<\/code> animations.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/AnimationMean-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationMean",
            "shortname": "AnimationMean",
            "extends": [
                "dart:core.double",
                "animation.CompoundAnimation",
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an animation that tracks the mean of two other animations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AnimationMean({\n  Animation&lt;double&gt; left,\n  Animation&lt;double&gt; right,\n}) : super(first: left, next: right);<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationMean\/AnimationMean.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AnimationMean",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.AnimationMean",
                    "params": [
                        {
                            "name": "left",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "right",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The current value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value =&gt; (first.value + next.value) \/ 2.0;<\/code><\/pre>\n        ",
                    "href": "animation\/AnimationMean\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.AnimationMean",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An animation that tracks the minimum of two other animations.<\/p>\n<p>The <a href=\"animation\/AnimationMin\/value.html\">value<\/a> of this animation is the maximum of the values of\n<a href=\"animation\/CompoundAnimation\/first.html\">first<\/a> and <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/AnimationMin-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationMin",
            "shortname": "AnimationMin",
            "extends": [
                "animation.CompoundAnimation",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an <a href=\"animation\/AnimationMin-class.html\">AnimationMin<\/a>.<\/p>\n<p>Both arguments must be non-null. Either can be an <a href=\"animation\/AnimationMin-class.html\">AnimationMin<\/a> itself\nto combine multiple animations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AnimationMin(Animation&lt;T&gt; first, Animation&lt;T&gt; next) : super(first: first, next: next);<\/code><\/pre>\n    ",
                    "href": "animation\/AnimationMin\/AnimationMin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AnimationMin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.AnimationMin",
                    "params": [
                        {
                            "name": "first",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        },
                        {
                            "name": "next",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An interpolation between two colors.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;Color&gt;<\/a> to use\n<a href=\"animation\/ColorTween\/lerp.html\">Color.lerp<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ColorTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ColorTween",
            "shortname": "ColorTween",
            "extends": [
                "dart:ui.Color",
                "animation.Tween",
                "dart:ui.Color",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"dart-ui\/Color-class.html\">Color<\/a> tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties may be null; the null value\nis treated as transparent.<\/p>\n<p>We recommend that you do not pass <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> as <code>begin<\/code>\nor <code>end<\/code> if you want the effect of fading in or out of transparent.\nInstead prefer null. <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> refers to black transparent and\nthus will fade out of or into black which is likely unwanted.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ColorTween({ Color begin, Color end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
                    "href": "animation\/ColorTween\/ColorTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ColorTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ColorTween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nColor lerp(double t) =&gt; Color.lerp(begin, end, t);<\/code><\/pre>\n    ",
                    "href": "animation\/ColorTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ColorTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An interface for combining multiple Animations. Subclasses need only\nimplement the <code>value<\/code> getter to control how the child animations are\ncombined. Can be chained to combine more than 2 animations.<\/p>\n<p>For example, to create an animation that is the sum of two others, subclass\nthis class and define <code>T get value = first.value + second.value;<\/code><\/p>\n<p>By default, the <a href=\"animation\/CompoundAnimation\/status.html\">status<\/a> of a <a href=\"animation\/CompoundAnimation-class.html\">CompoundAnimation<\/a> is the status of the\n<a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> animation if <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> is moving, and the status of the <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a>\nanimation otherwise.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/CompoundAnimation-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.CompoundAnimation",
            "shortname": "CompoundAnimation",
            "extends": [
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.AnimationMax",
                "animation.AnimationMean",
                "animation.AnimationMin"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a CompoundAnimation. Both arguments must be non-null. Either can\nbe a CompoundAnimation itself to combine multiple animations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CompoundAnimation({\n  @required this.first,\n  @required this.next,\n}) : assert(first != null),\n     assert(next != null);<\/code><\/pre>\n    ",
                    "href": "animation\/CompoundAnimation\/CompoundAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CompoundAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": [
                        {
                            "name": "first",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        },
                        {
                            "name": "next",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of listeners changes from zero to one.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartListening() {\n  first.addListener(_maybeNotifyListeners);\n  first.addStatusListener(_maybeNotifyStatusListeners);\n  next.addListener(_maybeNotifyListeners);\n  next.addStatusListener(_maybeNotifyStatusListeners);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CompoundAnimation\/didStartListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStartListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Called when the number of listeners changes from one to zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopListening() {\n  first.removeListener(_maybeNotifyListeners);\n  first.removeStatusListener(_maybeNotifyStatusListeners);\n  next.removeListener(_maybeNotifyListeners);\n  next.removeStatusListener(_maybeNotifyStatusListeners);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CompoundAnimation\/didStopListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($first, $next)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CompoundAnimation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The first sub-animation. Its status takes precedence if neither are\nanimating.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;T&gt; first\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CompoundAnimation\/first.html",
                    "name": "first",
                    "isDeprecated": false,
                    "type": "animation.Animation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The second sub-animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;T&gt; next\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CompoundAnimation\/next.html",
                    "name": "next",
                    "isDeprecated": false,
                    "type": "animation.Animation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Gets the status of this animation based on the <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a> and <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> status.<\/p>\n<p>The default is that if the <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> animation is moving, use its status.\nOtherwise, default to <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status {\n  if (next.status == AnimationStatus.forward || next.status == AnimationStatus.reverse)\n    return next.status;\n  return first.status;\n}<\/code><\/pre>\n        ",
                    "href": "animation\/CompoundAnimation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CompoundAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A tween with a constant value.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ConstantTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ConstantTween",
            "shortname": "ConstantTween",
            "extends": [
                "animation.Tween",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a tween whose <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> values equal <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ConstantTween(T value) : super(begin: value, end: value);<\/code><\/pre>\n    ",
                    "href": "animation\/ConstantTween\/ConstantTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ConstantTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ConstantTween",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>This tween doesn't interpolate, it always returns <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT lerp(double t) =&gt; begin;<\/code><\/pre>\n    ",
                    "href": "animation\/ConstantTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ConstantTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(value: begin)';<\/code><\/pre>\n    ",
                    "href": "animation\/ConstantTween\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ConstantTween",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A cubic polynomial mapping of the unit interval.<\/p>\n<p>The <a href=\"animation\/Curves-class.html\">Curves<\/a> class contains some commonly used cubic curves:<\/p>\n<ul>\n<li><a href=\"animation\/Curves\/ease-constant.html\">Curves.ease<\/a><\/li>\n<li><a href=\"animation\/Curves\/easeIn-constant.html\">Curves.easeIn<\/a><\/li>\n<li><a href=\"animation\/Curves\/easeOut-constant.html\">Curves.easeOut<\/a><\/li>\n<li><a href=\"animation\/Curves\/easeInOut-constant.html\">Curves.easeInOut<\/a><\/li>\n<\/ul>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_4_play_button_\" onclick=\"if (animation_4.paused) {\n                  animation_4.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_4.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_4\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_4_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_4_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>The <a href=\"animation\/Cubic-class.html\">Cubic<\/a> class implements third-order B\u00e9zier curves.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/Cubic-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Cubic",
            "shortname": "Cubic",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a cubic curve.<\/p>\n<p>Rather than creating a new instance, consider using one of the common\ncubic curves in <a href=\"animation\/Curves-class.html\">Curves<\/a>.<\/p>\n<p>The <code>a<\/code>, <code>b<\/code>, <code>c<\/code>, and <code>d<\/code> arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Cubic(this.a, this.b, this.c, this.d)\n  : assert(a != null),\n    assert(b != null),\n    assert(c != null),\n    assert(d != null);<\/code><\/pre>\n    ",
                    "href": "animation\/Cubic\/Cubic.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Cubic",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Cubic",
                    "params": [
                        {
                            "name": "a",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "b",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "c",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "d",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(${a.toStringAsFixed(2)}, ${b.toStringAsFixed(2)}, ${c.toStringAsFixed(2)}, ${d.toStringAsFixed(2)})';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Cubic\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Cubic",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  double start = 0.0;\n  double end = 1.0;\n  while (true) {\n    final double midpoint = (start + end) \/ 2;\n    final double estimate = _evaluateCubic(a, c, midpoint);\n    if ((t - estimate).abs() &lt; _cubicErrorBound)\n      return _evaluateCubic(b, d, midpoint);\n    if (estimate &lt; t)\n      start = midpoint;\n    else\n      end = midpoint;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Cubic\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Cubic",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The x coordinate of the first control point.<\/p>\n<p>The line through the point (0, 0) and the first control point is tangent\nto the curve at the point (0, 0).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double a\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Cubic\/a.html",
                    "name": "a",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Cubic",
                    "params": []
                },
                {
                    "desc": "<p>The y coordinate of the first control point.<\/p>\n<p>The line through the point (0, 0) and the first control point is tangent\nto the curve at the point (0, 0).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double b\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Cubic\/b.html",
                    "name": "b",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Cubic",
                    "params": []
                },
                {
                    "desc": "<p>The x coordinate of the second control point.<\/p>\n<p>The line through the point (1, 1) and the second control point is tangent\nto the curve at the point (1, 1).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double c\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Cubic\/c.html",
                    "name": "c",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Cubic",
                    "params": []
                },
                {
                    "desc": "<p>The y coordinate of the second control point.<\/p>\n<p>The line through the point (1, 1) and the second control point is tangent\nto the curve at the point (1, 1).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double d\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Cubic\/d.html",
                    "name": "d",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Cubic",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An easing curve, i.e. a mapping of the unit interval to the unit interval.<\/p>\n<p>Easing curves are used to adjust the rate of change of an animation over\ntime, allowing them to speed up and slow down, rather than moving at a\nconstant rate.<\/p>\n<p>A curve must map t=0.0 to 0.0 and t=1.0 to 1.0.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Curves-class.html\">Curves<\/a>, a collection of common animation easing curves.<\/li>\n<li>\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>, which can be used to apply a <a href=\"animation\/Curve-class.html\">Curve<\/a> to an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Canvas\/drawArc.html\">Canvas.drawArc<\/a>, which draws an arc, and has nothing to do with easing\ncurves.<\/li>\n<li>\n<a href=\"animation\/Animatable-class.html\">Animatable<\/a>, for a more flexible interface that maps fractions to\narbitrary values.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/Curve-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Curve",
            "shortname": "Curve",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.Cubic",
                "animation.ElasticInCurve",
                "animation.ElasticInOutCurve",
                "animation.ElasticOutCurve",
                "animation.FlippedCurve",
                "animation.Interval",
                "animation.SawTooth",
                "animation.Threshold"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Curve();<\/code><\/pre>\n    ",
                    "href": "animation\/Curve\/Curve.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Curve",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Curve",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Curve\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Curve",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>.<\/p>\n<p>This function must ensure the following:<\/p>\n<ul>\n<li>The value of <code>t<\/code> must be between 0.0 and 1.0<\/li>\n<li>Values of <code>t<\/code>=0.0 and <code>t<\/code>=1.0 must be mapped to 0.0 and 1.0,\nrespectively.<\/li>\n<\/ul>\n<p>It is recommended that subclasses override <a href=\"animation\/Curve\/transformInternal.html\">transformInternal<\/a> instead of\nthis function, as the above cases are already handled in the default\nimplementation of <a href=\"animation\/Curve\/transform.html\">transform<\/a>, which delegates the remaining logic to\n<a href=\"animation\/Curve\/transformInternal.html\">transformInternal<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double transform(double t) {\n  assert(t &gt;= 0.0 &amp;&amp; t &lt;= 1.0);\n  if (t == 0.0 || t == 1.0) {\n    return t;\n  }\n  return transformInternal(t);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Curve\/transform.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Curve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble transformInternal(double t) {\n  throw UnimplementedError();\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Curve\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Curve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a new curve that is the reversed inversion of this one.<\/p>\n<p>This is often useful with <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">CurvedAnimation.reverseCurve<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_flipped.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a>, the class that is used to implement this getter.<\/li>\n<li>\n<a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a>, which reverses an <a href=\"animation\/Animation-class.html\">Animation<\/a> rather than a <a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, which can take a separate curve and reverse curve.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve get flipped =&gt; FlippedCurve(this);<\/code><\/pre>\n        ",
                    "href": "animation\/Curve\/flipped.html",
                    "name": "flipped",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Curve",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Transforms the value of the given animation by the given curve.<\/p>\n<p>This class differs from <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> in that <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> applies\na curve to an existing <a href=\"animation\/Animation-class.html\">Animation<\/a> object whereas <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a> can be\nchained with another <a href=\"animation\/Tween-class.html\">Tween<\/a> prior to receiving the underlying <a href=\"animation\/Animation-class.html\">Animation<\/a>.\n(<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> also has the additional ability of having different\ncurves when the animation is going forward vs when it is going backward,\nwhich can be useful in some scenarios.)<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code snippet shows how you can apply a curve to a linear\nanimation produced by an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> <code>controller<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = _controller.drive(\n  CurveTween(curve: Curves.ease),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, for an alternative way of expressing the sample above.<\/li>\n<li>\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, for examples of creating and disposing of an\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/CurveTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.CurveTween",
            "shortname": "CurveTween",
            "extends": [
                "dart:core.double",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a curve tween.<\/p>\n<p>The <code>curve<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CurveTween({ @required this.curve })\n  : assert(curve != null);<\/code><\/pre>\n    ",
                    "href": "animation\/CurveTween\/CurveTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CurveTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.CurveTween",
                    "params": [
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Curve"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(curve: $curve)';<\/code><\/pre>\n    ",
                    "href": "animation\/CurveTween\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CurveTween",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the object at point <code>t<\/code>.<\/p>\n<p>The value of <code>t<\/code> is nominally a fraction in the range 0.0 to 1.0, though\nin practice it may extend outside this range.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>, which is a shorthand for applying <a href=\"animation\/CurveTween\/transform.html\">transform<\/a> to the value\nof an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"animation\/CurveTween\/transform.html\">Curve.transform<\/a>, a similar method for easing curves.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transform(double t) {\n  if (t == 0.0 || t == 1.0) {\n    assert(curve.transform(t).round() == t);\n    return t;\n  }\n  return curve.transform(t);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CurveTween\/transform.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CurveTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The curve to use when transforming the value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve curve\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CurveTween\/curve.html",
                    "name": "curve",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CurveTween",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An animation that applies a curve to another animation.<\/p>\n<p><a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> is useful when you want to apply a non-linear <a href=\"animation\/Curve-class.html\">Curve<\/a> to\nan animation object, especially if you want different curves when the\nanimation is going forward vs when it is going backward.<\/p>\n<p>Depending on the given curve, the output of the <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> could have\na wider range than its input. For example, elastic curves such as\n<a href=\"animation\/Curves\/elasticIn-constant.html\">Curves.elasticIn<\/a> will significantly overshoot or undershoot the default\nrange of 0.0 to 1.0.<\/p>\n<p>If you want to apply a <a href=\"animation\/Curve-class.html\">Curve<\/a> to a <a href=\"animation\/Tween-class.html\">Tween<\/a>, consider using <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code snippet shows how you can apply a curve to a linear\nanimation produced by an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> <code>controller<\/code>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = CurvedAnimation(\n  parent: controller,\n  curve: Curves.ease,\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis second code snippet shows how to apply a different curve in the forward\ndirection than in the reverse direction. This can't be done using a\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a> (since <a href=\"animation\/Tween-class.html\">Tween<\/a>s are not aware of the animation direction when\nthey are applied).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = CurvedAnimation(\n  parent: controller,\n  curve: Curves.easeIn,\n  reverseCurve: Curves.easeOut,\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>By default, the <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">reverseCurve<\/a> matches the forward <a href=\"animation\/CurvedAnimation\/curve.html\">curve<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>, for an alternative way of expressing the first sample\nabove.<\/li>\n<li>\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, for examples of creating and disposing of an\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/li>\n<li>\n<a href=\"animation\/Curve\/flipped.html\">Curve.flipped<\/a> and <a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a>, which provide the reverse of a\n<a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/CurvedAnimation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.CurvedAnimation",
            "shortname": "CurvedAnimation",
            "extends": [
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a curved animation.<\/p>\n<p>The parent and curve arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CurvedAnimation({\n  @required this.parent,\n  @required this.curve,\n  this.reverseCurve,\n}) : assert(parent != null),\n     assert(curve != null) {\n  _updateCurveDirection(parent.status);\n  parent.addStatusListener(_updateCurveDirection);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CurvedAnimation\/CurvedAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CurvedAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": [
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Curve"
                        },
                        {
                            "name": "parent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "reverseCurve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Curve"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (reverseCurve == null)\n    return '$parent\\u27A9$curve';\n  if (_useForwardCurve)\n    return '$parent\\u27A9$curve\\u2092\\u2099\/$reverseCurve';\n  return '$parent\\u27A9$curve\/$reverseCurve\\u2092\\u2099';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/CurvedAnimation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The curve to use in the forward direction.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve curve\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CurvedAnimation\/curve.html",
                    "name": "curve",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The animation to which this animation applies a curve.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; parent\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CurvedAnimation\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "animation.Animation<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The curve to use in the reverse direction.<\/p>\n<p>If the parent animation changes direction without first reaching the\n<a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> or <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> status, the\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> stays on the same curve (albeit in the opposite\ndirection) to avoid visual discontinuities.<\/p>\n<p>If you use a non-null <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">reverseCurve<\/a>, you might want to hold this object\nin a <a href=\"widgets\/State-class.html\">State<\/a> object rather than recreating it each time your widget builds\nin order to take advantage of the state in this object that avoids visual\ndiscontinuities.<\/p>\n<p>If this field is null, uses <a href=\"animation\/CurvedAnimation\/curve.html\">curve<\/a> in both directions.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve reverseCurve\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/CurvedAnimation\/reverseCurve.html",
                    "name": "reverseCurve",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value {\n  final Curve activeCurve = _useForwardCurve ? curve : reverseCurve;\n\n  final double t = parent.value;\n  if (activeCurve == null)\n    return t;\n  if (t == 0.0 || t == 1.0) {\n    assert(() {\n      final double transformedValue = activeCurve.transform(t);\n      final double roundedTransformedValue = transformedValue.round().toDouble();\n      if (roundedTransformedValue != t) {\n        throw FlutterError(\n          'Invalid curve endpoint at $t.\\n'\n          'Curves must map 0.0 to near zero and 1.0 to near one but '\n          '${activeCurve.runtimeType} mapped $t to $transformedValue, which '\n          'is near $roundedTransformedValue.'\n        );\n      }\n      return true;\n    }());\n    return t;\n  }\n  return activeCurve.transform(t);\n}<\/code><\/pre>\n        ",
                    "href": "animation\/CurvedAnimation\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.CurvedAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A collection of common animation curves.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_4_play_button_\" onclick=\"if (animation_4.paused) {\n                  animation_4.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_4.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_4\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_4_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_4_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_decelerate.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_5_play_button_\" onclick=\"if (animation_5.paused) {\n                  animation_5.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_5.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_5\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_5_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_5_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_6_play_button_\" onclick=\"if (animation_6.paused) {\n                  animation_6.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_6.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_6\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_6_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_6_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_7_play_button_\" onclick=\"if (animation_7.paused) {\n                  animation_7.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_7.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_7\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_7_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_7_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_8_play_button_\" onclick=\"if (animation_8.paused) {\n                  animation_8.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_8.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_8\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_8_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_8_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_9_play_button_\" onclick=\"if (animation_9.paused) {\n                  animation_9.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_9.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_9\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_9_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_9_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_10_play_button_\" onclick=\"if (animation_10.paused) {\n                  animation_10.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_10.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_10\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_10_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_10_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_11_play_button_\" onclick=\"if (animation_11.paused) {\n                  animation_11.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_11.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_11\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_11_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_11_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_12_play_button_\" onclick=\"if (animation_12.paused) {\n                  animation_12.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_12.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_12\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_12_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_12_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_13_play_button_\" onclick=\"if (animation_13.paused) {\n                  animation_13.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_13.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_13\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_13_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_13_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_14_play_button_\" onclick=\"if (animation_14.paused) {\n                  animation_14.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_14.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_14\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_14_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_14_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_15_play_button_\" onclick=\"if (animation_15.paused) {\n                  animation_15.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_15.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_15\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_15_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_15_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_16_play_button_\" onclick=\"if (animation_16.paused) {\n                  animation_16.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_16.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_16\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_16_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_16_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_17_play_button_\" onclick=\"if (animation_17.paused) {\n                  animation_17.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_17.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_17\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_17_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_17_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_18_play_button_\" onclick=\"if (animation_18.paused) {\n                  animation_18.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_18.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_18\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_18_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_18_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_19_play_button_\" onclick=\"if (animation_19.paused) {\n                  animation_19.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_19.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_19\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_19_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_19_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_20_play_button_\" onclick=\"if (animation_20.paused) {\n                  animation_20.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_20.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_20\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_20_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_20_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_21_play_button_\" onclick=\"if (animation_21.paused) {\n                  animation_21.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_21.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_21\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_21_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_21_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_22_play_button_\" onclick=\"if (animation_22.paused) {\n                  animation_22.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_22.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_22\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_22_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_22_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_23_play_button_\" onclick=\"if (animation_23.paused) {\n                  animation_23.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_23.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_23\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_23_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_23_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_24_play_button_\" onclick=\"if (animation_24.paused) {\n                  animation_24.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_24.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_24\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_24_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_24_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_25_play_button_\" onclick=\"if (animation_25.paused) {\n                  animation_25.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_25.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_25\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_25_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_25_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_26_play_button_\" onclick=\"if (animation_26.paused) {\n                  animation_26.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_26.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_26\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_26_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_26_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_27_play_button_\" onclick=\"if (animation_27.paused) {\n                  animation_27.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_27.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_27\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_27_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_27_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_28_play_button_\" onclick=\"if (animation_28.paused) {\n                  animation_28.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_28.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_28\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_28_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_28_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_29_play_button_\" onclick=\"if (animation_29.paused) {\n                  animation_29.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_29.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_29\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_29_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_29_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_30_play_button_\" onclick=\"if (animation_30.paused) {\n                  animation_30.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_30.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_30\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_30_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_30_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_31_play_button_\" onclick=\"if (animation_31.paused) {\n                  animation_31.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_31.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_31\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_31_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_31_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_32_play_button_\" onclick=\"if (animation_32.paused) {\n                  animation_32.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_32.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_32\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_32_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_32_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_33_play_button_\" onclick=\"if (animation_33.paused) {\n                  animation_33.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_33.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_33\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_33_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_33_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_34_play_button_\" onclick=\"if (animation_34.paused) {\n                  animation_34.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_34.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_34\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_34_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_34_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_35_play_button_\" onclick=\"if (animation_35.paused) {\n                  animation_35.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_35.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_35\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_35_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_35_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_36_play_button_\" onclick=\"if (animation_36.paused) {\n                  animation_36.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_36.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_36\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_36_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_36_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_fast_out_slow_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_37_play_button_\" onclick=\"if (animation_37.paused) {\n                  animation_37.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_37.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_37\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_37_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_37_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_slow_middle.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_38_play_button_\" onclick=\"if (animation_38.paused) {\n                  animation_38.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_38.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_38\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_38_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_38_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_linear.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Curve-class.html\">Curve<\/a>, the interface implemented by the constants available from the\n<a href=\"animation\/Curves-class.html\">Curves<\/a> class.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/Curves-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Curves",
            "shortname": "Curves",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "<p>An oscillating curve that grows in magnitude.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Curve bounceIn = _BounceInCurve._()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/bounceIn-constant.html",
                    "name": "bounceIn",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>An oscillating curve that first grows and then shrink in magnitude.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Curve bounceInOut = _BounceInOutCurve._()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/bounceInOut-constant.html",
                    "name": "bounceInOut",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>An oscillating curve that first grows and then shrink in magnitude.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Curve bounceOut = _BounceOutCurve._()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/bounceOut-constant.html",
                    "name": "bounceOut",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A curve where the rate of change starts out quickly and then decelerates; an\nupside-down <code>f(t) = t\u00b2<\/code> parabola.<\/p>\n<p>This is equivalent to the Android <code>DecelerateInterpolator<\/code> class with a unit\nfactor (the default factor).<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_decelerate.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Curve decelerate = _DecelerateCurve._()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/decelerate-constant.html",
                    "name": "decelerate",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that speeds up quickly and ends slowly.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic ease = Cubic(0.25, 0.1, 0.25, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/ease-constant.html",
                    "name": "ease",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeIn = Cubic(0.42, 0.0, 1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeIn-constant.html",
                    "name": "easeIn",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve\nis similar to <a href=\"animation\/Curves\/elasticIn-constant.html\">Curves.elasticIn<\/a> in that it overshoots its bounds before\nreaching its end. Instead of repeated swinging motions before ascending,\nthough, this curve overshoots once, then continues to ascend.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInBack = Cubic(0.6, -0.28, 0.735, 0.045)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInBack-constant.html",
                    "name": "easeInBack",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve is\neffectively the bottom-right quarter of a circle.<\/p>\n<p>Like <a href=\"animation\/Curves\/easeInExpo-constant.html\">Curves.easeInExpo<\/a>, this curve is fairly dramatic and will reduce\nthe clarity of an animation if not given a longer duration.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInCirc = Cubic(0.6, 0.04, 0.98, 0.335)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInCirc-constant.html",
                    "name": "easeInCirc",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve is\nbased on a cubic equation where <code>f(t) = t\u00b3<\/code>. The result is a safe sweet\nspot when choosing a curve for widgets animating off the viewport.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInQuad-constant.html\">Curves.easeInQuad<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInCubic = Cubic(0.55, 0.055, 0.675, 0.19)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInCubic-constant.html",
                    "name": "easeInCubic",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve is\nbased on an exponential equation where <code>f(t) = 2\u00b9\u2070\u207d\u1d57\u207b\u00b9\u207e<\/code>.<\/p>\n<p>Using this curve can give your animations extra flare, but a longer\nduration may need to be used to compensate for the steepness of the curve.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInQuint-constant.html\">Curves.easeInQuint<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInExpo = Cubic(0.95, 0.05, 0.795, 0.035)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInExpo-constant.html",
                    "name": "easeInExpo",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOut = Cubic(0.42, 0.0, 0.58, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOut-constant.html",
                    "name": "easeInOut",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInBack-constant.html\">Curves.easeInBack<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutBack-constant.html\">Curves.easeOutBack<\/a> as the second.<\/p>\n<p>Since two curves are used as a basis for this curve, the resulting\nanimation will overshoot its bounds twice before reaching its end - first\nby exceeding its lower bound, then exceeding its upper bound and finally\ndescending to its final position.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutBack = Cubic(0.68, -0.55, 0.265, 1.55)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutBack-constant.html",
                    "name": "easeInOutBack",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInCirc-constant.html\">Curves.easeInCirc<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutCirc-constant.html\">Curves.easeOutCirc<\/a> as the second.<\/p>\n<p>Like <a href=\"animation\/Curves\/easeInOutExpo-constant.html\">Curves.easeInOutExpo<\/a>, this curve is fairly dramatic and will reduce\nthe clarity of an animation if not given a longer duration.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutExpo-constant.html\">Curves.easeInOutExpo<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutCirc = Cubic(0.785, 0.135, 0.15, 0.86)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutCirc-constant.html",
                    "name": "easeInOutCirc",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInCubic-constant.html\">Curves.easeInCubic<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutCubic-constant.html\">Curves.easeOutCubic<\/a> as the second.<\/p>\n<p>The result is a safe sweet spot when choosing a curve for a widget whose\ninitial and final positions are both within the viewport.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutQuad-constant.html\">Curves.easeInOutQuad<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutCubic = Cubic(0.645, 0.045, 0.355, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutCubic-constant.html",
                    "name": "easeInOutCubic",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly.<\/p>\n<p>Since this curve is arrived at with an exponential function, the midpoint\nis exceptionally steep. Extra consideration should be taken when designing\nan animation using this.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutQuint-constant.html\">Curves.easeInOutQuint<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutExpo = Cubic(1.0, 0.0, 0.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutExpo-constant.html",
                    "name": "easeInOutExpo",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInQuad-constant.html\">Curves.easeInQuad<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutQuad-constant.html\">Curves.easeOutQuad<\/a> as the second.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutSine-constant.html\">Curves.easeInOutSine<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutQuad = Cubic(0.455, 0.03, 0.515, 0.955)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutQuad-constant.html",
                    "name": "easeInOutQuad",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInQuart-constant.html\">Curves.easeInQuart<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutQuart-constant.html\">Curves.easeOutQuart<\/a> as the second.<\/p>\n<p>Animations using this curve or steeper curves will benefit from a longer\nduration to avoid motion feeling unnatural.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutCubic-constant.html\">Curves.easeInOutCubic<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutQuart = Cubic(0.77, 0.0, 0.175, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutQuart-constant.html",
                    "name": "easeInOutQuart",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This curve can be imagined as <a href=\"animation\/Curves\/easeInQuint-constant.html\">Curves.easeInQuint<\/a> as the first\nhalf, and <a href=\"animation\/Curves\/easeOutQuint-constant.html\">Curves.easeOutQuint<\/a> as the second.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInOutQuart-constant.html\">Curves.easeInOutQuart<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutQuint = Cubic(0.86, 0.0, 0.07, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutQuint-constant.html",
                    "name": "easeInOutQuint",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly, speeds up, and then ends\nslowly. This is similar to <a href=\"animation\/Curves\/easeInOut-constant.html\">Curves.easeInOut<\/a>, but with sinusoidal easing\nfor a slightly less abrupt beginning and end.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_out_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInOutSine = Cubic(0.445, 0.05, 0.55, 0.95)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInOutSine-constant.html",
                    "name": "easeInOutSine",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. Based on a\nquadratic equation where <code>f(t) = t\u00b2<\/code>, this is effectively the inverse of\n<a href=\"animation\/Curves\/decelerate-constant.html\">Curves.decelerate<\/a>.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInSine-constant.html\">Curves.easeInSine<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInQuad = Cubic(0.55, 0.085, 0.68, 0.53)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInQuad-constant.html",
                    "name": "easeInQuad",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve is\nbased on a quartic equation where <code>f(t) = t\u2074<\/code>.<\/p>\n<p>Animations using this curve or steeper curves will benefit from a longer\nduration to avoid motion feeling unnatural.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInCubic-constant.html\">Curves.easeInCubic<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInQuart = Cubic(0.895, 0.03, 0.685, 0.22)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInQuart-constant.html",
                    "name": "easeInQuart",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This curve is\nbased on a quintic equation where <code>f(t) = t\u2075<\/code>.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeInQuart-constant.html\">Curves.easeInQuart<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInQuint = Cubic(0.755, 0.05, 0.855, 0.06)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInQuint-constant.html",
                    "name": "easeInQuint",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts slowly and ends quickly. This is\nsimilar to <a href=\"animation\/Curves\/easeIn-constant.html\">Curves.easeIn<\/a>, but with sinusoidal easing for a slightly less\nabrupt beginning and end. Nonetheless, the result is quite gentle and is\nhard to distinguish from <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a> at a glance.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInSine = Cubic(0.47, 0.0, 0.745, 0.715)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInSine-constant.html",
                    "name": "easeInSine",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts starts slowly and ends linearly.<\/p>\n<p>The symmetric animation to <a href=\"animation\/Curves\/linearToEaseOut-constant.html\">linearToEaseOut<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_in_to_linear.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeInToLinear = Cubic(0.67, 0.03, 0.65, 0.09)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeInToLinear-constant.html",
                    "name": "easeInToLinear",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOut = Cubic(0.0, 0.0, 0.58, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOut-constant.html",
                    "name": "easeOut",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\nsimilar to <a href=\"animation\/Curves\/elasticOut-constant.html\">Curves.elasticOut<\/a> in that it overshoots its bounds before\nreaching its end. Instead of repeated swinging motions after ascending,\nthough, this curve only overshoots once.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_back.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutBack = Cubic(0.175, 0.885, 0.32, 1.275)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutBack-constant.html",
                    "name": "easeOutBack",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\neffectively the top-left quarter of a circle.<\/p>\n<p>Like <a href=\"animation\/Curves\/easeOutExpo-constant.html\">Curves.easeOutExpo<\/a>, this curve is fairly dramatic and will reduce\nthe clarity of an animation if not given a longer duration.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_circ.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutCirc = Cubic(0.075, 0.82, 0.165, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutCirc-constant.html",
                    "name": "easeOutCirc",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\na flipped version of <a href=\"animation\/Curves\/easeInCubic-constant.html\">Curves.easeInCubic<\/a>.<\/p>\n<p>The result is a safe sweet spot when choosing a curve for animating a\nwidget's position entering or already inside the viewport.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeOutQuad-constant.html\">Curves.easeOutQuad<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_cubic.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutCubic = Cubic(0.215, 0.61, 0.355, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutCubic-constant.html",
                    "name": "easeOutCubic",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\na flipped version of <a href=\"animation\/Curves\/easeInExpo-constant.html\">Curves.easeInExpo<\/a>. Using this curve can give your\nanimations extra flare, but a longer duration may need to be used to\ncompensate for the steepness of the curve.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_expo.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutExpo = Cubic(0.19, 1.0, 0.22, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutExpo-constant.html",
                    "name": "easeOutExpo",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This is\neffectively the same as <a href=\"animation\/Curves\/decelerate-constant.html\">Curves.decelerate<\/a>, only simulated using a cubic\nbezier function.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeOutSine-constant.html\">Curves.easeOutSine<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quad.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutQuad = Cubic(0.25, 0.46, 0.45, 0.94)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutQuad-constant.html",
                    "name": "easeOutQuad",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\na flipped version of <a href=\"animation\/Curves\/easeInQuart-constant.html\">Curves.easeInQuart<\/a>.<\/p>\n<p>Animations using this curve or steeper curves will benefit from a longer\nduration to avoid motion feeling unnatural.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeOutCubic-constant.html\">Curves.easeOutCubic<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quart.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutQuart = Cubic(0.165, 0.84, 0.44, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutQuart-constant.html",
                    "name": "easeOutQuart",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This curve is\na flipped version of <a href=\"animation\/Curves\/easeInQuint-constant.html\">Curves.easeInQuint<\/a>.<\/p>\n<p>Compared to <a href=\"animation\/Curves\/easeOutQuart-constant.html\">Curves.easeOutQuart<\/a>, this curve is slightly steeper.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_quint.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutQuint = Cubic(0.23, 1.0, 0.32, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutQuint-constant.html",
                    "name": "easeOutQuint",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly and ends slowly. This is\nsimilar to <a href=\"animation\/Curves\/easeOut-constant.html\">Curves.easeOut<\/a>, but with sinusoidal easing for a slightly\nless abrupt beginning and end. Nonetheless, the result is quite gentle and\nis hard to distinguish from <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a> at a glance.<\/p>\n<p>Derived from Robert Penner\u2019s easing functions.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_ease_out_sine.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic easeOutSine = Cubic(0.39, 0.575, 0.565, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/easeOutSine-constant.html",
                    "name": "easeOutSine",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>An oscillating curve that grows in magnitude while overshooting its bounds.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ElasticInCurve elasticIn = ElasticInCurve()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/elasticIn-constant.html",
                    "name": "elasticIn",
                    "isDeprecated": false,
                    "type": "animation.ElasticInCurve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>An oscillating curve that grows and then shrinks in magnitude while overshooting its bounds.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ElasticInOutCurve elasticInOut = ElasticInOutCurve()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/elasticInOut-constant.html",
                    "name": "elasticInOut",
                    "isDeprecated": false,
                    "type": "animation.ElasticInOutCurve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>An oscillating curve that shrinks in magnitude while overshooting its bounds.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ElasticOutCurve elasticOut = ElasticOutCurve()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/elasticOut-constant.html",
                    "name": "elasticOut",
                    "isDeprecated": false,
                    "type": "animation.ElasticOutCurve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A curve that is very steep and linear at the beginning, but quickly flattens out\nand very slowly eases in.<\/p>\n<p>By default is the curve used to animate pages on iOS back to their original\nposition if a swipe gesture is ended midway through a swipe.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/fast_linear_to_slow_ease_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic fastLinearToSlowEaseIn = Cubic(0.18, 1.0, 0.04, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/fastLinearToSlowEaseIn-constant.html",
                    "name": "fastLinearToSlowEaseIn",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A curve that starts quickly and eases into its final position.<\/p>\n<p>Over the course of the animation, the object spends more time near its\nfinal destination. As a result, the user isn\u2019t left waiting for the\nanimation to finish, and the negative effects of motion are minimized.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_fast_out_slow_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic fastOutSlowIn = Cubic(0.4, 0.0, 0.2, 1.0)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/fastOutSlowIn-constant.html",
                    "name": "fastOutSlowIn",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A linear animation curve.<\/p>\n<p>This is the identity map over the unit interval: its <a href=\"animation\/Curve\/transform.html\">Curve.transform<\/a>\nmethod returns its input unmodified. This is useful as a default curve for\ncases where a <a href=\"animation\/Curve-class.html\">Curve<\/a> is required but no actual curve is desired.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_linear.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Curve linear = _Linear._()\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/linear-constant.html",
                    "name": "linear",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts linearly and ends slowly.<\/p>\n<p>A symmetric animation to <a href=\"animation\/Curves\/easeInToLinear-constant.html\">easeInToLinear<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/linear_to_ease_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic linearToEaseOut = Cubic(0.35, 0.91, 0.33, 0.97)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/linearToEaseOut-constant.html",
                    "name": "linearToEaseOut",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                },
                {
                    "desc": "<p>A cubic animation curve that starts quickly, slows down, and then ends\nquickly.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_slow_middle.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Cubic slowMiddle = Cubic(0.15, 0.85, 0.85, 0.15)\n\n<\/code><\/pre>\n    ",
                    "href": "animation\/Curves\/slowMiddle-constant.html",
                    "name": "slowMiddle",
                    "isDeprecated": false,
                    "type": "animation.Cubic",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.Curves",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An oscillating curve that grows in magnitude while overshooting its bounds.<\/p>\n<p>An instance of this class using the default period of 0.4 is available as\n<a href=\"animation\/Curves\/elasticIn-constant.html\">Curves.elasticIn<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ElasticInCurve-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ElasticInCurve",
            "shortname": "ElasticInCurve",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an elastic-in curve.<\/p>\n<p>Rather than creating a new instance, consider using <a href=\"animation\/Curves\/elasticIn-constant.html\">Curves.elasticIn<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ElasticInCurve([this.period = 0.4]);<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInCurve\/ElasticInCurve.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ElasticInCurve",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ElasticInCurve",
                    "params": [
                        {
                            "name": "period",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($period)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInCurve\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticInCurve",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  final double s = period \/ 4.0;\n  t = t - 1.0;\n  return -math.pow(2.0, 10.0 * t) * math.sin((t - s) * (math.pi * 2.0) \/ period);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInCurve\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticInCurve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The duration of the oscillation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double period\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/ElasticInCurve\/period.html",
                    "name": "period",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ElasticInCurve",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An oscillating curve that grows and then shrinks in magnitude while\novershooting its bounds.<\/p>\n<p>An instance of this class using the default period of 0.4 is available as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_in_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ElasticInOutCurve-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ElasticInOutCurve",
            "shortname": "ElasticInOutCurve",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an elastic-in-out curve.<\/p>\n<p>Rather than creating a new instance, consider using <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ElasticInOutCurve([this.period = 0.4]);<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInOutCurve\/ElasticInOutCurve.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ElasticInOutCurve",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ElasticInOutCurve",
                    "params": [
                        {
                            "name": "period",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($period)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInOutCurve\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticInOutCurve",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  final double s = period \/ 4.0;\n  t = 2.0 * t - 1.0;\n  if (t &lt; 0.0)\n    return -0.5 * math.pow(2.0, 10.0 * t) * math.sin((t - s) * (math.pi * 2.0) \/ period);\n  else\n    return math.pow(2.0, -10.0 * t) * math.sin((t - s) * (math.pi * 2.0) \/ period) * 0.5 + 1.0;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticInOutCurve\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticInOutCurve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The duration of the oscillation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double period\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/ElasticInOutCurve\/period.html",
                    "name": "period",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ElasticInOutCurve",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An oscillating curve that shrinks in magnitude while overshooting its bounds.<\/p>\n<p>An instance of this class using the default period of 0.4 is available as\n<a href=\"animation\/Curves\/elasticOut-constant.html\">Curves.elasticOut<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_elastic_out.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ElasticOutCurve-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ElasticOutCurve",
            "shortname": "ElasticOutCurve",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an elastic-out curve.<\/p>\n<p>Rather than creating a new instance, consider using <a href=\"animation\/Curves\/elasticOut-constant.html\">Curves.elasticOut<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ElasticOutCurve([this.period = 0.4]);<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticOutCurve\/ElasticOutCurve.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ElasticOutCurve",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ElasticOutCurve",
                    "params": [
                        {
                            "name": "period",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($period)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticOutCurve\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticOutCurve",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  final double s = period \/ 4.0;\n  return math.pow(2.0, -10 * t) * math.sin((t - s) * (math.pi * 2.0) \/ period) + 1.0;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ElasticOutCurve\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ElasticOutCurve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The duration of the oscillation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double period\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/ElasticOutCurve\/period.html",
                    "name": "period",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ElasticOutCurve",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A curve that is the reversed inversion of its given curve.<\/p>\n<p>This curve evaluates the given curve in reverse (i.e., from 1.0 to 0.0 as t\nincreases from 0.0 to 1.0) and returns the inverse of the given curve's\nvalue (i.e., 1.0 minus the given curve's value).<\/p>\n<p>This is the class used to implement the <a href=\"animation\/Curve\/flipped.html\">flipped<\/a> getter on curves.<\/p>\n<p>This is often useful with <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">CurvedAnimation.reverseCurve<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_flipped.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Curve\/flipped.html\">Curve.flipped<\/a>, which provides the <a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a> of a <a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<li>\n<a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a>, which reverses an <a href=\"animation\/Animation-class.html\">Animation<\/a> rather than a <a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, which can take a separate curve and reverse curve.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/FlippedCurve-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.FlippedCurve",
            "shortname": "FlippedCurve",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a flipped curve.<\/p>\n<p>The <code>curve<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlippedCurve(this.curve) : assert(curve != null);<\/code><\/pre>\n    ",
                    "href": "animation\/FlippedCurve\/FlippedCurve.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FlippedCurve",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.FlippedCurve",
                    "params": [
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Curve"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($curve)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/FlippedCurve\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.FlippedCurve",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) =&gt; 1.0 - curve.transform(1.0 - t);<\/code><\/pre>\n    ",
                    "href": "animation\/FlippedCurve\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.FlippedCurve",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The curve that is being flipped.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve curve\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/FlippedCurve\/curve.html",
                    "name": "curve",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.FlippedCurve",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interpolation between two integers that rounds.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;int&gt;<\/a> to be\nappropriate for integers by interpolating between the given begin\nand end values and then rounding the result to the nearest\ninteger.<\/p>\n<p>This is the closest approximation to a linear tween that is possible with an\ninteger. Compare to <a href=\"animation\/StepTween-class.html\">StepTween<\/a> and <a href=\"animation\/Tween-class.html\">Tween&lt;double&gt;<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/IntTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.IntTween",
            "shortname": "IntTween",
            "extends": [
                "dart:core.int",
                "animation.Tween",
                "dart:core.int",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an int tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties must be non-null before the tween is\nfirst used, but the arguments can be null if the values are going to be\nfilled in later.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IntTween({ int begin, int end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
                    "href": "animation\/IntTween\/IntTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IntTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.IntTween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n<p>The default implementation of this method uses the <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators on <code>T<\/code>. The <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> properties must therefore be\nnon-null by the time this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lerp(double t) =&gt; (begin + (end - begin) * t).round();<\/code><\/pre>\n    ",
                    "href": "animation\/IntTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.IntTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A curve that is 0.0 until <a href=\"animation\/Interval\/begin.html\">begin<\/a>, then curved (according to <a href=\"animation\/Interval\/curve.html\">curve<\/a> from\n0.0 to 1.0 at <a href=\"animation\/Interval\/end.html\">end<\/a>, then 1.0.<\/p>\n<p>An <a href=\"animation\/Interval-class.html\">Interval<\/a> can be used to delay an animation. For example, a six second\nanimation that uses an <a href=\"animation\/Interval-class.html\">Interval<\/a> with its <a href=\"animation\/Interval\/begin.html\">begin<\/a> set to 0.5 and its <a href=\"animation\/Interval\/end.html\">end<\/a>\nset to 1.0 will essentially become a three-second animation that starts\nthree seconds later.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_interval.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/Interval-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Interval",
            "shortname": "Interval",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an interval curve.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Interval(this.begin, this.end, { this.curve = Curves.linear })\n  : assert(begin != null),\n    assert(end != null),\n    assert(curve != null);<\/code><\/pre>\n    ",
                    "href": "animation\/Interval\/Interval.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Interval",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Interval",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "curve",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Curve"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (curve is! _Linear)\n    return '$runtimeType($begin\\u22EF$end)\\u27A9$curve';\n  return '$runtimeType($begin\\u22EF$end)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Interval\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Interval",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  assert(begin &gt;= 0.0);\n  assert(begin &lt;= 1.0);\n  assert(end &gt;= 0.0);\n  assert(end &lt;= 1.0);\n  assert(end &gt;= begin);\n  t = ((t - begin) \/ (end - begin)).clamp(0.0, 1.0);\n  if (t == 0.0 || t == 1.0)\n    return t;\n  return curve.transform(t);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Interval\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Interval",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The largest value for which this interval is 0.0.<\/p>\n<p>From t=0.0 to t=<code>begin<\/code>, the interval's value is 0.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double begin\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Interval\/begin.html",
                    "name": "begin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Interval",
                    "params": []
                },
                {
                    "desc": "<p>The curve to apply between <a href=\"animation\/Interval\/begin.html\">begin<\/a> and <a href=\"animation\/Interval\/end.html\">end<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve curve\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Interval\/curve.html",
                    "name": "curve",
                    "isDeprecated": false,
                    "type": "animation.Curve",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Interval",
                    "params": []
                },
                {
                    "desc": "<p>The smallest value for which this interval is 1.0.<\/p>\n<p>From t=<code>end<\/code> to t=1.0, the interval's value is 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double end\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Interval\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Interval",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An animation that is a proxy for another animation.<\/p>\n<p>A proxy animation is useful because the parent animation can be mutated. For\nexample, one object can create a proxy animation, hand the proxy to another\nobject, and then later change the animation from which the proxy receives\nits value.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ProxyAnimation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ProxyAnimation",
            "shortname": "ProxyAnimation",
            "extends": [
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a proxy animation.<\/p>\n<p>If the animation argument is omitted, the proxy animation will have the\nstatus <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> and a value of 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ProxyAnimation([Animation&lt;double&gt; animation]) {\n  _parent = animation;\n  if (_parent == null) {\n    _status = AnimationStatus.dismissed;\n    _value = 0.0;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ProxyAnimation\/ProxyAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ProxyAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of listeners changes from zero to one.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartListening() {\n  if (_parent != null) {\n    _parent.addListener(notifyListeners);\n    _parent.addStatusListener(notifyStatusListeners);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ProxyAnimation\/didStartListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStartListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Called when the number of listeners changes from one to zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopListening() {\n  if (_parent != null) {\n    _parent.removeListener(notifyListeners);\n    _parent.removeStatusListener(notifyStatusListeners);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ProxyAnimation\/didStopListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (parent == null)\n    return '$runtimeType(null; ${super.toStringDetails()} ${value.toStringAsFixed(3)})';\n  return '$parent\\u27A9$runtimeType';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ProxyAnimation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The animation whose value this animation will proxy.<\/p>\n<p>This value is mutable. When mutated, the listeners on the proxy animation\nwill be transparently updated to be listening to the new parent animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get parent =&gt; _parent;<\/code><\/pre>\n        ",
                    "href": "animation\/ProxyAnimation\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "animation.Animation<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status =&gt; _parent != null ? _parent.status : _status;<\/code><\/pre>\n        ",
                    "href": "animation\/ProxyAnimation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value =&gt; _parent != null ? _parent.value : _value;<\/code><\/pre>\n        ",
                    "href": "animation\/ProxyAnimation\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ProxyAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interpolation between two rectangles.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;Rect&gt;<\/a> to use\n<a href=\"animation\/RectTween\/lerp.html\">Rect.lerp<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/RectTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.RectTween",
            "shortname": "RectTween",
            "extends": [
                "dart:ui.Rect",
                "animation.Tween",
                "dart:ui.Rect",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties may be null; the null value\nis treated as an empty rect at the top left corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RectTween({ Rect begin, Rect end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
                    "href": "animation\/RectTween\/RectTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RectTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.RectTween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Rect"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Rect"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect lerp(double t) =&gt; Rect.lerp(begin, end, t);<\/code><\/pre>\n    ",
                    "href": "animation\/RectTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "dart:ui.Rect",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.RectTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An animation that is the reverse of another animation.<\/p>\n<p>If the parent animation is running forward from 0.0 to 1.0, this animation\nis running in reverse from 1.0 to 0.0.<\/p>\n<p>Using a <a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a> is different from simply using a <a href=\"animation\/Tween-class.html\">Tween<\/a> with a\nbegin of 1.0 and an end of 0.0 because the tween does not change the status\nor direction of the animation.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Curve\/flipped.html\">Curve.flipped<\/a> and <a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a>, which provide a similar effect but on\n<a href=\"animation\/Curve-class.html\">Curve<\/a>s.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, which can take separate curves for when the animation\nis going forward than for when it is going in reverse.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "animation\/ReverseAnimation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ReverseAnimation",
            "shortname": "ReverseAnimation",
            "extends": [
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a reverse animation.<\/p>\n<p>The parent argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ReverseAnimation(this.parent)\n  : assert(parent != null);<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/ReverseAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ReverseAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": [
                        {
                            "name": "parent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/ReverseAnimation\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener) {\n  didRegisterListener();\n  parent.addListener(listener);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/addListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of listeners changes from zero to one.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartListening() {\n  parent.addStatusListener(_statusChangeHandler);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/didStartListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStartListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Called when the number of listeners changes from one to zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopListening() {\n  parent.removeStatusListener(_statusChangeHandler);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/didStopListening.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopListening",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/ReverseAnimation\/addListener.html\">addListener<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener) {\n  parent.removeListener(listener);\n  didUnregisterListener();\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/removeListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": [
                        {
                            "name": "listener",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$parent\\u27AA$runtimeType';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseAnimation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The animation whose value and direction this animation is reversing.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; parent\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/ReverseAnimation\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "animation.Animation<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status =&gt; _reverseStatus(parent.status);<\/code><\/pre>\n        ",
                    "href": "animation\/ReverseAnimation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value =&gt; 1.0 - parent.value;<\/code><\/pre>\n        ",
                    "href": "animation\/ReverseAnimation\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ReverseAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"animation\/Tween-class.html\">Tween<\/a> that evaluates its <a href=\"animation\/ReverseTween\/parent.html\">parent<\/a> in reverse.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/ReverseTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.ReverseTween",
            "shortname": "ReverseTween",
            "extends": [
                "animation.Tween",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Construct a <a href=\"animation\/Tween-class.html\">Tween<\/a> that evaluates its <code>parent<\/code> in reverse.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ReverseTween(this.parent)\n  : assert(parent != null),\n    super(begin: parent.end, end: parent.begin);<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseTween\/ReverseTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ReverseTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.ReverseTween",
                    "params": [
                        {
                            "name": "parent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Tween"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n<p>The default implementation of this method uses the <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators on <code>T<\/code>. The <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> properties must therefore be\nnon-null by the time this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT lerp(double t) =&gt; parent.lerp(1.0 - t);<\/code><\/pre>\n    ",
                    "href": "animation\/ReverseTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.ReverseTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>This tween's value is the same as the parent's value evaluated in reverse.<\/p>\n<p>This tween's <a href=\"animation\/Tween\/begin.html\">begin<\/a> is the parent's <a href=\"animation\/Tween\/end.html\">end<\/a> and its <a href=\"animation\/Tween\/end.html\">end<\/a> is the parent's\n<a href=\"animation\/Tween\/begin.html\">begin<\/a>. The <a href=\"animation\/ReverseTween\/lerp.html\">lerp<\/a> method returns <code>parent.lerp(1.0 - t)<\/code> and its\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a> method is similar.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Tween&lt;T&gt; parent\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/ReverseTween\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "animation.Tween",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.ReverseTween",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A sawtooth curve that repeats a given number of times over the unit interval.<\/p>\n<p>The curve rises linearly from 0.0 to 1.0 and then falls discontinuously back\nto 0.0 each iteration.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_sawtooth.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/SawTooth-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.SawTooth",
            "shortname": "SawTooth",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a sawtooth curve.<\/p>\n<p>The <code>count<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SawTooth(this.count) : assert(count != null);<\/code><\/pre>\n    ",
                    "href": "animation\/SawTooth\/SawTooth.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SawTooth",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.SawTooth",
                    "params": [
                        {
                            "name": "count",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($count)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/SawTooth\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.SawTooth",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  t *= count;\n  return t - t.truncateToDouble();\n}<\/code><\/pre>\n    ",
                    "href": "animation\/SawTooth\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.SawTooth",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The number of repetitions of the sawtooth pattern in the unit interval.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int count\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/SawTooth\/count.html",
                    "name": "count",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.SawTooth",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interpolation between two sizes.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;Size&gt;<\/a> to use\n<a href=\"animation\/SizeTween\/lerp.html\">Size.lerp<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/SizeTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.SizeTween",
            "shortname": "SizeTween",
            "extends": [
                "dart:ui.Size",
                "animation.Tween",
                "dart:ui.Size",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties may be null; the null value\nis treated as an empty size.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SizeTween({ Size begin, Size end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
                    "href": "animation\/SizeTween\/SizeTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SizeTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.SizeTween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Size"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Size"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize lerp(double t) =&gt; Size.lerp(begin, end, t);<\/code><\/pre>\n    ",
                    "href": "animation\/SizeTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "dart:ui.Size",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.SizeTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An interpolation between two integers that floors.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;int&gt;<\/a> to be\nappropriate for integers by interpolating between the given begin\nand end values and then using <a href=\"dart-core\/double\/floor.html\">double.floor<\/a> to return the current\ninteger component, dropping the fractional component.<\/p>\n<p>This results in a value that is never greater than the equivalent\nvalue from a linear double interpolation. Compare to <a href=\"animation\/IntTween-class.html\">IntTween<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/StepTween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.StepTween",
            "shortname": "StepTween",
            "extends": [
                "dart:core.int",
                "animation.Tween",
                "dart:core.int",
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an <a href=\"dart-core\/int-class.html\">int<\/a> tween that floors.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties must be non-null before the tween is\nfirst used, but the arguments can be null if the values are going to be\nfilled in later.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StepTween({ int begin, int end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
                    "href": "animation\/StepTween\/StepTween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StepTween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.StepTween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n<p>The default implementation of this method uses the <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators on <code>T<\/code>. The <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> properties must therefore be\nnon-null by the time this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lerp(double t) =&gt; (begin + (end - begin) * t).floor();<\/code><\/pre>\n    ",
                    "href": "animation\/StepTween\/lerp.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.StepTween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A curve that is 0.0 until it hits the threshold, then it jumps to 1.0.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_threshold.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/Threshold-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Threshold",
            "shortname": "Threshold",
            "extends": [
                "animation.Curve",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a threshold curve.<\/p>\n<p>The <code>threshold<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Threshold(this.threshold) : assert(threshold != null);<\/code><\/pre>\n    ",
                    "href": "animation\/Threshold\/Threshold.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Threshold",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Threshold",
                    "params": [
                        {
                            "name": "threshold",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  assert(threshold &gt;= 0.0);\n  assert(threshold &lt;= 1.0);\n  return t &lt; threshold ? 0.0 : 1.0;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Threshold\/transformInternal.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "transformInternal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Threshold",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The value before which the curve is 0.0 and after which the curve is 1.0.<\/p>\n<p>When t is exactly <a href=\"animation\/Threshold\/threshold.html\">threshold<\/a>, the curve has the value 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double threshold\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/Threshold\/threshold.html",
                    "name": "threshold",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.Threshold",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>This animation starts by proxying one animation, but when the value of that\nanimation crosses the value of the second (either because the second is\ngoing in the opposite direction, or because the one overtakes the other),\nthe animation hops over to proxying the second animation.<\/p>\n<p>When the <a href=\"animation\/TrainHoppingAnimation-class.html\">TrainHoppingAnimation<\/a> starts proxying the second animation\ninstead of the first, the <a href=\"animation\/TrainHoppingAnimation\/onSwitchedTrain.html\">onSwitchedTrain<\/a> callback is called.<\/p>\n<p>If the two animations start at the same value, then the\n<a href=\"animation\/TrainHoppingAnimation-class.html\">TrainHoppingAnimation<\/a> immediately hops to the second animation, and the\n<a href=\"animation\/TrainHoppingAnimation\/onSwitchedTrain.html\">onSwitchedTrain<\/a> callback is not called. If only one animation is provided\n(i.e. if the second is null), then the <a href=\"animation\/TrainHoppingAnimation-class.html\">TrainHoppingAnimation<\/a> just proxies\nthe first animation.<\/p>\n<p>Since this object must track the two animations even when it has no\nlisteners of its own, instead of shutting down when all its listeners are\nremoved, it exposes a <a href=\"animation\/TrainHoppingAnimation\/dispose.html\">dispose()<\/a> method. Call this method to shut this\nobject down.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/TrainHoppingAnimation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.TrainHoppingAnimation",
            "shortname": "TrainHoppingAnimation",
            "extends": [
                "dart:core.double",
                "animation.Animation",
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when this animation switches to be driven by the second animation.<\/p>\n<p>This is not called if the two animations provided to the constructor have\nthe same value at the time of the call to the constructor. In that case,\nthe second animation is used from the start, and the first is ignored.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback onSwitchedTrain\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/TrainHoppingAnimation\/onSwitchedTrain.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onSwitchedTrain",
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a train-hopping animation.<\/p>\n<p>The current train argument must not be null but the next train argument\ncan be null. If the next train is null, then this object will just proxy\nthe first animation and never hop.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TrainHoppingAnimation(this._currentTrain, this._nextTrain, { this.onSwitchedTrain })\n    : assert(_currentTrain != null) {\n  if (_nextTrain != null) {\n    if (_currentTrain.value == _nextTrain.value) {\n      _currentTrain = _nextTrain;\n      _nextTrain = null;\n    } else if (_currentTrain.value &gt; _nextTrain.value) {\n      _mode = _TrainHoppingMode.maximize;\n    } else {\n      assert(_currentTrain.value &lt; _nextTrain.value);\n      _mode = _TrainHoppingMode.minimize;\n    }\n  }\n  _currentTrain.addStatusListener(_statusChangeHandler);\n  _currentTrain.addListener(_valueChangeHandler);\n  _nextTrain?.addListener(_valueChangeHandler);\n  assert(_mode != null || _nextTrain == null);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/TrainHoppingAnimation\/TrainHoppingAnimation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TrainHoppingAnimation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": [
                        {
                            "name": "_currentTrain",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "_nextTrain",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "onSwitchedTrain",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Frees all the resources used by this performance.\nAfter this is called, this object is no longer usable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  assert(_currentTrain != null);\n  _currentTrain.removeStatusListener(_statusChangeHandler);\n  _currentTrain.removeListener(_valueChangeHandler);\n  _currentTrain = null;\n  _nextTrain?.removeListener(_valueChangeHandler);\n  _nextTrain = null;\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "animation\/TrainHoppingAnimation\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_nextTrain != null)\n    return '$currentTrain\\u27A9$runtimeType(next: $_nextTrain)';\n  return '$currentTrain\\u27A9$runtimeType(no next)';\n}<\/code><\/pre>\n    ",
                    "href": "animation\/TrainHoppingAnimation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The animation that is currently driving this animation.<\/p>\n<p>The identity of this object will change from the first animation to the\nsecond animation when <a href=\"animation\/TrainHoppingAnimation\/onSwitchedTrain.html\">onSwitchedTrain<\/a> is called.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get currentTrain =&gt; _currentTrain;<\/code><\/pre>\n        ",
                    "href": "animation\/TrainHoppingAnimation\/currentTrain.html",
                    "name": "currentTrain",
                    "isDeprecated": false,
                    "type": "animation.Animation<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current status of this animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status =&gt; _currentTrain.status;<\/code><\/pre>\n        ",
                    "href": "animation\/TrainHoppingAnimation\/status.html",
                    "name": "status",
                    "isDeprecated": false,
                    "type": "animation.AnimationStatus",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                },
                {
                    "desc": "<p>The current value of the animation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value =&gt; _currentTrain.value;<\/code><\/pre>\n        ",
                    "href": "animation\/TrainHoppingAnimation\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.TrainHoppingAnimation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A linear interpolation between a beginning and ending value.<\/p>\n<p><a href=\"animation\/Tween-class.html\">Tween<\/a> is useful if you want to interpolate across a range.<\/p>\n<p>To use a <a href=\"animation\/Tween-class.html\">Tween<\/a> object with an animation, call the <a href=\"animation\/Tween-class.html\">Tween<\/a> object's\n<a href=\"animation\/Animatable\/animate.html\">animate<\/a> method and pass it the <a href=\"animation\/Animation-class.html\">Animation<\/a> object that you want to\nmodify.<\/p>\n<p>You can chain <a href=\"animation\/Tween-class.html\">Tween<\/a> objects together using the <a href=\"animation\/Animatable\/chain.html\">chain<\/a> method, so that a\nsingle <a href=\"animation\/Animation-class.html\">Animation<\/a> object is configured by multiple <a href=\"animation\/Tween-class.html\">Tween<\/a> objects called\nin succession. This is different than calling the <a href=\"animation\/Animatable\/animate.html\">animate<\/a> method twice,\nwhich results in two separate <a href=\"animation\/Animation-class.html\">Animation<\/a> objects, each configured with a\nsingle <a href=\"animation\/Tween-class.html\">Tween<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nSuppose <code>_controller<\/code> is an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, and we want to create an\n<a href=\"animation\/Animation-class.html\">Animation&lt;Offset&gt;<\/a> that is controlled by that controller, and save it in\n<code>_animation<\/code>. Here are two possible ways of expressing this:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">_animation = _controller.drive(\n  Tween&lt;Offset&gt;(\n    begin: const Offset(100.0, 50.0),\n    end: const Offset(200.0, 300.0),\n  ),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">_animation = Tween&lt;Offset&gt;(\n  begin: const Offset(100.0, 50.0),\n  end: const Offset(200.0, 300.0),\n).animate(_controller);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>In both cases, the <code>_animation<\/code> variable holds an object that, over the\nlifetime of the <code>_controller<\/code>'s animation, returns a value\n(<code>_animation.value<\/code>) that depicts a point along the line between the two\noffsets above. If we used a <a href=\"material\/MaterialPointArcTween-class.html\">MaterialPointArcTween<\/a> instead of a\n<a href=\"animation\/Tween-class.html\">Tween&lt;Offset&gt;<\/a> in the code above, the points would follow a pleasing curve\ninstead of a straight line, with no other changes necessary.<\/p>\n<h2 id=\"performance-optimizations\">Performance optimizations<\/h2>\n<p>Tweens are mutable; specifically, their <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> values can be\nchanged at runtime. An object created with <a href=\"animation\/Animation\/drive.html\">Animation.drive<\/a> using a <a href=\"animation\/Tween-class.html\">Tween<\/a>\nwill immediately honor changes to that underlying <a href=\"animation\/Tween-class.html\">Tween<\/a> (though the\nlisteners will only be triggered if the <a href=\"animation\/Animation-class.html\">Animation<\/a> is actively animating).\nThis can be used to change an animation on the fly without having to\nrecreate all the objects in the chain from the <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> to the\nfinal <a href=\"animation\/Tween-class.html\">Tween<\/a>.<\/p>\n<p>If a <a href=\"animation\/Tween-class.html\">Tween<\/a>'s values are never changed, however, a further optimization can\nbe applied: the object can be stored in a <code>static final<\/code> variable, so that\nthe exact same instance is used whenever the <a href=\"animation\/Tween-class.html\">Tween<\/a> is needed. This is\npreferable to creating an identical <a href=\"animation\/Tween-class.html\">Tween<\/a> afresh each time a <a href=\"widgets\/State\/build.html\">State.build<\/a>\nmethod is called, for example.<\/p>\n<h2 id=\"types-with-special-considerations\">Types with special considerations<\/h2>\n<p>Classes with <a href=\"animation\/Tween\/lerp.html\">lerp<\/a> static methods typically have corresponding dedicated\n<a href=\"animation\/Tween-class.html\">Tween<\/a> subclasses that call that method. For example, <a href=\"animation\/ColorTween-class.html\">ColorTween<\/a> uses\n<a href=\"animation\/Tween\/lerp.html\">Color.lerp<\/a> to implement the <a href=\"animation\/Tween\/lerp.html\">ColorTween.lerp<\/a> method.<\/p>\n<p>Types that define <code>+<\/code> and <code>-<\/code> operators to combine values (<code>T + T \u2192 T<\/code> and\n<code>T - T \u2192 T<\/code>) and an <code>*<\/code> operator to scale by multiplying with a double (<code>T *\ndouble \u2192 T<\/code>) can be directly used with <code>Tween&lt;T&gt;<\/code>.<\/p>\n<p>This does not extend to any type with <code>+<\/code>, <code>-<\/code>, and <code>*<\/code> operators. In\nparticular, <a href=\"dart-core\/int-class.html\">int<\/a> does not satisfy this precise contract (<code>int * double<\/code>\nactually returns <a href=\"dart-core\/num-class.html\">num<\/a>, not <a href=\"dart-core\/int-class.html\">int<\/a>). There are therefore two specific classes\nthat can be used to interpolate integers:<\/p>\n<ul>\n<li>\n<a href=\"animation\/IntTween-class.html\">IntTween<\/a>, which is an approximation of a linear interpolation (using\n<a href=\"dart-core\/double\/round.html\">double.round<\/a>).<\/li>\n<li>\n<a href=\"animation\/StepTween-class.html\">StepTween<\/a>, which uses <a href=\"dart-core\/double\/floor.html\">double.floor<\/a> to ensure that the result is\nnever greater than it would be using if a <code>Tween&lt;double&gt;<\/code>.<\/li>\n<\/ul>\n<p>The relevant operators on <a href=\"dart-ui\/Size-class.html\">Size<\/a> also don't fulfill this contract, so\n<a href=\"animation\/SizeTween-class.html\">SizeTween<\/a> uses <a href=\"animation\/Tween\/lerp.html\">Size.lerp<\/a>.<\/p>\n<p>In addition, some of the types that <em>do<\/em> have suitable <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators still have dedicated <a href=\"animation\/Tween-class.html\">Tween<\/a> subclasses that perform the\ninterpolation in a more specialized manner. One such class is\n<a href=\"material\/MaterialPointArcTween-class.html\">MaterialPointArcTween<\/a>, which is mentioned above. The <a href=\"rendering\/AlignmentTween-class.html\">AlignmentTween<\/a>, and\n<a href=\"rendering\/AlignmentGeometryTween-class.html\">AlignmentGeometryTween<\/a>, and <a href=\"rendering\/FractionalOffsetTween-class.html\">FractionalOffsetTween<\/a> are another group of\n<a href=\"animation\/Tween-class.html\">Tween<\/a>s that use dedicated <code>lerp<\/code> methods instead of merely relying on the\noperators (in particular, this allows them to handle null values in a more\nuseful manner).<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/Tween-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.Tween",
            "shortname": "Tween",
            "extends": [
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.ColorTween",
                "animation.ConstantTween",
                "animation.IntTween",
                "animation.RectTween",
                "animation.ReverseTween",
                "animation.SizeTween",
                "animation.StepTween",
                "material.MaterialPointArcTween",
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween",
                "material.ShapeBorderTween",
                "material.ThemeDataTween",
                "rendering.AlignmentGeometryTween",
                "rendering.AlignmentTween",
                "rendering.FractionalOffsetTween",
                "widgets.BorderRadiusTween",
                "widgets.BorderTween",
                "widgets.BoxConstraintsTween",
                "widgets.DecorationTween",
                "widgets.EdgeInsetsGeometryTween",
                "widgets.EdgeInsetsTween",
                "widgets.Matrix4Tween",
                "widgets.RelativeRectTween",
                "widgets.TextStyleTween"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties must be non-null before the tween is\nfirst used, but the arguments can be null if the values are going to be\nfilled in later.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Tween({ this.begin, this.end });<\/code><\/pre>\n    ",
                    "href": "animation\/Tween\/Tween.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Tween",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.Tween",
                    "params": [
                        {
                            "name": "begin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n<p>The default implementation of this method uses the <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators on <code>T<\/code>. The <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> properties must therefore be\nnon-null by the time this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT lerp(double t) {\n  assert(begin != null);\n  assert(end != null);\n  return begin + (end - begin) * t;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Tween\/lerp.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "lerp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Tween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($begin \\u2192 $end)';<\/code><\/pre>\n    ",
                    "href": "animation\/Tween\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Tween",
                    "params": []
                },
                {
                    "desc": "<p>Returns the interpolated value for the current value of the given animation.<\/p>\n<p>This method returns <code>begin<\/code> and <code>end<\/code> when the animation values are 0.0 or\n1.0, respectively.<\/p>\n<p>This function is implemented by deferring to <a href=\"animation\/Tween\/lerp.html\">lerp<\/a>. Subclasses that want\nto provide custom behavior should override <a href=\"animation\/Tween\/lerp.html\">lerp<\/a>, not <a href=\"animation\/Tween\/transform.html\">transform<\/a> (nor\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>).<\/p>\n<p>See the constructor for details about whether the <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a>\nproperties may be null when this is called. It varies from subclass to\nsubclass.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT transform(double t) {\n  if (t == 0.0)\n    return begin;\n  if (t == 1.0)\n    return end;\n  return lerp(t);\n}<\/code><\/pre>\n    ",
                    "href": "animation\/Tween\/transform.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.Tween",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Enables creating an <a href=\"animation\/Animation-class.html\">Animation<\/a> whose value is defined by a\nsequence of <a href=\"animation\/Tween-class.html\">Tween<\/a>s.<\/p>\n<p>Each <a href=\"animation\/TweenSequenceItem-class.html\">TweenSequenceItem<\/a> has a weight that defines its percentage\nof the animation's duration. Each tween defines the animation's value\nduring the interval indicated by its weight.<\/p>\n<p>For example, to define an animation that uses an easing curve to\ninterpolate between 5.0 and 10.0 during the first 40% of the\nanimation, remain at 10.0 for the next 20%, and then return to\n10.0 for the final 40%:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = TweenSequence(\n  &lt;TweenSequenceItem&lt;double&gt;&gt;[\n    TweenSequenceItem&lt;double&gt;(\n      tween: Tween&lt;double&gt;(begin: 5.0, end: 10.0)\n        .chain(CurveTween(curve: Curves.ease)),\n      weight: 40.0,\n    ),\n    TweenSequenceItem&lt;double&gt;(\n      tween: ConstantTween&lt;double&gt;(10.0),\n      weight: 20.0,\n    ),\n    TweenSequenceItem&lt;double&gt;(\n      tween: Tween&lt;double&gt;(begin: 10.0, end: 5.0)\n        .chain(CurveTween(curve: Curves.ease)),\n      weight: 40.0,\n    ),\n  ],\n).animate(myAnimationController);\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/TweenSequence-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.TweenSequence",
            "shortname": "TweenSequence",
            "extends": [
                "animation.Animatable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Construct a TweenSequence.<\/p>\n<p>The <code>items<\/code> parameter must be a list of one or more\n<a href=\"animation\/TweenSequenceItem-class.html\">TweenSequenceItem<\/a>s.<\/p>\n<p>There's a small cost associated with building a <code>TweenSequence<\/code> so\nit's best to reuse one, rather than rebuilding it on every frame,\nwhen that's possible.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TweenSequence(List&lt;TweenSequenceItem&lt;T&gt;&gt; items)\n    : assert(items != null),\n      assert(items.isNotEmpty) {\n  _items.addAll(items);\n\n  double totalWeight = 0.0;\n  for (TweenSequenceItem&lt;T&gt; item in _items)\n    totalWeight += item.weight;\n  assert(totalWeight &gt; 0.0);\n\n  double start = 0.0;\n  for (int i = 0; i &lt; _items.length; i += 1) {\n    final double end = i == _items.length - 1 ? 1.0 : start + _items[i].weight \/ totalWeight;\n    _intervals.add(_Interval(start, end));\n    start = end;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "animation\/TweenSequence\/TweenSequence.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TweenSequence",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.TweenSequence",
                    "params": [
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<animation.TweenSequenceItem>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TweenSequence(${_items.length} items)';<\/code><\/pre>\n    ",
                    "href": "animation\/TweenSequence\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.TweenSequence",
                    "params": []
                },
                {
                    "desc": "<p>Returns the value of the object at point <code>t<\/code>.<\/p>\n<p>The value of <code>t<\/code> is nominally a fraction in the range 0.0 to 1.0, though\nin practice it may extend outside this range.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/evaluate.html\">evaluate<\/a>, which is a shorthand for applying <a href=\"animation\/TweenSequence\/transform.html\">transform<\/a> to the value\nof an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"animation\/TweenSequence\/transform.html\">Curve.transform<\/a>, a similar method for easing curves.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT transform(double t) {\n  assert(t &gt;= 0.0 &amp;&amp; t &lt;= 1.0);\n  if (t == 1.0)\n    return _evaluateAt(t, _items.length - 1);\n  for (int index = 0; index &lt; _items.length; index++) {\n    if (_intervals[index].contains(t))\n      return _evaluateAt(t, index);\n  }\n  \/\/ Should be unreachable.\n  assert(false, 'TweenSequence.evaluate() could not find a interval for $t');\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "animation\/TweenSequence\/transform.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "transform",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "animation.TweenSequence",
                    "params": [
                        {
                            "name": "t",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A simple holder for one element of a <a href=\"animation\/TweenSequence-class.html\">TweenSequence<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "animation\/TweenSequenceItem-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.TweenSequenceItem",
            "shortname": "TweenSequenceItem",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Construct a TweenSequenceItem.<\/p>\n<p>The <code>tween<\/code> must not be null and <code>weight<\/code> must be greater than 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TweenSequenceItem({\n  @required this.tween,\n  @required this.weight,\n}) : assert(tween != null),\n     assert(weight != null),\n     assert(weight &gt; 0.0);<\/code><\/pre>\n    ",
                    "href": "animation\/TweenSequenceItem\/TweenSequenceItem.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TweenSequenceItem",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "animation.TweenSequenceItem",
                    "params": [
                        {
                            "name": "tween",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animatable"
                        },
                        {
                            "name": "weight",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Defines the value of the <a href=\"animation\/TweenSequence-class.html\">TweenSequence<\/a> for the interval within the\nanimation's duration indicated by <a href=\"animation\/TweenSequenceItem\/weight.html\">weight<\/a> and this item's position\nin the list of items.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe value of this item can be \"curved\" by chaining it to a <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>.\nFor example to create a tween that eases from 0.0 to 10.0:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Tween&lt;double&gt;(begin: 0.0, end: 10.0)\n  .chain(CurveTween(curve: Curves.ease))<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animatable&lt;T&gt; tween\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/TweenSequenceItem\/tween.html",
                    "name": "tween",
                    "isDeprecated": false,
                    "type": "animation.Animatable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.TweenSequenceItem",
                    "params": []
                },
                {
                    "desc": "<p>An arbitrary value that indicates the relative percentage of a\n<a href=\"animation\/TweenSequence-class.html\">TweenSequence<\/a> animation's duration when <a href=\"animation\/TweenSequenceItem\/tween.html\">tween<\/a> will be used.<\/p>\n<p>The percentage for an individual item is the item's weight divided\nby the sum of all of the items' weights.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double weight\n\n<\/code><\/pre>\n        ",
                    "href": "animation\/TweenSequenceItem\/weight.html",
                    "name": "weight",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "animation.TweenSequenceItem",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [
        {
            "desc": "<p>A mixin that replaces the <a href=\"animation\/AnimationEagerListenerMixin\/didRegisterListener.html\">didRegisterListener<\/a>\/<a href=\"animation\/AnimationEagerListenerMixin\/didUnregisterListener.html\">didUnregisterListener<\/a> contract\nwith a dispose contract.<\/p>\n<p>This mixin provides implementations of <a href=\"animation\/AnimationEagerListenerMixin\/didRegisterListener.html\">didRegisterListener<\/a> and <a href=\"animation\/AnimationEagerListenerMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>,\nand therefore can be used in conjunction with mixins that require these methods,\n<a href=\"animation\/AnimationLocalListenersMixin-mixin.html\">AnimationLocalListenersMixin<\/a> and <a href=\"animation\/AnimationLocalStatusListenersMixin-mixin.html\">AnimationLocalStatusListenersMixin<\/a>.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "animation\/AnimationEagerListenerMixin-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationEagerListenerMixin",
            "shortname": "AnimationEagerListenerMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        },
        {
            "desc": "<p>A mixin that helps listen to another object only when this object has registered listeners.<\/p>\n<p>This mixin provides implementations of <a href=\"animation\/AnimationLazyListenerMixin\/didRegisterListener.html\">didRegisterListener<\/a> and <a href=\"animation\/AnimationLazyListenerMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>,\nand therefore can be used in conjunction with mixins that require these methods,\n<a href=\"animation\/AnimationLocalListenersMixin-mixin.html\">AnimationLocalListenersMixin<\/a> and <a href=\"animation\/AnimationLocalStatusListenersMixin-mixin.html\">AnimationLocalStatusListenersMixin<\/a>.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "animation\/AnimationLazyListenerMixin-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationLazyListenerMixin",
            "shortname": "AnimationLazyListenerMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        },
        {
            "desc": "<p>A mixin that implements the <a href=\"animation\/AnimationLocalListenersMixin\/addListener.html\">addListener<\/a>\/<a href=\"animation\/AnimationLocalListenersMixin\/removeListener.html\">removeListener<\/a> protocol and notifies\nall the registered listeners when <a href=\"animation\/AnimationLocalListenersMixin\/notifyListeners.html\">notifyListeners<\/a> is called.<\/p>\n<p>This mixin requires that the mixing class provide methods <a href=\"animation\/AnimationLocalListenersMixin\/didRegisterListener.html\">didRegisterListener<\/a>\nand <a href=\"animation\/AnimationLocalListenersMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>. Implementations of these methods can be obtained\nby mixing in another mixin from this library, such as <a href=\"animation\/AnimationLazyListenerMixin-mixin.html\">AnimationLazyListenerMixin<\/a>.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "animation\/AnimationLocalListenersMixin-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationLocalListenersMixin",
            "shortname": "AnimationLocalListenersMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        },
        {
            "desc": "<p>A mixin that implements the addStatusListener\/removeStatusListener protocol\nand notifies all the registered listeners when notifyStatusListeners is\ncalled.<\/p>\n<p>This mixin requires that the mixing class provide methods <a href=\"animation\/AnimationLocalStatusListenersMixin\/didRegisterListener.html\">didRegisterListener<\/a>\nand <a href=\"animation\/AnimationLocalStatusListenersMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>. Implementations of these methods can be obtained\nby mixing in another mixin from this library, such as <a href=\"animation\/AnimationLazyListenerMixin-mixin.html\">AnimationLazyListenerMixin<\/a>.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "animation\/AnimationLocalStatusListenersMixin-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationLocalStatusListenersMixin",
            "shortname": "AnimationLocalStatusListenersMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        },
        {
            "desc": "<p>Implements most of the <a href=\"animation\/Animation-class.html\">Animation<\/a> interface by deferring its behavior to a\ngiven <a href=\"animation\/AnimationWithParentMixin\/parent.html\">parent<\/a> Animation.<\/p>\n<p>To implement an <a href=\"animation\/Animation-class.html\">Animation<\/a> that is driven by a parent, it is only necessary\nto mix in this class, implement <a href=\"animation\/AnimationWithParentMixin\/parent.html\">parent<\/a>, and implement <code>T get value<\/code>.<\/p>\n<p>To define a mapping from values in the range 0..1, consider subclassing\n<a href=\"animation\/Tween-class.html\">Tween<\/a> instead.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "animation\/AnimationWithParentMixin-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationWithParentMixin",
            "shortname": "AnimationWithParentMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        }
    ],
    "enum": [
        {
            "desc": "<p>Configures how an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> behaves when animations are disabled.<\/p>\n<p>When <a href=\"dart-ui\/AccessibilityFeatures\/disableAnimations.html\">AccessibilityFeatures.disableAnimations<\/a> is true, the device is asking\nflutter to reduce or disable animations as much as possible. To honor this,\nwe reduce the duration and the corresponding number of frames for animations.\nThis enum is used to allow certain <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s to opt out of this\nbehavior.<\/p>\n<p>For example, the <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> which controls the physics simulation\nfor a scrollable list will have <a href=\"animation\/AnimationBehavior-class.html\">AnimationBehavior.preserve<\/a> so that when\na user attempts to scroll it does not jump to the end\/beginning too quickly.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "animation\/AnimationBehavior-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationBehavior",
            "shortname": "AnimationBehavior",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>The <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> will reduce its duration when\n<a href=\"dart-ui\/AccessibilityFeatures\/disableAnimations.html\">AccessibilityFeatures.disableAnimations<\/a> is true.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationBehavior(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "normal",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationBehavior",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">AnimationBehavior<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationBehavior",
                    "params": []
                },
                {
                    "desc": "\n          <p>The <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> will preserve its behavior.<\/p>\n<p>This is the default for repeating animations in order to prevent them from\nflashing rapidly on the screen if the widget does not take the\n<a href=\"dart-ui\/AccessibilityFeatures\/disableAnimations.html\">AccessibilityFeatures.disableAnimations<\/a> flag into account.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationBehavior(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "preserve",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationBehavior",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">AnimationBehavior<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationBehavior",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The status of an animation<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "animation\/AnimationStatus-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "animation",
            "name": "animation.AnimationStatus",
            "shortname": "AnimationStatus",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>The animation is stopped at the end<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationStatus(3)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "completed",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">AnimationStatus<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                },
                {
                    "desc": "\n          <p>The animation is stopped at the beginning<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationStatus(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "dismissed",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                },
                {
                    "desc": "\n          <p>The animation is running from beginning to end<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationStatus(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "forward",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                },
                {
                    "desc": "\n          <p>The animation is running backwards, from end to beginning<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const AnimationStatus(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "reverse",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">AnimationStatus<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "animation.AnimationStatus",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}