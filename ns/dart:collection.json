{
    "name": "dart:collection",
    "href": "dart-collection\/dart-collection-library.html",
    "cn": [
        {
            "name": "dart:collection.DoubleLinkedQueue",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "DoubleLinkedQueue",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueue() {\n  _sentinel = _DoubleLinkedQueueSentinel&lt;E&gt;(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  for (final E value in iterable) {\n    _sentinel._prepend(value);\n    _elementCount++;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addFirst",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/addFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _sentinel._append(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addLast",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/addLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:collection.Queue",
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-core\/Iterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;() =&gt; Queue.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _sentinel._nextLink = _sentinel;\n  _sentinel._previousLink = _sentinel;\n  _elementCount = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstEntry",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "<p>The entry object of the first element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the first element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/firstEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; firstEntry() {\n  return _sentinel.nextEntry();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEachEntry",
                    "type": "",
                    "desc": "<p>Calls <code>action<\/code> for each entry object of this double-linked queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nThis method iterates the entry objects from first to last and calls\n<code>action<\/code> with each object in turn.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a> and <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n<p>The <code>action<\/code> function can use methods on <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a> to\nremove the entry or it can insert elements before or after then entry.\nIf the current entry is removed, iteration continues with the entry that\nwas following the current entry when <code>action<\/code> was called. Any elements\ninserted after the current element before it is removed will not be\nvisited by the iteration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:collection.DoubleLinkedQueueEntry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "dart:collection.DoubleLinkedQueueEntry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/forEachEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachEntry(void action(DoubleLinkedQueueEntry&lt;E&gt; element)) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    _DoubleLinkedQueueElement&lt;E&gt; element = entry;\n    _DoubleLinkedQueueEntry&lt;E&gt; next = element._nextLink;\n    \/\/ Remember both entry and entry._nextLink.\n    \/\/ If someone calls `element.remove()` we continue from `next`.\n    \/\/ Otherwise we use the value of entry._nextLink which may have been\n    \/\/ updated.\n    action(element);\n    if (identical(this, entry._queue)) {\n      next = entry._nextLink;\n    } else if (!identical(this, next._queue)) {\n      throw ConcurrentModificationError(this);\n    }\n    entry = next;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "DoubleLinkedQueue.from",
                    "type": "",
                    "desc": "<p>Creates a double-linked queue containing all <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/DoubleLinkedQueue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Queue<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;SuperType&gt; superQueue = ...;\nQueue&lt;SubType&gt; subQueue =\n    new DoubleLinkedQueue&lt;SubType&gt;.from(superQueue.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory DoubleLinkedQueue.from(Iterable elements) {\n  Queue&lt;E&gt; list = DoubleLinkedQueue&lt;E&gt;();\n  for (final e in elements) {\n    list.addLast(e);\n  }\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastEntry",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "<p>The entry object of the last element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the last element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/lastEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; lastEntry() {\n  return _sentinel.previousEntry();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DoubleLinkedQueue.of",
                    "type": "",
                    "desc": "<p>Creates a double-linked queue from <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/DoubleLinkedQueue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory DoubleLinkedQueue.of(Iterable&lt;E&gt; elements) =&gt;\n    DoubleLinkedQueue&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "o",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object o) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    bool equals = (entry._element == o);\n    if (!identical(this, entry._queue)) {\n      \/\/ Entry must still be in the queue.\n      throw ConcurrentModificationError(this);\n    }\n    if (equals) {\n      entry._remove();\n      _elementCount--;\n      return true;\n    }\n    entry = entry._nextLink;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeFirst",
                    "type": "",
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/removeFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  _DoubleLinkedQueueEntry&lt;E&gt; firstEntry = _sentinel._nextLink;\n  E result = firstEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeLast",
                    "type": "",
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/removeLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  _DoubleLinkedQueueEntry&lt;E&gt; lastEntry = _sentinel._previousLink;\n  E result = lastEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filter(test, true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filter(test, false);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of (some of) the elements of <code>this<\/code>.<\/p>\n<p>Elements are represented by their own <code>toString<\/code> results.<\/p>\n<p>The default representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.<\/p>\n<p>If the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.<\/p>\n<p>The conversion may omit calling <code>toString<\/code> on some elements if they\nare known to not occur in the output, and it may stop iterating after\na hundred elements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  _DoubleLinkedQueueEntry&lt;E&gt; firstEntry = _sentinel._nextLink;\n  return firstEntry._element;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty {\n  return (identical(_sentinel._nextLink, _sentinel));\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">_DoubleLinkedQueueIterator&lt;E&gt; get iterator {\n  return _DoubleLinkedQueueIterator&lt;E&gt;(_sentinel);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  _DoubleLinkedQueueEntry&lt;E&gt; lastEntry = _sentinel._previousLink;\n  return lastEntry._element;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/DoubleLinkedQueue-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _elementCount;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueue",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueue\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  \/\/ Note that this throws correctly if the queue is empty\n  \/\/ because reading the element of the sentinel throws.\n  if (identical(_sentinel._nextLink, _sentinel._previousLink)) {\n    _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n    return entry._element;\n  }\n  throw IterableElementError.tooMany();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/DoubleLinkedQueue-class.html",
            "desc": "<p>A <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> implementation based on a double-linked list.<\/p>\n<p>Allows constant time add, remove-at-ends and peek operations.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DoubleLinkedQueue"
        },
        {
            "name": "dart:collection.DoubleLinkedQueueEntry",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "DoubleLinkedQueueEntry",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/DoubleLinkedQueueEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry(this.element);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "append",
                    "type": "",
                    "desc": "<p>Appends the given <code>e<\/code> as entry just after this entry.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/append.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void append(E e) {\n  DoubleLinkedQueueEntry&lt;E&gt;(e)._link(this, _nextLink);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "nextEntry",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "<p>Returns the next entry or <code>null<\/code> if there is none.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; nextEntry() =&gt; _nextLink;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "prepend",
                    "type": "",
                    "desc": "<p>Prepends the given <code>e<\/code> as entry just before this entry.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/prepend.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void prepend(E e) {\n  DoubleLinkedQueueEntry&lt;E&gt;(e)._link(_previousLink, this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "previousEntry",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "<p>Returns the previous entry or <code>null<\/code> if there is none.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; previousEntry() =&gt; _previousLink;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E remove() {\n  _unlink();\n  return element;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "element",
                    "type": "",
                    "types": [],
                    "desc": "<p>The element in the queue.<\/p>\n        ",
                    "memberOf": "dart:collection.DoubleLinkedQueueEntry",
                    "isConstant": false,
                    "href": "dart-collection\/DoubleLinkedQueueEntry\/element.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E element\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/DoubleLinkedQueueEntry-class.html",
            "desc": "<p>An entry in a doubly linked list. It contains a pointer to the next\nentry, the previous entry, and the boxed element.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DoubleLinkedQueueEntry"
        },
        {
            "name": "dart:collection.HasNextIterator",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "HasNextIterator",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.HasNextIterator",
                    "sig": "",
                    "params": [
                        {
                            "name": "_iterator",
                            "type": "dart:core.Iterator",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HasNextIterator\/HasNextIterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HasNextIterator(this._iterator);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "next",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.HasNextIterator",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/HasNextIterator\/next.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E next() {\n  \/\/ Call to hasNext is necessary to make sure we are positioned at the first\n  \/\/ element when we start iterating.\n  if (!hasNext) throw StateError(\"No more elements\");\n  assert(_state == _HAS_NEXT_AND_NEXT_IN_CURRENT);\n  E result = _iterator.current;\n  _move();\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "hasNext",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:collection.HasNextIterator",
                    "isConstant": false,
                    "href": "dart-collection\/HasNextIterator\/hasNext.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasNext {\n  if (_state == _NOT_MOVED_YET) _move();\n  return _state == _HAS_NEXT_AND_NEXT_IN_CURRENT;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/HasNextIterator-class.html",
            "desc": "<p>The <a href=\"dart-collection\/HasNextIterator-class.html\">HasNextIterator<\/a> class wraps an <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> and provides methods to\niterate over an object using <code>hasNext<\/code> and <code>next<\/code>.<\/p>\n<p>An <a href=\"dart-collection\/HasNextIterator-class.html\">HasNextIterator<\/a> does not implement the <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> interface.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HasNextIterator"
        },
        {
            "name": "dart:collection.HashMap",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "HashMap",
                    "type": "",
                    "desc": "<p>Creates an unordered hash-table based <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The created map is not ordered in any way. When iterating the keys or\nvalues, the iteration order is unspecified except that it will stay the\nsame as long as the map isn't changed.<\/p>\n<p>If <code>equals<\/code> is provided, it is used to compare the keys in the table with\nnew keys. If <code>equals<\/code> is omitted, the key's own <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> is used\ninstead.<\/p>\n<p>Similar, if <code>hashCode<\/code> is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> is used.<\/p>\n<p>If using methods like <a href=\"dart-core\/Map\/operator_get.html\">operator []<\/a>, <a href=\"dart-core\/Map\/remove.html\">remove<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> together\nwith a custom equality and hashcode, an extra <code>isValidKey<\/code> function\ncan be supplied. This function is called before calling <code>equals<\/code> or\n<code>hashCode<\/code> with an argument that may not be a <code>K<\/code> instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe <code>isValidKey<\/code> function defaults to just testing if the object is a\n<code>K<\/code> instance.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>new HashMap&lt;int,int&gt;(equals: (int a, int b) =&gt; (b - a) % 5 == 0,\n                     hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>This example map does not need an <code>isValidKey<\/code> function to be passed.\nThe default function accepts only <code>int<\/code> values, which can safely be\npassed to both the <code>equals<\/code> and <code>hashCode<\/code> functions.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all keys.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting map is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/HashMap\/HashMap.identity.html\">HashMap.identity<\/a>.<\/p>\n<p>The used <code>equals<\/code> and <code>hashCode<\/code> method should always be consistent,\nso that if <code>equals(a, b)<\/code> then <code>hashCode(a) == hashCode(b)<\/code>. The hash\nof an object, or what it compares equal to, should not change while the\nobject is a key in the map. If it does change, the result is\nunpredictable.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashMap(\n    {bool equals(K key1, K key2),\n    int hashCode(K key),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.from",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> that contains all key\/value pairs of <code>other<\/code>.<\/p>\n<p>The keys must all be instances of <code>K<\/code> and the values of <code>V<\/code>.\nThe <code>other<\/code> map itself can have any type.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashMap.from(Map other) {\n  Map&lt;K, V&gt; result = HashMap&lt;K, V&gt;();\n  other.forEach((k, v) {\n    result[k] = v;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.fromEntries",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> containing the entries of <code>entries<\/code>.<\/p>\n<p>Returns a new <code>HashMap&lt;K, V&gt;<\/code> where all entries of <code>entries<\/code>\nhave been added in iteration order.<\/p>\n<p>If multiple <code>entries<\/code> have the same key,\nlater occurrences overwrite the earlier ones.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.fromEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nfactory HashMap.fromEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) =&gt;\n    HashMap&lt;K, V&gt;()..addEntries(entries);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.fromIterable",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> where the keys and values are computed from the\n<code>iterable<\/code>.<\/p>\n<p>For each element of the <code>iterable<\/code> this constructor computes a key\/value\npair, by applying <code>key<\/code> and <code>value<\/code> respectively.<\/p>\n<p>The keys of the key\/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.<\/p>\n<p>If no values are specified for <code>key<\/code> and <code>value<\/code> the default is the\nidentity function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.fromIterable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashMap.fromIterable(Iterable iterable,\n    {K key(element), V value(element)}) {\n  Map&lt;K, V&gt; map = HashMap&lt;K, V&gt;();\n  MapBase._fillMapWithMappedIterable(map, iterable, key, value);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.fromIterables",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> associating the given <code>keys<\/code> to <code>values<\/code>.<\/p>\n<p>This constructor iterates over <code>keys<\/code> and <code>values<\/code> and maps each element\nof <code>keys<\/code> to the corresponding element of <code>values<\/code>.<\/p>\n<p>If <code>keys<\/code> contains the same object multiple times, the last occurrence\noverwrites the previous value.<\/p>\n<p>It is an error if the two <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>s don't have the same length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "keys",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "values",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.fromIterables.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashMap.fromIterables(Iterable&lt;K&gt; keys, Iterable&lt;V&gt; values) {\n  Map&lt;K, V&gt; map = HashMap&lt;K, V&gt;();\n  MapBase._fillMapWithIterables(map, keys, values);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.identity",
                    "type": "",
                    "desc": "<p>Creates an unordered identity-based map.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new HashMap&lt;K, V&gt;(equals: identical,\n                  hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.identity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashMap.identity();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashMap.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> that contains all key\/value pairs of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashMap\/HashMap.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashMap.of(Map&lt;K, V&gt; other) =&gt; HashMap&lt;K, V&gt;()..addAll(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/HashMap-class.html",
            "desc": "<p>A hash-table based implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The keys of a <code>HashMap<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the keys (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The map allows <code>null<\/code> as a key.<\/p>\n<p>Iterating the map's keys, values or entries (through <a href=\"dart-core\/Map\/forEach.html\">forEach<\/a>)\nmay happen in any order.\nThe iteration order only changes when the map is modified.\nValues are iterated in the same order as their associated keys,\nso iterating the <a href=\"dart-core\/Map\/keys.html\">keys<\/a> and <a href=\"dart-core\/Map\/values.html\">values<\/a> in parallel\nwill give matching key and value pairs.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HashMap"
        },
        {
            "name": "dart:collection.HashSet",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "HashSet",
                    "type": "",
                    "desc": "<p>Create a hash set using the provided <code>equals<\/code> as equality.<\/p>\n<p>The provided <code>equals<\/code> must define a stable equivalence relation, and\n<code>hashCode<\/code> must be consistent with <code>equals<\/code>. If the <code>equals<\/code> or <code>hashCode<\/code>\nmethods won't work on all objects, but only on some instances of E, the\n<code>isValidKey<\/code> predicate can be used to restrict the keys that the functions\nare applied to.\nAny key for which <code>isValidKey<\/code> returns false is automatically assumed\nto not be in the set when asking <code>contains<\/code>.<\/p>\n<p>If <code>equals<\/code> or <code>hashCode<\/code> are omitted, the set uses\nthe elements' intrinsic <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> and <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n<p>If the supplied <code>equals<\/code> or <code>hashCode<\/code> functions won't work on all <code>E<\/code>\nobjects, and the map will be used in a setting where a non-<code>E<\/code> object\nis passed to, e.g., <code>contains<\/code>, then the <code>isValidKey<\/code> function should\nalso be supplied.<\/p>\n<p>If <code>isValidKey<\/code> is omitted, it defaults to testing if the object is an\n<code>E<\/code> instance. That means that:<\/p>\n<pre class=\"language-dart\"><code>new HashSet&lt;int&gt;(equals: (int e1, int e2) =&gt; (e1 - e2) % 5 == 0,\n                 hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>does not need an <code>isValidKey<\/code> argument, because it defaults to only\naccepting <code>int<\/code> values which are accepted by both <code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all values.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting set is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/HashSet\/HashSet.identity.html\">HashSet.identity<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "e2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashSet\/HashSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashSet(\n    {bool equals(E e1, E e2),\n    int hashCode(E e),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashSet.from",
                    "type": "",
                    "desc": "<p>Create a hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a hash set as by <code>new HashSet&lt;E&gt;()<\/code> and adds all given <code>elements<\/code>\nto the set. The elements are added in order. If <code>elements<\/code> contains\ntwo entries that are equal, but not identical, then the first one is\nthe one in the resulting set.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Set<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;SuperType&gt; superSet = ...;\nSet&lt;SubType&gt; subSet =\n    new HashSet&lt;SubType&gt;.from(superSet.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashSet\/HashSet.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashSet.from(Iterable elements) {\n  HashSet&lt;E&gt; result = HashSet&lt;E&gt;();\n  for (final e in elements) {\n    result.add(e);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashSet.identity",
                    "type": "",
                    "desc": "<p>Creates an unordered identity-based set.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new HashSet&lt;E&gt;(equals: identical,\n               hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/HashSet\/HashSet.identity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashSet.identity();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HashSet.of",
                    "type": "",
                    "desc": "<p>Create a hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a hash set as by <code>new HashSet&lt;E&gt;()<\/code> and adds all given <code>elements<\/code>\nto the set. The elements are added in order. If <code>elements<\/code> contains\ntwo entries that are equal, but not identical, then the first one is\nthe one in the resulting set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.HashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/HashSet\/HashSet.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashSet.of(Iterable&lt;E&gt; elements) =&gt; HashSet&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is unspecified,\nbut consistent between changes to the set.<\/p>\n        ",
                    "memberOf": "dart:collection.HashSet",
                    "isConstant": false,
                    "href": "dart-collection\/HashSet\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "memberOf": "dart:collection.HashSet",
                    "isConstant": false,
                    "href": "dart-collection\/HashSet\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/HashSet-class.html",
            "desc": "<p>An unordered hash-table based <a href=\"dart-core\/Set-class.html\">Set<\/a> implementation.<\/p>\n<p>The elements of a <code>HashSet<\/code> must have consistent equality\nand hashCode implementations. This means that the equals operation\nmust define a stable equivalence relation on the elements (reflexive,\nsymmetric, transitive, and consistent over time), and that the hashCode\nmust consistent with equality, so that the same for objects that are\nconsidered equal.<\/p>\n<p>The set allows <code>null<\/code> as an element.<\/p>\n<p>Most simple operations on <code>HashSet<\/code> are done in (potentially amortized)\nconstant time: <a href=\"dart-core\/Set\/add.html\">add<\/a>, <a href=\"dart-core\/Set\/contains.html\">contains<\/a>, <a href=\"dart-core\/Set\/remove.html\">remove<\/a>, and <a href=\"dart-collection\/HashSet\/length.html\">length<\/a>, provided the hash\ncodes of objects are well distributed.<\/p>\n<p>The iteration order of the set is not specified and depends on\nthe hashcodes of the provided elements. However, the order is stable:\nmultiple iterations over the same set produce the same order, as long as\nthe set is not modified.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HashSet"
        },
        {
            "name": "dart:collection.IterableBase",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "IterableBase",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.IterableBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/IterableBase\/IterableBase.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IterableBase();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "iterableToFullString",
                    "type": "dart:core.String",
                    "desc": "<p>Converts an <code>Iterable<\/code> to a string.<\/p>\n<p>Converts each elements to a string, and separates the results by \", \".\nThen wraps the result in <code>leftDelimiter<\/code> and <code>rightDelimiter<\/code>.<\/p>\n<p>Unlike <a href=\"dart-collection\/IterableBase\/iterableToShortString.html\">iterableToShortString<\/a>, this conversion doesn't omit any\nelements or puts any limit on the size of the result.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>iterable<\/code> to a string again.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "leftDelimiter",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rightDelimiter",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableBase\/iterableToFullString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String iterableToFullString(Iterable iterable,\n    [String leftDelimiter = '(', String rightDelimiter = ')']) {\n  if (_isToStringVisiting(iterable)) {\n    return \"$leftDelimiter...$rightDelimiter\";\n  }\n  StringBuffer buffer = StringBuffer(leftDelimiter);\n  _toStringVisiting.add(iterable);\n  try {\n    buffer.writeAll(iterable, \", \");\n  } finally {\n    assert(identical(_toStringVisiting.last, iterable));\n    _toStringVisiting.removeLast();\n  }\n  buffer.write(rightDelimiter);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "iterableToShortString",
                    "type": "dart:core.String",
                    "desc": "<p>Convert an <code>Iterable<\/code> to a string like <a href=\"dart-core\/Iterable\/toString.html\">IterableBase.toString<\/a>.<\/p>\n<p>Allows using other delimiters than '(' and ')'.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>iterable<\/code> to a string again.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "leftDelimiter",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rightDelimiter",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableBase\/iterableToShortString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String iterableToShortString(Iterable iterable,\n    [String leftDelimiter = '(', String rightDelimiter = ')']) {\n  if (_isToStringVisiting(iterable)) {\n    if (leftDelimiter == \"(\" &amp;&amp; rightDelimiter == \")\") {\n      \/\/ Avoid creating a new string in the \"common\" case.\n      return \"(...)\";\n    }\n    return \"$leftDelimiter...$rightDelimiter\";\n  }\n  List&lt;String&gt; parts = &lt;String&gt;[];\n  _toStringVisiting.add(iterable);\n  try {\n    _iterablePartsToStrings(iterable, parts);\n  } finally {\n    assert(identical(_toStringVisiting.last, iterable));\n    _toStringVisiting.removeLast();\n  }\n  return (StringBuffer(leftDelimiter)\n        ..writeAll(parts, \", \")\n        ..write(rightDelimiter))\n      .toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.CombinedIterableView",
                "collection.IterableZip",
                "dart:ui.PathMetrics",
                "foundation.CachingIterable",
                "path.PathSet",
                "quiver.collection.AvlTreeSet",
                "quiver.collection.TreeSet",
                "quiver.core.Optional",
                "quiver.iterables.EnumerateIterable",
                "quiver.iterables.GeneratingIterable",
                "quiver.iterables.InfiniteIterable"
            ],
            "realImplementors": [
                "collection.CombinedIterableView",
                "collection.IterableZip",
                "dart:ui.PathMetrics",
                "foundation.CachingIterable",
                "path.PathSet",
                "quiver.collection.AvlTreeSet"
            ],
            "cn": [],
            "href": "dart-collection\/IterableBase-class.html",
            "desc": "<p>Base class for implementing <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>This class implements all methods of <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>, except <a href=\"dart-core\/Iterable\/iterator.html\">Iterable.iterator<\/a>,\nin terms of <code>iterator<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IterableBase"
        },
        {
            "name": "dart:collection.IterableMixin",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "IterableMixin",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/IterableMixin\/IterableMixin.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "any",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  for (E element in this) {\n    if (test(element)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cast",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-collection\/IterableMixin\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;R&gt; cast&lt;R&gt;() =&gt; Iterable.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  for (E e in this) {\n    if (e == element) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "elementAt",
                    "type": "",
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-collection\/IterableMixin\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/elementAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkNotNegative(index, \"index\");\n  int elementIndex = 0;\n  for (E element in this) {\n    if (index == elementIndex) return element;\n    elementIndex++;\n  }\n  throw RangeError.index(index, this, \"index\", null, elementIndex);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "every",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether every element of this iterable satisfies <a href=\"flutter_test\/test.html\">test<\/a>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <a href=\"flutter_test\/test.html\">test<\/a> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/every.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool f(E element)) {\n  for (E element in this) {\n    if (!f(element)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "expand",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/expand.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "firstWhere",
                    "type": "",
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/firstWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E value), {E orElse()}) {\n  for (E element in this) {\n    if (test(element)) return element;\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fold",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "initialValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "previousValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/fold.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  for (E element in this) value = combine(value, element);\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "followedBy",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/followedBy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) {\n  \/\/ Type workaround because IterableMixin&lt;E&gt; doesn't promote\n  \/\/ to EfficientLengthIterable&lt;E&gt;.\n  Iterable&lt;E&gt; self = this;\n  if (self is EfficientLengthIterable&lt;E&gt;) {\n    return FollowedByIterable&lt;E&gt;.firstEfficient(self, other);\n  }\n  return FollowedByIterable&lt;E&gt;(this, other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  for (E element in this) f(element);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "join",
                    "type": "dart:core.String",
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/IterableMixin\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/join.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) return \"\";\n  StringBuffer buffer = StringBuffer();\n  if (separator == null || separator == \"\") {\n    do {\n      buffer.write(\"${iterator.current}\");\n    } while (iterator.moveNext());\n  } else {\n    buffer.write(\"${iterator.current}\");\n    while (iterator.moveNext()) {\n      buffer.write(separator);\n      buffer.write(\"${iterator.current}\");\n    }\n  }\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastWhere",
                    "type": "",
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/lastWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E value), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/IterableMixin\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; MappedIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reduce",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/reduce.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E value = iterator.current;\n  while (iterator.moveNext()) {\n    value = combine(value, iterator.current);\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "singleWhere",
                    "type": "",
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/singleWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      if (foundMatching) {\n        throw IterableElementError.tooMany();\n      }\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "skip",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) {\n  return SkipIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skipWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/skipWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) {\n  return SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "take",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/take.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) {\n  return TakeIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/takeWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) {\n  return TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toList",
                    "type": "dart:core.List",
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "growable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/toList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) =&gt;\n    List&lt;E&gt;.from(this, growable: growable);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; Set&lt;E&gt;.from(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToShortString(this, '(', ')');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "where",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <a href=\"flutter_test\/test.html\">test<\/a>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <a href=\"flutter_test\/test.html\">test<\/a> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <a href=\"flutter_test\/test.html\">test<\/a> multiple times on the same element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/where.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool f(E element)) =&gt; WhereIterable&lt;E&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "whereType",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.IterableMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/IterableMixin\/whereType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  return it.current;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; !iterator.moveNext();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E result;\n  do {\n    result = it.current;\n  } while (it.moveNext());\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/IterableMixin-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length {\n  assert(this is! EfficientLengthIterable);\n  int count = 0;\n  Iterator it = iterator;\n  while (it.moveNext()) {\n    count++;\n  }\n  return count;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.IterableMixin",
                    "isConstant": false,
                    "href": "dart-collection\/IterableMixin\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) throw IterableElementError.noElement();\n  E result = it.current;\n  if (it.moveNext()) throw IterableElementError.tooMany();\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/IterableMixin-class.html",
            "desc": "<p>This <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> mixin implements all <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> members except <code>iterator<\/code>.<\/p>\n<p>All other methods are implemented in terms of <code>iterator<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IterableMixin"
        },
        {
            "name": "dart:collection.LinkedHashMap",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "LinkedHashMap",
                    "type": "",
                    "desc": "<p>Creates an insertion-ordered hash-table based <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>If <code>equals<\/code> is provided, it is used to compare the keys in the table with\nnew keys. If <code>equals<\/code> is omitted, the key's own <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> is used\ninstead.<\/p>\n<p>Similar, if <code>hashCode<\/code> is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> is used.<\/p>\n<p>If using methods like <a href=\"dart-core\/Map\/operator_get.html\">operator []<\/a>, <a href=\"dart-core\/Map\/remove.html\">remove<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> together\nwith a custom equality and hashcode, an extra <code>isValidKey<\/code> function\ncan be supplied. This function is called before calling <code>equals<\/code> or\n<code>hashCode<\/code> with an argument that may not be a <code>K<\/code> instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe <code>isValidKey<\/code> function defaults to just testing if the object is a\n<code>K<\/code> instance.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashMap&lt;int,int&gt;(equals: (int a, int b) =&gt; (b - a) % 5 == 0,\n                           hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>This example map does not need an <code>isValidKey<\/code> function to be passed.\nThe default function accepts only <code>int<\/code> values, which can safely be\npassed to both the <code>equals<\/code> and <code>hashCode<\/code> functions.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all keys.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting map is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/LinkedHashMap\/LinkedHashMap.identity.html\">LinkedHashMap.identity<\/a>.<\/p>\n<p>The used <code>equals<\/code> and <code>hashCode<\/code> method should always be consistent,\nso that if <code>equals(a, b)<\/code> then <code>hashCode(a) == hashCode(b)<\/code>. The hash\nof an object, or what it compares equal to, should not change while the\nobject is in the table. If it does change, the result is unpredictable.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashMap(\n    {bool equals(K key1, K key2),\n    int hashCode(K key),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.from",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> that contains all key value pairs of <code>other<\/code>.<\/p>\n<p>The keys must all be instances of <code>K<\/code> and the values to <code>V<\/code>.\nThe <code>other<\/code> map itself can have any type.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.from(Map other) {\n  LinkedHashMap&lt;K, V&gt; result = LinkedHashMap&lt;K, V&gt;();\n  other.forEach((k, v) {\n    result[k] = v;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.fromEntries",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> containing the entries of <code>entries<\/code>.<\/p>\n<p>Returns a new <code>LinkedHashMap&lt;K, V&gt;<\/code> where all entries of <code>entries<\/code>\nhave been added in iteration order.<\/p>\n<p>If multiple <code>entries<\/code> have the same key,\nlater occurrences overwrite the earlier ones.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nfactory LinkedHashMap.fromEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) =&gt;\n    &lt;K, V&gt;{}..addEntries(entries);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.fromIterable",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> where the keys and values are computed from the\n<code>iterable<\/code>.<\/p>\n<p>For each element of the <code>iterable<\/code> this constructor computes a key\/value\npair, by applying <code>key<\/code> and <code>value<\/code> respectively.<\/p>\n<p>The keys of the key\/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.<\/p>\n<p>If no values are specified for <code>key<\/code> and <code>value<\/code> the default is the\nidentity function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromIterable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.fromIterable(Iterable iterable,\n    {K key(element), V value(element)}) {\n  LinkedHashMap&lt;K, V&gt; map = LinkedHashMap&lt;K, V&gt;();\n  MapBase._fillMapWithMappedIterable(map, iterable, key, value);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.fromIterables",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> associating the given <code>keys<\/code> to <code>values<\/code>.<\/p>\n<p>This constructor iterates over <code>keys<\/code> and <code>values<\/code> and maps each element of\n<code>keys<\/code> to the corresponding element of <code>values<\/code>.<\/p>\n<p>If <code>keys<\/code> contains the same object multiple times, the last occurrence\noverwrites the previous value.<\/p>\n<p>It is an error if the two <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>s don't have the same length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "keys",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "values",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromIterables.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.fromIterables(Iterable&lt;K&gt; keys, Iterable&lt;V&gt; values) {\n  LinkedHashMap&lt;K, V&gt; map = LinkedHashMap&lt;K, V&gt;();\n  MapBase._fillMapWithIterables(map, keys, values);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.identity",
                    "type": "",
                    "desc": "<p>Creates an insertion-ordered identity-based map.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashMap&lt;K, V&gt;(equals: identical,\n                        hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.identity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashMap.identity();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashMap.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> that contains all key value pairs of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.of(Map&lt;K, V&gt; other) =&gt;\n    LinkedHashMap&lt;K, V&gt;()..addAll(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/LinkedHashMap-class.html",
            "desc": "<p>A hash-table based implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The insertion order of keys is remembered,\nand keys are iterated in the order they were inserted into the map.\nValues are iterated in their corresponding key's order.\nChanging a key's value, when the key is already in the map,\ndoes not change the iteration order,\nbut removing the key and adding it again\nwill make it be last in the iteration order.<\/p>\n<p>The keys of a <code>LinkedHashMap<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the keys (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The map allows <code>null<\/code> as a key.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LinkedHashMap"
        },
        {
            "name": "dart:collection.LinkedHashSet",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "LinkedHashSet",
                    "type": "",
                    "desc": "<p>Create an insertion-ordered hash set using the provided\n<code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>The provided <code>equals<\/code> must define a stable equivalence relation, and\n<code>hashCode<\/code> must be consistent with <code>equals<\/code>. If the <code>equals<\/code> or <code>hashCode<\/code>\nmethods won't work on all objects, but only on some instances of E, the\n<code>isValidKey<\/code> predicate can be used to restrict the keys that the functions\nare applied to.\nAny key for which <code>isValidKey<\/code> returns false is automatically assumed\nto not be in the set when asking <code>contains<\/code>.<\/p>\n<p>If <code>equals<\/code> or <code>hashCode<\/code> are omitted, the set uses\nthe elements' intrinsic <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> and <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>,\nand <code>isValidKey<\/code> is ignored since these operations are assumed\nto work on all objects.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n<p>If the supplied <code>equals<\/code> or <code>hashCode<\/code> functions won't work on all <code>E<\/code>\nobjects, and the map will be used in a setting where a non-<code>E<\/code> object\nis passed to, e.g., <code>contains<\/code>, then the <code>isValidKey<\/code> function should\nalso be supplied.<\/p>\n<p>If <code>isValidKey<\/code> is omitted, it defaults to testing if the object is an\n<code>E<\/code> instance. That means that:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashSet&lt;int&gt;(equals: (int e1, int e2) =&gt; (e1 - e2) % 5 == 0,\n                       hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>does not need an <code>isValidKey<\/code> argument, because it defaults to only\naccepting <code>int<\/code> values which are accepted by both <code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all values.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting set is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/LinkedHashSet\/LinkedHashSet.identity.html\">LinkedHashSet.identity<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "e2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashSet(\n    {bool equals(E e1, E e2),\n    int hashCode(E e),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Executes a function on each element of the set.<\/p>\n<p>The elements are iterated in insertion order.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedHashSet\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E element));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "LinkedHashSet.from",
                    "type": "",
                    "desc": "<p>Create a linked hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a linked hash set as by <code>new LinkedHashSet&lt;E&gt;()<\/code> and adds each\nelement of <code>elements<\/code> to this set in the order they are iterated.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type,\nso this constructor can be used to down-cast a <code>Set<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code>Set&lt;SuperType&gt; superSet = ...;\nIterable&lt;SuperType&gt; tmp = superSet.where((e) =&gt; e is SubType);\nSet&lt;SubType&gt; subSet = new LinkedHashSet&lt;SubType&gt;.from(tmp);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashSet.from(Iterable elements) {\n  LinkedHashSet&lt;E&gt; result = LinkedHashSet&lt;E&gt;();\n  for (final element in elements) {\n    result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashSet.identity",
                    "type": "",
                    "desc": "<p>Creates an insertion-ordered identity-based set.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashSet&lt;E&gt;(equals: identical,\n                     hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.identity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashSet.identity();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinkedHashSet.of",
                    "type": "",
                    "desc": "<p>Create a linked hash set from <code>elements<\/code>.<\/p>\n<p>Creates a linked hash set as by <code>new LinkedHashSet&lt;E&gt;()<\/code> and adds each\nelement of <code>elements<\/code> to this set in the order they are iterated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedHashSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashSet.of(Iterable&lt;E&gt; elements) =&gt;\n    LinkedHashSet&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Provides an iterator that iterates over the elements in insertion order.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedHashSet",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedHashSet\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedHashSet",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedHashSet\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/LinkedHashSet-class.html",
            "desc": "<p>A <a href=\"dart-collection\/LinkedHashSet-class.html\">LinkedHashSet<\/a> is a hash-table based <a href=\"dart-core\/Set-class.html\">Set<\/a> implementation.<\/p>\n<p>The <code>LinkedHashSet<\/code> also keep track of the order that elements were inserted\nin, and iteration happens in first-to-last insertion order.<\/p>\n<p>The elements of a <code>LinkedHashSet<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the elements (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The set allows <code>null<\/code> as an element.<\/p>\n<p>Iteration of elements is done in element insertion order.\nAn element that was added after another will occur later in the iteration.\nAdding an element that is already in the set\ndoes not change its position in the iteration order,\nbut removing an element and adding it again,\nwill make it the last element of an iteration.<\/p>\n<p>Most simple operations on <code>HashSet<\/code> are done in (potentially amortized)\nconstant time: <a href=\"dart-core\/Set\/add.html\">add<\/a>, <a href=\"dart-core\/Set\/contains.html\">contains<\/a>, <a href=\"dart-core\/Set\/remove.html\">remove<\/a>, and <a href=\"dart-collection\/LinkedHashSet\/length.html\">length<\/a>, provided the hash\ncodes of objects are well distributed..<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LinkedHashSet"
        },
        {
            "name": "dart:collection.LinkedList",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "LinkedList",
                    "type": "",
                    "desc": "<p>Construct a new empty linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedList\/LinkedList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LinkedList();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Add <code>entry<\/code> to the end of the linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E entry) {\n  _insertBefore(_first, entry, updateFirst: false);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Add <code>entries<\/code> to the end of the linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; entries) {\n  entries.forEach(add);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addFirst",
                    "type": "",
                    "desc": "<p>Add <code>entry<\/code> to the beginning of the linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/addFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E entry) {\n  _insertBefore(_first, entry, updateFirst: true);\n  _first = entry;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Remove all elements from this linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _modificationCount++;\n  if (isEmpty) return;\n\n  E next = _first;\n  do {\n    E entry = next;\n    next = entry._next;\n    entry._next = entry._previous = entry._list = null;\n  } while (!identical(next, _first));\n\n  _first = null;\n  _length = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Call <code>action<\/code> with each entry in this linked list.<\/p>\n<p>It's an error if <code>action<\/code> modify the linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E entry)) {\n  int modificationCount = _modificationCount;\n  if (isEmpty) return;\n\n  E current = _first;\n  do {\n    action(current);\n    if (modificationCount != _modificationCount) {\n      throw ConcurrentModificationError(this);\n    }\n    current = current._next;\n  } while (!identical(current, _first));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Remove <code>entry<\/code> from the linked list.<\/p>\n<p>Returns false and does nothing if <code>entry<\/code> is not in this linked list.<\/p>\n<p>This is equivalent to calling <code>entry.unlink()<\/code> if the entry is in this\nlist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedList",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedList\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(E entry) {\n  if (entry._list != this) return false;\n  _unlink(entry); \/\/ Unlink will decrement length.\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  return _first;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _length == 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _LinkedListIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  return _first._previous;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/LinkedList-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedList",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedList\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  if (_length &gt; 1) {\n    throw StateError('Too many elements');\n  }\n  return _first;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/LinkedList-class.html",
            "desc": "<p>A specialized double-linked list of elements that extends <a href=\"dart-collection\/LinkedListEntry-class.html\">LinkedListEntry<\/a>.<\/p>\n<p>This is not a generic data structure. It only accepts elements that extend\nthe <a href=\"dart-collection\/LinkedListEntry-class.html\">LinkedListEntry<\/a> class. See the <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> implementations for generic\ncollections that allow constant time adding and removing at the ends.<\/p>\n<p>This is not a <a href=\"dart-core\/List-class.html\">List<\/a> implementation. Despite its name, this class does not\nimplement the <a href=\"dart-core\/List-class.html\">List<\/a> interface. It does not allow constant time lookup by\nindex.<\/p>\n<p>Because the elements themselves contain the links of this linked list,\neach element can be in only one list at a time. To add an element to another\nlist, it must first be removed from its current list (if any).<\/p>\n<p>In return, each element knows its own place in the linked list, as well as\nwhich list it is in. This allows constant time\n<a href=\"dart-collection\/LinkedListEntry\/insertAfter.html\">LinkedListEntry.insertAfter<\/a>, <a href=\"dart-collection\/LinkedListEntry\/insertBefore.html\">LinkedListEntry.insertBefore<\/a> and\n<a href=\"dart-collection\/LinkedListEntry\/unlink.html\">LinkedListEntry.unlink<\/a> operations when all you have is the element.<\/p>\n<p>A <code>LinkedList<\/code> also allows constant time adding and removing at either end,\nand a constant time length getter.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LinkedList"
        },
        {
            "name": "dart:collection.LinkedListEntry",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "LinkedListEntry",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.LinkedListEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/LinkedListEntry\/LinkedListEntry.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "insertAfter",
                    "type": "",
                    "desc": "<p>Insert an element after this element in this element's linked list.<\/p>\n<p>This entry must be in a linked list when this method is called.\nThe <code>entry<\/code> must not be in a linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedListEntry",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedListEntry\/insertAfter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAfter(E entry) {\n  _list._insertBefore(_next, entry, updateFirst: false);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "insertBefore",
                    "type": "",
                    "desc": "<p>Insert an element before this element in this element's linked list.<\/p>\n<p>This entry must be in a linked list when this method is called.\nThe <code>entry<\/code> must not be in a linked list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedListEntry",
                    "sig": "",
                    "params": [
                        {
                            "name": "entry",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedListEntry\/insertBefore.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertBefore(E entry) {\n  _list._insertBefore(this, entry, updateFirst: true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "unlink",
                    "type": "",
                    "desc": "<p>Unlink the element from its linked list.<\/p>\n<p>The entry must currently be in a linked list when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.LinkedListEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/LinkedListEntry\/unlink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unlink() {\n  _list._unlink(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "list",
                    "type": "dart:collection.LinkedList",
                    "types": [],
                    "desc": "<p>Get the linked list containing this element.<\/p>\n<p>Returns <code>null<\/code> if this entry is not currently in any list.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedListEntry",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedListEntry\/list.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LinkedList&lt;E&gt; get list =&gt; _list;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "next",
                    "type": "",
                    "types": [],
                    "desc": "<p>Return the successor of this element in its linked list.<\/p>\n<p>Returns <code>null<\/code> if there is no successor in the linked list, or if this\nentry is not currently in any list.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedListEntry",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedListEntry\/next.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get next {\n  if (_list == null || identical(_list.first, _next)) return null;\n  return _next;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "previous",
                    "type": "",
                    "types": [],
                    "desc": "<p>Return the predecessor of this element in its linked list.<\/p>\n<p>Returns <code>null<\/code> if there is no predecessor in the linked list, or if this\nentry is not currently in any list.<\/p>\n        ",
                    "memberOf": "dart:collection.LinkedListEntry",
                    "isConstant": false,
                    "href": "dart-collection\/LinkedListEntry\/previous.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get previous {\n  if (_list == null || identical(this, _list.first)) return null;\n  return _previous;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/LinkedListEntry-class.html",
            "desc": "<p>An object that can be an element in a <a href=\"dart-collection\/LinkedList-class.html\">LinkedList<\/a>.<\/p>\n<p>All elements of a <code>LinkedList<\/code> must extend this class.\nThe class provides the internal links that link elements together\nin the <code>LinkedList<\/code>, and a reference to the linked list itself\nthat an element is currently part of.<\/p>\n<p>An entry can be in at most one linked list at a time.\nWhile an entry is in a linked list, the <a href=\"dart-collection\/LinkedListEntry\/list.html\">list<\/a> property points to that\nlinked list, and otherwise the <code>list<\/code> property is <code>null<\/code>.<\/p>\n<p>When created, an entry is not in any linked list.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LinkedListEntry"
        },
        {
            "name": "dart:collection.ListBase",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "ListBase",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.ListBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/ListBase\/ListBase.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "listToString",
                    "type": "dart:core.String",
                    "desc": "<p>Convert a <code>List<\/code> to a string as <code>[each, element, as, string]<\/code>.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>list<\/code> to a string again.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListBase\/listToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String listToString(List list) =&gt;\n    IterableBase.iterableToFullString(list, '[', ']');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.CombinedListView",
                "dart:collection.UnmodifiableListView",
                "dart:typed_data.UnmodifiableFloat32ListView",
                "dart:typed_data.UnmodifiableFloat32x4ListView",
                "dart:typed_data.UnmodifiableFloat64ListView",
                "dart:typed_data.UnmodifiableFloat64x2ListView",
                "dart:typed_data.UnmodifiableInt8ListView",
                "dart:typed_data.UnmodifiableInt16ListView",
                "dart:typed_data.UnmodifiableInt32ListView",
                "dart:typed_data.UnmodifiableInt32x4ListView",
                "dart:typed_data.UnmodifiableInt64ListView",
                "dart:typed_data.UnmodifiableUint8ClampedListView",
                "dart:typed_data.UnmodifiableUint8ListView",
                "dart:typed_data.UnmodifiableUint16ListView",
                "dart:typed_data.UnmodifiableUint32ListView",
                "dart:typed_data.UnmodifiableUint64ListView",
                "typed_data.typed_buffers.Float32Buffer",
                "typed_data.typed_buffers.Float32x4Buffer",
                "typed_data.typed_buffers.Float64Buffer",
                "typed_data.typed_buffers.Int8Buffer",
                "typed_data.typed_buffers.Int16Buffer",
                "typed_data.typed_buffers.Int32Buffer",
                "typed_data.typed_buffers.Int32x4Buffer",
                "typed_data.typed_buffers.Int64Buffer",
                "typed_data.typed_buffers.Uint8Buffer",
                "typed_data.typed_buffers.Uint8ClampedBuffer",
                "typed_data.typed_buffers.Uint16Buffer",
                "typed_data.typed_buffers.Uint32Buffer",
                "typed_data.typed_buffers.Uint64Buffer"
            ],
            "realImplementors": [
                "collection.CombinedListView",
                "dart:collection.UnmodifiableListView",
                "dart:typed_data.UnmodifiableFloat32ListView",
                "dart:typed_data.UnmodifiableFloat32x4ListView",
                "dart:typed_data.UnmodifiableFloat64ListView",
                "dart:typed_data.UnmodifiableFloat64x2ListView",
                "dart:typed_data.UnmodifiableInt8ListView",
                "dart:typed_data.UnmodifiableInt16ListView",
                "dart:typed_data.UnmodifiableInt32ListView",
                "dart:typed_data.UnmodifiableInt32x4ListView",
                "dart:typed_data.UnmodifiableInt64ListView",
                "dart:typed_data.UnmodifiableUint8ClampedListView",
                "dart:typed_data.UnmodifiableUint8ListView",
                "dart:typed_data.UnmodifiableUint16ListView",
                "dart:typed_data.UnmodifiableUint32ListView",
                "dart:typed_data.UnmodifiableUint64ListView",
                "typed_data.typed_buffers.Float32Buffer",
                "typed_data.typed_buffers.Float32x4Buffer",
                "typed_data.typed_buffers.Float64Buffer",
                "typed_data.typed_buffers.Int8Buffer",
                "typed_data.typed_buffers.Int16Buffer",
                "typed_data.typed_buffers.Int32Buffer",
                "typed_data.typed_buffers.Int32x4Buffer",
                "typed_data.typed_buffers.Int64Buffer",
                "typed_data.typed_buffers.Uint8Buffer",
                "typed_data.typed_buffers.Uint8ClampedBuffer",
                "typed_data.typed_buffers.Uint16Buffer",
                "typed_data.typed_buffers.Uint32Buffer",
                "typed_data.typed_buffers.Uint64Buffer"
            ],
            "cn": [],
            "href": "dart-collection\/ListBase-class.html",
            "desc": "<p>Abstract implementation of a list.<\/p>\n<p><code>ListBase<\/code> can be used as a base class for implementing the <code>List<\/code>\ninterface.<\/p>\n<p>All operations are defined in terms of <code>length<\/code>, <code>operator[]<\/code>,\n<code>operator[]=<\/code> and <code>length=<\/code>, which need to be implemented.<\/p>\n<p><em>NOTICE<\/em>: Forwarding just these four operations to a normal growable <a href=\"dart-core\/List-class.html\">List<\/a>\n(as created by <code>new List()<\/code>) will give very bad performance for <code>add<\/code> and\n<code>addAll<\/code> operations of <code>ListBase<\/code>. These operations are implemented by\nincreasing the length of the list by one for each <code>add<\/code> operation, and\nrepeatedly increasing the length of a growable list is not efficient.\nTo avoid this, either override 'add' and 'addAll' to also forward directly\nto the growable list, or, preferably, use <code>DelegatingList<\/code> from\n\"package:collection\/wrappers.dart\" instead.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ListBase"
        },
        {
            "name": "dart:collection.ListMixin",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "operator +",
                    "type": "dart:core.List",
                    "desc": "<p>Returns the concatenation of this list and <code>other<\/code>.<\/p>\n<p>Returns a new list containing the elements of this list followed by\nthe elements of <code>other<\/code>.<\/p>\n<p>The default behavior is to return a normal growable list.\nSome list types may choose to return a list of the same type as themselves\n(see <a href=\"dart-collection\/ListMixin\/operator_plus.html\">Uint8List.+<\/a>);<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; operator +(List&lt;E&gt; other) {\n  var result = &lt;E&gt;[]..length = (this.length + other.length);\n  result.setRange(0, this.length, this);\n  result.setRange(this.length, result.length, other);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ListMixin",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/ListMixin\/ListMixin.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element) {\n  this[this.length++] = element;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  int i = this.length;\n  for (E element in iterable) {\n    assert(this.length == i || (throw ConcurrentModificationError(this)));\n    this.length = i + 1;\n    this[i] = element;\n    i++;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "any",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (test(this[i])) return true;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "asMap",
                    "type": "dart:core.Map<dart:core.int>",
                    "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/asMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap() {\n  return ListMapView&lt;E&gt;(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "cast",
                    "type": "dart:core.List",
                    "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"dart-collection\/ListMixin\/add.html\">add<\/a> or <a href=\"dart-collection\/ListMixin\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;R&gt; cast&lt;R&gt;() =&gt; List.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  this.length = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (this[i] == element) return true;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "elementAt",
                    "type": "",
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-core\/List\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/elementAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; this[index];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "every",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/every.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (!test(this[i])) return false;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "expand",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/expand.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fillRange",
                    "type": "",
                    "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fill",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/fillRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fill]) {\n  RangeError.checkValidRange(start, end, this.length);\n  for (int i = start; i &lt; end; i++) {\n    this[i] = fill;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstWhere",
                    "type": "",
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/firstWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    E element = this[i];\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fold",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "initialValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "previousValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/fold.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    value = combine(value, this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "followedBy",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/followedBy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt;\n    FollowedByIterable&lt;E&gt;.firstEfficient(this, other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    action(this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getRange",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/getRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end) {\n  RangeError.checkValidRange(start, end, this.length);\n  return SubListIterable&lt;E&gt;(this, start, end);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "indexOf",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/indexOf.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(Object element, [int start = 0]) {\n  if (start &lt; 0) start = 0;\n  for (int i = start; i &lt; this.length; i++) {\n    if (this[i] == element) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "indexWhere",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/indexWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]) {\n  if (start &lt; 0) start = 0;\n  for (int i = start; i &lt; this.length; i++) {\n    if (test(this[i])) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "insert",
                    "type": "",
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/insert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkValueInInterval(index, 0, length, \"index\");\n  if (index == this.length) {\n    add(element);\n    return;\n  }\n  this.length++;\n  setRange(index + 1, this.length, this, index);\n  this[index] = element;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "insertAll",
                    "type": "",
                    "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/insertAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable) {\n  RangeError.checkValueInInterval(index, 0, length, \"index\");\n  if (iterable is! EfficientLengthIterable || identical(iterable, this)) {\n    iterable = iterable.toList();\n  }\n  int insertionLength = iterable.length;\n  \/\/ There might be errors after the length change, in which case the list\n  \/\/ will end up being modified but the operation not complete. Unless we\n  \/\/ always go through a \"toList\" we can't really avoid that.\n  this.length += insertionLength;\n  if (iterable.length != insertionLength) {\n    \/\/ If the iterable's length is linked to this list's length somehow,\n    \/\/ we can't insert one in the other.\n    this.length -= insertionLength;\n    throw ConcurrentModificationError(iterable);\n  }\n  setRange(index + insertionLength, this.length, this, index);\n  setAll(index, iterable);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "join",
                    "type": "dart:core.String",
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/ListMixin\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/join.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  if (length == 0) return \"\";\n  StringBuffer buffer = StringBuffer()..writeAll(this, separator);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastIndexOf",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/lastIndexOf.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(Object element, [int start]) {\n  if (start == null || start &gt;= this.length) start = this.length - 1;\n  for (int i = start; i &gt;= 0; i--) {\n    if (this[i] == element) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastIndexWhere",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/lastIndexWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]) {\n  if (start == null || start &gt;= this.length) start = this.length - 1;\n  for (int i = start; i &gt;= 0; i--) {\n    if (test(this[i])) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastWhere",
                    "type": "",
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/lastWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = length - 1; i &gt;= 0; i--) {\n    E element = this[i];\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/ListMixin\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; MappedListIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reduce",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "previousValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/reduce.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E previousValue, E element)) {\n  int length = this.length;\n  if (length == 0) throw IterableElementError.noElement();\n  E value = this[0];\n  for (int i = 1; i &lt; length; i++) {\n    value = combine(value, this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object element) {\n  for (int i = 0; i &lt; this.length; i++) {\n    if (this[i] == element) {\n      this._closeGap(i, i + 1);\n      return true;\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeAt",
                    "type": "",
                    "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/removeAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) {\n  E result = this[index];\n  _closeGap(index, index + 1);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeLast",
                    "type": "",
                    "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/removeLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  if (length == 0) {\n    throw IterableElementError.noElement();\n  }\n  E result = this[length - 1];\n  length--;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeRange",
                    "type": "",
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/removeRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) {\n  RangeError.checkValidRange(start, end, this.length);\n  if (end &gt; start) {\n    _closeGap(start, end);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filter(test, false);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "replaceRange",
                    "type": "",
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"dart-collection\/ListMixin\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newContents",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/replaceRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; newContents) {\n  RangeError.checkValidRange(start, end, this.length);\n  if (newContents is! EfficientLengthIterable) {\n    newContents = newContents.toList();\n  }\n  int removeLength = end - start;\n  int insertLength = newContents.length;\n  if (removeLength &gt;= insertLength) {\n    int insertEnd = start + insertLength;\n    this.setRange(start, insertEnd, newContents);\n    if (removeLength &gt; insertLength) {\n      _closeGap(insertEnd, end);\n    }\n  } else {\n    int delta = insertLength - removeLength;\n    int newLength = this.length + delta;\n    int insertEnd = start + insertLength; \/\/ aka. end + delta.\n    this.length = newLength;\n    this.setRange(insertEnd, newLength, this, end);\n    this.setRange(start, insertEnd, newContents);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filter(test, true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setAll",
                    "type": "",
                    "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/setAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable) {\n  if (iterable is List) {\n    setRange(index, index + iterable.length, iterable);\n  } else {\n    for (E element in iterable) {\n      this[index++] = element;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setRange",
                    "type": "",
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipCount",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/setRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]) {\n  RangeError.checkValidRange(start, end, this.length);\n  int length = end - start;\n  if (length == 0) return;\n  RangeError.checkNotNegative(skipCount, \"skipCount\");\n\n  List&lt;E&gt; otherList;\n  int otherStart;\n  \/\/ TODO(floitsch): Make this accept more.\n  if (iterable is List&lt;E&gt;) {\n    otherList = iterable;\n    otherStart = skipCount;\n  } else {\n    otherList = iterable.skip(skipCount).toList(growable: false);\n    otherStart = 0;\n  }\n  if (otherStart + length &gt; otherList.length) {\n    throw IterableElementError.tooFew();\n  }\n  if (otherStart &lt; start) {\n    \/\/ Copy backwards to ensure correct copy if [from] is this.\n    for (int i = length - 1; i &gt;= 0; i--) {\n      this[start + i] = otherList[otherStart + i];\n    }\n  } else {\n    for (int i = 0; i &lt; length; i++) {\n      this[start + i] = otherList[otherStart + i];\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "shuffle",
                    "type": "",
                    "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "random",
                            "type": "dart:math.Random",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/shuffle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]) {\n  random ??= Random();\n  int length = this.length;\n  while (length &gt; 1) {\n    int pos = random.nextInt(length);\n    length -= 1;\n    var tmp = this[length];\n    this[length] = this[pos];\n    this[pos] = tmp;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "singleWhere",
                    "type": "",
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/singleWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  E match;\n  bool matchFound = false;\n  for (int i = 0; i &lt; length; i++) {\n    E element = this[i];\n    if (test(element)) {\n      if (matchFound) {\n        throw IterableElementError.tooMany();\n      }\n      matchFound = true;\n      match = element;\n    }\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (matchFound) return match;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "skip",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) =&gt; SubListIterable&lt;E&gt;(this, count, null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skipWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/skipWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E element)) {\n  return SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "sort",
                    "type": "",
                    "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "a",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "b",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/sort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]) {\n  Sort.sort(this, compare ?? _compareAny);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sublist",
                    "type": "dart:core.List",
                    "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"dart-core\/List\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/sublist.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]) {\n  int listLength = this.length;\n  end ??= listLength;\n  RangeError.checkValidRange(start, end, listLength);\n  int length = end - start;\n  List&lt;E&gt; result = &lt;E&gt;[]..length = length;\n  for (int i = 0; i &lt; length; i++) {\n    result[i] = this[start + i];\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "take",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/take.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) =&gt; SubListIterable&lt;E&gt;(this, 0, count);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/takeWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E element)) {\n  return TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toList",
                    "type": "dart:core.List",
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "growable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/toList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) {\n  List&lt;E&gt; result;\n  if (growable) {\n    result = &lt;E&gt;[]..length = length;\n  } else {\n    result = List&lt;E&gt;(length);\n  }\n  for (int i = 0; i &lt; length; i++) {\n    result[i] = this[i];\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; result = Set&lt;E&gt;();\n  for (int i = 0; i &lt; length; i++) {\n    result.add(this[i]);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '[', ']');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "where",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/where.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; WhereIterable&lt;E&gt;(this, test);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "whereType",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListMixin\/whereType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  if (length == 0) throw IterableElementError.noElement();\n  return this[0];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; length == 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; ListIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  if (length == 0) throw IterableElementError.noElement();\n  return this[length - 1];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "reversed",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/reversed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed =&gt; ReversedListIterable&lt;E&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.ListMixin",
                    "isConstant": false,
                    "href": "dart-collection\/ListMixin\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (length == 0) throw IterableElementError.noElement();\n  if (length &gt; 1) throw IterableElementError.tooMany();\n  return this[0];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/ListMixin-class.html",
            "desc": "<p>Base implementation of a <a href=\"dart-core\/List-class.html\">List<\/a> class.<\/p>\n<p><code>ListMixin<\/code> can be used as a mixin to make a class implement\nthe <code>List<\/code> interface.<\/p>\n<p>This implements all read operations using only the <code>length<\/code> and\n<code>operator[]<\/code> members. It implements write operations using those and\n<code>length=<\/code> and <code>operator[]=<\/code><\/p>\n<p><em>NOTICE<\/em>: Forwarding just these four operations to a normal growable <a href=\"dart-core\/List-class.html\">List<\/a>\n(as created by <code>new List()<\/code>) will give very bad performance for <code>add<\/code> and\n<code>addAll<\/code> operations of <code>ListBase<\/code>. These operations are implemented by\nincreasing the length of the list by one for each <code>add<\/code> operation, and\nrepeatedly increasing the length of a growable list is not efficient.\nTo avoid this, either override 'add' and 'addAll' to also forward directly\nto the growable list, or, if possible, use <code>DelegatingList<\/code> from\n\"package:collection\/wrappers.dart\" instead.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ListMixin"
        },
        {
            "name": "dart:collection.ListQueue",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "ListQueue",
                    "type": "",
                    "desc": "<p>Create an empty queue.<\/p>\n<p>If <code>initialCapacity<\/code> is given, prepare the queue for at least that many\nelements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "initialCapacity",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/ListQueue\/ListQueue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListQueue([int initialCapacity])\n    : _head = 0,\n      _tail = 0 {\n  if (initialCapacity == null || initialCapacity &lt; _INITIAL_CAPACITY) {\n    initialCapacity = _INITIAL_CAPACITY;\n  } else if (!_isPowerOf2(initialCapacity)) {\n    initialCapacity = _nextPowerOf2(initialCapacity);\n  }\n  assert(_isPowerOf2(initialCapacity));\n  _table = List&lt;E&gt;(initialCapacity);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  if (elements is List&lt;E&gt;) {\n    List&lt;E&gt; list = elements;\n    int addCount = list.length;\n    int length = this.length;\n    if (length + addCount &gt;= _table.length) {\n      _preGrow(length + addCount);\n      \/\/ After preGrow, all elements are at the start of the list.\n      _table.setRange(length, length + addCount, list, 0);\n      _tail += addCount;\n    } else {\n      \/\/ Adding addCount elements won't reach _head.\n      int endSpace = _table.length - _tail;\n      if (addCount &lt; endSpace) {\n        _table.setRange(_tail, _tail + addCount, list, 0);\n        _tail += addCount;\n      } else {\n        int preSpace = addCount - endSpace;\n        _table.setRange(_tail, _tail + endSpace, list, 0);\n        _table.setRange(0, preSpace, list, endSpace);\n        _tail = preSpace;\n      }\n    }\n    _modificationCount++;\n  } else {\n    for (E element in elements) _add(element);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addFirst",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/addFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _head = (_head - 1) &amp; (_table.length - 1);\n  _table[_head] = value;\n  if (_head == _tail) _grow();\n  _modificationCount++;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addLast",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/addLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _add(value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "any",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (test(elementAt(i))) return true;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cast",
                    "type": "dart:collection.Queue",
                    "desc": "<p>Provides a view of this queue as a queue of <code>R<\/code> instances, if necessary.<\/p>\n<p>If this queue contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the queue (e.g., by using <a href=\"dart-collection\/ListQueue\/addFirst.html\">addFirst<\/a> or <a href=\"dart-collection\/ListQueue\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis queue as well.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;() =&gt; Queue.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  if (_head != _tail) {\n    for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n      _table[i] = null;\n    }\n    _head = _tail = 0;\n    _modificationCount++;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (elementAt(i) == element) return true;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "elementAt",
                    "type": "",
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-collection\/ListQueue\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/elementAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  RangeError.checkValidIndex(index, this);\n  return _table[(_head + index) &amp; (_table.length - 1)];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "every",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/every.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (!test(elementAt(i))) return false;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "firstWhere",
                    "type": "",
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/firstWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    E element = elementAt(i);\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fold",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "initialValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "previousValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/fold.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    value = combine(value, elementAt(i));\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  int modificationCount = _modificationCount;\n  for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n    f(_table[i]);\n    _checkModification(modificationCount);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "ListQueue.from",
                    "type": "",
                    "desc": "<p>Create a <code>ListQueue<\/code> containing all <code>elements<\/code>.<\/p>\n<p>The elements are added to the queue, as by <a href=\"dart-collection\/ListQueue\/addLast.html\">addLast<\/a>, in the order given\nby <code>elements.iterator<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Queue<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;SuperType&gt; superQueue = ...;\nQueue&lt;SubType&gt; subQueue =\n    new ListQueue&lt;SubType&gt;.from(superQueue.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/ListQueue\/ListQueue.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ListQueue.from(Iterable elements) {\n  if (elements is List) {\n    int length = elements.length;\n    ListQueue&lt;E&gt; queue = ListQueue&lt;E&gt;(length + 1);\n    assert(queue._table.length &gt; length);\n    for (int i = 0; i &lt; length; i++) {\n      queue._table[i] = elements[i];\n    }\n    queue._tail = length;\n    return queue;\n  } else {\n    int capacity = _INITIAL_CAPACITY;\n    if (elements is EfficientLengthIterable) {\n      capacity = elements.length;\n    }\n    ListQueue&lt;E&gt; result = ListQueue&lt;E&gt;(capacity);\n    for (final element in elements) {\n      result.addLast(element);\n    }\n    return result;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "join",
                    "type": "dart:core.String",
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/ListQueue\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/join.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  int length = this.length;\n  if (!separator.isEmpty) {\n    if (length == 0) return \"\";\n    String first = \"${elementAt(0)}\";\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n    StringBuffer buffer = new StringBuffer(first);\n    for (int i = 1; i &lt; length; i++) {\n      buffer.write(separator);\n      buffer.write(elementAt(i));\n      if (length != this.length) {\n        throw new ConcurrentModificationError(this);\n      }\n    }\n    return buffer.toString();\n  } else {\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i &lt; length; i++) {\n      buffer.write(elementAt(i));\n      if (length != this.length) {\n        throw new ConcurrentModificationError(this);\n      }\n    }\n    return buffer.toString();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastWhere",
                    "type": "",
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/lastWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = length - 1; i &gt;= 0; i--) {\n    E element = elementAt(i);\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/ListQueue\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; new MappedListIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ListQueue.of",
                    "type": "",
                    "desc": "<p>Create a <code>ListQueue<\/code> from <code>elements<\/code>.<\/p>\n<p>The elements are added to the queue, as by <a href=\"dart-collection\/ListQueue\/addLast.html\">addLast<\/a>, in the order given\nby <code>elements.iterator<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/ListQueue\/ListQueue.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ListQueue.of(Iterable&lt;E&gt; elements) =&gt;\n    ListQueue&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reduce",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/reduce.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  int length = this.length;\n  if (length == 0) throw IterableElementError.noElement();\n  E value = elementAt(0);\n  for (int i = 1; i &lt; length; i++) {\n    value = combine(value, elementAt(i));\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) {\n  for (int i = _head; i != _tail; i = (i + 1) &amp; (_table.length - 1)) {\n    E element = _table[i];\n    if (element == value) {\n      _remove(i);\n      _modificationCount++;\n      return true;\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeFirst",
                    "type": "",
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/removeFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  if (_head == _tail) throw IterableElementError.noElement();\n  _modificationCount++;\n  E result = _table[_head];\n  _table[_head] = null;\n  _head = (_head + 1) &amp; (_table.length - 1);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeLast",
                    "type": "",
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/removeLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  if (_head == _tail) throw IterableElementError.noElement();\n  _modificationCount++;\n  _tail = (_tail - 1) &amp; (_table.length - 1);\n  E result = _table[_tail];\n  _table[_tail] = null;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Remove all elements matched by <code>test<\/code>.<\/p>\n<p>This method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filterWhere(test, true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Remove all elements not matched by <code>test<\/code>.<\/p>\n<p>This method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filterWhere(test, false);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "singleWhere",
                    "type": "",
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/singleWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  E match = null;\n  bool matchFound = false;\n  for (int i = 0; i &lt; length; i++) {\n    E element = elementAt(i);\n    if (test(element)) {\n      if (matchFound) {\n        throw IterableElementError.tooMany();\n      }\n      matchFound = true;\n      match = element;\n    }\n    if (length != this.length) {\n      throw new ConcurrentModificationError(this);\n    }\n  }\n  if (matchFound) return match;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "skip",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) =&gt; new SubListIterable&lt;E&gt;(this, count, null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skipWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/skipWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E element)) =&gt; super.skipWhile(test);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "take",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/take.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) =&gt; new SubListIterable&lt;E&gt;(this, 0, count);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/takeWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E element)) =&gt; super.takeWhile(test);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toList",
                    "type": "dart:core.List",
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "growable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/toList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) {\n  List&lt;E&gt; list;\n  if (growable) {\n    list = &lt;E&gt;[]..length = length;\n  } else {\n    list = List&lt;E&gt;(length);\n  }\n  _writeToList(list);\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; result = new Set&lt;E&gt;();\n  for (int i = 0; i &lt; length; i++) {\n    result.add(elementAt(i));\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, \"{\", \"}\");<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "where",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListQueue\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.ListQueue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/ListQueue\/where.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; super.where(test);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  if (_head == _tail) throw IterableElementError.noElement();\n  return _table[_head];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _head == _tail;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _ListQueueIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  if (_head == _tail) throw IterableElementError.noElement();\n  return _table[(_tail - 1) &amp; (_table.length - 1)];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; (_tail - _head) &amp; (_table.length - 1);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.ListQueue",
                    "isConstant": false,
                    "href": "dart-collection\/ListQueue\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (_head == _tail) throw IterableElementError.noElement();\n  if (length &gt; 1) throw IterableElementError.tooMany();\n  return _table[_head];\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/ListQueue-class.html",
            "desc": "<p>List based <a href=\"dart-collection\/Queue-class.html\">Queue<\/a>.<\/p>\n<p>Keeps a cyclic buffer of elements, and grows to a larger buffer when\nit fills up. This guarantees constant time peek and remove operations, and\namortized constant time add operations.<\/p>\n<p>The structure is efficient for any queue or stack usage.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ListQueue"
        },
        {
            "name": "dart:collection.MapBase",
            "extends": [
                "dart:collection.MapMixin",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "MapBase",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.MapBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/MapBase\/MapBase.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "mapToString",
                    "type": "dart:core.String",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.MapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "m",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapBase\/mapToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String mapToString(Map m) {\n  \/\/ Reuses the list in IterableBase for detecting toString cycles.\n  if (_isToStringVisiting(m)) {\n    return '{...}';\n  }\n\n  var result = StringBuffer();\n  try {\n    _toStringVisiting.add(m);\n    result.write('{');\n    bool first = true;\n    m.forEach((k, v) {\n      if (!first) {\n        result.write(', ');\n      }\n      first = false;\n      result.write(k);\n      result.write(': ');\n      result.write(v);\n    });\n    result.write('}');\n  } finally {\n    assert(identical(_toStringVisiting.last, m));\n    _toStringVisiting.removeLast();\n  }\n\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.CombinedMapView",
                "dart:collection.UnmodifiableMapBase"
            ],
            "realImplementors": [
                "collection.CombinedMapView"
            ],
            "cn": [],
            "href": "dart-collection\/MapBase-class.html",
            "desc": "<p>Base class for implementing a <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>This class has a basic implementation of all but five of the members of\n<a href=\"dart-core\/Map-class.html\">Map<\/a>.\nA basic <code>Map<\/code> class can be implemented by extending this class and\nimplementing <code>keys<\/code>, <code>operator[]<\/code>, <code>operator[]=<\/code>, <code>remove<\/code> and <code>clear<\/code>.\nThe remaining operations are implemented in terms of these five.<\/p>\n<p>The <code>keys<\/code> iterable should have efficient <a href=\"dart-collection\/MapMixin\/length.html\">Iterable.length<\/a> and\n<a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> operations, and it should catch concurrent modifications\nof the keys while iterating.<\/p>\n<p>A more efficient implementation is usually possible by overriding\nsome of the other members as well.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MapBase"
        },
        {
            "name": "dart:collection.MapMixin",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "MapMixin",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/MapMixin\/MapMixin.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "",
                    "desc": "<p>Returns the value for the given <code>key<\/code> or null if <code>key<\/code> is not in the map.<\/p>\n<p>Some maps allow keys to have <code>null<\/code> as a value.\nFor those maps, a lookup using this operator cannot distinguish between a\nkey not being in the map and the key having a <code>null<\/code> value.\nMethods like <a href=\"dart-collection\/MapMixin\/containsKey.html\">containsKey<\/a> or <a href=\"dart-collection\/MapMixin\/putIfAbsent.html\">putIfAbsent<\/a> can be used if the distinction\nis important.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V operator [](Object key);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>Associates the <code>key<\/code> with the given <code>value<\/code>.<\/p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key\/value pair is added to the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">operator []=(K key, V value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  for (K key in other.keys) {\n    this[key] = other[key];\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addEntries",
                    "type": "",
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "newEntries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/addEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; newEntries) {\n  for (var entry in newEntries) {\n    this[entry.key] = entry.value;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.Map",
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;() =&gt; Map.castFrom&lt;K, V, RK, RV&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "containsKey",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/containsKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; keys.contains(key);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsValue",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/containsValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) {\n  for (K key in keys) {\n    if (this[key] == value) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(K key, V value)) {\n  for (K key in keys) {\n    action(key, this[key]);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Map",
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; transform(K key, V value)) {\n  var result = &lt;K2, V2&gt;{};\n  for (var key in this.keys) {\n    var entry = transform(key, this[key]);\n    result[entry.key] = entry.value;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "putIfAbsent",
                    "type": "",
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  if (containsKey(key)) {\n    return this[key];\n  }\n  return this[key] = ifAbsent();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) {\n  var keysToRemove = &lt;K&gt;[];\n  for (var key in keys) {\n    if (test(key, this[key])) keysToRemove.add(key);\n  }\n  for (var key in keysToRemove) {\n    this.remove(key);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; MapBase.mapToString(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "update",
                    "type": "",
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) {\n  if (this.containsKey(key)) {\n    return this[key] = update(this[key]);\n  }\n  if (ifAbsent != null) {\n    return this[key] = ifAbsent();\n  }\n  throw ArgumentError.value(key, \"key\", \"Key not in map.\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateAll",
                    "type": "",
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapMixin\/updateAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) {\n  for (var key in this.keys) {\n    this[key] = update(key, this[key]);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "entries",
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.MapEntry"
                    ],
                    "desc": "<p>The map entries of <a href=\"dart-collection\/MapMixin-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/entries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries {\n  return keys.map((K key) =&gt; MapEntry&lt;K, V&gt;(key, this[key]));\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; keys.isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; keys.isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keys",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The keys of <a href=\"dart-collection\/MapMixin-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-collection\/MapMixin\/length.html\">length<\/a> and <a href=\"dart-collection\/MapMixin\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/keys.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; keys.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "values",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The values of <a href=\"dart-collection\/MapMixin-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-collection\/MapMixin\/keys.html\">keys<\/a> and <a href=\"dart-collection\/MapMixin\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-collection\/MapMixin\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.MapMixin",
                    "isConstant": false,
                    "href": "dart-collection\/MapMixin\/values.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _MapBaseValueIterable&lt;K, V&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.CombinedMapView",
                "dart:collection.MapBase",
                "dart:collection.UnmodifiableMapBase"
            ],
            "realImplementors": [
                "collection.CombinedMapView"
            ],
            "cn": [],
            "href": "dart-collection\/MapMixin-class.html",
            "desc": "<p>Mixin implementing a <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>This mixin has a basic implementation of all but five of the members of\n<a href=\"dart-core\/Map-class.html\">Map<\/a>.\nA basic <code>Map<\/code> class can be implemented by mixin in this class and\nimplementing <code>keys<\/code>, <code>operator[]<\/code>, <code>operator[]=<\/code>, <code>remove<\/code> and <code>clear<\/code>.\nThe remaining operations are implemented in terms of these five.<\/p>\n<p>The <code>keys<\/code> iterable should have efficient <a href=\"dart-collection\/MapMixin\/length.html\">Iterable.length<\/a> and\n<a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> operations, and it should catch concurrent modifications\nof the keys while iterating.<\/p>\n<p>A more efficient implementation is usually possible by overriding\nsome of the other members as well.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MapMixin"
        },
        {
            "name": "dart:collection.MapView",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "MapView",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "map",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/MapView\/MapView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MapView(Map&lt;K, V&gt; map) : _map = map;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "",
                    "desc": "<p>Returns the value for the given <code>key<\/code> or null if <code>key<\/code> is not in the map.<\/p>\n<p>Some maps allow keys to have <code>null<\/code> as a value.\nFor those maps, a lookup using this operator cannot distinguish between a\nkey not being in the map and the key having a <code>null<\/code> value.\nMethods like <a href=\"dart-collection\/MapView\/containsKey.html\">containsKey<\/a> or <a href=\"dart-collection\/MapView\/putIfAbsent.html\">putIfAbsent<\/a> can be used if the distinction\nis important.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V operator [](Object key) =&gt; _map[key];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>Associates the <code>key<\/code> with the given <code>value<\/code>.<\/p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key\/value pair is added to the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(K key, V value) {\n  _map[key] = value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  _map.addAll(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addEntries",
                    "type": "",
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/addEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) {\n  _map.addEntries(entries);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.Map",
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;() =&gt; _map.cast&lt;RK, RV&gt;();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _map.clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "containsKey",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/containsKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; _map.containsKey(key);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsValue",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/containsValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; _map.containsValue(value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(K key, V value)) {\n  _map.forEach(action);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Map",
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; transform(K key, V value)) =&gt;\n    _map.map&lt;K2, V2&gt;(transform);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "putIfAbsent",
                    "type": "",
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) =&gt; _map.putIfAbsent(key, ifAbsent);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) =&gt; _map.remove(key);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) {\n  _map.removeWhere(test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _map.toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "update",
                    "type": "",
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) =&gt;\n    _map.update(key, update, ifAbsent: ifAbsent);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateAll",
                    "type": "",
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.MapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/MapView\/updateAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) {\n  _map.updateAll(update);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "entries",
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.MapEntry"
                    ],
                    "desc": "<p>The map entries of <a href=\"dart-collection\/MapView-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/entries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt; _map.entries;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _map.isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _map.isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keys",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The keys of <a href=\"dart-collection\/MapView-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-collection\/MapView\/length.html\">length<\/a> and <a href=\"dart-collection\/MapView\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/keys.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _map.keys;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _map.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "values",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The values of <a href=\"dart-collection\/MapView-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-collection\/MapView\/keys.html\">keys<\/a> and <a href=\"dart-collection\/MapView\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-collection\/MapView\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.MapView",
                    "isConstant": false,
                    "href": "dart-collection\/MapView\/values.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _map.values;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:collection.UnmodifiableMapView",
                "path.PathMap"
            ],
            "realImplementors": [
                "dart:collection.UnmodifiableMapView",
                "path.PathMap"
            ],
            "cn": [],
            "href": "dart-collection\/MapView-class.html",
            "desc": "<p>Wrapper around a class that implements <a href=\"dart-core\/Map-class.html\">Map<\/a> that only exposes <code>Map<\/code>\nmembers.<\/p>\n<p>A simple wrapper that delegates all <code>Map<\/code> members to the map provided in the\nconstructor.<\/p>\n<p>Base for delegating map implementations like <a href=\"dart-collection\/UnmodifiableMapView-class.html\">UnmodifiableMapView<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MapView"
        },
        {
            "name": "dart:collection.Queue",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "Queue",
                    "type": "",
                    "desc": "<p>Creates a queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/Queue\/Queue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Queue() = ListQueue&lt;E&gt;;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addFirst",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/addFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addLast",
                    "type": "",
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/addLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:collection.Queue",
                    "desc": "<p>Provides a view of this queue as a queue of <code>R<\/code> instances, if necessary.<\/p>\n<p>If this queue contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the queue (e.g., by using <a href=\"dart-collection\/Queue\/addFirst.html\">addFirst<\/a> or <a href=\"dart-collection\/Queue\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis queue as well.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "castFrom",
                    "type": "dart:collection.Queue",
                    "desc": "<p>Adapts <code>source<\/code> to be a <code>Queue&lt;T&gt;<\/code>.<\/p>\n<p>Any time the queue would produce an element that is not a <code>T<\/code>,\nthe element access will throw.<\/p>\n<p>Any time a <code>T<\/code> value is attempted stored into the adapted queue,\nthe store will throw unless the value is also an instance of <code>S<\/code>.<\/p>\n<p>If all accessed elements of <code>source<\/code> are actually instances of <code>T<\/code>,\nand if all elements stored into the returned queue are actually instance\nof <code>S<\/code>,\nthen the returned queue can be used as a <code>Queue&lt;T&gt;<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "dart:collection.Queue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/castFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Queue&lt;T&gt; castFrom&lt;S, T&gt;(Queue&lt;S&gt; source) =&gt; CastQueue&lt;S, T&gt;(source);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "Queue.from",
                    "type": "",
                    "desc": "<p>Creates a queue containing all <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/Queue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Queue<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;SuperType&gt; superQueue = ...;\nQueue&lt;SubType&gt; subQueue =\n    new Queue&lt;SubType&gt;.from(superSet.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/Queue\/Queue.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Queue.from(Iterable elements) = ListQueue&lt;E&gt;.from;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Queue.of",
                    "type": "",
                    "desc": "<p>Creates a queue from <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/Queue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/Queue\/Queue.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Queue.of(Iterable&lt;E&gt; elements) = ListQueue&lt;E&gt;.of;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeFirst",
                    "type": "",
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/removeFirst.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeLast",
                    "type": "",
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/removeLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.Queue",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/Queue\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "memberOf": "dart:collection.Queue",
                    "isConstant": false,
                    "href": "dart-collection\/Queue\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/Queue-class.html",
            "desc": "<p>A <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> is a collection that can be manipulated at both ends. One\ncan iterate over the elements of a queue through <a href=\"dart-core\/Iterable\/forEach.html\">forEach<\/a> or with\nan <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a>.<\/p>\n<p>It is generally not allowed to modify the queue (add or remove entries)\nwhile an operation on the queue is being performed, for example during a\ncall to <a href=\"dart-core\/Iterable\/forEach.html\">forEach<\/a>.\nModifying the queue while it is being iterated will most likely break the\niteration.\nThis goes both for using the <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> directly, or for iterating an\n<code>Iterable<\/code> returned by a method like <a href=\"dart-core\/Iterable\/map.html\">map<\/a> or <a href=\"dart-core\/Iterable\/where.html\">where<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Queue"
        },
        {
            "name": "dart:collection.SetBase",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "SetBase",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.SetBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/SetBase\/SetBase.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "setToString",
                    "type": "dart:core.String",
                    "desc": "<p>Convert a <code>Set<\/code> to a string as <code>{each, element, as, string}<\/code>.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>set<\/code> to a string again.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "set",
                            "type": "dart:core.Set",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetBase\/setToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String setToString(Set set) =&gt;\n    IterableBase.iterableToFullString(set, '{', '}');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.UnionSet"
            ],
            "realImplementors": [
                "collection.UnionSet"
            ],
            "cn": [],
            "href": "dart-collection\/SetBase-class.html",
            "desc": "<p>Base implementation of <a href=\"dart-core\/Set-class.html\">Set<\/a>.<\/p>\n<p>This class provides a base implementation of a <code>Set<\/code> that depends only\non the abstract members: <a href=\"dart-collection\/SetMixin\/add.html\">add<\/a>, <a href=\"dart-collection\/SetMixin\/contains.html\">contains<\/a>, <a href=\"dart-collection\/SetMixin\/lookup.html\">lookup<\/a>, <a href=\"dart-collection\/SetMixin\/remove.html\">remove<\/a>,\n<a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a>, <a href=\"dart-collection\/SetMixin\/length.html\">length<\/a> and <a href=\"dart-collection\/SetMixin\/toSet.html\">toSet<\/a>.<\/p>\n<p>Some of the methods assume that <code>toSet<\/code> creates a modifiable set.\nIf using this base class for an unmodifiable set,\nwhere <code>toSet<\/code> should return an unmodifiable set,\nit's necessary to reimplement\n<a href=\"dart-collection\/SetMixin\/retainAll.html\">retainAll<\/a>, <a href=\"dart-collection\/SetMixin\/union.html\">union<\/a>, <a href=\"dart-collection\/SetMixin\/intersection.html\">intersection<\/a> and <a href=\"dart-collection\/SetMixin\/difference.html\">difference<\/a>.<\/p>\n<p>Implementations of <code>Set<\/code> using this base should consider also implementing\n<code>clear<\/code> in constant time. The default implementation works by removing every\nelement.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SetBase"
        },
        {
            "name": "dart:collection.SetMixin",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "SetMixin",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/SetMixin\/SetMixin.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "dart:core.bool",
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"dart-collection\/SetMixin\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  for (E element in elements) add(element);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "any",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  for (E element in this) {\n    if (test(element)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cast",
                    "type": "dart:core.Set",
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"dart-collection\/SetMixin\/add.html\">add<\/a> or <a href=\"dart-collection\/SetMixin\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;R&gt; cast&lt;R&gt;() =&gt; Set.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  removeAll(toList());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if <code>value<\/code> is in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/containsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) {\n  for (Object o in other) {\n    if (!contains(o)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = toSet();\n  for (E element in this) {\n    if (other.contains(element)) result.remove(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "elementAt",
                    "type": "",
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-collection\/SetMixin\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/elementAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkNotNegative(index, \"index\");\n  int elementIndex = 0;\n  for (E element in this) {\n    if (index == elementIndex) return element;\n    elementIndex++;\n  }\n  throw RangeError.index(index, this, \"index\", null, elementIndex);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "every",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether every element of this iterable satisfies <a href=\"flutter_test\/test.html\">test<\/a>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <a href=\"flutter_test\/test.html\">test<\/a> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/every.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool f(E element)) {\n  for (E element in this) {\n    if (!f(element)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "expand",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/expand.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "firstWhere",
                    "type": "",
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/firstWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E value), {E orElse()}) {\n  for (E element in this) {\n    if (test(element)) return element;\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fold",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "initialValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "previousValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/fold.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  for (E element in this) value = combine(value, element);\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "followedBy",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/followedBy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt;\n    FollowedByIterable&lt;E&gt;.firstEfficient(this, other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  for (E element in this) f(element);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "intersection",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/intersection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = toSet();\n  for (E element in this) {\n    if (!other.contains(element)) result.remove(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "join",
                    "type": "dart:core.String",
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/SetMixin\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/join.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) return \"\";\n  StringBuffer buffer = StringBuffer();\n  if (separator == null || separator == \"\") {\n    do {\n      buffer.write(iterator.current);\n    } while (iterator.moveNext());\n  } else {\n    buffer.write(iterator.current);\n    while (iterator.moveNext()) {\n      buffer.write(separator);\n      buffer.write(iterator.current);\n    }\n  }\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastWhere",
                    "type": "",
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/lastWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E value), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "lookup",
                    "type": "",
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"dart-collection\/SetMixin\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"dart-collection\/SetMixin\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/lookup.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object element);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "map",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/SetMixin\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt;\n    EfficientLengthMappedIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reduce",
                    "type": "",
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/reduce.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E value = iterator.current;\n  while (iterator.moveNext()) {\n    value = combine(value, iterator.current);\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeAll",
                    "type": "",
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/removeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) {\n  for (Object element in elements) remove(element);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  List toRemove = [];\n  for (E element in this) {\n    if (test(element)) toRemove.add(element);\n  }\n  removeAll(toRemove);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainAll",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/retainAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  \/\/ Create a copy of the set, remove all of elements from the copy,\n  \/\/ then remove all remaining elements in copy from this.\n  Set&lt;E&gt; toRemove = toSet();\n  for (Object o in elements) {\n    toRemove.remove(o);\n  }\n  removeAll(toRemove);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  List toRemove = [];\n  for (E element in this) {\n    if (!test(element)) toRemove.add(element);\n  }\n  removeAll(toRemove);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "singleWhere",
                    "type": "",
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "orElse",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/singleWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E value), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      if (foundMatching) {\n        throw IterableElementError.tooMany();\n      }\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "skip",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <a href=\"quiver.iterables\/count.html\">count<\/a> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <a href=\"quiver.iterables\/count.html\">count<\/a> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <a href=\"quiver.iterables\/count.html\">count<\/a> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "n",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int n) {\n  return SkipIterable&lt;E&gt;(this, n);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skipWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/skipWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) {\n  return SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "take",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the <a href=\"quiver.iterables\/count.html\">count<\/a> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a> until <a href=\"quiver.iterables\/count.html\">count<\/a>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "n",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/take.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int n) {\n  return TakeIterable&lt;E&gt;(this, n);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/takeWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) {\n  return TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toList",
                    "type": "dart:core.List",
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "growable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/toList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) {\n  List&lt;E&gt; result = growable ? (&lt;E&gt;[]..length = length) : List&lt;E&gt;(length);\n  int i = 0;\n  for (E element in this) result[i++] = element;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) {\n  return toSet()..addAll(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "where",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <a href=\"flutter_test\/test.html\">test<\/a>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <a href=\"flutter_test\/test.html\">test<\/a> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <a href=\"flutter_test\/test.html\">test<\/a> multiple times on the same element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/where.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool f(E element)) =&gt; WhereIterable&lt;E&gt;(this, f);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "whereType",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SetMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SetMixin\/whereType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  return it.current;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; length == 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; length != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E result;\n  do {\n    result = it.current;\n  } while (it.moveNext());\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.SetMixin",
                    "isConstant": false,
                    "href": "dart-collection\/SetMixin\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (length &gt; 1) throw IterableElementError.tooMany();\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) throw IterableElementError.noElement();\n  E result = it.current;\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/SetMixin-class.html",
            "desc": "<p>Mixin implementation of <a href=\"dart-core\/Set-class.html\">Set<\/a>.<\/p>\n<p>This class provides a base implementation of a <code>Set<\/code> that depends only\non the abstract members: <a href=\"dart-collection\/SetMixin\/add.html\">add<\/a>, <a href=\"dart-collection\/SetMixin\/contains.html\">contains<\/a>, <a href=\"dart-collection\/SetMixin\/lookup.html\">lookup<\/a>, <a href=\"dart-collection\/SetMixin\/remove.html\">remove<\/a>,\n<a href=\"dart-collection\/SetMixin\/iterator.html\">iterator<\/a>, <a href=\"dart-collection\/SetMixin\/length.html\">length<\/a> and <a href=\"dart-collection\/SetMixin\/toSet.html\">toSet<\/a>.<\/p>\n<p>Some of the methods assume that <code>toSet<\/code> creates a modifiable set.\nIf using this mixin for an unmodifiable set,\nwhere <code>toSet<\/code> should return an unmodifiable set,\nit's necessary to reimplement\n<a href=\"dart-collection\/SetMixin\/retainAll.html\">retainAll<\/a>, <a href=\"dart-collection\/SetMixin\/union.html\">union<\/a>, <a href=\"dart-collection\/SetMixin\/intersection.html\">intersection<\/a> and <a href=\"dart-collection\/SetMixin\/difference.html\">difference<\/a>.<\/p>\n<p>Implementations of <code>Set<\/code> using this mixin should consider also implementing\n<code>clear<\/code> in constant time. The default implementation works by removing every\nelement.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SetMixin"
        },
        {
            "name": "dart:collection.SplayTreeMap",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "SplayTreeMap",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SplayTreeMap([int compare(K key1, K key2), bool isValidKey(potentialKey)])\n    : _comparator = compare ?? _defaultCompare&lt;K&gt;(),\n      _validKey = isValidKey ?? ((v) =&gt; v is K);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "",
                    "desc": "<p>Returns the value for the given <code>key<\/code> or null if <code>key<\/code> is not in the map.<\/p>\n<p>Some maps allow keys to have <code>null<\/code> as a value.\nFor those maps, a lookup using this operator cannot distinguish between a\nkey not being in the map and the key having a <code>null<\/code> value.\nMethods like <a href=\"dart-collection\/SplayTreeMap\/containsKey.html\">containsKey<\/a> or <a href=\"dart-collection\/SplayTreeMap\/putIfAbsent.html\">putIfAbsent<\/a> can be used if the distinction\nis important.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V operator [](Object key) {\n  if (!_validKey(key)) return null;\n  if (_root != null) {\n    int comp = _splay(key);\n    if (comp == 0) {\n      return _root.value;\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>Associates the <code>key<\/code> with the given <code>value<\/code>.<\/p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key\/value pair is added to the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(K key, V value) {\n  if (key == null) throw ArgumentError(key);\n  \/\/ Splay on the key to move the last node on the search path for\n  \/\/ the key to the root of the tree.\n  int comp = _splay(key);\n  if (comp == 0) {\n    _root.value = value;\n    return;\n  }\n  _addNewRoot(_SplayTreeMapNode(key, value), comp);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  other.forEach((K key, V value) {\n    this[key] = value;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "containsKey",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/containsKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) {\n  return _validKey(key) &amp;&amp; _splay(key) == 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsValue",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/containsValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) {\n  int initialSplayCount = _splayCount;\n  bool visit(_SplayTreeMapNode node) {\n    while (node != null) {\n      if (node.value == value) return true;\n      if (initialSplayCount != _splayCount) {\n        throw ConcurrentModificationError(this);\n      }\n      if (node.right != null &amp;&amp; visit(node.right)) return true;\n      node = node.left;\n    }\n    return false;\n  }\n\n  return visit(_root);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "firstKey",
                    "type": "",
                    "desc": "<p>Get the first key in the map. Returns <code>null<\/code> if the map is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/firstKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K firstKey() {\n  if (_root == null) return null;\n  return _first.key;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstKeyAfter",
                    "type": "",
                    "desc": "<p>Get the first key in the map that is strictly larger than <code>key<\/code>. Returns\n<code>null<\/code> if no key was not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/firstKeyAfter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K firstKeyAfter(K key) {\n  if (key == null) throw ArgumentError(key);\n  if (_root == null) return null;\n  int comp = _splay(key);\n  if (comp &gt; 0) return _root.key;\n  _SplayTreeNode&lt;K&gt; node = _root.right;\n  if (node == null) return null;\n  while (node.left != null) {\n    node = node.left;\n  }\n  return node.key;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  Iterator&lt;_SplayTreeNode&lt;K&gt;&gt; nodes = _SplayTreeNodeIterator&lt;K&gt;(this);\n  while (nodes.moveNext()) {\n    _SplayTreeMapNode&lt;K, V&gt; node = nodes.current;\n    f(node.key, node.value);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "SplayTreeMap.from",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> that contains all key\/value pairs of <code>other<\/code>.<\/p>\n<p>The keys must all be instances of <code>K<\/code> and the values of <code>V<\/code>.\nThe <code>other<\/code> map itself can have any type.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeMap.from(Map other,\n    [int compare(K key1, K key2), bool isValidKey(potentialKey)]) {\n  SplayTreeMap&lt;K, V&gt; result = SplayTreeMap&lt;K, V&gt;(compare, isValidKey);\n  other.forEach((k, v) {\n    result[k] = v;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SplayTreeMap.fromIterable",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> where the keys and values are computed from the\n<code>iterable<\/code>.<\/p>\n<p>For each element of the <code>iterable<\/code> this constructor computes a key\/value\npair, by applying <code>key<\/code> and <code>value<\/code> respectively.<\/p>\n<p>The keys of the key\/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.<\/p>\n<p>If no functions are specified for <code>key<\/code> and <code>value<\/code> the default is to\nuse the iterable value itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.fromIterable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeMap.fromIterable(Iterable iterable,\n    {K key(element),\n    V value(element),\n    int compare(K key1, K key2),\n    bool isValidKey(potentialKey)}) {\n  SplayTreeMap&lt;K, V&gt; map = SplayTreeMap&lt;K, V&gt;(compare, isValidKey);\n  MapBase._fillMapWithMappedIterable(map, iterable, key, value);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SplayTreeMap.fromIterables",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> associating the given <code>keys<\/code> to <code>values<\/code>.<\/p>\n<p>This constructor iterates over <code>keys<\/code> and <code>values<\/code> and maps each element\nof <code>keys<\/code> to the corresponding element of <code>values<\/code>.<\/p>\n<p>If <code>keys<\/code> contains the same object multiple times, the last occurrence\noverwrites the previous value.<\/p>\n<p>It is an error if the two <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>s don't have the same length.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "keys",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "values",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.fromIterables.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeMap.fromIterables(Iterable&lt;K&gt; keys, Iterable&lt;V&gt; values,\n    [int compare(K key1, K key2), bool isValidKey(potentialKey)]) {\n  SplayTreeMap&lt;K, V&gt; map = SplayTreeMap&lt;K, V&gt;(compare, isValidKey);\n  MapBase._fillMapWithIterables(map, keys, values);\n  return map;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastKey",
                    "type": "",
                    "desc": "<p>Get the last key in the map. Returns <code>null<\/code> if the map is empty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/lastKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K lastKey() {\n  if (_root == null) return null;\n  return _last.key;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "lastKeyBefore",
                    "type": "",
                    "desc": "<p>Get the last key in the map that is strictly smaller than <code>key<\/code>. Returns\n<code>null<\/code> if no key was not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/lastKeyBefore.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K lastKeyBefore(K key) {\n  if (key == null) throw ArgumentError(key);\n  if (_root == null) return null;\n  int comp = _splay(key);\n  if (comp &lt; 0) return _root.key;\n  _SplayTreeNode&lt;K&gt; node = _root.left;\n  if (node == null) return null;\n  while (node.right != null) {\n    node = node.right;\n  }\n  return node.key;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "SplayTreeMap.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> that contains all key\/value pairs of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeMap.of(Map&lt;K, V&gt; other,\n        [int compare(K key1, K key2), bool isValidKey(potentialKey)]) =&gt;\n    SplayTreeMap&lt;K, V&gt;(compare, isValidKey)..addAll(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "putIfAbsent",
                    "type": "",
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  if (key == null) throw ArgumentError(key);\n  int comp = _splay(key);\n  if (comp == 0) {\n    return _root.value;\n  }\n  int modificationCount = _modificationCount;\n  int splayCount = _splayCount;\n  V value = ifAbsent();\n  if (modificationCount != _modificationCount) {\n    throw ConcurrentModificationError(this);\n  }\n  if (splayCount != _splayCount) {\n    comp = _splay(key);\n    \/\/ Key is still not there, otherwise _modificationCount would be changed.\n    assert(comp != 0);\n  }\n  _addNewRoot(_SplayTreeMapNode(key, value), comp);\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeMap\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  if (!_validKey(key)) return null;\n  _SplayTreeMapNode&lt;K, V&gt; mapRoot = _remove(key);\n  if (mapRoot != null) return mapRoot.value;\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeMap",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeMap\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty {\n  return (_root == null);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeMap",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeMap\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keys",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The keys of <a href=\"dart-collection\/SplayTreeMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-collection\/SplayTreeMap\/length.html\">length<\/a> and <a href=\"dart-collection\/SplayTreeMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeMap",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeMap\/keys.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _SplayTreeKeyIterable&lt;K&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeMap",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeMap\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length {\n  return _count;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "values",
                    "type": "dart:core.Iterable",
                    "types": [],
                    "desc": "<p>The values of <a href=\"dart-collection\/SplayTreeMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-collection\/SplayTreeMap\/keys.html\">keys<\/a> and <a href=\"dart-collection\/SplayTreeMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-collection\/SplayTreeMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeMap",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeMap\/values.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _SplayTreeValueIterable&lt;K, V&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/SplayTreeMap-class.html",
            "desc": "<p>A <a href=\"dart-core\/Map-class.html\">Map<\/a> of objects that can be ordered relative to each other.<\/p>\n<p>The map is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.<\/p>\n<p>Keys of the map are compared using the <code>compare<\/code> function passed in\nthe constructor, both for ordering and for equality.\nIf the map contains only the key <code>a<\/code>, then <code>map.containsKey(b)<\/code>\nwill return <code>true<\/code> if and only if <code>compare(a, b) == 0<\/code>,\nand the value of <code>a == b<\/code> is not even checked.\nIf the compare function is omitted, the objects are assumed to be\n<a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and are compared using their <a href=\"dart-core\/Comparable\/compareTo.html\">Comparable.compareTo<\/a> method.\nNon-comparable objects (including <code>null<\/code>) will not work as keys\nin that case.<\/p>\n<p>To allow calling <a href=\"dart-collection\/SplayTreeMap\/operator_get.html\">operator []<\/a>, <a href=\"dart-collection\/SplayTreeMap\/remove.html\">remove<\/a> or <a href=\"dart-collection\/SplayTreeMap\/containsKey.html\">containsKey<\/a> with objects\nthat are not supported by the <code>compare<\/code> function, an extra <code>isValidKey<\/code>\npredicate function can be supplied. This function is tested before\nusing the <code>compare<\/code> function on an argument value that may not be a <code>K<\/code>\nvalue. If omitted, the <code>isValidKey<\/code> function defaults to testing if the\nvalue is a <code>K<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SplayTreeMap"
        },
        {
            "name": "dart:collection.SplayTreeSet",
            "extends": [],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "SplayTreeSet",
                    "type": "",
                    "desc": "<p>Create a new <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a> with the given compare function.<\/p>\n<p>If the <code>compare<\/code> function is omitted, it defaults to <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a>,\nand the elements must be comparable.<\/p>\n<p>A provided <code>compare<\/code> function may not work on all objects. It may not even\nwork on all <code>E<\/code> instances.<\/p>\n<p>For operations that add elements to the set, the user is supposed to not\npass in objects that doesn't work with the compare function.<\/p>\n<p>The methods <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a>, <a href=\"dart-collection\/SplayTreeSet\/remove.html\">remove<\/a>, <a href=\"dart-collection\/SplayTreeSet\/lookup.html\">lookup<\/a>, <a href=\"dart-collection\/SplayTreeSet\/removeAll.html\">removeAll<\/a> or <a href=\"dart-collection\/SplayTreeSet\/retainAll.html\">retainAll<\/a>\nare typed to accept any object(s), and the <code>isValidKey<\/code> test can used to\nfilter those objects before handing them to the <code>compare<\/code> function.<\/p>\n<p>If <code>isValidKey<\/code> is provided, only values satisfying <code>isValidKey(other)<\/code>\nare compared using the <code>compare<\/code> method in the methods mentioned above.\nIf the <code>isValidKey<\/code> function returns false for an object, it is assumed to\nnot be in the set.<\/p>\n<p>If omitted, the <code>isValidKey<\/code> function defaults to checking against the\ntype parameter: <code>other is E<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeSet\/SplayTreeSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SplayTreeSet([int compare(E key1, E key2), bool isValidKey(potentialKey)])\n    : _comparator = compare ?? _defaultCompare&lt;E&gt;(),\n      _validKey = isValidKey ?? ((v) =&gt; v is E);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "dart:core.bool",
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E element) {\n  int compare = _splay(element);\n  if (compare == 0) return false;\n  _addNewRoot(_SplayTreeNode(element), compare);\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"dart-collection\/SplayTreeSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  for (E element in elements) {\n    int compare = _splay(element);\n    if (compare != 0) {\n      _addNewRoot(_SplayTreeNode(element), compare);\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.Set",
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-collection\/SetMixin\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;R&gt; cast&lt;R&gt;() =&gt; Set.castFrom&lt;E, R&gt;(this, newSet: _newSet);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  return _validKey(element) &amp;&amp; _splay(element) == 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  for (E element in this) {\n    if (!other.contains(element)) result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SplayTreeSet.from",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a> that contains all <code>elements<\/code>.<\/p>\n<p>The set works as if created by <code>new SplayTreeSet&lt;E&gt;(compare, isValidKey)<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code> and valid arguments to\n<code>compare<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Set<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;SuperType&gt; superSet = ...;\nSet&lt;SubType&gt; subSet =\n    new SplayTreeSet&lt;SubType&gt;.from(superSet.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeSet\/SplayTreeSet.from.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeSet.from(Iterable elements,\n    [int compare(E key1, E key2), bool isValidKey(potentialKey)]) {\n  SplayTreeSet&lt;E&gt; result = SplayTreeSet&lt;E&gt;(compare, isValidKey);\n  for (final element in elements) {\n    E e = element;\n    result.add(e);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersection",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/intersection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  for (E element in this) {\n    if (other.contains(element)) result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lookup",
                    "type": "",
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "object",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/lookup.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object object) {\n  if (!_validKey(object)) return null;\n  int comp = _splay(object);\n  if (comp != 0) return null;\n  return _root.key;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "SplayTreeSet.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a> from <code>elements<\/code>.<\/p>\n<p>The set works as if created by <code>new SplayTreeSet&lt;E&gt;(compare, isValidKey)<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be valid as arguments to the <code>compare<\/code> function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key1",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key2",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "potentialKey",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/SplayTreeSet\/SplayTreeSet.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SplayTreeSet.of(Iterable&lt;E&gt; elements,\n        [int compare(E key1, E key2), bool isValidKey(potentialKey)]) =&gt;\n    SplayTreeSet(compare, isValidKey)..addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "object",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object object) {\n  if (!_validKey(object)) return false;\n  return _remove(object) != null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeAll",
                    "type": "",
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/removeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) {\n  for (Object element in elements) {\n    if (_validKey(element)) _remove(element);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainAll",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/retainAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  \/\/ Build a set with the same sense of equality as this set.\n  SplayTreeSet&lt;E&gt; retainSet = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  int modificationCount = _modificationCount;\n  for (Object object in elements) {\n    if (modificationCount != _modificationCount) {\n      \/\/ The iterator should not have side effects.\n      throw ConcurrentModificationError(this);\n    }\n    \/\/ Equivalent to this.contains(object).\n    if (_validKey(object) &amp;&amp; _splay(object) == 0) {\n      retainSet.add(_root.key);\n    }\n  }\n  \/\/ Take over the elements from the retained set, if it differs.\n  if (retainSet._count != _count) {\n    _root = retainSet._root;\n    _count = retainSet._count;\n    _modificationCount++;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; _clone();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "union",
                    "type": "dart:core.Set",
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.SplayTreeSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/SplayTreeSet\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) {\n  return _clone()..addAll(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "first",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  if (_count == 0) throw IterableElementError.noElement();\n  return _first.key;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _root == null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _root != null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _SplayTreeKeyIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  if (_count == 0) throw IterableElementError.noElement();\n  return _last.key;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/SplayTreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _count;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "single",
                    "type": "",
                    "types": [],
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "memberOf": "dart:collection.SplayTreeSet",
                    "isConstant": false,
                    "href": "dart-collection\/SplayTreeSet\/single.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (_count == 0) throw IterableElementError.noElement();\n  if (_count &gt; 1) throw IterableElementError.tooMany();\n  return _root.key;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/SplayTreeSet-class.html",
            "desc": "<p>A <a href=\"dart-core\/Set-class.html\">Set<\/a> of objects that can be ordered relative to each other.<\/p>\n<p>The set is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.<\/p>\n<p>Elements of the set are compared using the <code>compare<\/code> function passed in\nthe constructor, both for ordering and for equality.\nIf the set contains only an object <code>a<\/code>, then <code>set.contains(b)<\/code>\nwill return <code>true<\/code> if and only if <code>compare(a, b) == 0<\/code>,\nand the value of <code>a == b<\/code> is not even checked.\nIf the compare function is omitted, the objects are assumed to be\n<a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and are compared using their <a href=\"dart-core\/Comparable\/compareTo.html\">Comparable.compareTo<\/a> method.\nNon-comparable objects (including <code>null<\/code>) will not work as an element\nin that case.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SplayTreeSet"
        },
        {
            "name": "dart:collection.UnmodifiableListView",
            "extends": [
                "dart:collection.ListBase",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "UnmodifiableListView",
                    "type": "",
                    "desc": "<p>Creates an unmodifiable list backed by <code>source<\/code>.<\/p>\n<p>The <code>source<\/code> of the elements may be a <a href=\"dart-core\/List-class.html\">List<\/a> or any <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with\nefficient <a href=\"dart-collection\/UnmodifiableListView\/length.html\">Iterable.length<\/a> and <a href=\"dart-collection\/ListMixin\/elementAt.html\">Iterable.elementAt<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/UnmodifiableListView\/UnmodifiableListView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnmodifiableListView(Iterable&lt;E&gt; source) : _source = source;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "",
                    "desc": "<p>Returns the object at the given <code>index<\/code> in the list\nor throws a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>index<\/code> is out of bounds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E operator [](int index) =&gt; _source.elementAt(index);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(int index, E value) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  throw new UnsupportedError(\"Cannot add to an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  throw new UnsupportedError(\"Cannot add to an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.List",
                    "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"dart-collection\/ListMixin\/add.html\">add<\/a> or <a href=\"dart-collection\/ListMixin\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;R&gt; cast&lt;R&gt;() =&gt; UnmodifiableListView(_source.cast&lt;R&gt;());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  throw new UnsupportedError(\"Cannot clear an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fillRange",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fillValue",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/fillRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "insert",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/insert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  throw new UnsupportedError(\"Cannot add to an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "insertAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "at",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/insertAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int at, Iterable&lt;E&gt; iterable) {\n  throw new UnsupportedError(\"Cannot add to an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object element) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeAt",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/removeAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeLast",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/removeLast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeRange",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/removeRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "replaceRange",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/replaceRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; iterable) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  throw new UnsupportedError(\"Cannot remove from an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "at",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/setAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int at, Iterable&lt;E&gt; iterable) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setRange",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "iterable",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipCount",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/setRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "shuffle",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "random",
                            "type": "dart:math.Random",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/shuffle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sort",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "sig": "",
                    "params": [
                        {
                            "name": "compare",
                            "type": "dart:core.Comparator",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableListView\/sort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([Comparator&lt;E&gt; compare]) {\n  throw new UnsupportedError(\"Cannot modify an unmodifiable list\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "memberOf": "dart:collection.UnmodifiableListView",
                    "isConstant": false,
                    "href": "dart-collection\/UnmodifiableListView\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _source.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/UnmodifiableListView-class.html",
            "desc": "<p>An unmodifiable <a href=\"dart-core\/List-class.html\">List<\/a> view of another List.<\/p>\n<p>The source of the elements may be a <a href=\"dart-core\/List-class.html\">List<\/a> or any <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with\nefficient <a href=\"dart-collection\/UnmodifiableListView\/length.html\">Iterable.length<\/a> and <a href=\"dart-collection\/ListMixin\/elementAt.html\">Iterable.elementAt<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "UnmodifiableListView"
        },
        {
            "name": "dart:collection.UnmodifiableMapBase",
            "extends": [
                "dart:collection.MapBase",
                "dart:collection.MapMixin",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "UnmodifiableMapBase",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-collection\/UnmodifiableMapBase\/UnmodifiableMapBase.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(K key, V value) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addEntries",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/addEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putIfAbsent",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "update",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapBase\/updateAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "collection.CombinedMapView"
            ],
            "realImplementors": [
                "collection.CombinedMapView"
            ],
            "cn": [],
            "href": "dart-collection\/UnmodifiableMapBase-class.html",
            "desc": "<p>Basic implementation of an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>This class has a basic implementation of all but two of the members of\nan umodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a>.\nA simple unmodifiable <code>Map<\/code> class can be implemented by extending this\nclass and implementing <code>keys<\/code> and <code>operator[]<\/code>.<\/p>\n<p>Modifying operations throw when used.\nThe remaining non-modifying operations are implemented in terms of <code>keys<\/code>\nand <code>operator[]<\/code>.<\/p>\n<p>The <code>keys<\/code> iterable should have efficient <a href=\"dart-collection\/MapMixin\/length.html\">Iterable.length<\/a> and\n<a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> operations, and it should catch concurrent modifications\nof the keys while iterating.<\/p>\n<p>A more efficient implementation is usually possible by overriding\nsome of the other members as well.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "UnmodifiableMapBase"
        },
        {
            "name": "dart:collection.UnmodifiableMapView",
            "extends": [
                "dart:collection.MapView",
                "dart:core.Object"
            ],
            "memberOf": "dart:collection",
            "events": [],
            "methods": [
                {
                    "name": "UnmodifiableMapView",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "map",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-collection\/UnmodifiableMapView\/UnmodifiableMapView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnmodifiableMapView(Map&lt;K, V&gt; map) : super(map);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(K key, V value) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addEntries",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "entries",
                            "type": "dart:core.Iterable<dart:core.MapEntry>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.MapEntry"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/addEntries.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.Map",
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;() =&gt;\n    UnmodifiableMapView&lt;RK, RV&gt;(_map.cast&lt;RK, RV&gt;());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putIfAbsent",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(K key, V value)) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "update",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifAbsent",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()}) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateAll",
                    "type": "",
                    "desc": "<p>This operation is not supported by an unmodifiable map.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:collection.UnmodifiableMapView",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-collection\/UnmodifiableMapView\/updateAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value)) {\n  throw UnsupportedError(\"Cannot modify unmodifiable map\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-collection\/UnmodifiableMapView-class.html",
            "desc": "<p>View of a <a href=\"dart-core\/Map-class.html\">Map<\/a> that disallow modifying the map.<\/p>\n<p>A wrapper around a <code>Map<\/code> that forwards all members to the map provided in\nthe constructor, except for operations that modify the map.\nModifying operations throw instead.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "UnmodifiableMapView"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}