{
    "name": "foundation",
    "href": "foundation\/foundation-library.html",
    "cn": [
        {
            "name": "foundation.AbstractNode",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "AbstractNode",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/AbstractNode\/AbstractNode.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "adoptChild",
                    "type": "",
                    "desc": "<p>Mark the given node as being a child of this node.<\/p>\n<p>Subclasses should call this function when they acquire a new child.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "child",
                            "type": "foundation.AbstractNode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/adoptChild.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid adoptChild(covariant AbstractNode child) {\n  assert(child != null);\n  assert(child._parent == null);\n  assert(() {\n    AbstractNode node = this;\n    while (node.parent != null)\n      node = node.parent;\n    assert(node != child); \/\/ indicates we are about to create a cycle\n    return true;\n  }());\n  child._parent = this;\n  if (attached)\n    child.attach(_owner);\n  redepthChild(child);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "attach",
                    "type": "",
                    "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a> method, and then <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "owner",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/attach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid attach(covariant Object owner) {\n  assert(owner != null);\n  assert(_owner == null);\n  _owner = owner;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "detach",
                    "type": "",
                    "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a>, and by the <a href=\"foundation\/AbstractNode\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a> method, and then <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/detach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid detach() {\n  assert(_owner != null);\n  _owner = null;\n  assert(parent == null || attached == parent.attached);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "dropChild",
                    "type": "",
                    "desc": "<p>Disconnect the given node from this node.<\/p>\n<p>Subclasses should call this function when they lose a child.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "child",
                            "type": "foundation.AbstractNode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/dropChild.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid dropChild(covariant AbstractNode child) {\n  assert(child != null);\n  assert(child._parent == this);\n  assert(child.attached == attached);\n  child._parent = null;\n  if (attached)\n    child.detach();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "redepthChild",
                    "type": "",
                    "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of the given <code>child<\/code> to be greater than this node's own\n<a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a>.<\/p>\n<p>Only call this method from overrides of <a href=\"foundation\/AbstractNode\/redepthChildren.html\">redepthChildren<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "child",
                            "type": "foundation.AbstractNode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/redepthChild.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid redepthChild(AbstractNode child) {\n  assert(child.owner == owner);\n  if (child._depth &lt;= _depth) {\n    child._depth = _depth + 1;\n    child.redepthChildren();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "redepthChildren",
                    "type": "",
                    "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of this node's children, if any.<\/p>\n<p>Override this method in subclasses with child nodes to call <a href=\"foundation\/AbstractNode\/redepthChild.html\">redepthChild<\/a>\nfor each child. Do not call this method directly.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.AbstractNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/AbstractNode\/redepthChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void redepthChildren() { }<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "attached",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this node is in a tree whose root is attached to something.<\/p>\n<p>This becomes true during the call to <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a>.<\/p>\n<p>This becomes false during the call to <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.AbstractNode",
                    "isConstant": false,
                    "href": "foundation\/AbstractNode\/attached.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get attached =&gt; _owner != null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "depth",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The depth of this node in the tree.<\/p>\n<p>The depth of nodes in a tree monotonically increases as you traverse down\nthe tree.<\/p>\n        ",
                    "memberOf": "foundation.AbstractNode",
                    "isConstant": false,
                    "href": "foundation\/AbstractNode\/depth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get depth =&gt; _depth;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "owner",
                    "type": "dart:core.Object",
                    "types": [],
                    "desc": "<p>The owner for this node (null if unattached).<\/p>\n<p>The entire subtree that this node belongs to will have the same owner.<\/p>\n        ",
                    "memberOf": "foundation.AbstractNode",
                    "isConstant": false,
                    "href": "foundation\/AbstractNode\/owner.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get owner =&gt; _owner;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "foundation.AbstractNode",
                    "types": [],
                    "desc": "<p>The parent of this node in the tree.<\/p>\n        ",
                    "memberOf": "foundation.AbstractNode",
                    "isConstant": false,
                    "href": "foundation\/AbstractNode\/parent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AbstractNode get parent =&gt; _parent;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "material.RenderToggleable",
                "rendering.AnnotatedRegionLayer",
                "rendering.BackdropFilterLayer",
                "rendering.ClipPathLayer",
                "rendering.ClipRRectLayer",
                "rendering.ClipRectLayer",
                "rendering.ContainerLayer",
                "rendering.FollowerLayer",
                "rendering.Layer",
                "rendering.LeaderLayer",
                "rendering.OffsetLayer",
                "rendering.OpacityLayer",
                "rendering.PerformanceOverlayLayer",
                "rendering.PhysicalModelLayer",
                "rendering.PictureLayer",
                "rendering.PlatformViewLayer",
                "rendering.RenderAbsorbPointer",
                "rendering.RenderAbstractViewport",
                "rendering.RenderAligningShiftedBox",
                "rendering.RenderAndroidView",
                "rendering.RenderAnimatedOpacity",
                "rendering.RenderAnimatedSize",
                "rendering.RenderAnnotatedRegion",
                "rendering.RenderAspectRatio",
                "rendering.RenderBackdropFilter",
                "rendering.RenderBaseline",
                "rendering.RenderBlockSemantics",
                "rendering.RenderBox",
                "rendering.RenderClipOval",
                "rendering.RenderClipPath",
                "rendering.RenderClipRRect",
                "rendering.RenderClipRect",
                "rendering.RenderConstrainedBox",
                "rendering.RenderConstrainedOverflowBox",
                "rendering.RenderCustomMultiChildLayoutBox",
                "rendering.RenderCustomPaint",
                "rendering.RenderCustomSingleChildLayoutBox",
                "rendering.RenderDecoratedBox",
                "rendering.RenderEditable",
                "rendering.RenderErrorBox",
                "rendering.RenderExcludeSemantics",
                "rendering.RenderFittedBox",
                "rendering.RenderFlex",
                "rendering.RenderFlow",
                "rendering.RenderFollowerLayer",
                "rendering.RenderFractionalTranslation",
                "rendering.RenderFractionallySizedOverflowBox",
                "rendering.RenderIgnorePointer",
                "rendering.RenderImage",
                "rendering.RenderIndexedSemantics",
                "rendering.RenderIndexedStack",
                "rendering.RenderIntrinsicHeight",
                "rendering.RenderIntrinsicWidth",
                "rendering.RenderLeaderLayer",
                "rendering.RenderLimitedBox",
                "rendering.RenderListBody",
                "rendering.RenderListWheelViewport",
                "rendering.RenderMergeSemantics",
                "rendering.RenderMetaData",
                "rendering.RenderObject",
                "rendering.RenderOffstage",
                "rendering.RenderOpacity",
                "rendering.RenderPadding",
                "rendering.RenderParagraph",
                "rendering.RenderPerformanceOverlay",
                "rendering.RenderPhysicalModel",
                "rendering.RenderPhysicalShape",
                "rendering.RenderPointerListener",
                "rendering.RenderPositionedBox",
                "rendering.RenderProxyBox",
                "rendering.RenderProxyBoxWithHitTestBehavior",
                "rendering.RenderRepaintBoundary",
                "rendering.RenderRotatedBox",
                "rendering.RenderSemanticsAnnotations",
                "rendering.RenderSemanticsGestureHandler",
                "rendering.RenderShaderMask",
                "rendering.RenderShiftedBox",
                "rendering.RenderShrinkWrappingViewport",
                "rendering.RenderSizedOverflowBox",
                "rendering.RenderSliver",
                "rendering.RenderSliverFillRemaining",
                "rendering.RenderSliverFillViewport",
                "rendering.RenderSliverFixedExtentBoxAdaptor",
                "rendering.RenderSliverFixedExtentList",
                "rendering.RenderSliverFloatingPersistentHeader",
                "rendering.RenderSliverFloatingPinnedPersistentHeader",
                "rendering.RenderSliverGrid",
                "rendering.RenderSliverList",
                "rendering.RenderSliverMultiBoxAdaptor",
                "rendering.RenderSliverPadding",
                "rendering.RenderSliverPersistentHeader",
                "rendering.RenderSliverPinnedPersistentHeader",
                "rendering.RenderSliverScrollingPersistentHeader",
                "rendering.RenderSliverSingleBoxAdapter",
                "rendering.RenderSliverToBoxAdapter",
                "rendering.RenderStack",
                "rendering.RenderTable",
                "rendering.RenderTransform",
                "rendering.RenderUiKitView",
                "rendering.RenderUnconstrainedBox",
                "rendering.RenderView",
                "rendering.RenderViewport",
                "rendering.RenderViewportBase",
                "rendering.RenderWrap",
                "rendering.ShaderMaskLayer",
                "rendering.TextureBox",
                "rendering.TextureLayer",
                "rendering.TransformLayer",
                "semantics.SemanticsNode",
                "widgets.RenderNestedScrollViewViewport",
                "widgets.RenderSliverOverlapAbsorber",
                "widgets.RenderSliverOverlapInjector"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/AbstractNode-class.html",
            "desc": "<p>An abstract node in a tree.<\/p>\n<p>AbstractNode has as notion of depth, attachment, and parent, but does not\nhave a model for children.<\/p>\n<p>When a subclass is changing the parent of a child, it should call either\n<code>parent.adoptChild(child)<\/code> or <code>parent.dropChild(child)<\/code> as appropriate.\nSubclasses can expose an API for manipulating the tree if desired (e.g. a\nsetter for a <code>child<\/code> property, or an <code>add()<\/code> method to manipulate a list).<\/p>\n<p>The current parent node is exposed by the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a> property.<\/p>\n<p>The current attachment state is exposed by <a href=\"foundation\/AbstractNode\/attached.html\">attached<\/a>. The root of any tree\nthat is to be considered attached should be manually attached by calling\n<a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a>. Other than that, the <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a> and <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a> methods should not be\ncalled directly; attachment is managed automatically by the aforementioned\n<a href=\"foundation\/AbstractNode\/adoptChild.html\">adoptChild<\/a> and <a href=\"foundation\/AbstractNode\/dropChild.html\">dropChild<\/a> methods.<\/p>\n<p>Subclasses that have children must override <a href=\"foundation\/AbstractNode\/attach.html\">attach<\/a> and <a href=\"foundation\/AbstractNode\/detach.html\">detach<\/a> as\ndescribed in the documentation for those methods.<\/p>\n<p>Nodes always have a <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> greater than their ancestors'. There's no\nguarantee regarding depth between siblings. The depth of a node is used to\nensure that nodes are processed in depth order. The <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of a child can\nbe more than one greater than the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of the parent, because the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a>\nvalues are never decreased: all that matters is that it's greater than the\nparent. Consider a tree with a root node A, a child B, and a grandchild C.\nInitially, A will have <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> 0, B <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> 1, and C <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> 2. If C is\nmoved to be a child of A, sibling of B, then the numbers won't change. C's\n<a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> will still be 2. The <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> is automatically maintained by the\n<a href=\"foundation\/AbstractNode\/adoptChild.html\">adoptChild<\/a> and <a href=\"foundation\/AbstractNode\/dropChild.html\">dropChild<\/a> methods.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AbstractNode"
        },
        {
            "name": "foundation.AsyncCallback",
            "type": "dart:async.Future",
            "desc": "<p>Signature of callbacks that have no arguments and return no data, but that\nreturn a <a href=\"dart-async\/Future-class.html\">Future<\/a> to indicate when their work is complete.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/VoidCallback.html\">VoidCallback<\/a>, a synchronous version of this signature.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueGetter.html\">AsyncValueGetter<\/a>, a signature for asynchronous getters.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueSetter.html\">AsyncValueSetter<\/a>, a signature for asynchronous setters.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/AsyncCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef AsyncCallback = Future&lt;void&gt; Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "foundation.AsyncValueGetter",
            "type": "dart:async.Future",
            "desc": "<p>Signature for callbacks that are to asynchronously report a value on demand.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/ValueGetter.html\">ValueGetter<\/a>, a synchronous version of this signature.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueSetter.html\">AsyncValueSetter<\/a>, the setter equivalent of this signature.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/AsyncValueGetter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef AsyncValueGetter&lt;T&gt; = Future&lt;T&gt; Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "foundation.AsyncValueSetter",
            "type": "dart:async.Future",
            "desc": "<p>Signature for callbacks that report that a value has been set and return a\n<a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the value has been saved.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/ValueSetter.html\">ValueSetter<\/a>, a synchronous version of this signature.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueGetter.html\">AsyncValueGetter<\/a>, the getter equivalent of this signature.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "foundation\/AsyncValueSetter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef AsyncValueSetter&lt;T&gt; = Future&lt;void&gt; Function(T value);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "foundation.BindingBase",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "BindingBase",
                    "type": "",
                    "desc": "<p>Default abstract constructor for bindings.<\/p>\n<p>First calls <a href=\"foundation\/BindingBase\/initInstances.html\">initInstances<\/a> to have bindings initialize their\ninstance pointers and other state, then calls\n<a href=\"foundation\/BindingBase\/initServiceExtensions.html\">initServiceExtensions<\/a> to have bindings initialize their\nobservatory service extensions, if any.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/BindingBase\/BindingBase.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BindingBase() {\n  developer.Timeline.startSync('Framework initialization');\n\n  assert(!_debugInitialized);\n  initInstances();\n  assert(_debugInitialized);\n\n  assert(!_debugServiceExtensionsRegistered);\n  initServiceExtensions();\n  assert(_debugServiceExtensionsRegistered);\n\n  developer.postEvent('Flutter.FrameworkInitialization', &lt;String, String&gt;{});\n\n  developer.Timeline.finishSync();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid initInstances() {\n  assert(!_debugInitialized);\n  assert(() { _debugInitialized = true; return true; }());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initServiceExtensions",
                    "type": "",
                    "desc": "<p>Called when the binding is initialized, to register service\nextensions.<\/p>\n<p>Bindings that want to expose service extensions should overload\nthis method to register them using calls to\n<a href=\"foundation\/BindingBase\/registerSignalServiceExtension.html\">registerSignalServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerBoolServiceExtension.html\">registerBoolServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerNumericServiceExtension.html\">registerNumericServiceExtension<\/a>, and\n<a href=\"foundation\/BindingBase\/registerServiceExtension.html\">registerServiceExtension<\/a> (in increasing order of complexity).<\/p>\n<p>Implementations of this method must call their superclass\nimplementation.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses\">github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses<\/a><\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/initServiceExtensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid initServiceExtensions() {\n  assert(!_debugServiceExtensionsRegistered);\n\n  assert(() {\n    registerSignalServiceExtension(\n      name: 'reassemble',\n      callback: reassembleApplication,\n    );\n    return true;\n  }());\n\n  if (!kReleaseMode) {\n    registerSignalServiceExtension(\n      name: 'exit',\n      callback: _exitApplication,\n    );\n    registerServiceExtension(\n      name: 'saveCompilationTrace',\n      callback: (Map&lt;String, String&gt; parameters) async {\n        return &lt;String, dynamic&gt;{\n          'value': ui.saveCompilationTrace(),\n        };\n      },\n    );\n  }\n\n  assert(() {\n    const String platformOverrideExtensionName = 'platformOverride';\n    registerServiceExtension(\n      name: platformOverrideExtensionName,\n      callback: (Map&lt;String, String&gt; parameters) async {\n        if (parameters.containsKey('value')) {\n          switch (parameters['value']) {\n            case 'android':\n              debugDefaultTargetPlatformOverride = TargetPlatform.android;\n              break;\n            case 'iOS':\n              debugDefaultTargetPlatformOverride = TargetPlatform.iOS;\n              break;\n            case 'fuchsia':\n              debugDefaultTargetPlatformOverride = TargetPlatform.fuchsia;\n              break;\n            case 'default':\n            default:\n              debugDefaultTargetPlatformOverride = null;\n          }\n          _postExtensionStateChangedEvent(\n            platformOverrideExtensionName,\n            defaultTargetPlatform.toString().substring('$TargetPlatform.'.length),\n          );\n          await reassembleApplication();\n        }\n        return &lt;String, dynamic&gt;{\n          'value': defaultTargetPlatform\n                   .toString()\n                   .substring('$TargetPlatform.'.length),\n        };\n      },\n    );\n    return true;\n  }());\n  assert(() { _debugServiceExtensionsRegistered = true; return true; }());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "lockEvents",
                    "type": "dart:async.Future",
                    "desc": "<p>Locks the dispatching of asynchronous events and callbacks until the\ncallback's future completes.<\/p>\n<p>This causes input lag and should therefore be avoided when possible. It is\nprimarily intended for use during non-user-interactive time such as to\nallow <a href=\"foundation\/BindingBase\/reassembleApplication.html\">reassembleApplication<\/a> to block input while it walks the tree\n(which it partially does asynchronously).<\/p>\n<p>The <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by the <code>callback<\/code> argument is returned by <a href=\"foundation\/BindingBase\/lockEvents.html\">lockEvents<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/lockEvents.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFuture&lt;void&gt; lockEvents(Future&lt;void&gt; callback()) {\n  developer.Timeline.startSync('Lock events');\n\n  assert(callback != null);\n  _lockCount += 1;\n  final Future&lt;void&gt; future = callback();\n  assert(future != null, 'The lockEvents() callback returned null; it should return a Future&lt;void&gt; that completes when the lock is to expire.');\n  future.whenComplete(() {\n    _lockCount -= 1;\n    if (!locked) {\n      developer.Timeline.finishSync();\n      unlocked();\n    }\n  });\n  return future;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "performReassemble",
                    "type": "dart:async.Future",
                    "desc": "<p>This method is called by <a href=\"foundation\/BindingBase\/reassembleApplication.html\">reassembleApplication<\/a> to actually cause the\napplication to reassemble, e.g. after a hot reload.<\/p>\n<p>Bindings are expected to use this method to re-register anything that uses\nclosures, so that they do not keep pointing to old code, and to flush any\ncaches of previously computed values, in case the new code would compute\nthem differently. For example, the rendering layer triggers the entire\napplication to repaint when this is called.<\/p>\n<p>Do not call this method directly. Instead, use <a href=\"foundation\/BindingBase\/reassembleApplication.html\">reassembleApplication<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/performReassemble.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\n@protected\nFuture&lt;void&gt; performReassemble() {\n  FlutterError.resetErrorCount();\n  return Future&lt;void&gt;.value();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "postEvent",
                    "type": "",
                    "desc": "<p>All events dispatched by a <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a> use this method instead of\ncalling <a href=\"foundation\/BindingBase\/postEvent.html\">developer.postEvent<\/a> directly so that tests for <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>\ncan track which events were dispatched by overriding this method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "eventKind",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "eventData",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/postEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid postEvent(String eventKind, Map&lt;String, dynamic&gt; eventData) {\n  developer.postEvent(eventKind, eventData);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reassembleApplication",
                    "type": "dart:async.Future",
                    "desc": "<p>Cause the entire application to redraw, e.g. after a hot reload.<\/p>\n<p>This is used by development tools when the application code has changed,\nto cause the application to pick up any changed code. It can be triggered\nmanually by sending the <code>ext.flutter.reassemble<\/code> service extension signal.<\/p>\n<p>This method is very computationally expensive and should not be used in\nproduction code. There is never a valid reason to cause the entire\napplication to repaint in production. All aspects of the Flutter framework\nknow how to redraw when necessary. It is only necessary in development\nwhen the code is literally changed on the fly (e.g. in hot reload) or when\ndebug flags are being toggled.<\/p>\n<p>While this method runs, events are locked (e.g. pointer events are not\ndispatched).<\/p>\n<p>Subclasses (binding classes) should override <a href=\"foundation\/BindingBase\/performReassemble.html\">performReassemble<\/a> to react\nto this method being called. This method itself should not be overridden.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/reassembleApplication.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; reassembleApplication() {\n  return lockEvents(performReassemble);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "registerBoolServiceExtension",
                    "type": "",
                    "desc": "<p>Registers a service extension method with the given name (full\nname \"ext.flutter.name\"), which takes a single argument\n\"enabled\" which can have the value \"true\" or the value \"false\"\nor can be omitted to read the current value. (Any value other\nthan \"true\" is considered equivalent to \"false\". Other arguments\nare ignored.)<\/p>\n<p>Calls the <code>getter<\/code> callback to obtain the value when\nresponding to the service extension method being called.<\/p>\n<p>Calls the <code>setter<\/code> callback with the new value when the\nservice extension method is called with a new value.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "getter",
                            "type": "foundation.AsyncValueGetter<dart:core.bool>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueGetter",
                                "dart:core.bool"
                            ]
                        },
                        {
                            "name": "setter",
                            "type": "foundation.AsyncValueSetter<dart:core.bool>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueSetter",
                                "dart:core.bool"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/registerBoolServiceExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerBoolServiceExtension({\n  @required String name,\n  @required AsyncValueGetter&lt;bool&gt; getter,\n  @required AsyncValueSetter&lt;bool&gt; setter,\n}) {\n  assert(name != null);\n  assert(getter != null);\n  assert(setter != null);\n  registerServiceExtension(\n    name: name,\n    callback: (Map&lt;String, String&gt; parameters) async {\n      if (parameters.containsKey('enabled')) {\n        await setter(parameters['enabled'] == 'true');\n        _postExtensionStateChangedEvent(name, await getter() ? 'true' : 'false');\n      }\n      return &lt;String, dynamic&gt;{'enabled': await getter() ? 'true' : 'false'};\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "registerNumericServiceExtension",
                    "type": "",
                    "desc": "<p>Registers a service extension method with the given name (full\nname \"ext.flutter.name\"), which takes a single argument with the\nsame name as the method which, if present, must have a value\nthat can be parsed by <a href=\"dart-core\/double\/parse.html\">double.parse<\/a>, and can be omitted to read\nthe current value. (Other arguments are ignored.)<\/p>\n<p>Calls the <code>getter<\/code> callback to obtain the value when\nresponding to the service extension method being called.<\/p>\n<p>Calls the <code>setter<\/code> callback with the new value when the\nservice extension method is called with a new value.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "getter",
                            "type": "foundation.AsyncValueGetter<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueGetter",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "setter",
                            "type": "foundation.AsyncValueSetter<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueSetter",
                                "dart:core.double"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/registerNumericServiceExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerNumericServiceExtension({\n  @required String name,\n  @required AsyncValueGetter&lt;double&gt; getter,\n  @required AsyncValueSetter&lt;double&gt; setter,\n}) {\n  assert(name != null);\n  assert(getter != null);\n  assert(setter != null);\n  registerServiceExtension(\n    name: name,\n    callback: (Map&lt;String, String&gt; parameters) async {\n      if (parameters.containsKey(name)) {\n        await setter(double.parse(parameters[name]));\n        _postExtensionStateChangedEvent(name, (await getter()).toString());\n      }\n      return &lt;String, dynamic&gt;{name: (await getter()).toString()};\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "registerServiceExtension",
                    "type": "",
                    "desc": "<p>Registers a service extension method with the given name (full name\n\"ext.flutter.name\").<\/p>\n<p>The given callback is called when the extension method is called. The\ncallback must return a <a href=\"dart-async\/Future-class.html\">Future<\/a> that either eventually completes to a\nreturn value in the form of a name\/value map where the values can all be\nconverted to JSON using <code>json.encode()<\/code> (see <a href=\"dart-convert\/JsonEncoder-class.html\">JsonEncoder<\/a>), or fails. In\ncase of failure, the failure is reported to the remote caller and is\ndumped to the logs.<\/p>\n<p>The returned map will be mutated.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "callback",
                            "type": "foundation.ServiceExtensionCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/registerServiceExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerServiceExtension({\n  @required String name,\n  @required ServiceExtensionCallback callback,\n}) {\n  assert(name != null);\n  assert(callback != null);\n  final String methodName = 'ext.flutter.$name';\n  developer.registerExtension(methodName, (String method, Map&lt;String, String&gt; parameters) async {\n    assert(method == methodName);\n    assert(() {\n      if (debugInstrumentationEnabled)\n        debugPrint('service extension method received: $method($parameters)');\n      return true;\n    }());\n\n    \/\/ VM service extensions are handled as \"out of band\" messages by the VM,\n    \/\/ which means they are handled at various times, generally ASAP.\n    \/\/ Notably, this includes being handled in the middle of microtask loops.\n    \/\/ While this makes sense for some service extensions (e.g. \"dump current\n    \/\/ stack trace\", which explicitly doesn't want to wait for a loop to\n    \/\/ complete), Flutter extensions need not be handled with such high\n    \/\/ priority. Further, handling them with such high priority exposes us to\n    \/\/ the possibility that they're handled in the middle of a frame, which\n    \/\/ breaks many assertions. As such, we ensure they we run the callbacks\n    \/\/ on the outer event loop here.\n    await debugInstrumentAction&lt;void&gt;('Wait for outer event loop', () {\n      return Future&lt;void&gt;.delayed(Duration.zero);\n    });\n\n    dynamic caughtException;\n    StackTrace caughtStack;\n    Map&lt;String, dynamic&gt; result;\n    try {\n      result = await callback(parameters);\n    } catch (exception, stack) {\n      caughtException = exception;\n      caughtStack = stack;\n    }\n    if (caughtException == null) {\n      result['type'] = '_extensionType';\n      result['method'] = method;\n      return developer.ServiceExtensionResponse.result(json.encode(result));\n    } else {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: caughtException,\n        stack: caughtStack,\n        context: 'during a service extension callback for \"$method\"',\n      ));\n      return developer.ServiceExtensionResponse.error(\n        developer.ServiceExtensionResponse.extensionError,\n        json.encode(&lt;String, String&gt;{\n          'exception': caughtException.toString(),\n          'stack': caughtStack.toString(),\n          'method': method,\n        }),\n      );\n    }\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "registerSignalServiceExtension",
                    "type": "",
                    "desc": "<p>Registers a service extension method with the given name (full\nname \"ext.flutter.name\"), which takes no arguments and returns\nno value.<\/p>\n<p>Calls the <code>callback<\/code> callback when the service extension is called.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "callback",
                            "type": "foundation.AsyncCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/registerSignalServiceExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerSignalServiceExtension({\n  @required String name,\n  @required AsyncCallback callback,\n}) {\n  assert(name != null);\n  assert(callback != null);\n  registerServiceExtension(\n    name: name,\n    callback: (Map&lt;String, String&gt; parameters) async {\n      await callback();\n      return &lt;String, dynamic&gt;{};\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "registerStringServiceExtension",
                    "type": "",
                    "desc": "<p>Registers a service extension method with the given name (full name\n\"ext.flutter.name\"), which optionally takes a single argument with the\nname \"value\". If the argument is omitted, the value is to be read,\notherwise it is to be set. Returns the current value.<\/p>\n<p>Calls the <code>getter<\/code> callback to obtain the value when\nresponding to the service extension method being called.<\/p>\n<p>Calls the <code>setter<\/code> callback with the new value when the\nservice extension method is called with a new value.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "getter",
                            "type": "foundation.AsyncValueGetter<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueGetter",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "setter",
                            "type": "foundation.AsyncValueSetter<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.AsyncValueSetter",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/registerStringServiceExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerStringServiceExtension({\n  @required String name,\n  @required AsyncValueGetter&lt;String&gt; getter,\n  @required AsyncValueSetter&lt;String&gt; setter,\n}) {\n  assert(name != null);\n  assert(getter != null);\n  assert(setter != null);\n  registerServiceExtension(\n    name: name,\n    callback: (Map&lt;String, String&gt; parameters) async {\n      if (parameters.containsKey('value')) {\n        await setter(parameters['value']);\n        _postExtensionStateChangedEvent(name, await getter());\n      }\n      return &lt;String, dynamic&gt;{'value': await getter()};\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '&lt;$runtimeType&gt;';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "unlocked",
                    "type": "",
                    "desc": "<p>Called by <a href=\"foundation\/BindingBase\/lockEvents.html\">lockEvents<\/a> when events get unlocked.<\/p>\n<p>This should flush any events that were queued while <a href=\"foundation\/BindingBase\/locked.html\">locked<\/a> was true.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BindingBase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/BindingBase\/unlocked.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid unlocked() {\n  assert(!locked);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "locked",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether <a href=\"foundation\/BindingBase\/lockEvents.html\">lockEvents<\/a> is currently locking events.<\/p>\n<p>Binding subclasses that fire events should check this first, and if it is\nset, queue events instead of firing them.<\/p>\n<p>Events should be flushed when <a href=\"foundation\/BindingBase\/unlocked.html\">unlocked<\/a> is called.<\/p>\n        ",
                    "memberOf": "foundation.BindingBase",
                    "isConstant": false,
                    "href": "foundation\/BindingBase\/locked.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get locked =&gt; _lockCount &gt; 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "window",
                    "type": "dart:ui.Window",
                    "types": [],
                    "desc": "<p>The window to which this binding is bound.<\/p>\n<p>A number of additional bindings are defined as extensions of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>,\ne.g., <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>, <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, and <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>. Each of\nthese bindings define behaviors that interact with a <a href=\"dart-ui\/Window-class.html\">ui.Window<\/a>, e.g.,\n<a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> registers a <a href=\"dart-ui\/Window\/onPlatformMessage.html\">ui.Window.onPlatformMessage<\/a> handler, and\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> registers <a href=\"dart-ui\/Window\/onMetricsChanged.html\">ui.Window.onMetricsChanged<\/a>,\n<a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">ui.Window.onTextScaleFactorChanged<\/a>, <a href=\"dart-ui\/Window\/onSemanticsEnabledChanged.html\">ui.Window.onSemanticsEnabledChanged<\/a>,\nand <a href=\"dart-ui\/Window\/onSemanticsAction.html\">ui.Window.onSemanticsAction<\/a> handlers.<\/p>\n<p>Each of these other bindings could individually access a <a href=\"dart-ui\/Window-class.html\">Window<\/a> statically,\nbut that would preclude the ability to test these behaviors with a fake\nwindow for verification purposes.  Therefore, <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a> exposes this\n<a href=\"dart-ui\/Window-class.html\">Window<\/a> for use by other bindings.  A subclass of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>, such as\n<a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>, can override this accessor to return a\ndifferent <a href=\"dart-ui\/Window-class.html\">Window<\/a> implementation, such as a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.BindingBase",
                    "isConstant": false,
                    "href": "foundation\/BindingBase\/window.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ui.Window get window =&gt; ui.window;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "flutter_test.AutomatedTestWidgetsFlutterBinding",
                "flutter_test.LiveTestWidgetsFlutterBinding",
                "flutter_test.TestWidgetsFlutterBinding",
                "rendering.RenderingFlutterBinding",
                "widgets.WidgetsFlutterBinding"
            ],
            "realImplementors": [
                "flutter_test.AutomatedTestWidgetsFlutterBinding",
                "flutter_test.LiveTestWidgetsFlutterBinding"
            ],
            "cn": [],
            "href": "foundation\/BindingBase-class.html",
            "desc": "<p>Base class for mixins that provide singleton services (also known as\n\"bindings\").<\/p>\n<p>To use this class in an <code>on<\/code> clause of a mixin, inherit from it and implement\n<a href=\"foundation\/BindingBase\/initInstances.html\">initInstances()<\/a>. The mixin is guaranteed to only be constructed once in\nthe lifetime of the app (more precisely, it will assert if constructed twice\nin checked mode).<\/p>\n<p>The top-most layer used to write the application will have a concrete class\nthat inherits from <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a> and uses all the various <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>\nmixins (such as <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>). For example, the Widgets library in\nFlutter introduces a binding called <a href=\"widgets\/WidgetsFlutterBinding-class.html\">WidgetsFlutterBinding<\/a>. The relevant\nlibrary defines how to create the binding. It could be implied (for example,\n<a href=\"widgets\/WidgetsFlutterBinding-class.html\">WidgetsFlutterBinding<\/a> is automatically started from <a href=\"widgets\/runApp.html\">runApp<\/a>), or the\napplication might be required to explicitly call the constructor.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BindingBase"
        },
        {
            "name": "foundation.BitField",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "BitField",
                    "type": "",
                    "desc": "<p>Creates a bit field of all zeros.<\/p>\n<p>The given length must be at most 62.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BitField",
                    "sig": "",
                    "params": [
                        {
                            "name": "_length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/BitField\/BitField.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BitField(this._length)\n  : assert(_length &lt;= _smiBits),\n    _bits = _allZeros;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns whether the bit with the given index is set to one.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BitField",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BitField\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator [](T index) {\n  assert(index.index &lt; _length);\n  return (_bits &amp; 1 &lt;&lt; index.index) &gt; 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []=",
                    "type": "",
                    "desc": "<p>Sets the bit with the given index to the given value.<\/p>\n<p>If value is true, the bit with the given index is set to one. Otherwise,\nthe bit is set to zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BitField",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BitField\/operator_put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(T index, bool value) {\n  assert(index.index &lt; _length);\n  if (value)\n    _bits = _bits | (1 &lt;&lt; index.index);\n  else\n    _bits = _bits &amp; ~(1 &lt;&lt; index.index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "BitField.filled",
                    "type": "",
                    "desc": "<p>Creates a bit field filled with a particular value.<\/p>\n<p>If the value argument is true, the bits are filled with ones. Otherwise,\nthe bits are filled with zeros.<\/p>\n<p>The given length must be at most 62.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BitField",
                    "sig": "",
                    "params": [
                        {
                            "name": "_length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/BitField\/BitField.filled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BitField.filled(this._length, bool value)\n  : assert(_length &lt;= _smiBits),\n    _bits = value ? _allOnes : _allZeros;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reset",
                    "type": "",
                    "desc": "<p>Sets all the bits to the given value.<\/p>\n<p>If the value is true, the bits are all set to one. Otherwise, the bits are\nall set to zero. Defaults to setting all the bits to zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.BitField",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/BitField\/reset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset([ bool value = false ]) {\n  _bits = value ? _allOnes : _allZeros;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/BitField-class.html",
            "desc": "<p>A BitField over an enum (or other class whose values implement \"index\").\nOnly the first 62 values of the enum can be used as indices.<\/p>\n<p>When compiling to JavaScript, this class is not supported.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BitField"
        },
        {
            "name": "foundation.CachingIterable",
            "extends": [
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "CachingIterable",
                    "type": "",
                    "desc": "<p>Creates a CachingIterable using the given <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> as the\nsource of data. The iterator must be non-null and must not throw\nexceptions.<\/p>\n<p>Since the argument is an <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a>, not an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>, it is\nguaranteed that the underlying data set will only be walked\nonce. If you have an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>, you can pass its <a href=\"foundation\/CachingIterable\/iterator.html\">iterator<\/a>\nfield as the argument to this constructor.<\/p>\n<p>You can use a <code>sync*<\/code> function with this as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;int&gt; range(int start, int end) sync* {\n  for (int index = start; index &lt;= end; index += 1)\n    yield index;\n }\n\nIterable&lt;int&gt; i = CachingIterable&lt;int&gt;(range(1, 5).iterator);\nprint(i.length); \/\/ walks the list\nprint(i.length); \/\/ efficient\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "_prefillIterator",
                            "type": "dart:core.Iterator",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/CachingIterable\/CachingIterable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CachingIterable(this._prefillIterator);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "expand",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/expand.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) {\n  return CachingIterable&lt;T&gt;(super.expand&lt;T&gt;(f).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "map",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-core\/Iterable\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "e",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/map.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;T&gt; map&lt;T&gt;(T f(E e)) {\n  return CachingIterable&lt;T&gt;(super.map&lt;T&gt;(f).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/skip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; skip(int count) {\n  return CachingIterable&lt;E&gt;(super.skip(count).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "skipWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/skipWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; skipWhile(bool test(E value)) {\n  return CachingIterable&lt;E&gt;(super.skipWhile(test).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "take",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"foundation\/CachingIterable\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/take.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; take(int count) {\n  return CachingIterable&lt;E&gt;(super.take(count).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeWhile",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"foundation\/CachingIterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/takeWhile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; takeWhile(bool test(E value)) {\n  return CachingIterable&lt;E&gt;(super.takeWhile(test).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toList",
                    "type": "dart:core.List",
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "growable",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/toList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;E&gt; toList({ bool growable = true }) {\n  _precacheEntireList();\n  return List&lt;E&gt;.from(_results, growable: growable);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "where",
                    "type": "dart:core.Iterable",
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"foundation\/CachingIterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.CachingIterable",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "element",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/CachingIterable\/where.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; where(bool test(E element)) {\n  return CachingIterable&lt;E&gt;(super.where(test).iterator);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "foundation.CachingIterable",
                    "isConstant": false,
                    "href": "foundation\/CachingIterable\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;E&gt; get iterator {\n  return _LazyListIterator&lt;E&gt;(this);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"foundation\/CachingIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "foundation.CachingIterable",
                    "isConstant": false,
                    "href": "foundation\/CachingIterable\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get length {\n  _precacheEntireList();\n  return _results.length;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/CachingIterable-class.html",
            "desc": "<p>A lazy caching version of <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>This iterable is efficient in the following ways:<\/p>\n<ul>\n<li>\n<p>It will not walk the given iterator more than you ask for.<\/p>\n<\/li>\n<li>\n<p>If you use it twice (e.g. you check <a href=\"dart-core\/Iterable\/isNotEmpty.html\">isNotEmpty<\/a>, then\nuse <a href=\"dart-core\/Iterable\/single.html\">single<\/a>), it will only walk the given iterator\nonce. This caching will even work efficiently if you are\nrunning two side-by-side iterators on the same iterable.<\/p>\n<\/li>\n<li>\n<p><a href=\"foundation\/CachingIterable\/toList.html\">toList<\/a> uses its EfficientLength variant to create its\nlist quickly.<\/p>\n<\/li>\n<\/ul>\n<p>It is inefficient in the following ways:<\/p>\n<ul>\n<li>\n<p>The first iteration through has caching overhead.<\/p>\n<\/li>\n<li>\n<p>It requires more memory than a non-caching iterator.<\/p>\n<\/li>\n<li>\n<p>The <a href=\"foundation\/CachingIterable\/length.html\">length<\/a> and <a href=\"foundation\/CachingIterable\/toList.html\">toList<\/a> properties immediately pre-cache the\nentire list. Using these fields therefore loses the laziness of\nthe iterable. However, it still gets cached.<\/p>\n<\/li>\n<\/ul>\n<p>The caching behavior is propagated to the iterators that are\ncreated by <a href=\"foundation\/CachingIterable\/map.html\">map<\/a>, <a href=\"foundation\/CachingIterable\/where.html\">where<\/a>, <a href=\"foundation\/CachingIterable\/expand.html\">expand<\/a>, <a href=\"foundation\/CachingIterable\/take.html\">take<\/a>, <a href=\"foundation\/CachingIterable\/takeWhile.html\">takeWhile<\/a>, <a href=\"foundation\/CachingIterable\/skip.html\">skip<\/a>,\nand <a href=\"foundation\/CachingIterable\/skipWhile.html\">skipWhile<\/a>, and is used by the built-in methods that use an\niterator like <a href=\"dart-core\/Iterable\/isNotEmpty.html\">isNotEmpty<\/a> and <a href=\"dart-core\/Iterable\/single.html\">single<\/a>.<\/p>\n<p>Because a CachingIterable only walks the underlying data once, it\ncannot be used multiple times with the underlying data changing\nbetween each use. You must create a new iterable each time. This\nalso applies to any iterables derived from this one, e.g. as\nreturned by <code>where<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CachingIterable"
        },
        {
            "name": "foundation.Category",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Category",
                    "type": "",
                    "desc": "<p>Create an annotation to provide a categorization of a class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Category",
                    "sig": "",
                    "params": [
                        {
                            "name": "sections",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/Category\/Category.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Category(this.sections) : assert(sections != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "sections",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>The strings the correspond to the section and subsection of the\ncategory represented by this object.<\/p>\n<p>By convention, this list usually has two items. The allowed values\nare defined by the team that owns the library to which the annotated\nclass belongs.<\/p>\n        ",
                    "memberOf": "foundation.Category",
                    "isConstant": false,
                    "href": "foundation\/Category\/sections.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; sections\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/Category-class.html",
            "desc": "<p>A category with which to annotate a class, for documentation\npurposes.<\/p>\n<p>A category is usually represented as a section and a subsection, each\nof which is a string. The engineering team that owns the library to which\nthe class belongs defines the categories used for classes in that library.\nFor example, the Flutter engineering team has defined categories like\n\"Basic\/Buttons\" and \"Material Design\/Buttons\" for Flutter widgets.<\/p>\n<p>A class can have multiple categories.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/\/ A copper coffee pot, as desired by Ben Turpin.\n\/\/\/ ...documentation...\n@Category(&lt;String&gt;['Pots', 'Coffee'])\n@Category(&lt;String&gt;['Copper', 'Cookware'])\n@DocumentationIcon('https:\/\/example.com\/images\/coffee.png')\n@Summary('A proper cup of coffee is made in a proper copper coffee pot.')\nclass CopperCoffeePot {\n  \/\/ ...code...\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DocumentationIcon-class.html\">DocumentationIcon<\/a>, which is used to give the URL to an image that\nrepresents the class.<\/li>\n<li>\n<a href=\"foundation\/Summary-class.html\">Summary<\/a>, which is used to provide a one-line description of a\nclass that overrides the inline documentations' own description.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Category"
        },
        {
            "name": "foundation.ChangeNotifier",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ChangeNotifier",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "foundation.ChangeNotifier",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/ChangeNotifier\/ChangeNotifier.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Register a closure to be called when the object changes.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ChangeNotifier",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ChangeNotifier\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener) {\n  assert(_debugAssertNotDisposed());\n  _listeners.add(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ChangeNotifier",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ChangeNotifier\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() {\n  assert(_debugAssertNotDisposed());\n  _listeners = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "notifyListeners",
                    "type": "",
                    "desc": "<p>Call all the registered listeners.<\/p>\n<p>Call this method whenever the object changes, to notify any clients the\nobject may have. Listeners that are added during this iteration will not\nbe visited. Listeners that are removed during this iteration will not be\nvisited after they are removed.<\/p>\n<p>Exceptions thrown by listeners will be caught and reported using\n<a href=\"foundation\/FlutterError\/reportError.html\">FlutterError.reportError<\/a>.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n<p>Surprising behavior can result when reentrantly removing a listener (i.e.\nin response to a notification) that has been registered multiple times.\nSee the discussion at <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ChangeNotifier",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ChangeNotifier\/notifyListeners.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@visibleForTesting\nvoid notifyListeners() {\n  assert(_debugAssertNotDisposed());\n  if (_listeners != null) {\n    final List&lt;VoidCallback&gt; localListeners = List&lt;VoidCallback&gt;.from(_listeners);\n    for (VoidCallback listener in localListeners) {\n      try {\n        if (_listeners.contains(listener))\n          listener();\n      } catch (exception, stack) {\n        FlutterError.reportError(FlutterErrorDetails(\n          exception: exception,\n          stack: stack,\n          library: 'foundation library',\n          context: 'while dispatching notifications for $runtimeType',\n          informationCollector: (StringBuffer information) {\n            information.writeln('The $runtimeType sending notification was:');\n            information.write('  $this');\n          },\n        ));\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Remove a previously registered closure from the list of closures that are\nnotified when the object changes.<\/p>\n<p>If the given listener is not registered, the call is ignored.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n<p>If a listener had been added twice, and is removed once during an\niteration (i.e. in response to a notification), it will still be called\nagain. If, on the other hand, it is removed as many times as it was\nregistered, then it will no longer be called. This odd behavior is the\nresult of the <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> not being able to determine which listener\nis being removed, since they are identical, and therefore conservatively\nstill calling all the listeners when it knows that any are still\nregistered.<\/p>\n<p>This surprising behavior can be unexpectedly observed when registering a\nlistener on two separate objects which are both forwarding all\nregistrations to a common upstream object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ChangeNotifier",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ChangeNotifier\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener) {\n  assert(_debugAssertNotDisposed());\n  _listeners.remove(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "hasListeners",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether any listeners are currently registered.<\/p>\n<p>Clients should not depend on this value for their behavior, because having\none listener's logic change when another listener happens to start or stop\nlistening will lead to extremely hard-to-track bugs. Subclasses might use\nthis information to determine whether to do any work when there are no\nlisteners, however; for example, resuming a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> when a listener is\nadded and pausing it when a listener is removed.<\/p>\n<p>Typically this is used by overriding <a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a>, checking if\n<a href=\"foundation\/ChangeNotifier\/hasListeners.html\">hasListeners<\/a> is false before calling <code>super.addListener()<\/code>, and if so,\nstarting whatever work is needed to determine when to call\n<a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>; and similarly, by overriding <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a>, checking\nif <a href=\"foundation\/ChangeNotifier\/hasListeners.html\">hasListeners<\/a> is false after calling <code>super.removeListener()<\/code>, and if\nso, stopping that same work.<\/p>\n        ",
                    "memberOf": "foundation.ChangeNotifier",
                    "isConstant": false,
                    "href": "foundation\/ChangeNotifier\/hasListeners.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get hasListeners {\n  assert(_debugAssertNotDisposed());\n  return _listeners.isNotEmpty;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "foundation.ValueNotifier",
                "material.DataTableSource",
                "material.TabController",
                "rendering.ViewportOffset",
                "semantics.SemanticsOwner",
                "widgets.FixedExtentScrollController",
                "widgets.FocusNode",
                "widgets.KeepAliveHandle",
                "widgets.PageController",
                "widgets.ScrollController",
                "widgets.ScrollPosition",
                "widgets.ScrollPositionWithSingleContext",
                "widgets.ScrollbarPainter",
                "widgets.SliverOverlapAbsorberHandle",
                "widgets.TextEditingController",
                "widgets.TrackingScrollController"
            ],
            "realImplementors": [
                "foundation.ValueNotifier"
            ],
            "cn": [],
            "href": "foundation\/ChangeNotifier-class.html",
            "desc": "<p>A class that can be extended or mixed in that provides a change notification\nAPI using <a href=\"dart-ui\/VoidCallback.html\">VoidCallback<\/a> for notifications.<\/p>\n<p><a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> is optimized for small numbers (one or two) of listeners.\nIt is O(N) for adding and removing listeners and O(N\u00b2) for dispatching\nnotifications (where N is the number of listeners).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/ValueNotifier-class.html\">ValueNotifier<\/a>, which is a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> that wraps a single value.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ChangeNotifier"
        },
        {
            "name": "foundation.ComputeCallback",
            "type": "",
            "desc": "<p>Signature for the callback passed to <a href=\"foundation\/compute.html\">compute<\/a>.<\/p>\n<p><code>Q<\/code> is the type of the message that kicks off the computation.<\/p>\n<p><code>R<\/code> is the type of the value returned.<\/p>\n<p>Instances of <a href=\"foundation\/ComputeCallback.html\">ComputeCallback<\/a> must be top-level functions or static methods\nof classes, not closures or instance methods of objects.<\/p>\n<p>There are limitations on the values that can be sent and received to and\nfrom isolates. These limitations constrain the values of <code>Q<\/code> and <code>R<\/code> that\nare possible. See the discussion at <a href=\"dart-isolate\/SendPort\/send.html\">SendPort.send<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ComputeCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ComputeCallback&lt;Q, R&gt; = R Function(Q message);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.ComputePropertyValueCallback",
            "type": "",
            "desc": "<p>Signature for computing the value of a property.<\/p>\n<p>May throw exception if accessing the property would throw an exception\nand callers must handle that case gracefully. For example, accessing a\nproperty may trigger an assert that layout constraints were violated.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/ComputePropertyValueCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ComputePropertyValueCallback&lt;T&gt; = T Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.DebugPrintCallback",
            "type": "",
            "desc": "<p>Signature for <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> implementations.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWidth",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/DebugPrintCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef DebugPrintCallback = void Function(String message, { int wrapWidth });<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "type": "",
            "name": "foundation.DiagnosticLevel",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticLevel",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticLevel\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DiagnosticLevel-class.html",
            "desc": "<p>The various priority levels used to filter which diagnostics are shown and\nomitted.<\/p>\n<p>Trees of Flutter diagnostics can be very large so filtering the diagnostics\nshown matters. Typically filtering to only show diagnostics with at least\nlevel <a href=\"foundation\/DiagnosticLevel-class.html\">debug<\/a> is appropriate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "DiagnosticLevel"
        },
        {
            "name": "foundation.DiagnosticPropertiesBuilder",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticPropertiesBuilder",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "foundation.DiagnosticPropertiesBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticPropertiesBuilder\/DiagnosticPropertiesBuilder.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Add a property to the list of properties.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticPropertiesBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "property",
                            "type": "foundation.DiagnosticsNode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticPropertiesBuilder\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(DiagnosticsNode property) {\n  properties.add(property);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "defaultDiagnosticsTreeStyle",
                    "type": "foundation.DiagnosticsTreeStyle",
                    "types": [],
                    "desc": "<p>Default style to use for the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> if no style is specified.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticPropertiesBuilder",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticPropertiesBuilder\/defaultDiagnosticsTreeStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsTreeStyle defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.sparse\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "emptyBodyDescription",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to show if the node has no displayed properties or children.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticPropertiesBuilder",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticPropertiesBuilder\/emptyBodyDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String emptyBodyDescription\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "properties",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ],
                    "desc": "<p>List of properties accumulated so far.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticPropertiesBuilder",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticPropertiesBuilder\/properties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;DiagnosticsNode&gt; properties = &lt;DiagnosticsNode&gt;[]\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DiagnosticPropertiesBuilder-class.html",
            "desc": "<p>Builder to accumulate properties and configuration used to assemble a\n<a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> from a <a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a> object.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DiagnosticPropertiesBuilder"
        },
        {
            "name": "foundation.Diagnosticable",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Diagnosticable",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Diagnosticable",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/Diagnosticable\/Diagnosticable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Diagnosticable();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"foundation\/Diagnosticable\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Diagnosticable",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/Diagnosticable\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) { }<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toDiagnosticsNode",
                    "type": "foundation.DiagnosticsNode",
                    "desc": "<p>Returns a debug representation of the object that is used by debugging\ntools and by <a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>.<\/p>\n<p>Leave <code>name<\/code> as null if there is not a meaningful description of the\nrelationship between the this node and its parent.<\/p>\n<p>Typically the <code>style<\/code> argument is only specified to indicate an atypical\nrelationship between the parent and the node. For example, pass\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that a node is offstage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Diagnosticable",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/Diagnosticable\/toDiagnosticsNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsNode toDiagnosticsNode({ String name, DiagnosticsTreeStyle style }) {\n  return DiagnosticableNode&lt;Diagnosticable&gt;(\n    name: name,\n    value: this,\n    style: style,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Diagnosticable",
                    "sig": "",
                    "params": [
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/Diagnosticable\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString({ DiagnosticLevel minLevel = DiagnosticLevel.debug }) {\n  String fullString;\n  assert(() {\n    fullString = toDiagnosticsNode(style: DiagnosticsTreeStyle.singleLine).toString(minLevel: minLevel);\n    return true;\n  }());\n  return fullString ?? toStringShort();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.Diagnosticable",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/Diagnosticable\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringShort() =&gt; describeIdentity(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "cupertino.CupertinoActionSheet",
                "cupertino.CupertinoActionSheetAction",
                "cupertino.CupertinoActivityIndicator",
                "cupertino.CupertinoAlertDialog",
                "cupertino.CupertinoApp",
                "cupertino.CupertinoButton",
                "cupertino.CupertinoDatePicker",
                "cupertino.CupertinoDialog",
                "cupertino.CupertinoDialogAction",
                "cupertino.CupertinoFullscreenDialogTransition",
                "cupertino.CupertinoNavigationBar",
                "cupertino.CupertinoNavigationBarBackButton",
                "cupertino.CupertinoPageScaffold",
                "cupertino.CupertinoPageTransition",
                "cupertino.CupertinoPicker",
                "cupertino.CupertinoPopupSurface",
                "cupertino.CupertinoScrollbar",
                "cupertino.CupertinoSegmentedControl",
                "cupertino.CupertinoSlider",
                "cupertino.CupertinoSliverNavigationBar",
                "cupertino.CupertinoSliverRefreshControl",
                "cupertino.CupertinoSwitch",
                "cupertino.CupertinoTabBar",
                "cupertino.CupertinoTabScaffold",
                "cupertino.CupertinoTabView",
                "cupertino.CupertinoTextField",
                "cupertino.CupertinoTextThemeData",
                "cupertino.CupertinoTheme",
                "cupertino.CupertinoThemeData",
                "cupertino.CupertinoTimerPicker",
                "foundation.DiagnosticableTree",
                "gestures.PointerAddedEvent",
                "gestures.PointerCancelEvent",
                "gestures.PointerDownEvent",
                "gestures.PointerEnterEvent",
                "gestures.PointerEvent",
                "gestures.PointerExitEvent",
                "gestures.PointerHoverEvent",
                "gestures.PointerMoveEvent",
                "gestures.PointerRemovedEvent",
                "gestures.PointerScrollEvent",
                "gestures.PointerSignalEvent",
                "gestures.PointerUpEvent",
                "material.AboutDialog",
                "material.AboutListTile",
                "material.ActionChip",
                "material.AlertDialog",
                "material.AnimatedIcon",
                "material.AnimatedTheme",
                "material.AppBar",
                "material.AppBarTheme",
                "material.BackButton",
                "material.BackButtonIcon",
                "material.BottomAppBar",
                "material.BottomAppBarTheme",
                "material.BottomNavigationBar",
                "material.BottomSheet",
                "material.ButtonBar",
                "material.ButtonTheme",
                "material.ButtonThemeData",
                "material.Card",
                "material.CardTheme",
                "material.Checkbox",
                "material.CheckboxListTile",
                "material.CheckedPopupMenuItem",
                "material.Chip",
                "material.ChipTheme",
                "material.ChipThemeData",
                "material.ChoiceChip",
                "material.CircleAvatar",
                "material.CircularProgressIndicator",
                "material.CloseButton",
                "material.ColorScheme",
                "material.DataTable",
                "material.DayPicker",
                "material.DefaultTabController",
                "material.Dialog",
                "material.DialogTheme",
                "material.Divider",
                "material.Drawer",
                "material.DrawerController",
                "material.DrawerControllerState",
                "material.DrawerHeader",
                "material.DropdownButton",
                "material.DropdownButtonFormField",
                "material.DropdownButtonHideUnderline",
                "material.DropdownMenuItem",
                "material.ExpandIcon",
                "material.ExpansionPanelList",
                "material.ExpansionTile",
                "material.FilterChip",
                "material.FlatButton",
                "material.FlexibleSpaceBar",
                "material.FlexibleSpaceBarSettings",
                "material.FloatingActionButton",
                "material.FloatingActionButtonThemeData",
                "material.FlutterLogo",
                "material.GridTile",
                "material.GridTileBar",
                "material.IconButton",
                "material.Ink",
                "material.InkResponse",
                "material.InkWell",
                "material.InputChip",
                "material.InputDecorationTheme",
                "material.InputDecorator",
                "material.LicensePage",
                "material.LinearProgressIndicator",
                "material.ListTile",
                "material.ListTileTheme",
                "material.Material",
                "material.MaterialApp",
                "material.MaterialBasedCupertinoThemeData",
                "material.MaterialButton",
                "material.MergeableMaterial",
                "material.MonthPicker",
                "material.OutlineButton",
                "material.PageTransitionsTheme",
                "material.PaginatedDataTable",
                "material.PaginatedDataTableState",
                "material.PopupMenuButton",
                "material.PopupMenuDivider",
                "material.PopupMenuEntry",
                "material.PopupMenuItem",
                "material.PopupMenuItemState",
                "material.ProgressIndicator",
                "material.Radio",
                "material.RadioListTile",
                "material.RaisedButton",
                "material.RawChip",
                "material.RawMaterialButton",
                "material.RefreshIndicator",
                "material.RefreshIndicatorState",
                "material.RefreshProgressIndicator",
                "material.ReorderableListView",
                "material.Scaffold",
                "material.ScaffoldState",
                "material.Scrollbar",
                "material.SimpleDialog",
                "material.SimpleDialogOption",
                "material.Slider",
                "material.SliderTheme",
                "material.SliderThemeData",
                "material.SliverAppBar",
                "material.SnackBar",
                "material.SnackBarAction",
                "material.Stepper",
                "material.Switch",
                "material.SwitchListTile",
                "material.Tab",
                "material.TabBar",
                "material.TabBarTheme",
                "material.TabBarView",
                "material.TabPageSelector",
                "material.TabPageSelectorIndicator",
                "material.TableRowInkWell",
                "material.TextField",
                "material.TextFormField",
                "material.TextTheme",
                "material.Theme",
                "material.ThemeData",
                "material.Tooltip",
                "material.Typography",
                "material.UnderlineTabIndicator",
                "material.UserAccountsDrawerHeader",
                "material.VerticalDivider",
                "material.YearPicker",
                "painting.BoxDecoration",
                "painting.Decoration",
                "painting.FlutterLogoDecoration",
                "painting.ImageStream",
                "painting.ImageStreamCompleter",
                "painting.MultiFrameImageStreamCompleter",
                "painting.OneFrameImageStreamCompleter",
                "painting.ShapeDecoration",
                "painting.StrutStyle",
                "painting.TextSpan",
                "painting.TextStyle",
                "rendering.SliverGeometry",
                "semantics.OrdinalSortKey",
                "semantics.SemanticsData",
                "semantics.SemanticsHintOverrides",
                "semantics.SemanticsProperties",
                "semantics.SemanticsSortKey",
                "services.LogicalKeyboardKey",
                "services.PhysicalKeyboardKey",
                "widgets.AbsorbPointer",
                "widgets.Align",
                "widgets.AlignTransition",
                "widgets.AndroidView",
                "widgets.AnimatedAlign",
                "widgets.AnimatedBuilder",
                "widgets.AnimatedContainer",
                "widgets.AnimatedCrossFade",
                "widgets.AnimatedDefaultTextStyle",
                "widgets.AnimatedList",
                "widgets.AnimatedListState",
                "widgets.AnimatedModalBarrier",
                "widgets.AnimatedOpacity",
                "widgets.AnimatedPadding",
                "widgets.AnimatedPhysicalModel",
                "widgets.AnimatedPositioned",
                "widgets.AnimatedPositionedDirectional",
                "widgets.AnimatedSize",
                "widgets.AnimatedSwitcher",
                "widgets.AnimatedWidget",
                "widgets.AnimatedWidgetBaseState",
                "widgets.AnnotatedRegion",
                "widgets.AspectRatio",
                "widgets.AutomaticKeepAlive",
                "widgets.BackdropFilter",
                "widgets.Banner",
                "widgets.Baseline",
                "widgets.BlockSemantics",
                "widgets.BoxScrollView",
                "widgets.Builder",
                "widgets.Center",
                "widgets.CheckedModeBanner",
                "widgets.ClipOval",
                "widgets.ClipPath",
                "widgets.ClipRRect",
                "widgets.ClipRect",
                "widgets.Column",
                "widgets.ComponentElement",
                "widgets.CompositedTransformFollower",
                "widgets.CompositedTransformTarget",
                "widgets.ConstrainedBox",
                "widgets.Container",
                "widgets.CustomMultiChildLayout",
                "widgets.CustomPaint",
                "widgets.CustomScrollView",
                "widgets.CustomSingleChildLayout",
                "widgets.DecoratedBox",
                "widgets.DecoratedBoxTransition",
                "widgets.DefaultAssetBundle",
                "widgets.DefaultTextStyle",
                "widgets.DefaultTextStyleTransition",
                "widgets.Directionality",
                "widgets.Dismissible",
                "widgets.DragTarget",
                "widgets.Draggable",
                "widgets.EditableText",
                "widgets.EditableTextState",
                "widgets.Element",
                "widgets.ErrorWidget",
                "widgets.ExcludeSemantics",
                "widgets.Expanded",
                "widgets.FadeInImage",
                "widgets.FadeTransition",
                "widgets.FittedBox",
                "widgets.Flex",
                "widgets.Flexible",
                "widgets.Flow",
                "widgets.FocusScope",
                "widgets.Form",
                "widgets.FormField",
                "widgets.FormFieldState",
                "widgets.FormState",
                "widgets.FractionalTranslation",
                "widgets.FractionallySizedBox",
                "widgets.FutureBuilder",
                "widgets.GestureDetector",
                "widgets.GlowingOverscrollIndicator",
                "widgets.GridPaper",
                "widgets.GridView",
                "widgets.Hero",
                "widgets.Icon",
                "widgets.IconTheme",
                "widgets.IconThemeData",
                "widgets.IgnorePointer",
                "widgets.Image",
                "widgets.ImageIcon",
                "widgets.ImplicitlyAnimatedWidget",
                "widgets.ImplicitlyAnimatedWidgetState",
                "widgets.IndexedSemantics",
                "widgets.IndexedStack",
                "widgets.InheritedElement",
                "widgets.InheritedModel",
                "widgets.InheritedModelElement",
                "widgets.InheritedNotifier",
                "widgets.InheritedWidget",
                "widgets.IntrinsicHeight",
                "widgets.IntrinsicWidth",
                "widgets.KeepAlive",
                "widgets.KeyedSubtree",
                "widgets.LayoutBuilder",
                "widgets.LayoutId",
                "widgets.LeafRenderObjectElement",
                "widgets.LeafRenderObjectWidget",
                "widgets.LimitedBox",
                "widgets.ListBody",
                "widgets.ListView",
                "widgets.ListWheelElement",
                "widgets.ListWheelScrollView",
                "widgets.ListWheelViewport",
                "widgets.Listener",
                "widgets.Localizations",
                "widgets.LongPressDraggable",
                "widgets.MediaQuery",
                "widgets.MergeSemantics",
                "widgets.MetaData",
                "widgets.ModalBarrier",
                "widgets.MultiChildRenderObjectElement",
                "widgets.MultiChildRenderObjectWidget",
                "widgets.NavigationToolbar",
                "widgets.Navigator",
                "widgets.NavigatorState",
                "widgets.NestedScrollView",
                "widgets.NestedScrollViewViewport",
                "widgets.NotificationListener",
                "widgets.Offstage",
                "widgets.Opacity",
                "widgets.OrientationBuilder",
                "widgets.OverflowBox",
                "widgets.Overlay",
                "widgets.OverlayState",
                "widgets.Padding",
                "widgets.PageStorage",
                "widgets.PageView",
                "widgets.ParentDataElement",
                "widgets.ParentDataWidget",
                "widgets.PerformanceOverlay",
                "widgets.PhysicalModel",
                "widgets.PhysicalShape",
                "widgets.Placeholder",
                "widgets.Positioned",
                "widgets.PositionedDirectional",
                "widgets.PositionedTransition",
                "widgets.PreferredSize",
                "widgets.PrimaryScrollController",
                "widgets.ProxyElement",
                "widgets.ProxyWidget",
                "widgets.RawGestureDetector",
                "widgets.RawGestureDetectorState",
                "widgets.RawImage",
                "widgets.RawKeyboardListener",
                "widgets.RelativePositionedTransition",
                "widgets.RenderObjectElement",
                "widgets.RenderObjectToWidgetAdapter",
                "widgets.RenderObjectToWidgetElement",
                "widgets.RenderObjectWidget",
                "widgets.RepaintBoundary",
                "widgets.RichText",
                "widgets.RootRenderObjectElement",
                "widgets.RotatedBox",
                "widgets.RotationTransition",
                "widgets.Row",
                "widgets.SafeArea",
                "widgets.ScaleTransition",
                "widgets.ScrollConfiguration",
                "widgets.ScrollView",
                "widgets.Scrollable",
                "widgets.ScrollableState",
                "widgets.Semantics",
                "widgets.SemanticsDebugger",
                "widgets.ShaderMask",
                "widgets.ShrinkWrappingViewport",
                "widgets.SingleChildRenderObjectElement",
                "widgets.SingleChildRenderObjectWidget",
                "widgets.SingleChildScrollView",
                "widgets.SizeChangedLayoutNotifier",
                "widgets.SizeTransition",
                "widgets.SizedBox",
                "widgets.SizedOverflowBox",
                "widgets.SlideTransition",
                "widgets.SliverFillRemaining",
                "widgets.SliverFillViewport",
                "widgets.SliverFixedExtentList",
                "widgets.SliverGrid",
                "widgets.SliverList",
                "widgets.SliverMultiBoxAdaptorElement",
                "widgets.SliverMultiBoxAdaptorWidget",
                "widgets.SliverOverlapAbsorber",
                "widgets.SliverOverlapInjector",
                "widgets.SliverPadding",
                "widgets.SliverPersistentHeader",
                "widgets.SliverPrototypeExtentList",
                "widgets.SliverSafeArea",
                "widgets.SliverToBoxAdapter",
                "widgets.SliverWithKeepAliveWidget",
                "widgets.Spacer",
                "widgets.Stack",
                "widgets.State",
                "widgets.StatefulBuilder",
                "widgets.StatefulElement",
                "widgets.StatefulWidget",
                "widgets.StatelessElement",
                "widgets.StatelessWidget",
                "widgets.StatusTransitionWidget",
                "widgets.StreamBuilder",
                "widgets.StreamBuilderBase",
                "widgets.Table",
                "widgets.TableCell",
                "widgets.Text",
                "widgets.TextSelectionGestureDetector",
                "widgets.Texture",
                "widgets.TickerMode",
                "widgets.Title",
                "widgets.Transform",
                "widgets.UiKitView",
                "widgets.UnconstrainedBox",
                "widgets.UniqueWidget",
                "widgets.ValueListenableBuilder",
                "widgets.Viewport",
                "widgets.Visibility",
                "widgets.Widget",
                "widgets.WidgetInspector",
                "widgets.WidgetToRenderBoxAdapter",
                "widgets.WidgetsApp",
                "widgets.WillPopScope",
                "widgets.Wrap"
            ],
            "realImplementors": [
                "cupertino.CupertinoActionSheet",
                "cupertino.CupertinoActionSheetAction",
                "cupertino.CupertinoActivityIndicator",
                "cupertino.CupertinoAlertDialog",
                "cupertino.CupertinoApp",
                "cupertino.CupertinoButton",
                "cupertino.CupertinoDatePicker",
                "cupertino.CupertinoDialog",
                "cupertino.CupertinoDialogAction",
                "cupertino.CupertinoFullscreenDialogTransition",
                "cupertino.CupertinoNavigationBar",
                "cupertino.CupertinoNavigationBarBackButton",
                "cupertino.CupertinoPageScaffold",
                "cupertino.CupertinoPageTransition",
                "cupertino.CupertinoPicker",
                "cupertino.CupertinoPopupSurface",
                "cupertino.CupertinoScrollbar",
                "cupertino.CupertinoSegmentedControl",
                "cupertino.CupertinoSlider",
                "cupertino.CupertinoSliverNavigationBar",
                "cupertino.CupertinoSliverRefreshControl",
                "cupertino.CupertinoSwitch",
                "cupertino.CupertinoTabBar",
                "cupertino.CupertinoTabScaffold",
                "cupertino.CupertinoTabView",
                "cupertino.CupertinoTextField",
                "cupertino.CupertinoTextThemeData",
                "cupertino.CupertinoTheme",
                "cupertino.CupertinoThemeData",
                "cupertino.CupertinoTimerPicker"
            ],
            "cn": [],
            "href": "foundation\/Diagnosticable-class.html",
            "desc": "<p>A base class for providing string and <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> debug\nrepresentations describing the properties of an object.<\/p>\n<p>The string debug representation is generated from the intermediate\n<a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representation. The <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representation is\nalso used by debugging tools displaying interactive trees of objects and\nproperties.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DiagnosticableTree-class.html\">DiagnosticableTree<\/a>, which extends this class to also describe the\nchildren of a tree structured object.<\/li>\n<li>\n<a href=\"foundation\/Diagnosticable\/debugFillProperties.html\">Diagnosticable.debugFillProperties<\/a>, which lists best practices\nfor specifying the properties of a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>. The most common use\ncase is to override <a href=\"foundation\/Diagnosticable\/debugFillProperties.html\">debugFillProperties<\/a> defining custom properties for\na subclass of <a href=\"foundation\/DiagnosticableTreeMixin-mixin.html\">DiagnosticableTreeMixin<\/a> using the existing\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticableTree\/debugDescribeChildren.html\">DiagnosticableTree.debugDescribeChildren<\/a>, which lists best practices\nfor describing the children of a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>. Typically the base\nclass already describes the children of a node properly or a node has\nno children.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>, which should be used to create leaf diagnostic\nnodes without properties or children. There are many\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses to handle common use cases.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Diagnosticable"
        },
        {
            "name": "foundation.DiagnosticableNode",
            "extends": [
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticableNode",
                    "type": "",
                    "desc": "<p>Create a diagnostics describing a <a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a> value.<\/p>\n<p>The <code>value<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticableNode\/DiagnosticableNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticableNode({\n  String name,\n  @required this.value,\n  @required DiagnosticsTreeStyle style,\n}) : assert(value != null),\n     super(\n       name: name,\n       style: style,\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticableNode\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableNode\/getChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getChildren() {\n  return const&lt;DiagnosticsNode&gt;[];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "getProperties",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableNode\/getProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getProperties() =&gt; _builder.properties;<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "toDescription",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableNode\/toDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toDescription({ TextTreeConfiguration parentConfiguration }) {\n  return value.toStringShort();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "emptyBodyDescription",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to show if the node has no displayed properties or children.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticableNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticableNode\/emptyBodyDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get emptyBodyDescription =&gt; _builder.emptyBodyDescription;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "foundation.DiagnosticsTreeStyle",
                    "types": [],
                    "desc": "<p>Hint for how the node should be displayed.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticableNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticableNode\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticsTreeStyle get style {\n  return super.style ?? _builder.defaultDiagnosticsTreeStyle;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "types": [],
                    "desc": "<p>The actual object this is diagnostics data for.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticableNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticableNode\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DiagnosticableNode-class.html",
            "desc": "<p><a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> that lazily calls the associated <a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a> <a href=\"foundation\/DiagnosticableNode\/value.html\">value<\/a>\nto implement <a href=\"foundation\/DiagnosticableNode\/getChildren.html\">getChildren<\/a> and <a href=\"foundation\/DiagnosticableNode\/getProperties.html\">getProperties<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DiagnosticableNode"
        },
        {
            "name": "foundation.DiagnosticableTree",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticableTree",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticableTree\/DiagnosticableTree.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DiagnosticableTree();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugDescribeChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTree\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticableTree\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTree\/debugDescribeChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() =&gt; const &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "toDiagnosticsNode",
                    "type": "foundation.DiagnosticsNode",
                    "desc": "<p>Returns a debug representation of the object that is used by debugging\ntools and by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>.<\/p>\n<p>Leave <code>name<\/code> as null if there is not a meaningful description of the\nrelationship between the this node and its parent.<\/p>\n<p>Typically the <code>style<\/code> argument is only specified to indicate an atypical\nrelationship between the parent and the node. For example, pass\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that a node is offstage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTree\/toDiagnosticsNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticsNode toDiagnosticsNode({ String name, DiagnosticsTreeStyle style }) {\n  return _DiagnosticableTreeNode(\n    name: name,\n    value: this,\n    style: style,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringDeep",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this node and its descendants.<\/p>\n<p><code>prefixLineOne<\/code> will be added to the front of the first line of the\noutput. <code>prefixOtherLines<\/code> will be added to the front of each other line.\nIf <code>prefixOtherLines<\/code> is null, the <code>prefixLineOne<\/code> is used for every line.\nBy default, there is no prefix.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>The <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a> method takes other arguments, but those are intended\nfor internal use when recursing to the descendants, and so can be ignored.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a brief description of the object but not its children.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticableTree\/toStringShallow.html\">toStringShallow<\/a>, for a detailed description of the object but not its\nchildren.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefixLineOne",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixOtherLines",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTree\/toStringDeep.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringDeep({\n  String prefixLineOne = '',\n  String prefixOtherLines,\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  return toDiagnosticsNode().toStringDeep(prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShallow",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a one-line detailed description of the object.<\/p>\n<p>This description is often somewhat long. This includes the same\ninformation given by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, but does not recurse to any children.<\/p>\n<p><code>joiner<\/code> specifies the string which is place between each part obtained\nfrom <a href=\"foundation\/Diagnosticable\/debugFillProperties.html\">debugFillProperties<\/a>. Passing a string such as <code>'\\n '<\/code> will result\nin a multi-line string that indents the properties of the object below its\nname (as per <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>).<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a brief description of the object.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, for a description of the subtree rooted at this object.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [
                        {
                            "name": "joiner",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTree\/toStringShallow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringShallow({\n  String joiner = ', ',\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  final StringBuffer result = StringBuffer();\n  result.write(toString());\n  result.write(joiner);\n  final DiagnosticPropertiesBuilder builder = DiagnosticPropertiesBuilder();\n  debugFillProperties(builder);\n  result.write(\n    builder.properties.where((DiagnosticsNode n) =&gt; !n.isFiltered(minLevel)).join(joiner),\n  );\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTree",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTree\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; describeIdentity(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "cupertino.CupertinoActionSheet",
                "cupertino.CupertinoActionSheetAction",
                "cupertino.CupertinoActivityIndicator",
                "cupertino.CupertinoAlertDialog",
                "cupertino.CupertinoApp",
                "cupertino.CupertinoButton",
                "cupertino.CupertinoDatePicker",
                "cupertino.CupertinoDialog",
                "cupertino.CupertinoDialogAction",
                "cupertino.CupertinoFullscreenDialogTransition",
                "cupertino.CupertinoNavigationBar",
                "cupertino.CupertinoNavigationBarBackButton",
                "cupertino.CupertinoPageScaffold",
                "cupertino.CupertinoPageTransition",
                "cupertino.CupertinoPicker",
                "cupertino.CupertinoPopupSurface",
                "cupertino.CupertinoScrollbar",
                "cupertino.CupertinoSegmentedControl",
                "cupertino.CupertinoSlider",
                "cupertino.CupertinoSliverNavigationBar",
                "cupertino.CupertinoSliverRefreshControl",
                "cupertino.CupertinoSwitch",
                "cupertino.CupertinoTabBar",
                "cupertino.CupertinoTabScaffold",
                "cupertino.CupertinoTabView",
                "cupertino.CupertinoTextField",
                "cupertino.CupertinoTheme",
                "cupertino.CupertinoTimerPicker",
                "material.AboutDialog",
                "material.AboutListTile",
                "material.ActionChip",
                "material.AlertDialog",
                "material.AnimatedIcon",
                "material.AnimatedTheme",
                "material.AppBar",
                "material.BackButton",
                "material.BackButtonIcon",
                "material.BottomAppBar",
                "material.BottomNavigationBar",
                "material.BottomSheet",
                "material.ButtonBar",
                "material.ButtonTheme",
                "material.Card",
                "material.Checkbox",
                "material.CheckboxListTile",
                "material.CheckedPopupMenuItem",
                "material.Chip",
                "material.ChipTheme",
                "material.ChoiceChip",
                "material.CircleAvatar",
                "material.CircularProgressIndicator",
                "material.CloseButton",
                "material.DataTable",
                "material.DayPicker",
                "material.DefaultTabController",
                "material.Dialog",
                "material.Divider",
                "material.Drawer",
                "material.DrawerController",
                "material.DrawerHeader",
                "material.DropdownButton",
                "material.DropdownButtonFormField",
                "material.DropdownButtonHideUnderline",
                "material.DropdownMenuItem",
                "material.ExpandIcon",
                "material.ExpansionPanelList",
                "material.ExpansionTile",
                "material.FilterChip",
                "material.FlatButton",
                "material.FlexibleSpaceBar",
                "material.FlexibleSpaceBarSettings",
                "material.FloatingActionButton",
                "material.FlutterLogo",
                "material.GridTile",
                "material.GridTileBar",
                "material.IconButton",
                "material.Ink",
                "material.InkResponse",
                "material.InkWell",
                "material.InputChip",
                "material.InputDecorator",
                "material.LicensePage",
                "material.LinearProgressIndicator",
                "material.ListTile",
                "material.ListTileTheme",
                "material.Material",
                "material.MaterialApp",
                "material.MaterialButton",
                "material.MergeableMaterial",
                "material.MonthPicker",
                "material.OutlineButton",
                "material.PaginatedDataTable",
                "material.PopupMenuButton",
                "material.PopupMenuDivider",
                "material.PopupMenuEntry",
                "material.PopupMenuItem",
                "material.ProgressIndicator",
                "material.Radio",
                "material.RadioListTile",
                "material.RaisedButton",
                "material.RawChip",
                "material.RawMaterialButton",
                "material.RefreshIndicator",
                "material.RefreshProgressIndicator",
                "material.ReorderableListView",
                "material.Scaffold",
                "material.Scrollbar",
                "material.SimpleDialog",
                "material.SimpleDialogOption",
                "material.Slider",
                "material.SliderTheme",
                "material.SliverAppBar",
                "material.SnackBar",
                "material.SnackBarAction",
                "material.Stepper",
                "material.Switch",
                "material.SwitchListTile",
                "material.Tab",
                "material.TabBar",
                "material.TabBarView",
                "material.TabPageSelector",
                "material.TabPageSelectorIndicator",
                "material.TableRowInkWell",
                "material.TextField",
                "material.TextFormField",
                "material.Theme",
                "material.Tooltip",
                "material.UserAccountsDrawerHeader",
                "material.VerticalDivider",
                "material.YearPicker",
                "painting.TextSpan",
                "semantics.SemanticsHintOverrides",
                "semantics.SemanticsProperties",
                "widgets.AbsorbPointer",
                "widgets.Align",
                "widgets.AlignTransition",
                "widgets.AndroidView",
                "widgets.AnimatedAlign",
                "widgets.AnimatedBuilder",
                "widgets.AnimatedContainer",
                "widgets.AnimatedCrossFade",
                "widgets.AnimatedDefaultTextStyle",
                "widgets.AnimatedList",
                "widgets.AnimatedModalBarrier",
                "widgets.AnimatedOpacity",
                "widgets.AnimatedPadding",
                "widgets.AnimatedPhysicalModel",
                "widgets.AnimatedPositioned",
                "widgets.AnimatedPositionedDirectional",
                "widgets.AnimatedSize",
                "widgets.AnimatedSwitcher",
                "widgets.AnimatedWidget",
                "widgets.AnnotatedRegion",
                "widgets.AspectRatio",
                "widgets.AutomaticKeepAlive",
                "widgets.BackdropFilter",
                "widgets.Banner",
                "widgets.Baseline",
                "widgets.BlockSemantics",
                "widgets.BoxScrollView",
                "widgets.Builder",
                "widgets.Center",
                "widgets.CheckedModeBanner",
                "widgets.ClipOval",
                "widgets.ClipPath",
                "widgets.ClipRRect",
                "widgets.ClipRect",
                "widgets.Column",
                "widgets.ComponentElement",
                "widgets.CompositedTransformFollower",
                "widgets.CompositedTransformTarget",
                "widgets.ConstrainedBox",
                "widgets.Container",
                "widgets.CustomMultiChildLayout",
                "widgets.CustomPaint",
                "widgets.CustomScrollView",
                "widgets.CustomSingleChildLayout",
                "widgets.DecoratedBox",
                "widgets.DecoratedBoxTransition",
                "widgets.DefaultAssetBundle",
                "widgets.DefaultTextStyle",
                "widgets.DefaultTextStyleTransition",
                "widgets.Directionality",
                "widgets.Dismissible",
                "widgets.DragTarget",
                "widgets.Draggable",
                "widgets.EditableText",
                "widgets.Element",
                "widgets.ErrorWidget",
                "widgets.ExcludeSemantics",
                "widgets.Expanded",
                "widgets.FadeInImage",
                "widgets.FadeTransition",
                "widgets.FittedBox",
                "widgets.Flex",
                "widgets.Flexible",
                "widgets.Flow",
                "widgets.FocusScope",
                "widgets.Form",
                "widgets.FormField",
                "widgets.FractionalTranslation",
                "widgets.FractionallySizedBox",
                "widgets.FutureBuilder",
                "widgets.GestureDetector",
                "widgets.GlowingOverscrollIndicator",
                "widgets.GridPaper",
                "widgets.GridView",
                "widgets.Hero",
                "widgets.Icon",
                "widgets.IconTheme",
                "widgets.IgnorePointer",
                "widgets.Image",
                "widgets.ImageIcon",
                "widgets.ImplicitlyAnimatedWidget",
                "widgets.IndexedSemantics",
                "widgets.IndexedStack",
                "widgets.InheritedElement",
                "widgets.InheritedModel",
                "widgets.InheritedModelElement",
                "widgets.InheritedNotifier",
                "widgets.InheritedWidget",
                "widgets.IntrinsicHeight",
                "widgets.IntrinsicWidth",
                "widgets.KeepAlive",
                "widgets.KeyedSubtree",
                "widgets.LayoutBuilder",
                "widgets.LayoutId",
                "widgets.LeafRenderObjectElement",
                "widgets.LeafRenderObjectWidget",
                "widgets.LimitedBox",
                "widgets.ListBody",
                "widgets.ListView",
                "widgets.ListWheelElement",
                "widgets.ListWheelScrollView",
                "widgets.ListWheelViewport",
                "widgets.Listener",
                "widgets.Localizations",
                "widgets.LongPressDraggable",
                "widgets.MediaQuery",
                "widgets.MergeSemantics",
                "widgets.MetaData",
                "widgets.ModalBarrier",
                "widgets.MultiChildRenderObjectElement",
                "widgets.MultiChildRenderObjectWidget",
                "widgets.NavigationToolbar",
                "widgets.Navigator",
                "widgets.NestedScrollView",
                "widgets.NestedScrollViewViewport",
                "widgets.NotificationListener",
                "widgets.Offstage",
                "widgets.Opacity",
                "widgets.OrientationBuilder",
                "widgets.OverflowBox",
                "widgets.Overlay",
                "widgets.Padding",
                "widgets.PageStorage",
                "widgets.PageView",
                "widgets.ParentDataElement",
                "widgets.ParentDataWidget",
                "widgets.PerformanceOverlay",
                "widgets.PhysicalModel",
                "widgets.PhysicalShape",
                "widgets.Placeholder",
                "widgets.Positioned",
                "widgets.PositionedDirectional",
                "widgets.PositionedTransition",
                "widgets.PreferredSize",
                "widgets.PrimaryScrollController",
                "widgets.ProxyElement",
                "widgets.ProxyWidget",
                "widgets.RawGestureDetector",
                "widgets.RawImage",
                "widgets.RawKeyboardListener",
                "widgets.RelativePositionedTransition",
                "widgets.RenderObjectElement",
                "widgets.RenderObjectToWidgetAdapter",
                "widgets.RenderObjectToWidgetElement",
                "widgets.RenderObjectWidget",
                "widgets.RepaintBoundary",
                "widgets.RichText",
                "widgets.RootRenderObjectElement",
                "widgets.RotatedBox",
                "widgets.RotationTransition",
                "widgets.Row",
                "widgets.SafeArea",
                "widgets.ScaleTransition",
                "widgets.ScrollConfiguration",
                "widgets.ScrollView",
                "widgets.Scrollable",
                "widgets.Semantics",
                "widgets.SemanticsDebugger",
                "widgets.ShaderMask",
                "widgets.ShrinkWrappingViewport",
                "widgets.SingleChildRenderObjectElement",
                "widgets.SingleChildRenderObjectWidget",
                "widgets.SingleChildScrollView",
                "widgets.SizeChangedLayoutNotifier",
                "widgets.SizeTransition",
                "widgets.SizedBox",
                "widgets.SizedOverflowBox",
                "widgets.SlideTransition",
                "widgets.SliverFillRemaining",
                "widgets.SliverFillViewport",
                "widgets.SliverFixedExtentList",
                "widgets.SliverGrid",
                "widgets.SliverList",
                "widgets.SliverMultiBoxAdaptorElement",
                "widgets.SliverMultiBoxAdaptorWidget",
                "widgets.SliverOverlapAbsorber",
                "widgets.SliverOverlapInjector",
                "widgets.SliverPadding",
                "widgets.SliverPersistentHeader",
                "widgets.SliverPrototypeExtentList",
                "widgets.SliverSafeArea",
                "widgets.SliverToBoxAdapter",
                "widgets.SliverWithKeepAliveWidget",
                "widgets.Spacer",
                "widgets.Stack",
                "widgets.StatefulBuilder",
                "widgets.StatefulElement",
                "widgets.StatefulWidget",
                "widgets.StatelessElement",
                "widgets.StatelessWidget",
                "widgets.StatusTransitionWidget",
                "widgets.StreamBuilder",
                "widgets.StreamBuilderBase",
                "widgets.Table",
                "widgets.TableCell",
                "widgets.Text",
                "widgets.TextSelectionGestureDetector",
                "widgets.Texture",
                "widgets.TickerMode",
                "widgets.Title",
                "widgets.Transform",
                "widgets.UiKitView",
                "widgets.UnconstrainedBox",
                "widgets.UniqueWidget",
                "widgets.ValueListenableBuilder",
                "widgets.Viewport",
                "widgets.Visibility",
                "widgets.Widget",
                "widgets.WidgetInspector",
                "widgets.WidgetToRenderBoxAdapter",
                "widgets.WidgetsApp",
                "widgets.WillPopScope",
                "widgets.Wrap"
            ],
            "realImplementors": [
                "cupertino.CupertinoActionSheet",
                "cupertino.CupertinoActionSheetAction",
                "cupertino.CupertinoActivityIndicator",
                "cupertino.CupertinoAlertDialog",
                "cupertino.CupertinoApp",
                "cupertino.CupertinoButton",
                "cupertino.CupertinoDatePicker",
                "cupertino.CupertinoDialog",
                "cupertino.CupertinoDialogAction",
                "cupertino.CupertinoFullscreenDialogTransition",
                "cupertino.CupertinoNavigationBar",
                "cupertino.CupertinoNavigationBarBackButton",
                "cupertino.CupertinoPageScaffold",
                "cupertino.CupertinoPageTransition",
                "cupertino.CupertinoPicker",
                "cupertino.CupertinoPopupSurface",
                "cupertino.CupertinoScrollbar",
                "cupertino.CupertinoSegmentedControl",
                "cupertino.CupertinoSlider",
                "cupertino.CupertinoSliverNavigationBar",
                "cupertino.CupertinoSliverRefreshControl",
                "cupertino.CupertinoSwitch",
                "cupertino.CupertinoTabBar",
                "cupertino.CupertinoTabScaffold",
                "cupertino.CupertinoTabView",
                "cupertino.CupertinoTextField",
                "cupertino.CupertinoTheme",
                "cupertino.CupertinoTimerPicker",
                "material.AboutDialog",
                "material.AboutListTile",
                "material.ActionChip",
                "material.AlertDialog",
                "material.AnimatedIcon",
                "material.AnimatedTheme",
                "material.AppBar",
                "material.BackButton",
                "material.BackButtonIcon",
                "material.BottomAppBar",
                "material.BottomNavigationBar",
                "material.BottomSheet",
                "material.ButtonBar",
                "material.ButtonTheme",
                "material.Card",
                "material.Checkbox",
                "material.CheckboxListTile",
                "material.CheckedPopupMenuItem",
                "material.Chip",
                "material.ChipTheme",
                "material.ChoiceChip",
                "material.CircleAvatar",
                "material.CircularProgressIndicator",
                "material.CloseButton",
                "material.DataTable",
                "material.DayPicker",
                "material.DefaultTabController",
                "material.Dialog",
                "material.Divider",
                "material.Drawer",
                "material.DrawerController",
                "material.DrawerHeader",
                "material.DropdownButton",
                "material.DropdownButtonFormField",
                "material.DropdownButtonHideUnderline",
                "material.DropdownMenuItem",
                "material.ExpandIcon",
                "material.ExpansionPanelList",
                "material.ExpansionTile",
                "material.FilterChip",
                "material.FlatButton",
                "material.FlexibleSpaceBar",
                "material.FlexibleSpaceBarSettings",
                "material.FloatingActionButton",
                "material.FlutterLogo",
                "material.GridTile",
                "material.GridTileBar",
                "material.IconButton",
                "material.Ink",
                "material.InkResponse",
                "material.InkWell",
                "material.InputChip",
                "material.InputDecorator",
                "material.LicensePage",
                "material.LinearProgressIndicator",
                "material.ListTile",
                "material.ListTileTheme",
                "material.Material",
                "material.MaterialApp",
                "material.MaterialButton",
                "material.MergeableMaterial",
                "material.MonthPicker",
                "material.OutlineButton",
                "material.PaginatedDataTable",
                "material.PopupMenuButton",
                "material.PopupMenuDivider"
            ],
            "cn": [],
            "href": "foundation\/DiagnosticableTree-class.html",
            "desc": "<p>A base class for providing string and <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> debug\nrepresentations describing the properties and children of an object.<\/p>\n<p>The string debug representation is generated from the intermediate\n<a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representation. The <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representation is\nalso used by debugging tools displaying interactive trees of objects and\nproperties.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DiagnosticableTreeMixin-mixin.html\">DiagnosticableTreeMixin<\/a>, a mixin that implements this class.<\/li>\n<li>\n<a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a>, which should be used instead of this class to provide\ndiagnostics for objects without children.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DiagnosticableTree"
        },
        {
            "name": "foundation.DiagnosticableTreeMixin",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticableTreeMixin",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticableTreeMixin\/DiagnosticableTreeMixin.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugDescribeChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/debugDescribeChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() =&gt; const &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"foundation\/DiagnosticableTreeMixin\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) { }<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toDiagnosticsNode",
                    "type": "foundation.DiagnosticsNode",
                    "desc": "<p>Returns a debug representation of the object that is used by debugging\ntools and by <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>.<\/p>\n<p>Leave <code>name<\/code> as null if there is not a meaningful description of the\nrelationship between the this node and its parent.<\/p>\n<p>Typically the <code>style<\/code> argument is only specified to indicate an atypical\nrelationship between the parent and the node. For example, pass\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that a node is offstage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticsNode toDiagnosticsNode({ String name, DiagnosticsTreeStyle style }) {\n  return _DiagnosticableTreeNode(\n    name: name,\n    value: this,\n    style: style,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString({ DiagnosticLevel minLevel = DiagnosticLevel.debug }) {\n  return toDiagnosticsNode(style: DiagnosticsTreeStyle.singleLine).toString(minLevel: minLevel);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringDeep",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this node and its descendants.<\/p>\n<p><code>prefixLineOne<\/code> will be added to the front of the first line of the\noutput. <code>prefixOtherLines<\/code> will be added to the front of each other line.\nIf <code>prefixOtherLines<\/code> is null, the <code>prefixLineOne<\/code> is used for every line.\nBy default, there is no prefix.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>The <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a> method takes other arguments, but those are intended\nfor internal use when recursing to the descendants, and so can be ignored.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>, for a brief description of the object but not its children.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toStringShallow.html\">toStringShallow<\/a>, for a detailed description of the object but not its\nchildren.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefixLineOne",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixOtherLines",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/toStringDeep.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringDeep({\n  String prefixLineOne = '',\n  String prefixOtherLines,\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  return toDiagnosticsNode().toStringDeep(prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShallow",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a one-line detailed description of the object.<\/p>\n<p>This description is often somewhat long. This includes the same\ninformation given by <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a>, but does not recurse to any children.<\/p>\n<p><code>joiner<\/code> specifies the string which is place between each part obtained\nfrom <a href=\"foundation\/DiagnosticableTreeMixin\/debugFillProperties.html\">debugFillProperties<\/a>. Passing a string such as <code>'\\n '<\/code> will result\nin a multi-line string that indents the properties of the object below its\nname (as per <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>).<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>, for a brief description of the object.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a>, for a description of the subtree rooted at this object.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [
                        {
                            "name": "joiner",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/toStringShallow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShallow({\n  String joiner = ', ',\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  final StringBuffer result = StringBuffer();\n  result.write(toStringShort());\n  result.write(joiner);\n  final DiagnosticPropertiesBuilder builder = DiagnosticPropertiesBuilder();\n  debugFillProperties(builder);\n  result.write(\n    builder.properties.where((DiagnosticsNode n) =&gt; !n.isFiltered(minLevel)).join(joiner),\n  );\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticableTreeMixin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticableTreeMixin\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; describeIdentity(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": true,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DiagnosticableTreeMixin-mixin.html",
            "desc": "<p>A mixin that helps dump string and <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representations of trees.<\/p>\n<p>This mixin is identical to class <a href=\"foundation\/DiagnosticableTree-class.html\">DiagnosticableTree<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "mixin",
            "shortname": "DiagnosticableTreeMixin"
        },
        {
            "name": "foundation.DiagnosticsNode",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticsNode",
                    "type": "",
                    "desc": "<p>Initializes the object.<\/p>\n<p>The <code>style<\/code>, <code>showName<\/code>, and <code>showSeparator<\/code> arguments must not\nbe null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showSeparator",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticsNode\/DiagnosticsNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsNode({\n  @required this.name,\n  this.style,\n  this.showName = true,\n  this.showSeparator = true,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     \/\/ A name ending with ':' indicates that the user forgot that the ':' will\n     \/\/ be automatically added for them when generating descriptions of the\n     \/\/ property.\n     assert(name == null || !name.endsWith(':'), 'Names of diagnostic nodes must not end with colons.');<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticsNode\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/getChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;DiagnosticsNode&gt; getChildren();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "getProperties",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/getProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;DiagnosticsNode&gt; getProperties();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "isFiltered",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the diagnostic should be filtered due to its <a href=\"foundation\/DiagnosticsNode\/level.html\">level<\/a> being lower\nthan <code>minLevel<\/code>.<\/p>\n<p>If <code>minLevel<\/code> is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> no diagnostics will be filtered.\nIf <code>minLevel<\/code> is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.off<\/a> all diagnostics will be filtered.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/isFiltered.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isFiltered(DiagnosticLevel minLevel) =&gt; level.index &lt; minLevel.index;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DiagnosticsNode.message",
                    "type": "",
                    "desc": "<p>Diagnostics containing just a string <code>message<\/code> and not a concrete name or\nvalue.<\/p>\n<p>The <code>style<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/MessageProperty-class.html\">MessageProperty<\/a>, which is better suited to messages that are to be\nformatted like a property with a separate name and message.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticsNode\/DiagnosticsNode.message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory DiagnosticsNode.message(\n  String message, {\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) {\n  assert(style != null);\n  assert(level != null);\n  return DiagnosticsProperty&lt;void&gt;(\n    '',\n    null,\n    description: message,\n    style: style,\n    showName: false,\n    level: level,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toDescription",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/toDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toDescription({ TextTreeConfiguration parentConfiguration });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; data = &lt;String, Object&gt;{\n    'name': name,\n    'showSeparator': showSeparator,\n    'description': toDescription(),\n    'level': describeEnum(level),\n    'showName': showName,\n    'emptyBodyDescription': emptyBodyDescription,\n    'style': describeEnum(style),\n    'valueToString': value.toString(),\n    'type': runtimeType.toString(),\n    'hasChildren': getChildren().isNotEmpty,\n  };\n  return data;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this diagnostic that is compatible with\nthe style of the parent if the node is not the root.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the\n<a href=\"foundation\/DiagnosticsNode\/toString.html\">toString<\/a> for each property should avoid line breaks if possible.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString({\n  TextTreeConfiguration parentConfiguration,\n  DiagnosticLevel minLevel = DiagnosticLevel.info,\n}) {\n  assert(style != null);\n  assert(minLevel != null);\n  if (style == DiagnosticsTreeStyle.singleLine)\n    return toStringDeep(parentConfiguration: parentConfiguration, minLevel: minLevel);\n\n  final String description = toDescription(parentConfiguration: parentConfiguration);\n\n  if (name == null || name.isEmpty || !showName)\n    return description;\n\n  return description.contains('\\n') ? '$name$_separator\\n$description'\n                                    : '$name$_separator $description';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringDeep",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this node and its descendants.<\/p>\n<p><code>prefixLineOne<\/code> will be added to the front of the first line of the\noutput. <code>prefixOtherLines<\/code> will be added to the front of each other line.\nIf <code>prefixOtherLines<\/code> is null, the <code>prefixLineOne<\/code> is used for every line.\nBy default, there is no prefix.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>The <a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a> method takes other arguments, but those are intended\nfor internal use when recursing to the descendants, and so can be ignored.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsNode\/toString.html\">toString<\/a>, for a brief description of the <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a> but not its\nchildren.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsNode",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefixLineOne",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixOtherLines",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "minLevel",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsNode\/toStringDeep.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringDeep({\n  String prefixLineOne = '',\n  String prefixOtherLines,\n  TextTreeConfiguration parentConfiguration,\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  assert(minLevel != null);\n  prefixOtherLines ??= prefixLineOne;\n\n  final List&lt;DiagnosticsNode&gt; children = getChildren();\n  final TextTreeConfiguration config = textTreeConfiguration;\n  if (prefixOtherLines.isEmpty)\n    prefixOtherLines += config.prefixOtherLinesRootNode;\n\n  final _PrefixedStringBuilder builder = _PrefixedStringBuilder(\n    prefixLineOne,\n    prefixOtherLines,\n  );\n\n  final String description = toDescription(parentConfiguration: parentConfiguration);\n  if (description == null || description.isEmpty) {\n    if (showName &amp;&amp; name != null)\n      builder.write(name);\n  } else {\n    if (name != null &amp;&amp; name.isNotEmpty &amp;&amp; showName) {\n      builder.write(name);\n      if (showSeparator)\n        builder.write(config.afterName);\n\n      builder.write(\n          config.isNameOnOwnLine || description.contains('\\n') ? '\\n' : ' ');\n      if (description.contains('\\n') &amp;&amp; style == DiagnosticsTreeStyle.singleLine)\n        builder.prefixOtherLines += '  ';\n    }\n    builder.prefixOtherLines += children.isEmpty ?\n        config.propertyPrefixNoChildren : config.propertyPrefixIfChildren;\n    builder.write(description);\n  }\n\n  final List&lt;DiagnosticsNode&gt; properties = getProperties().where(\n    (DiagnosticsNode n) =&gt; !n.isFiltered(minLevel)\n  ).toList();\n\n  if (properties.isNotEmpty || children.isNotEmpty || emptyBodyDescription != null)\n    builder.write(config.afterDescriptionIfBody);\n\n  if (config.lineBreakProperties)\n    builder.write(config.lineBreak);\n\n  if (properties.isNotEmpty)\n    builder.write(config.beforeProperties);\n\n  builder.prefixOtherLines += config.bodyIndent;\n\n  if (emptyBodyDescription != null &amp;&amp;\n      properties.isEmpty &amp;&amp;\n      children.isEmpty &amp;&amp;\n      prefixLineOne.isNotEmpty) {\n    builder.write(emptyBodyDescription);\n    if (config.lineBreakProperties)\n      builder.write(config.lineBreak);\n  }\n\n  for (int i = 0; i &lt; properties.length; ++i) {\n    final DiagnosticsNode property = properties[i];\n    if (i &gt; 0)\n      builder.write(config.propertySeparator);\n\n    const int kWrapWidth = 65;\n    if (property.style != DiagnosticsTreeStyle.singleLine) {\n      final TextTreeConfiguration propertyStyle = property.textTreeConfiguration;\n      builder.writeRaw(property.toStringDeep(\n        prefixLineOne: '${builder.prefixOtherLines}${propertyStyle.prefixLineOne}',\n        prefixOtherLines: '${builder.prefixOtherLines}${propertyStyle.linkCharacter}${propertyStyle.prefixOtherLines}',\n        parentConfiguration: config,\n        minLevel: minLevel,\n      ));\n      continue;\n    }\n    assert(property.style == DiagnosticsTreeStyle.singleLine);\n    final String message = property.toString(parentConfiguration: config, minLevel: minLevel);\n    if (!config.lineBreakProperties || message.length &lt; kWrapWidth) {\n      builder.write(message);\n    } else {\n      \/\/ debugWordWrap doesn't handle line breaks within the text being\n      \/\/ wrapped so we must call it on each line.\n      final List&lt;String&gt; lines = message.split('\\n');\n      for (int j = 0; j &lt; lines.length; ++j) {\n        final String line = lines[j];\n        if (j &gt; 0)\n          builder.write(config.lineBreak);\n        builder.write(debugWordWrap(line, kWrapWidth, wrapIndent: '  ').join('\\n'));\n      }\n    }\n    if (config.lineBreakProperties)\n      builder.write(config.lineBreak);\n  }\n  if (properties.isNotEmpty)\n    builder.write(config.afterProperties);\n\n  if (!config.lineBreakProperties)\n    builder.write(config.lineBreak);\n\n  final String prefixChildren = '$prefixOtherLines${config.bodyIndent}';\n\n  if (children.isEmpty &amp;&amp;\n      config.addBlankLineIfNoChildren &amp;&amp;\n      builder.hasMultipleLines) {\n    final String prefix = prefixChildren.trimRight();\n    if (prefix.isNotEmpty)\n      builder.writeRaw('$prefix${config.lineBreak}');\n  }\n\n  if (children.isNotEmpty &amp;&amp; config.showChildren) {\n    if (config.isBlankLineBetweenPropertiesAndChildren &amp;&amp;\n        properties.isNotEmpty &amp;&amp;\n        children.first.textTreeConfiguration.isBlankLineBetweenPropertiesAndChildren) {\n      builder.write(config.lineBreak);\n    }\n\n    for (int i = 0; i &lt; children.length; i++) {\n      final DiagnosticsNode child = children[i];\n      assert(child != null);\n      final TextTreeConfiguration childConfig = _childTextConfiguration(child, config);\n      if (i == children.length - 1) {\n        final String lastChildPrefixLineOne = '$prefixChildren${childConfig.prefixLastChildLineOne}';\n        builder.writeRawLine(child.toStringDeep(\n          prefixLineOne: lastChildPrefixLineOne,\n          prefixOtherLines: '$prefixChildren${childConfig.childLinkSpace}${childConfig.prefixOtherLines}',\n          parentConfiguration: config,\n          minLevel: minLevel,\n        ));\n        if (childConfig.footer.isNotEmpty)\n          builder.writeRaw('$prefixChildren${childConfig.childLinkSpace}${childConfig.footer}');\n      } else {\n        final TextTreeConfiguration nextChildStyle = _childTextConfiguration(children[i + 1], config);\n        final String childPrefixLineOne = '$prefixChildren${childConfig.prefixLineOne}';\n        final String childPrefixOtherLines ='$prefixChildren${nextChildStyle.linkCharacter}${childConfig.prefixOtherLines}';\n        builder.writeRawLine(child.toStringDeep(\n          prefixLineOne: childPrefixLineOne,\n          prefixOtherLines: childPrefixOtherLines,\n          parentConfiguration: config,\n          minLevel: minLevel,\n        ));\n        if (childConfig.footer.isNotEmpty)\n          builder.writeRaw('$prefixChildren${nextChildStyle.linkCharacter}${childConfig.footer}');\n      }\n    }\n  }\n  return builder.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "emptyBodyDescription",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to show if the node has no displayed properties or children.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/emptyBodyDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get emptyBodyDescription =&gt; null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "types": [],
                    "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>Typically this only makes sense to set to a different value than\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.info<\/a> for diagnostics representing properties. Some\nsubclasses have a <code>level<\/code> argument to their constructor which influences\nthe value returned here but other factors also influence it. For example,\nwhether an exception is thrown computing a property value\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> is returned.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticLevel get level =&gt; DiagnosticLevel.info;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Label describing the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>, typically shown before a separator\n(see <a href=\"foundation\/DiagnosticsNode\/showSeparator.html\">showSeparator<\/a>).<\/p>\n<p>The name will be omitted if the <a href=\"foundation\/DiagnosticsNode\/showName.html\">showName<\/a> property is false.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/showName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showSeparator",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to show a separator between <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a> and description.<\/p>\n<p>If false, name and description should be shown with no separation.\n<code>:<\/code> is typically used as a separator when displaying as text.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/showSeparator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showSeparator\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "foundation.DiagnosticsTreeStyle",
                    "types": [],
                    "desc": "<p>Hint for how the node should be displayed.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DiagnosticsTreeStyle style\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textTreeConfiguration",
                    "type": "foundation.TextTreeConfiguration",
                    "types": [],
                    "desc": "<p>Returns a configuration specifying how this object should be rendered\nas text art.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/textTreeConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nTextTreeConfiguration get textTreeConfiguration {\n  assert(style != null);\n  switch (style) {\n    case DiagnosticsTreeStyle.dense:\n      return denseTextConfiguration;\n    case DiagnosticsTreeStyle.sparse:\n      return sparseTextConfiguration;\n    case DiagnosticsTreeStyle.offstage:\n      return dashedTextConfiguration;\n    case DiagnosticsTreeStyle.whitespace:\n      return whitespaceTextConfiguration;\n    case DiagnosticsTreeStyle.transition:\n      return transitionTextConfiguration;\n    case DiagnosticsTreeStyle.singleLine:\n      return singleLineTextConfiguration;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.Object",
                    "types": [],
                    "desc": "<p>The actual object this is diagnostics data for.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsNode",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsNode\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "foundation.DiagnosticableNode",
                "foundation.DiagnosticsProperty",
                "foundation.DoubleProperty",
                "foundation.EnumProperty",
                "foundation.FlagProperty",
                "foundation.IntProperty",
                "foundation.IterableProperty",
                "foundation.MessageProperty",
                "foundation.ObjectFlagProperty",
                "foundation.PercentProperty",
                "foundation.StringProperty",
                "painting.TransformProperty"
            ],
            "realImplementors": [
                "foundation.DiagnosticableNode",
                "foundation.DiagnosticsProperty",
                "foundation.DoubleProperty",
                "foundation.EnumProperty",
                "foundation.FlagProperty",
                "foundation.IntProperty",
                "foundation.IterableProperty",
                "foundation.MessageProperty",
                "foundation.ObjectFlagProperty",
                "foundation.PercentProperty",
                "foundation.StringProperty",
                "painting.TransformProperty"
            ],
            "cn": [],
            "href": "foundation\/DiagnosticsNode-class.html",
            "desc": "<p>Defines diagnostics data for a <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a>.<\/p>\n<p><a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> provides a high quality multi-line string dump via\n<a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a>. The core members are the <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a>, <a href=\"foundation\/DiagnosticsNode\/toDescription.html\">toDescription<\/a>,\n<a href=\"foundation\/DiagnosticsNode\/getProperties.html\">getProperties<\/a>, <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a>, and <a href=\"foundation\/DiagnosticsNode\/getChildren.html\">getChildren<\/a>. All other members exist\ntypically to provide hints for how <a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a> and debugging tools should\nformat output.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DiagnosticsNode"
        },
        {
            "name": "foundation.DiagnosticsProperty",
            "extends": [
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DiagnosticsProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property.<\/p>\n<p>The <code>showName<\/code>, <code>showSeparator<\/code>, <code>style<\/code>, <code>missingIfNull<\/code>, and <code>level<\/code>\narguments must not be null.<\/p>\n<p>The <code>level<\/code> argument is just a suggestion and can be overridden if\nsomething else about the property causes it to have a lower or higher\nlevel. For example, if the property value is null and <code>missingIfNull<\/code> is\ntrue, <code>level<\/code> is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifEmpty",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showSeparator",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "missingIfNull",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticsProperty\/DiagnosticsProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty(\n  String name,\n  T value, {\n  String description,\n  String ifNull,\n  this.ifEmpty,\n  bool showName = true,\n  bool showSeparator = true,\n  this.defaultValue = kNoDefaultValue,\n  this.tooltip,\n  this.missingIfNull = false,\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     assert(style != null),\n     assert(level != null),\n     _description = description,\n     _valueComputed = true,\n     _value = value,\n     _computeValue = null,\n     ifNull = ifNull ?? (missingIfNull ? 'MISSING' : null),\n     _defaultLevel = level,\n     super(\n       name: name,\n       showName: showName,\n       showSeparator: showSeparator,\n       style: style,\n    );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticsProperty\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsProperty\/getChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getChildren() =&gt; &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "getProperties",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsProperty\/getProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getProperties() =&gt; &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "DiagnosticsProperty.lazy",
                    "type": "",
                    "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that is computed only when needed.<\/p>\n<p>Use if computing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> may throw an exception or is\nexpensive.<\/p>\n<p>The <code>showName<\/code>, <code>showSeparator<\/code>, <code>style<\/code>, <code>missingIfNull<\/code>, and <code>level<\/code>\narguments must not be null.<\/p>\n<p>The <code>level<\/code> argument is just a suggestion and can be overridden if\nif something else about the property causes it to have a lower or higher\nlevel. For example, if calling <code>computeValue<\/code> throws an exception, <code>level<\/code>\nwill always return <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "computeValue",
                            "type": "foundation.ComputePropertyValueCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifEmpty",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showSeparator",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "missingIfNull",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DiagnosticsProperty\/DiagnosticsProperty.lazy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty.lazy(\n  String name,\n  ComputePropertyValueCallback&lt;T&gt; computeValue, {\n  String description,\n  String ifNull,\n  this.ifEmpty,\n  bool showName = true,\n  bool showSeparator = true,\n  this.defaultValue = kNoDefaultValue,\n  this.tooltip,\n  this.missingIfNull = false,\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     assert(defaultValue == kNoDefaultValue || defaultValue is T),\n     assert(missingIfNull != null),\n     assert(style != null),\n     assert(level != null),\n     _description = description,\n     _valueComputed = false,\n     _value = null,\n     _computeValue = computeValue,\n     _defaultLevel = level,\n     ifNull = ifNull ?? (missingIfNull ? 'MISSING' : null),\n     super(\n       name: name,\n       showName: showName,\n       showSeparator: showSeparator,\n       style: style,\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toDescription",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsProperty\/toDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toDescription({ TextTreeConfiguration parentConfiguration }) {\n  if (_description != null)\n    return _addTooltip(_description);\n\n  if (exception != null)\n    return 'EXCEPTION (${exception.runtimeType})';\n\n  if (ifNull != null &amp;&amp; value == null)\n    return _addTooltip(ifNull);\n\n  String result = valueToString(parentConfiguration: parentConfiguration);\n  if (result.isEmpty &amp;&amp; ifEmpty != null)\n    result = ifEmpty;\n  return _addTooltip(result);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (defaultValue != kNoDefaultValue)\n    json['defaultValue'] = defaultValue.toString();\n  if (ifEmpty != null)\n    json['ifEmpty'] = ifEmpty;\n  if (ifNull != null)\n    json['ifNull'] = ifNull;\n  if (tooltip != null)\n    json['tooltip'] = tooltip;\n  json['missingIfNull'] = missingIfNull;\n  if (exception != null)\n    json['exception'] = exception.toString();\n  json['propertyType'] = propertyType.toString();\n  json['valueToString'] = valueToString();\n  json['defaultLevel'] = describeEnum(_defaultLevel);\n  if (T is Diagnosticable)\n    json['isDiagnosticableValue'] = true;\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/DiagnosticsProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String valueToString({ TextTreeConfiguration parentConfiguration }) {\n  final T v = value;\n  \/\/ DiagnosticableTree values are shown using the shorter toStringShort()\n  \/\/ instead of the longer toString() because the toString() for a\n  \/\/ DiagnosticableTree value is likely too large to be useful.\n  return v is DiagnosticableTree ? v.toStringShort() : v.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "types": [],
                    "desc": "<p>If the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of the property equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a> the priority <a href=\"foundation\/DiagnosticsProperty\/level.html\">level<\/a>\nof the property is downgraded to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> as the property\nvalue is uninteresting.<\/p>\n<p><a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a> has type <code>T<\/code> or is <a href=\"foundation\/kNoDefaultValue-constant.html\">kNoDefaultValue<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/defaultValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object defaultValue\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "exception",
                    "type": "dart:core.Object",
                    "types": [],
                    "desc": "<p>Exception thrown if accessing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> threw an exception.<\/p>\n<p>Returns null if computing the property value did not throw an exception.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/exception.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get exception {\n  _maybeCacheValue();\n  return _exception;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ifEmpty",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description if the property description would otherwise be empty.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/ifEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifEmpty\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ifNull",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/ifNull.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifNull\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "types": [],
                    "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (_defaultLevel == DiagnosticLevel.hidden)\n    return _defaultLevel;\n\n  if (exception != null)\n    return DiagnosticLevel.error;\n\n  if (value == null &amp;&amp; missingIfNull)\n    return DiagnosticLevel.warning;\n\n  \/\/ Use a low level when the value matches the default value.\n  if (defaultValue != kNoDefaultValue &amp;&amp; value == defaultValue)\n    return DiagnosticLevel.fine;\n\n  return _defaultLevel;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "missingIfNull",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of null causes the property to have <a href=\"foundation\/DiagnosticsProperty\/level.html\">level<\/a>\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> warning that the property is missing a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/missingIfNull.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool missingIfNull\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "propertyType",
                    "type": "dart:core.Type",
                    "types": [],
                    "desc": "<p>The type of the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n<p>This is determined from the type argument <code>T<\/code> used to instantiate the\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> class. This means that the type is available even if\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null, but it also means that the <a href=\"foundation\/DiagnosticsProperty\/propertyType.html\">propertyType<\/a> is only as\naccurate as the type provided when invoking the constructor.<\/p>\n<p>Generally, this is only useful for diagnostic tools that should display\nnull values in a manner consistent with the property type. For example, a\ntool might display a null <a href=\"dart-ui\/Color-class.html\">Color<\/a> value as an empty rectangle instead of\nthe word \"null\".<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/propertyType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Type get propertyType =&gt; T;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Optional tooltip typically describing the property.<\/p>\n<p>Example tooltip: 'physical pixels per logical pixel'<\/p>\n<p>If present, the tooltip is added in parenthesis after the raw value when\ngenerating the string description.<\/p>\n        ",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/tooltip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "types": [],
                    "desc": "<p>Returns the value of the property either from cache or by invoking a\n<a href=\"foundation\/ComputePropertyValueCallback.html\">ComputePropertyValueCallback<\/a>.<\/p>\n<p>If an exception is thrown invoking the <a href=\"foundation\/ComputePropertyValueCallback.html\">ComputePropertyValueCallback<\/a>,\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> returns null and the exception thrown can be found via the\n<a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> property.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsProperty\/valueToString.html\">valueToString<\/a>, which converts the property value to a string.<\/li><\/ul>",
                    "memberOf": "foundation.DiagnosticsProperty",
                    "isConstant": false,
                    "href": "foundation\/DiagnosticsProperty\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT get value {\n  _maybeCacheValue();\n  return _value;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "foundation.DoubleProperty",
                "foundation.EnumProperty",
                "foundation.FlagProperty",
                "foundation.IntProperty",
                "foundation.IterableProperty",
                "foundation.MessageProperty",
                "foundation.ObjectFlagProperty",
                "foundation.PercentProperty",
                "foundation.StringProperty",
                "painting.TransformProperty"
            ],
            "realImplementors": [
                "foundation.DoubleProperty",
                "foundation.EnumProperty",
                "foundation.FlagProperty",
                "foundation.IntProperty",
                "foundation.IterableProperty",
                "foundation.MessageProperty",
                "foundation.ObjectFlagProperty",
                "foundation.PercentProperty",
                "foundation.StringProperty",
                "painting.TransformProperty"
            ],
            "cn": [],
            "href": "foundation\/DiagnosticsProperty-class.html",
            "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of type <code>T<\/code>.<\/p>\n<p>If the default <code>value.toString()<\/code> does not provide an adequate description\nof the value, specify <code>description<\/code> defining a custom description.<\/p>\n<p>The <a href=\"foundation\/DiagnosticsNode\/showSeparator.html\">showSeparator<\/a> property indicates whether a separator should be placed\nbetween the property <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a> and its <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DiagnosticsProperty"
        },
        {
            "type": "",
            "name": "foundation.DiagnosticsTreeStyle",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DiagnosticsTreeStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DiagnosticsTreeStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DiagnosticsTreeStyle-class.html",
            "desc": "<p>Styles for displaying a node in a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>, which dumps text art trees for these\nstyles.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "DiagnosticsTreeStyle"
        },
        {
            "name": "foundation.DocumentationIcon",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DocumentationIcon",
                    "type": "",
                    "desc": "<p>Create an annotation to provide a URL to an image describing a class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DocumentationIcon",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DocumentationIcon\/DocumentationIcon.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DocumentationIcon(this.url) : assert(url != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "url",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The URL to an image that represents the annotated class.<\/p>\n        ",
                    "memberOf": "foundation.DocumentationIcon",
                    "isConstant": false,
                    "href": "foundation\/DocumentationIcon\/url.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String url\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/DocumentationIcon-class.html",
            "desc": "<p>A class annotation to provide a URL to an image that represents the class.<\/p>\n<p>Each class should only have one <a href=\"foundation\/DocumentationIcon-class.html\">DocumentationIcon<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/\/ Utility class for beginning a dream-sharing sequence.\n\/\/\/ ...documentation...\n@Category(&lt;String&gt;['Military Technology', 'Experimental'])\n@DocumentationIcon('https:\/\/docs.example.org\/icons\/top.png')\nclass DreamSharing {\n  \/\/ ...code...\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/Category-class.html\">Category<\/a>, to help place the class in an index.<\/li>\n<li>\n<a href=\"foundation\/Summary-class.html\">Summary<\/a>, which is used to provide a one-line description of a\nclass that overrides the inline documentations' own description.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DocumentationIcon"
        },
        {
            "name": "foundation.DoubleProperty",
            "extends": [
                "dart:core.double",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "DoubleProperty",
                    "type": "",
                    "desc": "<p>If specified, <code>unit<\/code> describes the unit for the <code>value<\/code> (e.g. px).<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DoubleProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "unit",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DoubleProperty\/DoubleProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleProperty(\n  String name,\n  double value, {\n  String ifNull,\n  String unit,\n  String tooltip,\n  Object defaultValue = kNoDefaultValue,\n  bool showName = true,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  ifNull: ifNull,\n  unit: unit,\n  tooltip: tooltip,\n  defaultValue: defaultValue,\n  showName: showName,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DoubleProperty.lazy",
                    "type": "",
                    "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that is computed only when needed.<\/p>\n<p>Use if computing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> may throw an exception or is\nexpensive.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DoubleProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "computeValue",
                            "type": "foundation.ComputePropertyValueCallback<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.ComputePropertyValueCallback",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "unit",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/DoubleProperty\/DoubleProperty.lazy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleProperty.lazy(\n  String name,\n  ComputePropertyValueCallback&lt;double&gt; computeValue, {\n  String ifNull,\n  bool showName = true,\n  String unit,\n  String tooltip,\n  Object defaultValue = kNoDefaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super.lazy(\n  name,\n  computeValue,\n  showName: showName,\n  ifNull: ifNull,\n  unit: unit,\n  tooltip: tooltip,\n  defaultValue: defaultValue,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "numberToString",
                    "type": "dart:core.String",
                    "desc": "<p>String describing just the numeric <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> without a unit suffix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DoubleProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DoubleProperty\/numberToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString numberToString() =&gt; value?.toStringAsFixed(1);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.DoubleProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/DoubleProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (unit != null)\n    json['unit'] = unit;\n\n  json['numberToString'] = numberToString();\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/DoubleProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.DoubleProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/DoubleProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n\n  return unit != null ? '${numberToString()}$unit' : numberToString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "unit",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Optional unit the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is measured in.<\/p>\n<p>Unit must be acceptable to display immediately after a number with no\nspaces. For example: 'physical pixels per logical pixel' should be a\n<a href=\"foundation\/DiagnosticsProperty\/tooltip.html\">tooltip<\/a> not a <a href=\"foundation\/DoubleProperty\/unit.html\">unit<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.DoubleProperty",
                    "isConstant": false,
                    "href": "foundation\/DoubleProperty\/unit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String unit\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "foundation.PercentProperty"
            ],
            "realImplementors": [
                "foundation.PercentProperty"
            ],
            "cn": [],
            "href": "foundation\/DoubleProperty-class.html",
            "desc": "<p>Property describing a <a href=\"dart-core\/double-class.html\">double<\/a> <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> with an optional <a href=\"foundation\/DoubleProperty\/unit.html\">unit<\/a> of measurement.<\/p>\n<p>Numeric formatting is optimized for debug message readability.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DoubleProperty"
        },
        {
            "name": "foundation.EnumProperty",
            "extends": [
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "EnumProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property that displays an enum.<\/p>\n<p>The <code>level<\/code> argument must also not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.EnumProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/EnumProperty\/EnumProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EnumProperty(\n  String name,\n  T value, {\n  Object defaultValue = kNoDefaultValue,\n  DiagnosticLevel level  = DiagnosticLevel.info,\n}) : assert(level != null),\n     super (\n  name,\n  value,\n  defaultValue: defaultValue,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/EnumProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.EnumProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/EnumProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n  return describeEnum(value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/EnumProperty-class.html",
            "desc": "<p>An property than displays enum values tersely.<\/p>\n<p>The enum value is displayed with the class name stripped. For example:\n<a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.deferToChild<\/a> is shown as <code>deferToChild<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> which documents named parameters common to all\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EnumProperty"
        },
        {
            "name": "foundation.Factory",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Factory",
                    "type": "",
                    "desc": "<p>Creates a new factory.<\/p>\n<p>The <code>constructor<\/code> parameter must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Factory",
                    "sig": "",
                    "params": [
                        {
                            "name": "constructor",
                            "type": "foundation.ValueGetter",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/Factory\/Factory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Factory(this.constructor) : assert(constructor != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Factory",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/Factory\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'Factory(type: $type)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "constructor",
                    "type": "foundation.ValueGetter",
                    "types": [],
                    "desc": "<p>Creates a new object of type T.<\/p>\n        ",
                    "memberOf": "foundation.Factory",
                    "isConstant": false,
                    "href": "foundation\/Factory\/constructor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueGetter&lt;T&gt; constructor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:core.Type",
                    "types": [],
                    "desc": "<p>The type of the objects created by this factory.<\/p>\n        ",
                    "memberOf": "foundation.Factory",
                    "isConstant": false,
                    "href": "foundation\/Factory\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Type get type =&gt; T;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/Factory-class.html",
            "desc": "<p>A factory interface that also reports the type of the created objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Factory"
        },
        {
            "name": "foundation.FlagProperty",
            "extends": [
                "dart:core.bool",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "FlagProperty",
                    "type": "",
                    "desc": "<p>Constructs a FlagProperty with the given descriptions with the specified descriptions.<\/p>\n<p><code>showName<\/code> defaults to false as typically <code>ifTrue<\/code> and <code>ifFalse<\/code> should\nbe descriptions that make the property name redundant.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlagProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifTrue",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifFalse",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/FlagProperty\/FlagProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FlagProperty(\n  String name, {\n  @required bool value,\n  this.ifTrue,\n  this.ifFalse,\n  bool showName = false,\n  Object defaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     assert(ifTrue != null || ifFalse != null),\n     super(\n       name,\n       value,\n       showName: showName,\n       defaultValue: defaultValue,\n       level: level,\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.FlagProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlagProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (ifTrue != null)\n    json['ifTrue'] = ifTrue;\n  if (ifFalse != null)\n    json['ifFalse'] = ifFalse;\n\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/FlagProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlagProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/FlagProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == true) {\n    if (ifTrue != null)\n      return ifTrue;\n  } else if (value == false) {\n    if (ifFalse != null)\n      return ifFalse;\n  }\n  return super.valueToString(parentConfiguration: parentConfiguration);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "ifFalse",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to use if the property value is false.<\/p>\n<p>If not specified and <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals false, the property's priority <a href=\"foundation\/FlagProperty\/level.html\">level<\/a>\nwill be <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.FlagProperty",
                    "isConstant": false,
                    "href": "foundation\/FlagProperty\/ifFalse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifFalse\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ifTrue",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to use if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true.<\/p>\n<p>If not specified and <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals true the property's priority <a href=\"foundation\/FlagProperty\/level.html\">level<\/a>\nwill be <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.FlagProperty",
                    "isConstant": false,
                    "href": "foundation\/FlagProperty\/ifTrue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifTrue\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "types": [],
                    "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.FlagProperty",
                    "isConstant": false,
                    "href": "foundation\/FlagProperty\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (value == true) {\n    if (ifTrue == null)\n      return DiagnosticLevel.hidden;\n  }\n  if (value == false) {\n    if (ifFalse == null)\n      return DiagnosticLevel.hidden;\n  }\n  return super.level;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
                    "memberOf": "foundation.FlagProperty",
                    "isConstant": false,
                    "href": "foundation\/FlagProperty\/showName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get showName {\n  if (value == null || (value == true &amp;&amp; ifTrue == null) || (value == false &amp;&amp; ifFalse == null)) {\n    \/\/ We are missing a description for the flag value so we need to show the\n    \/\/ flag name. The property will have DiagnosticLevel.hidden for this case\n    \/\/ so users will not see this the property in this case unless they are\n    \/\/ displaying hidden properties.\n    return true;\n  }\n  return super.showName;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/FlagProperty-class.html",
            "desc": "<p>Property where the description is either <a href=\"foundation\/FlagProperty\/ifTrue.html\">ifTrue<\/a> or <a href=\"foundation\/FlagProperty\/ifFalse.html\">ifFalse<\/a> depending on\nwhether <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true or false.<\/p>\n<p>Using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> instead of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;bool&gt;<\/a> can make\ndiagnostics display more polished. For example, given a property named\n<code>visible<\/code> that is typically true, the following code will return 'hidden'\nwhen <code>visible<\/code> is false and nothing when visible is true, in contrast to\n<code>visible: true<\/code> or <code>visible: false<\/code>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">FlagProperty(\n  'visible',\n  value: true,\n  ifFalse: 'hidden',\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> should also be used instead of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;bool&gt;<\/a>\nif showing the bool value would not clearly indicate the meaning of the\nproperty value.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">FlagProperty(\n  'inherit',\n  value: inherit,\n  ifTrue: '&lt;all styles inherited&gt;',\n  ifFalse: '&lt;no style specified&gt;',\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides similar behavior describing whether\na <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FlagProperty"
        },
        {
            "name": "foundation.FlutterError",
            "extends": [
                "dart:core.AssertionError",
                "dart:core.Error",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [
                {
                    "name": "onError",
                    "type": "foundation.FlutterExceptionHandler",
                    "desc": "<p>Called whenever the Flutter framework catches an error.<\/p>\n<p>The default behavior is to call <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a>.<\/p>\n<p>You can set this to your own function to override this default behavior.\nFor example, you could report all errors to your server.<\/p>\n<p>If the error handler throws an exception, it will not be caught by the\nFlutter framework.<\/p>\n<p>Set this to null to silently catch and ignore errors. This is not\nrecommended.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/onError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static FlutterExceptionHandler onError = dumpErrorToConsole\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                }
            ],
            "methods": [
                {
                    "name": "FlutterError",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a>.<\/p>\n<p>See <code>message<\/code> for details on the format that the message should\ntake.<\/p>\n<p>Include as much detail as possible in the full error message,\nincluding specifics about the state of the app that might be\nrelevant to debugging the error.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/FlutterError\/FlutterError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FlutterError(String message) : super(message);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultStackFilter",
                    "type": "dart:core.Iterable<dart:core.String>",
                    "desc": "<p>Converts a stack to a string that is more readable by omitting stack\nframes that correspond to Dart internals.<\/p>\n<p>This is the default filter used by <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> if the\n<a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> object has no <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">FlutterErrorDetails.stackFilter<\/a>\ncallback.<\/p>\n<p>This function expects its input to be in the format used by\n<a href=\"foundation\/FlutterError\/toString.html\">StackTrace.toString()<\/a>. The output of this function is similar to that\nformat but the frame numbers will not be consecutive (frames are elided)\nand the final line may be prose rather than a stack frame.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [
                        {
                            "name": "frames",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/defaultStackFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;String&gt; defaultStackFilter(Iterable&lt;String&gt; frames) {\n  const List&lt;String&gt; filteredPackages = &lt;String&gt;[\n    'dart:async-patch',\n    'dart:async',\n    'package:stack_trace',\n  ];\n  const List&lt;String&gt; filteredClasses = &lt;String&gt;[\n    '_AssertionError',\n    '_FakeAsync',\n    '_FrameCallbackEntry',\n  ];\n  final RegExp stackParser = RegExp(r'^#[0-9]+ +([^.]+).* \\(([^\/\\\\]*)[\/\\\\].+:[0-9]+(?::[0-9]+)?\\)$');\n  final RegExp packageParser = RegExp(r'^([^:]+):(.+)$');\n  final List&lt;String&gt; result = &lt;String&gt;[];\n  final List&lt;String&gt; skipped = &lt;String&gt;[];\n  for (String line in frames) {\n    final Match match = stackParser.firstMatch(line);\n    if (match != null) {\n      assert(match.groupCount == 2);\n      if (filteredPackages.contains(match.group(2))) {\n        final Match packageMatch = packageParser.firstMatch(match.group(2));\n        if (packageMatch != null &amp;&amp; packageMatch.group(1) == 'package') {\n          skipped.add('package ${packageMatch.group(2)}'); \/\/ avoid \"package package:foo\"\n        } else {\n          skipped.add('package ${match.group(2)}');\n        }\n        continue;\n      }\n      if (filteredClasses.contains(match.group(1))) {\n        skipped.add('class ${match.group(1)}');\n        continue;\n      }\n    }\n    result.add(line);\n  }\n  if (skipped.length == 1) {\n    result.add('(elided one frame from ${skipped.single})');\n  } else if (skipped.length &gt; 1) {\n    final List&lt;String&gt; where = Set&lt;String&gt;.from(skipped).toList()..sort();\n    if (where.length &gt; 1)\n      where[where.length - 1] = 'and ${where.last}';\n    if (where.length &gt; 2) {\n      result.add('(elided ${skipped.length} frames from ${where.join(\", \")})');\n    } else {\n      result.add('(elided ${skipped.length} frames from ${where.join(\" \")})');\n    }\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "dumpErrorToConsole",
                    "type": "",
                    "desc": "<p>Prints the given exception details to the console.<\/p>\n<p>The first time this is called, it dumps a very verbose message to the\nconsole using <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>.<\/p>\n<p>Subsequent calls only dump the first line of the exception, unless\n<code>forceReport<\/code> is set to true (in which case it dumps the verbose message).<\/p>\n<p>Call <a href=\"foundation\/FlutterError\/resetErrorCount.html\">resetErrorCount<\/a> to cause this method to go back to acting as if it\nhad not been called before (so the next message is verbose again).<\/p>\n<p>The default behavior for the <a href=\"foundation\/FlutterError\/onError.html\">onError<\/a> handler is to call this function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [
                        {
                            "name": "details",
                            "type": "foundation.FlutterErrorDetails",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "forceReport",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/dumpErrorToConsole.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void dumpErrorToConsole(FlutterErrorDetails details, { bool forceReport = false }) {\n  assert(details != null);\n  assert(details.exception != null);\n  bool reportError = details.silent != true; \/\/ could be null\n  assert(() {\n    \/\/ In checked mode, we ignore the \"silent\" flag.\n    reportError = true;\n    return true;\n  }());\n  if (!reportError &amp;&amp; !forceReport)\n    return;\n  if (_errorCount == 0 || forceReport) {\n    final String header = '\\u2550\\u2550\\u2561 EXCEPTION CAUGHT BY ${details.library} \\u255E'.toUpperCase();\n    final String footer = '\\u2550' * wrapWidth;\n    debugPrint('$header${\"\\u2550\" * (footer.length - header.length)}');\n    final String verb = 'thrown${ details.context != null ? \" ${details.context}\" : \"\"}';\n    if (details.exception is NullThrownError) {\n      debugPrint('The null value was $verb.', wrapWidth: wrapWidth);\n    } else if (details.exception is num) {\n      debugPrint('The number ${details.exception} was $verb.', wrapWidth: wrapWidth);\n    } else {\n      String errorName;\n      if (details.exception is AssertionError) {\n        errorName = 'assertion';\n      } else if (details.exception is String) {\n        errorName = 'message';\n      } else if (details.exception is Error || details.exception is Exception) {\n        errorName = '${details.exception.runtimeType}';\n      } else {\n        errorName = '${details.exception.runtimeType} object';\n      }\n      \/\/ Many exception classes put their type at the head of their message.\n      \/\/ This is redundant with the way we display exceptions, so attempt to\n      \/\/ strip out that header when we see it.\n      final String prefix = '${details.exception.runtimeType}: ';\n      String message = details.exceptionAsString();\n      if (message.startsWith(prefix))\n        message = message.substring(prefix.length);\n      debugPrint('The following $errorName was $verb:\\n$message', wrapWidth: wrapWidth);\n    }\n    Iterable&lt;String&gt; stackLines = (details.stack != null) ? details.stack.toString().trimRight().split('\\n') : null;\n    if ((details.exception is AssertionError) &amp;&amp; (details.exception is! FlutterError)) {\n      bool ourFault = true;\n      if (stackLines != null) {\n        final List&lt;String&gt; stackList = stackLines.take(2).toList();\n        if (stackList.length &gt;= 2) {\n          \/\/ TODO(ianh): This has bitrotted and is no longer matching. https:\/\/github.com\/flutter\/flutter\/issues\/4021\n          final RegExp throwPattern = RegExp(r'^#0 +_AssertionError._throwNew \\(dart:.+\\)$');\n          final RegExp assertPattern = RegExp(r'^#1 +[^(]+ \\((.+?):([0-9]+)(?::[0-9]+)?\\)$');\n          if (throwPattern.hasMatch(stackList[0])) {\n            final Match assertMatch = assertPattern.firstMatch(stackList[1]);\n            if (assertMatch != null) {\n              assert(assertMatch.groupCount == 2);\n              final RegExp ourLibraryPattern = RegExp(r'^package:flutter\/');\n              ourFault = ourLibraryPattern.hasMatch(assertMatch.group(1));\n            }\n          }\n        }\n      }\n      if (ourFault) {\n        debugPrint('\\nEither the assertion indicates an error in the framework itself, or we should '\n                   'provide substantially more information in this error message to help you determine '\n                   'and fix the underlying cause.', wrapWidth: wrapWidth);\n        debugPrint('In either case, please report this assertion by filing a bug on GitHub:', wrapWidth: wrapWidth);\n        debugPrint('  https:\/\/github.com\/flutter\/flutter\/issues\/new?template=BUG.md');\n      }\n    }\n    if (details.stack != null) {\n      debugPrint('\\nWhen the exception was thrown, this was the stack:', wrapWidth: wrapWidth);\n      if (details.stackFilter != null) {\n        stackLines = details.stackFilter(stackLines);\n      } else {\n        stackLines = defaultStackFilter(stackLines);\n      }\n      for (String line in stackLines)\n        debugPrint(line, wrapWidth: wrapWidth);\n    }\n    if (details.informationCollector != null) {\n      final StringBuffer information = StringBuffer();\n      details.informationCollector(information);\n      debugPrint('\\n${information.toString().trimRight()}', wrapWidth: wrapWidth);\n    }\n    debugPrint(footer);\n  } else {\n    debugPrint('Another exception was thrown: ${details.exceptionAsString().split(\"\\n\")[0].trimLeft()}');\n  }\n  _errorCount += 1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reportError",
                    "type": "",
                    "desc": "<p>Calls <a href=\"foundation\/FlutterError\/onError.html\">onError<\/a> with the given details, unless it is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [
                        {
                            "name": "details",
                            "type": "foundation.FlutterErrorDetails",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/reportError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void reportError(FlutterErrorDetails details) {\n  assert(details != null);\n  assert(details.exception != null);\n  if (onError != null)\n    onError(details);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "resetErrorCount",
                    "type": "",
                    "desc": "<p>Resets the count of errors used by <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> to decide whether\nto show a complete error message or an abbreviated one.<\/p>\n<p>After this is called, the next error message will be shown in full.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/resetErrorCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void resetErrorCount() {\n  _errorCount = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterError",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlutterError\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; message;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The message associated with this error.<\/p>\n<p>The message may have newlines in it. The first line should be a terse\ndescription of the error, e.g. \"Incorrect GlobalKey usage\" or \"setState()\nor markNeedsBuild() called during build\". Subsequent lines should contain\nsubstantial additional information, ideally sufficient to develop a\ncorrect solution to the problem.<\/p>\n<p>In some cases, when a FlutterError is reported to the user, only the first\nline is included. For example, Flutter will typically only fully report\nthe first exception at runtime, displaying only the first line of\nsubsequent errors.<\/p>\n<p>All sentences in the error should be correctly punctuated (i.e.,\ndo end the error message with a period).<\/p>\n        ",
                    "memberOf": "foundation.FlutterError",
                    "isConstant": false,
                    "href": "foundation\/FlutterError\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get message =&gt; super.message;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "foundation\/FlutterError\/wrapWidth-constant.html",
                    "desc": "<p>The width to which <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> will wrap lines.<\/p>\n<p>This can be used to ensure strings will not exceed the length at which\nthey will wrap, e.g. when placing ASCII art diagrams in messages.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int wrapWidth = 100\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "wrapWidth",
                    "memberOf": "foundation.FlutterError"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/FlutterError-class.html",
            "desc": "<p>Error class used to report Flutter-specific assertion failures and\ncontract violations.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FlutterError"
        },
        {
            "name": "foundation.FlutterErrorDetails",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "FlutterErrorDetails",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> object with the given arguments setting\nthe object's properties.<\/p>\n<p>The framework calls this constructor when catching an exception that will\nsubsequently be reported using <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n<p>The <code>exception<\/code> must not be null; other arguments can be left to\ntheir default values. (<code>throw null<\/code> results in a\n<a href=\"dart-core\/NullThrownError-class.html\">NullThrownError<\/a> exception.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterErrorDetails",
                    "sig": "",
                    "params": [
                        {
                            "name": "exception",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "stack",
                            "type": "dart:core.StackTrace",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "library",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stackFilter",
                            "type": "foundation.IterableFilter<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.IterableFilter",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "informationCollector",
                            "type": "foundation.InformationCollector",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "silent",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/FlutterErrorDetails\/FlutterErrorDetails.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlutterErrorDetails({\n  this.exception,\n  this.stack,\n  this.library = 'Flutter framework',\n  this.context,\n  this.stackFilter,\n  this.informationCollector,\n  this.silent = false,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "exceptionAsString",
                    "type": "dart:core.String",
                    "desc": "<p>Converts the <a href=\"foundation\/FlutterErrorDetails\/exception.html\">exception<\/a> to a string.<\/p>\n<p>This applies some additional logic to make <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a> exceptions\nprettier, to handle exceptions that stringify to empty strings, to handle\nobjects that don't inherit from <a href=\"dart-core\/Exception-class.html\">Exception<\/a> or <a href=\"dart-core\/Error-class.html\">Error<\/a>, and so forth.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterErrorDetails",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlutterErrorDetails\/exceptionAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String exceptionAsString() {\n  String longMessage;\n  if (exception is AssertionError) {\n    \/\/ Regular _AssertionErrors thrown by assert() put the message last, after\n    \/\/ some code snippets. This leads to ugly messages. To avoid this, we move\n    \/\/ the assertion message up to before the code snippets, separated by a\n    \/\/ newline, if we recognise that format is being used.\n    final String message = exception.message;\n    final String fullMessage = exception.toString();\n    if (message is String &amp;&amp; message != fullMessage) {\n      if (fullMessage.length &gt; message.length) {\n        final int position = fullMessage.lastIndexOf(message);\n        if (position == fullMessage.length - message.length &amp;&amp;\n            position &gt; 2 &amp;&amp;\n            fullMessage.substring(position - 2, position) == ': ') {\n          longMessage = '${message.trimRight()}\\n${fullMessage.substring(0, position - 2)}';\n        }\n      }\n    }\n    longMessage ??= fullMessage;\n  } else if (exception is String) {\n    longMessage = exception;\n  } else if (exception is Error || exception is Exception) {\n    longMessage = exception.toString();\n  } else {\n    longMessage = '  ${exception.toString()}';\n  }\n  longMessage = longMessage.trimRight();\n  if (longMessage.isEmpty)\n    longMessage = '  &lt;no message available&gt;';\n  return longMessage;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.FlutterErrorDetails",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/FlutterErrorDetails\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final StringBuffer buffer = StringBuffer();\n  if ((library != null &amp;&amp; library != '') || (context != null &amp;&amp; context != '')) {\n    if (library != null &amp;&amp; library != '') {\n      buffer.write('Error caught by $library');\n      if (context != null &amp;&amp; context != '')\n        buffer.write(', ');\n    } else {\n      buffer.writeln('Exception ');\n    }\n    if (context != null &amp;&amp; context != '')\n      buffer.write('thrown $context');\n    buffer.writeln('.');\n  } else {\n    buffer.write('An error was caught.');\n  }\n  buffer.writeln(exceptionAsString());\n  if (informationCollector != null)\n    informationCollector(buffer);\n  if (stack != null) {\n    Iterable&lt;String&gt; stackLines = stack.toString().trimRight().split('\\n');\n    if (stackFilter != null) {\n      stackLines = stackFilter(stackLines);\n    } else {\n      stackLines = FlutterError.defaultStackFilter(stackLines);\n    }\n    buffer.writeAll(stackLines, '\\n');\n  }\n  return buffer.toString().trimRight();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "context",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable description of where the error was caught (as opposed to\nwhere it was thrown).<\/p>\n<p>The string should be in a form that will make sense in English when\nfollowing the word \"thrown\", as in \"thrown while obtaining the image from\nthe network\" (for the context \"while obtaining the image from the\nnetwork\").<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/context.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String context\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "exception",
                    "type": "",
                    "types": [],
                    "desc": "<p>The exception. Often this will be an <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a>, maybe specifically\na <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a>. However, this could be any value at all.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/exception.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final dynamic exception\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "informationCollector",
                    "type": "foundation.InformationCollector",
                    "types": [],
                    "desc": "<p>A callback which, when called with a <a href=\"dart-core\/StringBuffer-class.html\">StringBuffer<\/a> will write to that buffer\ninformation that could help with debugging the problem.<\/p>\n<p>Information collector callbacks can be expensive, so the generated information\nshould be cached, rather than the callback being called multiple times.<\/p>\n<p>The text written to the information argument may contain newlines but should\nnot end with a newline.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/informationCollector.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InformationCollector informationCollector\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "library",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable brief name describing the library that caught the error\nmessage. This is used by the default error handler in the header dumped to\nthe console.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/library.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String library\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "silent",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this error should be ignored by the default error reporting\nbehavior in release mode.<\/p>\n<p>If this is false, the default, then the default error handler will always\ndump this error to the console.<\/p>\n<p>If this is true, then the default error handler would only dump this error\nto the console in checked mode. In release mode, the error is ignored.<\/p>\n<p>This is used by certain exception handlers that catch errors that could be\ntriggered by environmental conditions (as opposed to logic errors). For\nexample, the HTTP library sets this flag so as to not report every 404\nerror to the console on end-user devices, while still allowing a custom\nerror handler to see the errors even in release builds.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/silent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool silent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stack",
                    "type": "dart:core.StackTrace",
                    "types": [],
                    "desc": "<p>The stack trace from where the <a href=\"foundation\/FlutterErrorDetails\/exception.html\">exception<\/a> was thrown (as opposed to where\nit was caught).<\/p>\n<p>StackTrace objects are opaque except for their <a href=\"foundation\/FlutterErrorDetails\/toString.html\">toString<\/a> function.<\/p>\n<p>If this field is not null, then the <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">stackFilter<\/a> callback, if any, will\nbe called with the result of calling <a href=\"foundation\/FlutterErrorDetails\/toString.html\">toString<\/a> on this object and\nsplitting that result on line breaks. If there's no <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">stackFilter<\/a>\ncallback, then <a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> is used instead. That\nfunction expects the stack to be in the format used by\n<a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/stack.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace stack\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stackFilter",
                    "type": "foundation.IterableFilter<dart:core.String>",
                    "types": [
                        "foundation.IterableFilter",
                        "dart:core.String"
                    ],
                    "desc": "<p>A callback which filters the <a href=\"foundation\/FlutterErrorDetails\/stack.html\">stack<\/a> trace. Receives an iterable of\nstrings representing the frames encoded in the way that\n<a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString()<\/a> provides. Should return an iterable of lines to\noutput for the stack.<\/p>\n<p>If this is not provided, then <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">FlutterError.dumpErrorToConsole<\/a> will use\n<a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> instead.<\/p>\n<p>If the <a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> behavior is desired, then the\ncallback should manually call that function. That function expects the\nincoming list to be in the <a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString()<\/a> format. The output of\nthat function, however, does not always follow this format.<\/p>\n<p>This won't be called if <a href=\"foundation\/FlutterErrorDetails\/stack.html\">stack<\/a> is null.<\/p>\n        ",
                    "memberOf": "foundation.FlutterErrorDetails",
                    "isConstant": false,
                    "href": "foundation\/FlutterErrorDetails\/stackFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IterableFilter&lt;String&gt; stackFilter\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                "gestures.FlutterErrorDetailsForPointerRouter",
                "rendering.FlutterErrorDetailsForRendering"
            ],
            "realImplementors": [
                "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                "gestures.FlutterErrorDetailsForPointerRouter",
                "rendering.FlutterErrorDetailsForRendering"
            ],
            "cn": [],
            "href": "foundation\/FlutterErrorDetails-class.html",
            "desc": "<p>Class for information provided to <a href=\"foundation\/FlutterExceptionHandler.html\">FlutterExceptionHandler<\/a> callbacks.<\/p>\n<p>See <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FlutterErrorDetails"
        },
        {
            "name": "foundation.FlutterExceptionHandler",
            "type": "",
            "desc": "<p>Signature for <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a> handler.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "details",
                    "type": "foundation.FlutterErrorDetails",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/FlutterExceptionHandler.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef FlutterExceptionHandler = void Function(FlutterErrorDetails details);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.InformationCollector",
            "type": "",
            "desc": "<p>Signature for <a href=\"foundation\/FlutterErrorDetails\/informationCollector.html\">FlutterErrorDetails.informationCollector<\/a> callback\nand other callbacks that collect information into a string buffer.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "information",
                    "type": "dart:core.StringBuffer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/InformationCollector.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef InformationCollector = void Function(StringBuffer information);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.IntProperty",
            "extends": [
                "dart:core.int",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "IntProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for integers.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.IntProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "unit",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/IntProperty\/IntProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IntProperty(\n  String name,\n  int value, {\n  String ifNull,\n  bool showName = true,\n  String unit,\n  Object defaultValue = kNoDefaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  ifNull: ifNull,\n  showName: showName,\n  unit: unit,\n  defaultValue: defaultValue,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "numberToString",
                    "type": "dart:core.String",
                    "desc": "<p>String describing just the numeric <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> without a unit suffix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.IntProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/IntProperty\/numberToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString numberToString() =&gt; value.toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.IntProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/IntProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (unit != null)\n    json['unit'] = unit;\n\n  json['numberToString'] = numberToString();\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/IntProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.IntProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/IntProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n\n  return unit != null ? '${numberToString()}$unit' : numberToString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "unit",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Optional unit the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is measured in.<\/p>\n<p>Unit must be acceptable to display immediately after a number with no\nspaces. For example: 'physical pixels per logical pixel' should be a\n<a href=\"foundation\/DiagnosticsProperty\/tooltip.html\">tooltip<\/a> not a <a href=\"foundation\/IntProperty\/unit.html\">unit<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.IntProperty",
                    "isConstant": false,
                    "href": "foundation\/IntProperty\/unit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String unit\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/IntProperty-class.html",
            "desc": "<p>An int valued property with an optional unit the value is measured in.<\/p>\n<p>Examples of units include 'px' and 'ms'.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IntProperty"
        },
        {
            "name": "foundation.IterableFilter",
            "type": "dart:core.Iterable",
            "desc": "<p>Signature for callbacks that filter an iterable.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "input",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/IterableFilter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef IterableFilter&lt;T&gt; = Iterable&lt;T&gt; Function(Iterable&lt;T&gt; input);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "foundation.IterableProperty",
            "extends": [
                "dart:core.Iterable",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "IterableProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for iterables (e.g. lists).<\/p>\n<p>The <code>ifEmpty<\/code> argument is used to indicate how an iterable <code>value<\/code> with 0\nelements is displayed. If <code>ifEmpty<\/code> equals null that indicates that an\nempty iterable <code>value<\/code> is not interesting to display similar to how\n<code>defaultValue<\/code> is used to indicate that a specific concrete value is not\ninteresting to display.<\/p>\n<p>The <code>style<\/code>, <code>showName<\/code>, and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.IterableProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifEmpty",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "foundation.DiagnosticsTreeStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/IterableProperty\/IterableProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IterableProperty(\n  String name,\n  Iterable&lt;T&gt; value, {\n  Object defaultValue = kNoDefaultValue,\n  String ifNull,\n  String ifEmpty = '[]',\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  bool showName = true,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(style != null),\n     assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  defaultValue: defaultValue,\n  ifNull: ifNull,\n  ifEmpty: ifEmpty,\n  style: style,\n  showName: showName,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.IterableProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/IterableProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (value != null) {\n    json['values'] = value.map&lt;String&gt;((T value) =&gt; value.toString()).toList();\n  }\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/IterableProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.IterableProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/IterableProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n\n  if (value.isEmpty)\n    return ifEmpty ?? '[]';\n\n  if (parentConfiguration != null &amp;&amp; !parentConfiguration.lineBreakProperties) {\n    \/\/ Always display the value as a single line and enclose the iterable\n    \/\/ value in brackets to avoid ambiguity.\n    return '[${value.join(', ')}]';\n  }\n\n  return value.join(style == DiagnosticsTreeStyle.singleLine ? ', ' : '\\n');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "types": [],
                    "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>If <a href=\"foundation\/DiagnosticsProperty\/ifEmpty.html\">ifEmpty<\/a> is null and the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is an empty <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> then level\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> is returned in a similar way to how an\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> handles when <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> is null and the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is\nnull.<\/p>\n        ",
                    "memberOf": "foundation.IterableProperty",
                    "isConstant": false,
                    "href": "foundation\/IterableProperty\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (ifEmpty == null &amp;&amp; value != null &amp;&amp; value.isEmpty &amp;&amp; super.level != DiagnosticLevel.hidden)\n    return DiagnosticLevel.fine;\n  return super.level;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/IterableProperty-class.html",
            "desc": "<p>Property with an <code>Iterable&lt;T&gt;<\/code> <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that can be displayed with\ndifferent <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> for custom rendering.<\/p>\n<p>If <a href=\"foundation\/DiagnosticsNode\/style.html\">style<\/a> is <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.singleLine<\/a>, the iterable is described\nas a comma separated list, otherwise the iterable is described as a line\nbreak separated list.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IterableProperty"
        },
        {
            "name": "foundation.Key",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Key",
                    "type": "",
                    "desc": "<p>Construct a <a href=\"foundation\/ValueKey-class.html\">ValueKey&lt;String&gt;<\/a> with the given <a href=\"dart-core\/String-class.html\">String<\/a>.<\/p>\n<p>This is the simplest way to create keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Key",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/Key\/Key.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory Key(String value) = ValueKey&lt;String&gt;;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Key.empty",
                    "type": "",
                    "desc": "<p>Default constructor, used by subclasses.<\/p>\n<p>Useful so that subclasses can call us, because the <a href=\"foundation\/Key\/Key.html\">new Key<\/a> factory\nconstructor shadows the implicit constructor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Key",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/Key\/Key.empty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nconst Key.empty();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "foundation.LocalKey",
                "foundation.ValueKey",
                "widgets.GlobalKey",
                "widgets.GlobalObjectKey",
                "widgets.LabeledGlobalKey",
                "widgets.ObjectKey",
                "widgets.PageStorageKey",
                "widgets.UniqueKey"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/Key-class.html",
            "desc": "<p>A <a href=\"foundation\/Key-class.html\">Key<\/a> is an identifier for <a href=\"widgets\/Widget-class.html\">Widget<\/a>s, <a href=\"widgets\/Element-class.html\">Element<\/a>s and <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>A new widget will only be used to update an existing element if its key is\nthe same as the key of the current widget associated with the element.<\/p>\n<p>Keys must be unique amongst the <a href=\"widgets\/Element-class.html\">Element<\/a>s with the same parent.<\/p>\n<p>Subclasses of <a href=\"foundation\/Key-class.html\">Key<\/a> should either subclass <a href=\"foundation\/LocalKey-class.html\">LocalKey<\/a> or <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>.<\/p>\n<p>See also the discussion at <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Key"
        },
        {
            "name": "foundation.LicenseEntry",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "LicenseEntry",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.LicenseEntry",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/LicenseEntry\/LicenseEntry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LicenseEntry();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "packages",
                    "type": "dart:core.Iterable<dart:core.String>",
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.String"
                    ],
                    "desc": "<p>The names of the packages that this license entry applies to.<\/p>\n        ",
                    "memberOf": "foundation.LicenseEntry",
                    "isConstant": false,
                    "href": "foundation\/LicenseEntry\/packages.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;String&gt; get packages;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "paragraphs",
                    "type": "dart:core.Iterable<foundation.LicenseParagraph>",
                    "types": [
                        "dart:core.Iterable",
                        "foundation.LicenseParagraph"
                    ],
                    "desc": "<p>The paragraphs of the license, each as a <a href=\"foundation\/LicenseParagraph-class.html\">LicenseParagraph<\/a> consisting of\na string and some formatting information. Paragraphs can include newline\ncharacters, but this is discouraged as it results in ugliness.<\/p>\n        ",
                    "memberOf": "foundation.LicenseEntry",
                    "isConstant": false,
                    "href": "foundation\/LicenseEntry\/paragraphs.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;LicenseParagraph&gt; get paragraphs;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "foundation.LicenseEntryWithLineBreaks"
            ],
            "realImplementors": [
                "foundation.LicenseEntryWithLineBreaks"
            ],
            "cn": [],
            "href": "foundation\/LicenseEntry-class.html",
            "desc": "<p>A license that covers part of the application's software or assets, to show\nin an interface such as the <a href=\"material\/LicensePage-class.html\">LicensePage<\/a>.<\/p>\n<p>For optimal performance, <a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a> objects should only be created on\ndemand in <a href=\"foundation\/LicenseEntryCollector.html\">LicenseEntryCollector<\/a> callbacks passed to\n<a href=\"foundation\/LicenseRegistry\/addLicense.html\">LicenseRegistry.addLicense<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LicenseEntry"
        },
        {
            "name": "foundation.LicenseEntryCollector",
            "type": "dart:async.Stream<foundation.LicenseEntry>",
            "desc": "<p>Signature for callbacks passed to <a href=\"foundation\/LicenseRegistry\/addLicense.html\">LicenseRegistry.addLicense<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/LicenseEntryCollector.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef LicenseEntryCollector = Stream&lt;LicenseEntry&gt; Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": [
                "dart:async.Stream",
                "foundation.LicenseEntry"
            ]
        },
        {
            "name": "foundation.LicenseEntryWithLineBreaks",
            "extends": [
                "foundation.LicenseEntry",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "LicenseEntryWithLineBreaks",
                    "type": "",
                    "desc": "<p>Create a license entry for a license whose text is hard-wrapped within\nparagraphs and has paragraph breaks denoted by blank lines or with\nindented text.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.LicenseEntryWithLineBreaks",
                    "sig": "",
                    "params": [
                        {
                            "name": "packages",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/LicenseEntryWithLineBreaks\/LicenseEntryWithLineBreaks.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LicenseEntryWithLineBreaks(this.packages, this.text);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "packages",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>The names of the packages that this license entry applies to.<\/p>\n        ",
                    "memberOf": "foundation.LicenseEntryWithLineBreaks",
                    "isConstant": false,
                    "href": "foundation\/LicenseEntryWithLineBreaks\/packages.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; packages\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "paragraphs",
                    "type": "dart:core.Iterable<foundation.LicenseParagraph>",
                    "types": [
                        "dart:core.Iterable",
                        "foundation.LicenseParagraph"
                    ],
                    "desc": "<p>The paragraphs of the license, each as a <a href=\"foundation\/LicenseParagraph-class.html\">LicenseParagraph<\/a> consisting of\na string and some formatting information. Paragraphs can include newline\ncharacters, but this is discouraged as it results in ugliness.<\/p>\n        ",
                    "memberOf": "foundation.LicenseEntryWithLineBreaks",
                    "isConstant": false,
                    "href": "foundation\/LicenseEntryWithLineBreaks\/paragraphs.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;LicenseParagraph&gt; get paragraphs sync* {\n  int lineStart = 0;\n  int currentPosition = 0;\n  int lastLineIndent = 0;\n  int currentLineIndent = 0;\n  int currentParagraphIndentation;\n  _LicenseEntryWithLineBreaksParserState state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n  final List&lt;String&gt; lines = &lt;String&gt;[];\n\n  void addLine() {\n    assert(lineStart &lt; currentPosition);\n    lines.add(text.substring(lineStart, currentPosition));\n  }\n\n  LicenseParagraph getParagraph() {\n    assert(lines.isNotEmpty);\n    assert(currentParagraphIndentation != null);\n    final LicenseParagraph result = LicenseParagraph(lines.join(' '), currentParagraphIndentation);\n    assert(result.text.trimLeft() == result.text);\n    assert(result.text.isNotEmpty);\n    lines.clear();\n    return result;\n  }\n\n  while (currentPosition &lt; text.length) {\n    switch (state) {\n      case _LicenseEntryWithLineBreaksParserState.beforeParagraph:\n        assert(lineStart == currentPosition);\n        switch (text[currentPosition]) {\n          case ' ':\n            lineStart = currentPosition + 1;\n            currentLineIndent += 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\t':\n            lineStart = currentPosition + 1;\n            currentLineIndent += 8;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\n':\n          case '\\f':\n            if (lines.isNotEmpty) {\n              yield getParagraph();\n            }\n            lastLineIndent = 0;\n            currentLineIndent = 0;\n            currentParagraphIndentation = null;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '[':\n            \/\/ This is a bit of a hack for the LGPL 2.1, which does something like this:\n            \/\/\n            \/\/   [this is a\n            \/\/    single paragraph]\n            \/\/\n            \/\/ ...near the top.\n            currentLineIndent += 1;\n            continue startParagraph;\n          startParagraph:\n          default:\n            if (lines.isNotEmpty &amp;&amp; currentLineIndent &gt; lastLineIndent) {\n              yield getParagraph();\n              currentParagraphIndentation = null;\n            }\n            \/\/ The following is a wild heuristic for guessing the indentation level.\n            \/\/ It happens to work for common variants of the BSD and LGPL licenses.\n            if (currentParagraphIndentation == null) {\n              if (currentLineIndent &gt; 10)\n                currentParagraphIndentation = LicenseParagraph.centeredIndent;\n              else\n                currentParagraphIndentation = currentLineIndent ~\/ 3;\n            }\n            state = _LicenseEntryWithLineBreaksParserState.inParagraph;\n        }\n        break;\n      case _LicenseEntryWithLineBreaksParserState.inParagraph:\n        switch (text[currentPosition]) {\n          case '\\n':\n            addLine();\n            lastLineIndent = currentLineIndent;\n            currentLineIndent = 0;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          case '\\f':\n            addLine();\n            yield getParagraph();\n            lastLineIndent = 0;\n            currentLineIndent = 0;\n            currentParagraphIndentation = null;\n            lineStart = currentPosition + 1;\n            state = _LicenseEntryWithLineBreaksParserState.beforeParagraph;\n            break;\n          default:\n            state = _LicenseEntryWithLineBreaksParserState.inParagraph;\n        }\n        break;\n    }\n    currentPosition += 1;\n  }\n  switch (state) {\n    case _LicenseEntryWithLineBreaksParserState.beforeParagraph:\n      if (lines.isNotEmpty) {\n        yield getParagraph();\n      }\n      break;\n    case _LicenseEntryWithLineBreaksParserState.inParagraph:\n      addLine();\n      yield getParagraph();\n      break;\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The text of the license.<\/p>\n<p>The text will be split into paragraphs according to the following\nconventions:<\/p>\n<ul>\n<li>Lines starting with a different number of space characters than the\nprevious line start a new paragraph, with those spaces removed.<\/li>\n<li>Blank lines start a new paragraph.<\/li>\n<li>Other line breaks are replaced by a single space character.<\/li>\n<li>Leading spaces on a line are removed.<\/li>\n<\/ul>\n<p>For each paragraph, the algorithm attempts (using some rough heuristics)\nto identify how indented the paragraph is, or whether it is centered.<\/p>\n        ",
                    "memberOf": "foundation.LicenseEntryWithLineBreaks",
                    "isConstant": false,
                    "href": "foundation\/LicenseEntryWithLineBreaks\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/LicenseEntryWithLineBreaks-class.html",
            "desc": "<p>Variant of <a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a> for licenses that separate paragraphs with blank\nlines and that hard-wrap text within paragraphs. Lines that begin with one\nor more space characters are also assumed to introduce new paragraphs,\nunless they start with the same number of spaces as the previous line, in\nwhich case it's assumed they are a continuation of an indented paragraph.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nFor example, the BSD license in this format could be encoded as follows:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void initMyLibrary() {\n  LicenseRegistry.addLicense(() async* {\n    yield LicenseEntryWithLineBreaks(&lt;String&gt;['my_library'], '''\nCopyright 2016 The Sample Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and\/or other materials provided with the\ndistribution.\n   * Neither the name of Example Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.''');\n  });\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>This would result in a license with six <a href=\"foundation\/LicenseEntryWithLineBreaks\/paragraphs.html\">paragraphs<\/a>, the third, fourth, and\nfifth being indented one level.<\/p>\n<h2 id=\"performance-considerations\">Performance considerations<\/h2>\n<p>Computing the paragraphs is relatively expensive. Doing the work for one\nlicense per frame is reasonable; doing more at the same time is ill-advised.\nConsider doing all the work at once using <a href=\"foundation\/compute.html\">compute<\/a> to move the work to\nanother thread, or spreading the work across multiple frames using\n<code>scheduleTask<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LicenseEntryWithLineBreaks"
        },
        {
            "name": "foundation.LicenseParagraph",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "LicenseParagraph",
                    "type": "",
                    "desc": "<p>Creates a string for a license entry paragraph.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.LicenseParagraph",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "indent",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/LicenseParagraph\/LicenseParagraph.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LicenseParagraph(this.text, this.indent);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "foundation\/LicenseParagraph\/centeredIndent-constant.html",
                    "desc": "<p>A constant that represents \"centered\" alignment for <a href=\"foundation\/LicenseParagraph\/indent.html\">indent<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int centeredIndent = -1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centeredIndent",
                    "memberOf": "foundation.LicenseParagraph"
                },
                {
                    "name": "indent",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>How many steps of indentation the paragraph has.<\/p>\n<ul>\n<li>0 means the paragraph is not indented.<\/li>\n<li>1 means the paragraph is indented one unit of indentation.<\/li>\n<li>2 means the paragraph is indented two units of indentation.<\/li>\n<\/ul>\n<p>...and so forth.<\/p>\n<p>In addition, the special value <a href=\"foundation\/LicenseParagraph\/centeredIndent-constant.html\">centeredIndent<\/a> can be used to indicate\nthat rather than being indented, the paragraph is centered.<\/p>\n        ",
                    "memberOf": "foundation.LicenseParagraph",
                    "isConstant": false,
                    "href": "foundation\/LicenseParagraph\/indent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int indent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The text of the paragraph. Should not have any leading or trailing whitespace.<\/p>\n        ",
                    "memberOf": "foundation.LicenseParagraph",
                    "isConstant": false,
                    "href": "foundation\/LicenseParagraph\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/LicenseParagraph-class.html",
            "desc": "<p>A string that represents one paragraph in a <a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a>.<\/p>\n<p>See <a href=\"foundation\/LicenseEntry\/paragraphs.html\">LicenseEntry.paragraphs<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LicenseParagraph"
        },
        {
            "name": "foundation.LicenseRegistry",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "addLicense",
                    "type": "",
                    "desc": "<p>Adds licenses to the registry.<\/p>\n<p>To avoid actually manipulating the licenses unless strictly necessary,\nlicenses are added by adding a closure that returns a list of\n<a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a> objects. The closure is only called if <a href=\"foundation\/LicenseRegistry\/licenses.html\">licenses<\/a> is itself\ncalled; in normal operation, if the user does not request to see the\nlicenses, the closure will not be called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.LicenseRegistry",
                    "sig": "",
                    "params": [
                        {
                            "name": "collector",
                            "type": "foundation.LicenseEntryCollector",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/LicenseRegistry\/addLicense.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void addLicense(LicenseEntryCollector collector) {\n  _collectors ??= &lt;LicenseEntryCollector&gt;[];\n  _collectors.add(collector);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "licenses",
                    "type": "dart:async.Stream<foundation.LicenseEntry>",
                    "types": [
                        "dart:async.Stream",
                        "foundation.LicenseEntry"
                    ],
                    "desc": "<p>Returns the licenses that have been registered.<\/p>\n<p>Generating the list of licenses is expensive.<\/p>\n        ",
                    "memberOf": "foundation.LicenseRegistry",
                    "isConstant": false,
                    "href": "foundation\/LicenseRegistry\/licenses.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Stream&lt;LicenseEntry&gt; get licenses async* {\n  if (_collectors == null)\n    return;\n  for (LicenseEntryCollector collector in _collectors)\n    yield* collector();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/LicenseRegistry-class.html",
            "desc": "<p>A registry for packages to add licenses to, so that they can be displayed\ntogether in an interface such as the <a href=\"material\/LicensePage-class.html\">LicensePage<\/a>.<\/p>\n<p>Packages can register their licenses using <a href=\"foundation\/LicenseRegistry\/addLicense.html\">addLicense<\/a>. User interfaces\nthat wish to show all the licenses can obtain them by calling <a href=\"foundation\/LicenseRegistry\/licenses.html\">licenses<\/a>.<\/p>\n<p>The flutter tool will automatically collect the contents of all the LICENSE\nfiles found at the root of each package into a single LICENSE file in the\ndefault asset bundle. Each license in that file is separated from the next\nby a line of eighty hyphens (<code>-<\/code>), and begins with a list of package names\nthat the license applies to, one to a line, separated from the next by a\nblank line. The <code>services<\/code> package registers a license collector that splits\nthat file and adds each entry to the registry.<\/p>\n<p>The LICENSE files in each package can either consist of a single license, or\ncan be in the format described above. In the latter case, each component\nlicense and list of package names is merged independently.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/showAboutDialog.html\">showAboutDialog<\/a>, which shows a Material-style dialog with information\nabout the application, including a button that shows a <a href=\"material\/LicensePage-class.html\">LicensePage<\/a> that\nuses this API to select licenses to show.<\/li>\n<li>\n<a href=\"material\/AboutListTile-class.html\">AboutListTile<\/a>, which is a widget that can be added to a <a href=\"material\/Drawer-class.html\">Drawer<\/a>. When\ntapped it calls <a href=\"material\/showAboutDialog.html\">showAboutDialog<\/a>.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LicenseRegistry"
        },
        {
            "name": "foundation.Listenable",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Listenable",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Listenable",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/Listenable\/Listenable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Listenable();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Register a closure to be called when the object notifies its listeners.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Listenable",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/Listenable\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(VoidCallback listener);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "Listenable.merge",
                    "type": "",
                    "desc": "<p>Return a <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that triggers when any of the given <a href=\"foundation\/Listenable-class.html\">Listenable<\/a>s\nthemselves trigger.<\/p>\n<p>The list must not be changed after this method has been called. Doing so\nwill lead to memory leaks or exceptions.<\/p>\n<p>The list may contain nulls; they are ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Listenable",
                    "sig": "",
                    "params": [
                        {
                            "name": "listenables",
                            "type": "dart:core.List<foundation.Listenable>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "foundation.Listenable"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/Listenable\/Listenable.merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Listenable.merge(List&lt;Listenable&gt; listenables) = _MergingListenable;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Remove a previously registered closure from the list of closures that the\nobject notifies.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Listenable",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/Listenable\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(VoidCallback listener);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "animation.AlwaysStoppedAnimation",
                "animation.Animation",
                "animation.AnimationController",
                "animation.AnimationMax",
                "animation.AnimationMean",
                "animation.AnimationMin",
                "animation.CompoundAnimation",
                "animation.CurvedAnimation",
                "animation.ProxyAnimation",
                "animation.ReverseAnimation",
                "animation.TrainHoppingAnimation",
                "foundation.ValueListenable",
                "rendering.CustomPainter",
                "widgets.BannerPainter"
            ],
            "realImplementors": [
                "animation.AlwaysStoppedAnimation"
            ],
            "cn": [],
            "href": "foundation\/Listenable-class.html",
            "desc": "<p>An object that maintains a list of listeners.<\/p>\n<p>The listeners are typically used to notify clients that the object has been\nupdated.<\/p>\n<p>There are two variants of this interface:<\/p>\n<ul>\n<li>\n<p><a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a>, an interface that augments the <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> interface\nwith the concept of a <em>current value<\/em>.<\/p>\n<\/li>\n<li>\n<p><a href=\"animation\/Animation-class.html\">Animation<\/a>, an interface that augments the <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> interface\nto add the concept of direction (forward or reverse).<\/p>\n<\/li>\n<\/ul>\n<p>Many classes in the Flutter API use or implement these interfaces. The\nfollowing subclasses are especially relevant:<\/p>\n<ul>\n<li>\n<p><a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a>, which can be subclassed or mixed in to create objects\nthat implement the <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> interface.<\/p>\n<\/li>\n<li>\n<p><a href=\"foundation\/ValueNotifier-class.html\">ValueNotifier<\/a>, which implements the <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> interface with\na mutable value that triggers the notifications when modified.<\/p>\n<\/li>\n<\/ul>\n<p>The terms \"notify clients\", \"send notifications\", \"trigger notifications\",\nand \"fire notifications\" are used interchangeably.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedBuilder-class.html\">AnimatedBuilder<\/a>, a widget that uses a builder callback to rebuild\nwhenever a given <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> triggers its notifications. This widget is\ncommonly used with <a href=\"animation\/Animation-class.html\">Animation<\/a> subclasses, wherein its name. It is a\nsubclass of <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>, which can be used to create widgets that\nare driven from a <a href=\"foundation\/Listenable-class.html\">Listenable<\/a>.<\/li>\n<li>\n<a href=\"widgets\/ValueListenableBuilder-class.html\">ValueListenableBuilder<\/a>, a widget that uses a builder callback to\nrebuild whenever a <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> object triggers its notifications,\nproviding the builder with the value of the object.<\/li>\n<li>\n<a href=\"widgets\/InheritedNotifier-class.html\">InheritedNotifier<\/a>, an abstract superclass for widgets that use a\n<a href=\"foundation\/Listenable-class.html\">Listenable<\/a>'s notifications to trigger rebuilds in descendant widgets\nthat declare a dependency on them, using the <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> mechanism.<\/li>\n<li>\n<a href=\"foundation\/Listenable\/Listenable.merge.html\">new Listenable.merge<\/a>, which creates a <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that triggers\nnotifications whenever any of a list of other <a href=\"foundation\/Listenable-class.html\">Listenable<\/a>s trigger their\nnotifications.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Listenable"
        },
        {
            "name": "foundation.LocalKey",
            "extends": [
                "foundation.Key",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "LocalKey",
                    "type": "",
                    "desc": "<p>Default constructor, used by subclasses.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.LocalKey",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/LocalKey\/LocalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LocalKey() : super.empty();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "foundation.ValueKey",
                "widgets.ObjectKey",
                "widgets.PageStorageKey",
                "widgets.UniqueKey"
            ],
            "realImplementors": [
                "foundation.ValueKey",
                "widgets.ObjectKey",
                "widgets.PageStorageKey",
                "widgets.UniqueKey"
            ],
            "cn": [],
            "href": "foundation\/LocalKey-class.html",
            "desc": "<p>A key that is not a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>.<\/p>\n<p>Keys must be unique amongst the <a href=\"widgets\/Element-class.html\">Element<\/a>s with the same parent. By\ncontrast, <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>s must be unique across the entire app.<\/p>\n<p>See also the discussion at <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LocalKey"
        },
        {
            "name": "foundation.MessageProperty",
            "extends": [
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "MessageProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property that displays a message.<\/p>\n<p>Messages have no concrete <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> (so <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> will return null). The\nmessage is stored as the description.<\/p>\n<p>The <code>name<\/code>, <code>message<\/code>, and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.MessageProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/MessageProperty\/MessageProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MessageProperty(\n  String name,\n  String message, {\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(name != null),\n     assert(message != null),\n     assert(level != null),\n     super(name, null, description: message, level: level);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/MessageProperty-class.html",
            "desc": "<p>Debugging message displayed like a property.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following two properties are better expressed using this\n<a href=\"foundation\/MessageProperty-class.html\">MessageProperty<\/a> class, rather than <a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, as the intent is to\nshow a message with property style display rather than to describe the value\nof an actual property of the object:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">var table = MessageProperty('table size', '$columns\\u00D7$rows');\nvar usefulness = MessageProperty('usefulness ratio', 'no metrics collected yet (never painted)');<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nOn the other hand, <a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a> is better suited when the property has a\nconcrete value that is a string:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">var name = StringProperty('name', _name);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">DiagnosticsNode.message<\/a>, which serves the same role for messages\nwithout a clear property name.<\/li>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which is a better fit for properties with string values.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MessageProperty"
        },
        {
            "name": "foundation.ObjectFlagProperty",
            "extends": [
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ObjectFlagProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for values that can be present (non-null) or\nabsent (null), but for which the exact value's <a href=\"foundation\/DiagnosticsNode\/toString.html\">Object.toString<\/a>\nrepresentation is not very transparent (e.g. a callback).<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null. Additionally, at\nleast one of <code>ifPresent<\/code> and <code>ifNull<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObjectFlagProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "ifPresent",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/ObjectFlagProperty\/ObjectFlagProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ObjectFlagProperty(\n  String name,\n  T value, {\n  this.ifPresent,\n  String ifNull,\n  bool showName = false,\n  DiagnosticLevel level  = DiagnosticLevel.info,\n}) : assert(ifPresent != null || ifNull != null),\n     assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  showName: showName,\n  ifNull: ifNull,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ObjectFlagProperty.has",
                    "type": "",
                    "desc": "<p>Shorthand constructor to describe whether the property has a value.<\/p>\n<p>Only use if prefixing the property name with the word 'has' is a good\nflag name.<\/p>\n<p>The <code>name<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObjectFlagProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/ObjectFlagProperty\/ObjectFlagProperty.has.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ObjectFlagProperty.has(\n  String name,\n  T value, {\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(name != null),\n     assert(level != null),\n     ifPresent = 'has $name',\n     super(\n  name,\n  value,\n  showName: false,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.ObjectFlagProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ObjectFlagProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (ifPresent != null)\n    json['ifPresent'] = ifPresent;\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/ObjectFlagProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObjectFlagProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ObjectFlagProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value != null) {\n    if (ifPresent != null)\n      return ifPresent;\n  } else {\n    if (ifNull != null)\n      return ifNull;\n  }\n  return super.valueToString(parentConfiguration: parentConfiguration);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "ifPresent",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Description to use if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is not null.<\/p>\n<p>If the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is not null and <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> is null, the\n<a href=\"foundation\/ObjectFlagProperty\/level.html\">level<\/a> for the property is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> and the description\nfrom superclass is used.<\/p>\n        ",
                    "memberOf": "foundation.ObjectFlagProperty",
                    "isConstant": false,
                    "href": "foundation\/ObjectFlagProperty\/ifPresent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifPresent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "types": [],
                    "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.ObjectFlagProperty",
                    "isConstant": false,
                    "href": "foundation\/ObjectFlagProperty\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (value != null) {\n    if (ifPresent == null)\n      return DiagnosticLevel.hidden;\n  } else {\n    if (ifNull == null)\n      return DiagnosticLevel.hidden;\n  }\n\n  return super.level;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
                    "memberOf": "foundation.ObjectFlagProperty",
                    "isConstant": false,
                    "href": "foundation\/ObjectFlagProperty\/showName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get showName {\n  if ((value != null &amp;&amp; ifPresent == null) || (value == null &amp;&amp; ifNull == null)) {\n    \/\/ We are missing a description for the flag value so we need to show the\n    \/\/ flag name. The property will have DiagnosticLevel.hidden for this case\n    \/\/ so users will not see this the property in this case unless they are\n    \/\/ displaying hidden properties.\n    return true;\n  }\n  return super.showName;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/ObjectFlagProperty-class.html",
            "desc": "<p>A property where the important diagnostic information is primarily whether\nthe <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is present (non-null) or absent (null), rather than the actual\nvalue of the property itself.<\/p>\n<p>The <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> and <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> strings describe the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> when it\nis non-null and null respectively. If one of <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> or <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> is\nomitted, that is taken to mean that <a href=\"foundation\/ObjectFlagProperty\/level.html\">level<\/a> should be\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> when <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is non-null or null respectively.<\/p>\n<p>This kind of diagnostics property is typically used for values mostly opaque\nvalues, like closures, where presenting the actual object is of dubious\nvalue but where reporting the presence or absence of the value is much more\nuseful.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which provides similar functionality describing whether\na <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true or false.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ObjectFlagProperty"
        },
        {
            "name": "foundation.ObserverList",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ObserverList",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "foundation.ObserverList",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/ObserverList\/ObserverList.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds an item to the end of this list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObserverList",
                    "sig": "",
                    "params": [
                        {
                            "name": "item",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ObserverList\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T item) {\n  _isDirty = true;\n  _list.add(item);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObserverList",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ObserverList\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool contains(Object element) {\n  if (_list.length &lt; 3)\n    return _list.contains(element);\n\n  if (_isDirty) {\n    if (_set == null) {\n      _set = HashSet&lt;T&gt;.from(_list);\n    } else {\n      _set.clear();\n      _set.addAll(_list);\n    }\n    _isDirty = false;\n  }\n\n  return _set.contains(element);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes an item from the list.<\/p>\n<p>This is O(N) in the number of items in the list.<\/p>\n<p>Returns whether the item was present in the list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ObserverList",
                    "sig": "",
                    "params": [
                        {
                            "name": "item",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ObserverList\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(T item) {\n  _isDirty = true;\n  return _list.remove(item);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "memberOf": "foundation.ObserverList",
                    "isConstant": false,
                    "href": "foundation\/ObserverList\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isEmpty =&gt; _list.isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "foundation.ObserverList",
                    "isConstant": false,
                    "href": "foundation\/ObserverList\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNotEmpty =&gt; _list.isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator",
                    "types": [],
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "memberOf": "foundation.ObserverList",
                    "isConstant": false,
                    "href": "foundation\/ObserverList\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;T&gt; get iterator =&gt; _list.iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/ObserverList-class.html",
            "desc": "<p>A list optimized for containment queries.<\/p>\n<p>Consider using an <a href=\"foundation\/ObserverList-class.html\">ObserverList<\/a> instead of a <a href=\"dart-core\/List-class.html\">List<\/a> when the number of\n<a href=\"foundation\/ObserverList\/contains.html\">contains<\/a> calls dominates the number of <a href=\"foundation\/ObserverList\/add.html\">add<\/a> and <a href=\"foundation\/ObserverList\/remove.html\">remove<\/a> calls.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ObserverList"
        },
        {
            "name": "foundation.PercentProperty",
            "extends": [
                "foundation.DoubleProperty",
                "dart:core.double",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "PercentProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for doubles that represent percentages or\nfractions.<\/p>\n<p>Setting <code>showName<\/code> to false is often reasonable for <a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>\nobjects, as the fact that the property is shown as a percentage tends to\nbe sufficient to disambiguate its meaning.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.PercentProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fraction",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifNull",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "unit",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/PercentProperty\/PercentProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PercentProperty(\n  String name,\n  double fraction, {\n  String ifNull,\n  bool showName = true,\n  String tooltip,\n  String unit,\n  DiagnosticLevel level  = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  fraction,\n  ifNull: ifNull,\n  showName: showName,\n  tooltip: tooltip,\n  unit: unit,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "numberToString",
                    "type": "dart:core.String",
                    "desc": "<p>String describing just the numeric <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> without a unit suffix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.PercentProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/PercentProperty\/numberToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString numberToString() {\n  if (value == null)\n    return value.toString();\n  return '${(value.clamp(0.0, 1.0) * 100.0).toStringAsFixed(1)}%';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/PercentProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.PercentProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/PercentProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n  return unit != null ? '${numberToString()} $unit' : numberToString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/PercentProperty-class.html",
            "desc": "<p>Property which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and formats it as a\npercentage.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PercentProperty"
        },
        {
            "name": "foundation.ReadBuffer",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ReadBuffer",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"foundation\/ReadBuffer-class.html\">ReadBuffer<\/a> for reading from the specified <code>data<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/ReadBuffer\/ReadBuffer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ReadBuffer(this.data)\n  : assert(data != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getFloat64",
                    "type": "dart:core.double",
                    "desc": "<p>Reads a Float64 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getFloat64.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getFloat64() {\n  _alignTo(8);\n  final double value = data.getFloat64(_position, Endian.host);\n  _position += 8;\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getFloat64List",
                    "type": "dart:typed_data.Float64List",
                    "desc": "<p>Reads the given number of Float64s from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getFloat64List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Float64List getFloat64List(int length) {\n  _alignTo(8);\n  final Float64List list = data.buffer.asFloat64List(data.offsetInBytes + _position, length);\n  _position += 8 * length;\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInt32",
                    "type": "dart:core.int",
                    "desc": "<p>Reads an Int32 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getInt32.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt32() {\n  final int value = data.getInt32(_position, Endian.host);\n  _position += 4;\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInt32List",
                    "type": "dart:typed_data.Int32List",
                    "desc": "<p>Reads the given number of Int32s from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getInt32List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int32List getInt32List(int length) {\n  _alignTo(4);\n  final Int32List list = data.buffer.asInt32List(data.offsetInBytes + _position, length);\n  _position += 4 * length;\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInt64",
                    "type": "dart:core.int",
                    "desc": "<p>Reads an Int64 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getInt64.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt64() {\n  final int value = data.getInt64(_position, Endian.host);\n  _position += 8;\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInt64List",
                    "type": "dart:typed_data.Int64List",
                    "desc": "<p>Reads the given number of Int64s from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getInt64List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Int64List getInt64List(int length) {\n  _alignTo(8);\n  final Int64List list = data.buffer.asInt64List(data.offsetInBytes + _position, length);\n  _position += 8 * length;\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getUint8",
                    "type": "dart:core.int",
                    "desc": "<p>Reads a Uint8 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getUint8.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint8() {\n  return data.getUint8(_position++);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getUint8List",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "<p>Reads the given number of Uint8s from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getUint8List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getUint8List(int length) {\n  final Uint8List list = data.buffer.asUint8List(data.offsetInBytes + _position, length);\n  _position += length;\n  return list;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getUint16",
                    "type": "dart:core.int",
                    "desc": "<p>Reads a Uint16 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getUint16.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint16() {\n  final int value = data.getUint16(_position, Endian.host);\n  _position += 2;\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getUint32",
                    "type": "dart:core.int",
                    "desc": "<p>Reads a Uint32 from the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ReadBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ReadBuffer\/getUint32.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint32() {\n  final int value = data.getUint32(_position, Endian.host);\n  _position += 4;\n  return value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "data",
                    "type": "dart:typed_data.ByteData",
                    "types": [],
                    "desc": "<p>The underlying data being read.<\/p>\n        ",
                    "memberOf": "foundation.ReadBuffer",
                    "isConstant": false,
                    "href": "foundation\/ReadBuffer\/data.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ByteData data\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hasRemaining",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the buffer has data remaining to read.<\/p>\n        ",
                    "memberOf": "foundation.ReadBuffer",
                    "isConstant": false,
                    "href": "foundation\/ReadBuffer\/hasRemaining.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasRemaining =&gt; _position &lt; data.lengthInBytes;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/ReadBuffer-class.html",
            "desc": "<p>Read-only buffer for reading sequentially from a <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a> instance.<\/p>\n<p>The byte order used is <a href=\"dart-typed_data\/Endian\/host.html\">Endian.host<\/a> throughout.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ReadBuffer"
        },
        {
            "name": "foundation.ServiceExtensionCallback",
            "type": "dart:async.Future<dart:core.Map<dart:core.String>>",
            "desc": "<p>Signature for service extensions.<\/p>\n<p>The returned map must not contain the keys \"type\" or \"method\", as\nthey will be replaced before the value is sent to the client. The\n\"type\" key will be set to the string <code>_extensionType<\/code> to indicate\nthat this is a return value from a service extension, and the\n\"method\" key will be set to the full name of the method.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "parameters",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ServiceExtensionCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ServiceExtensionCallback = Future&lt;Map&lt;String, dynamic&gt;&gt; Function(Map&lt;String, String&gt; parameters);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": [
                "dart:async.Future",
                "dart:core.Map",
                "dart:core.String"
            ]
        },
        {
            "name": "foundation.StringProperty",
            "extends": [
                "dart:core.String",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "StringProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for strings.<\/p>\n<p>The <code>showName<\/code>, <code>quoted<\/code>, and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.StringProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "tooltip",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "quoted",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ifEmpty",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/StringProperty\/StringProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringProperty(\n  String name,\n  String value, {\n  String description,\n  String tooltip,\n  bool showName = true,\n  Object defaultValue = kNoDefaultValue,\n  this.quoted = true,\n  String ifEmpty,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(quoted != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  description: description,\n  defaultValue: defaultValue,\n  tooltip: tooltip,\n  showName: showName,\n  ifEmpty: ifEmpty,\n  level: level,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJsonMap",
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "foundation.StringProperty",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/StringProperty\/toJsonMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  json['quoted'] = quoted;\n  return json;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.Object"
                    ]
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/StringProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.StringProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/StringProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  String text = _description ?? value;\n  if (parentConfiguration != null &amp;&amp;\n      !parentConfiguration.lineBreakProperties &amp;&amp;\n      text != null) {\n    \/\/ Escape linebreaks in multiline strings to avoid confusing output when\n    \/\/ the parent of this node is trying to display all properties on the same\n    \/\/ line.\n    text = text.replaceAll('\\n', '\\\\n');\n  }\n\n  if (quoted &amp;&amp; text != null) {\n    \/\/ An empty value would not appear empty after being surrounded with\n    \/\/ quotes so we have to handle this case separately.\n    if (ifEmpty != null &amp;&amp; text.isEmpty)\n      return ifEmpty;\n    return '\"$text\"';\n  }\n  return text.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "quoted",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the value is enclosed in double quotes.<\/p>\n        ",
                    "memberOf": "foundation.StringProperty",
                    "isConstant": false,
                    "href": "foundation\/StringProperty\/quoted.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool quoted\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/StringProperty-class.html",
            "desc": "<p>Property which encloses its string <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> in quotes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/MessageProperty-class.html\">MessageProperty<\/a>, which is a better fit for showing a message\ninstead of describing a property with a string value.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StringProperty"
        },
        {
            "name": "foundation.Summary",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "Summary",
                    "type": "",
                    "desc": "<p>Create an annotation to provide a short description of a class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.Summary",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/Summary\/Summary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Summary(this.text) : assert(text != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The text of the summary of the annotated class.<\/p>\n        ",
                    "memberOf": "foundation.Summary",
                    "isConstant": false,
                    "href": "foundation\/Summary\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/Summary-class.html",
            "desc": "<p>An annotation that provides a short description of a class for use\nin an index.<\/p>\n<p>Usually the first paragraph of the documentation for a class can be used\nfor this purpose, but on occasion the first paragraph is either too short\nor too long for use in isolation, without the remainder of the documentation.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/\/ A famous cat.\n\/\/\/\n\/\/\/ Instances of this class can hunt small animals.\n\/\/\/ This cat has three legs.\n@Category(&lt;String&gt;['Animals', 'Cats'])\n@Category(&lt;String&gt;['Cute', 'Pets'])\n@DocumentationIcon('https:\/\/www.examples.net\/docs\/images\/icons\/pillar.jpeg')\n@Summary('A famous three-legged cat.')\nclass Pillar extends Cat {\n  \/\/ ...code...\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/Category-class.html\">Category<\/a>, to help place the class in an index.<\/li>\n<li>\n<a href=\"foundation\/DocumentationIcon-class.html\">DocumentationIcon<\/a>, which is used to give the URL to an image that\nrepresents the class.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Summary"
        },
        {
            "name": "foundation.SynchronousFuture",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "SynchronousFuture",
                    "type": "",
                    "desc": "<p>Creates a synchronous future.<\/p>\n<p>See also <a href=\"dart-async\/Future\/Future.value.html\">new Future.value<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [
                        {
                            "name": "_value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/SynchronousFuture\/SynchronousFuture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SynchronousFuture(this._value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "asStream",
                    "type": "dart:async.Stream",
                    "desc": "<p>Creates a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> containing the result of this future.<\/p>\n<p>The stream will produce single data or error event containing the\ncompletion result of this future, and then it will close with a\ndone event.<\/p>\n<p>If the future never completes, the stream will not produce any events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/SynchronousFuture\/asStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;T&gt; asStream() {\n  final StreamController&lt;T&gt; controller = StreamController&lt;T&gt;();\n  controller.add(_value);\n  controller.close();\n  return controller.stream;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "catchError",
                    "type": "dart:async.Future",
                    "desc": "<p>Handles errors emitted by this <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>This is the asynchronous equivalent of a \"catch\" block.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a> that will be completed with either the result of\nthis future or the result of calling the <code>onError<\/code> callback.<\/p>\n<p>If this future completes with a value,\nthe returned future completes with the same value.<\/p>\n<p>If this future completes with an error,\nthen <code>test<\/code> is first called with the error value.<\/p>\n<p>If <code>test<\/code> returns false, the exception is not handled by this <code>catchError<\/code>,\nand the returned future completes with the same error and stack trace\nas this future.<\/p>\n<p>If <code>test<\/code> returns <code>true<\/code>,\n<code>onError<\/code> is called with the error and possibly stack trace,\nand the returned future is completed with the result of this call\nin exactly the same way as for <a href=\"foundation\/SynchronousFuture\/then.html\">then<\/a>'s <code>onError<\/code>.<\/p>\n<p>If <code>test<\/code> is omitted, it defaults to a function that always returns true.\nThe <code>test<\/code> function should not throw, but if it does, it is handled as\nif the <code>onError<\/code> function had thrown.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>catchError<\/code> (or <code>then<\/code>) call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "error",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "error",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/SynchronousFuture\/catchError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; catchError(Function onError, { bool test(dynamic error) }) =&gt; Completer&lt;T&gt;().future;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "then",
                    "type": "dart:async.Future",
                    "desc": "<p>Register callbacks to be called when this future completes.<\/p>\n<p>When this future completes with a value,\nthe <code>onValue<\/code> callback will be called with that value.\nIf this future is already completed, the callback will not be called\nimmediately, but will be scheduled in a later microtask.<\/p>\n<p>If <code>onError<\/code> is provided, and this future completes with an error,\nthe <code>onError<\/code> callback is called with that error and its stack trace.\nThe <code>onError<\/code> callback must accept either one argument or two arguments\nwhere the latter is a <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a>.\nIf <code>onError<\/code> accepts two arguments,\nit is called with both the error and the stack trace,\notherwise it is called with just the error object.\nThe <code>onError<\/code> callback must return a value or future that can be used\nto complete the returned future, so it must be something assignable to\n<code>FutureOr&lt;R&gt;<\/code>.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a>\nwhich is completed with the result of the call to <code>onValue<\/code>\n(if this future completes with a value)\nor to <code>onError<\/code> (if this future completes with an error).<\/p>\n<p>If the invoked callback throws,\nthe returned future is completed with the thrown error\nand a stack trace for the error.\nIn the case of <code>onError<\/code>,\nif the exception thrown is <code>identical<\/code> to the error argument to <code>onError<\/code>,\nthe throw is considered a rethrow,\nand the original stack trace is used instead.<\/p>\n<p>If the callback returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>,\nthe future returned by <code>then<\/code> will be completed with\nthe same result as the future returned by the callback.<\/p>\n<p>If <code>onError<\/code> is not given, and this future completes with an error,\nthe error is forwarded directly to the returned future.<\/p>\n<p>In most cases, it is more readable to use <a href=\"foundation\/SynchronousFuture\/catchError.html\">catchError<\/a> separately, possibly\nwith a <code>test<\/code> parameter, instead of handling both value and error in a\nsingle <a href=\"foundation\/SynchronousFuture\/then.html\">then<\/a> call.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>then<\/code> or <code>catchError<\/code> call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/SynchronousFuture\/then.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;E&gt; then&lt;E&gt;(dynamic f(T value), { Function onError }) {\n  final dynamic result = f(_value);\n  if (result is Future&lt;E&gt;)\n    return result;\n  return SynchronousFuture&lt;E&gt;(result);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "dart:async.Future",
                    "desc": "<p>Time-out the future computation after <code>timeLimit<\/code> has passed.<\/p>\n<p>Returns a new future that completes with the same value as this future,\nif this future completes in time.<\/p>\n<p>If this future does not complete before <code>timeLimit<\/code> has passed,\nthe <code>onTimeout<\/code> action is executed instead, and its result (whether it\nreturns or throws) is used as the result of the returned future.\nThe <code>onTimeout<\/code> function must return a <code>T<\/code> or a <code>Future&lt;T&gt;<\/code>.<\/p>\n<p>If <code>onTimeout<\/code> is omitted, a timeout will cause the returned future to\ncomplete with a <a href=\"dart-async\/TimeoutException-class.html\">TimeoutException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [
                        {
                            "name": "timeLimit",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onTimeout",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/SynchronousFuture\/timeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; timeout(Duration timeLimit, { dynamic onTimeout() }) {\n  return Future&lt;T&gt;.value(_value).timeout(timeLimit, onTimeout: onTimeout);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "whenComplete",
                    "type": "dart:async.Future",
                    "desc": "<p>Registers a function to be called when this future completes.<\/p>\n<p>The <code>action<\/code> function is called when this future completes, whether it\ndoes so with a value or with an error.<\/p>\n<p>This is the asynchronous equivalent of a \"finally\" block.<\/p>\n<p>The future returned by this call, <code>f<\/code>, will complete the same way\nas this future unless an error occurs in the <code>action<\/code> call, or in\na <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by the <code>action<\/code> call. If the call to <code>action<\/code>\ndoes not return a future, its return value is ignored.<\/p>\n<p>If the call to <code>action<\/code> throws, then <code>f<\/code> is completed with the\nthrown error.<\/p>\n<p>If the call to <code>action<\/code> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>, <code>f2<\/code>, then completion of\n<code>f<\/code> is delayed until <code>f2<\/code> completes. If <code>f2<\/code> completes with\nan error, that will be the result of <code>f<\/code> too. The value of <code>f2<\/code> is always\nignored.<\/p>\n<p>This method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;T&gt; whenComplete(action()) {\n  return this.then((v) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) =&gt; v);\n    return v\n  }, onError: (e) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) { throw e; });\n    throw e;\n  });\n}\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "foundation.SynchronousFuture",
                    "sig": "",
                    "params": [
                        {
                            "name": "action",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/SynchronousFuture\/whenComplete.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; whenComplete(dynamic action()) {\n  try {\n    final dynamic result = action();\n    if (result is Future)\n      return result.then&lt;T&gt;((dynamic value) =&gt; _value);\n    return this;\n  } catch (e, stack) {\n    return Future&lt;T&gt;.error(e, stack);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/SynchronousFuture-class.html",
            "desc": "<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> whose <a href=\"foundation\/SynchronousFuture\/then.html\">then<\/a> implementation calls the callback immediately.<\/p>\n<p>This is similar to <a href=\"dart-async\/Future\/Future.value.html\">new Future.value<\/a>, except that the value is available in\nthe same event-loop iteration.<\/p>\n<p>\u26a0 This class is useful in cases where you want to expose a single API, where\nyou normally want to have everything execute synchronously, but where on\nrare occasions you want the ability to switch to an asynchronous model. <strong>In\ngeneral use of this class should be avoided as it is very difficult to debug\nsuch bimodal behavior.<\/strong><\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SynchronousFuture"
        },
        {
            "type": "",
            "name": "foundation.TargetPlatform",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.TargetPlatform",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/TargetPlatform\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/TargetPlatform-class.html",
            "desc": "<p>The platform that user interaction should adapt to target.<\/p>\n<p>The <a href=\"foundation\/defaultTargetPlatform.html\">defaultTargetPlatform<\/a> getter returns the current platform.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TargetPlatform"
        },
        {
            "name": "foundation.TextTreeConfiguration",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "TextTreeConfiguration",
                    "type": "",
                    "desc": "<p>Create a configuration object describing how to render a tree as text.<\/p>\n<p>All of the arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.TextTreeConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefixLineOne",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixOtherLines",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixLastChildLineOne",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefixOtherLinesRootNode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "linkCharacter",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "propertyPrefixIfChildren",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "propertyPrefixNoChildren",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "lineBreak",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "lineBreakProperties",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "afterName",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "afterDescriptionIfBody",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "beforeProperties",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "afterProperties",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "propertySeparator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bodyIndent",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "footer",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showChildren",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "addBlankLineIfNoChildren",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isNameOnOwnLine",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isBlankLineBetweenPropertiesAndChildren",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/TextTreeConfiguration\/TextTreeConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTreeConfiguration({\n  @required this.prefixLineOne,\n  @required this.prefixOtherLines,\n  @required this.prefixLastChildLineOne,\n  @required this.prefixOtherLinesRootNode,\n  @required this.linkCharacter,\n  @required this.propertyPrefixIfChildren,\n  @required this.propertyPrefixNoChildren,\n  this.lineBreak = '\\n',\n  this.lineBreakProperties = true,\n  this.afterName = ':',\n  this.afterDescriptionIfBody = '',\n  this.beforeProperties = '',\n  this.afterProperties = '',\n  this.propertySeparator = '',\n  this.bodyIndent = '',\n  this.footer = '',\n  this.showChildren = true,\n  this.addBlankLineIfNoChildren = true,\n  this.isNameOnOwnLine = false,\n  this.isBlankLineBetweenPropertiesAndChildren = true,\n}) : assert(prefixLineOne != null),\n     assert(prefixOtherLines != null),\n     assert(prefixLastChildLineOne != null),\n     assert(prefixOtherLinesRootNode != null),\n     assert(linkCharacter != null),\n     assert(propertyPrefixIfChildren != null),\n     assert(propertyPrefixNoChildren != null),\n     assert(lineBreak != null),\n     assert(lineBreakProperties != null),\n     assert(afterName != null),\n     assert(afterDescriptionIfBody != null),\n     assert(beforeProperties != null),\n     assert(afterProperties != null),\n     assert(propertySeparator != null),\n     assert(bodyIndent != null),\n     assert(footer != null),\n     assert(showChildren != null),\n     assert(addBlankLineIfNoChildren != null),\n     assert(isNameOnOwnLine != null),\n     assert(isBlankLineBetweenPropertiesAndChildren != null),\n     childLinkSpace = ' ' * linkCharacter.length;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "addBlankLineIfNoChildren",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to add a blank line at the end of the output for a node if it has\nno children.<\/p>\n<p>See <a href=\"foundation\/denseTextConfiguration.html\">denseTextConfiguration<\/a> for an example of setting this to false.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/addBlankLineIfNoChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool addBlankLineIfNoChildren\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "afterDescriptionIfBody",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Text to add immediately after the description line of a node with\nproperties and\/or children.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/afterDescriptionIfBody.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterDescriptionIfBody\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "afterName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Text added immediately after the name of the node.<\/p>\n<p>See <a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a> for an example of using a value other\nthan ':' to achieve a custom line art style.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/afterName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "afterProperties",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Optional string to add after the properties of a node.<\/p>\n<p>See documentation for <a href=\"foundation\/TextTreeConfiguration\/beforeProperties.html\">beforeProperties<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/afterProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterProperties\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "beforeProperties",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Optional string to add before the properties of a node.<\/p>\n<p>Only displayed if the node has properties.\nSee <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field\nto enclose the property list with parenthesis.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/beforeProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String beforeProperties\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bodyIndent",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add to all lines of the body of the tree node.<\/p>\n<p>The body is all content in the node other than the name and description.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/bodyIndent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String bodyIndent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "childLinkSpace",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Whitespace to draw instead of the childLink character if this node is the\nlast child of its parent so no link line is required.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/childLinkSpace.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String childLinkSpace\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "footer",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Footer to add as its own line at the end of a non-root node.<\/p>\n<p>See <a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a> for an example of using footer to draw a box\naround the node. <a href=\"foundation\/TextTreeConfiguration\/footer.html\">footer<\/a> is indented the same amount as <a href=\"foundation\/TextTreeConfiguration\/prefixOtherLines.html\">prefixOtherLines<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/footer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String footer\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isBlankLineBetweenPropertiesAndChildren",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Add a blank line between properties and children if both are present.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/isBlankLineBetweenPropertiesAndChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isBlankLineBetweenPropertiesAndChildren\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNameOnOwnLine",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the name should be displayed on the same line as the description.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/isNameOnOwnLine.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isNameOnOwnLine\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lineBreak",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Character(s) to use to separate lines.<\/p>\n<p>Typically leave set at the default value of '\\n' unless this style needs\nto treat lines differently as is the case for\n<a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/lineBreak.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String lineBreak\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lineBreakProperties",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to place line breaks between properties or to leave all\nproperties on one line.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/lineBreakProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool lineBreakProperties\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "linkCharacter",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Character to use to draw line linking parent to child.<\/p>\n<p>The first child does not require a line but all subsequent children do\nwith the line drawn immediately before the left edge of the previous\nsibling.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/linkCharacter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String linkCharacter\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "prefixLastChildLineOne",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add to the first line to display the last child of a node with\nthis style.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/prefixLastChildLineOne.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixLastChildLineOne\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "prefixLineOne",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add to the first line to display a child with this style.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/prefixLineOne.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixLineOne\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "prefixOtherLines",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add to other lines to display a child with this style.<\/p>\n<p><a href=\"foundation\/TextTreeConfiguration\/prefixOtherLines.html\">prefixOtherLines<\/a> should typically be one character shorter than\n<a href=\"foundation\/TextTreeConfiguration\/prefixLineOne.html\">prefixLineOne<\/a> as<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/prefixOtherLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixOtherLines\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "prefixOtherLinesRootNode",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Additional prefix to add to other lines of a node if this is the root node\nof the tree.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/prefixOtherLinesRootNode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixOtherLinesRootNode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "propertyPrefixIfChildren",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add before each property if the node as children.<\/p>\n<p>Plays a similar role to <a href=\"foundation\/TextTreeConfiguration\/linkCharacter.html\">linkCharacter<\/a> except that some configurations\nintentionally use a different line style than the <a href=\"foundation\/TextTreeConfiguration\/linkCharacter.html\">linkCharacter<\/a>.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/propertyPrefixIfChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertyPrefixIfChildren\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "propertyPrefixNoChildren",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Prefix to add before each property if the node does not have children.<\/p>\n<p>This string is typically a whitespace string the same length as\n<a href=\"foundation\/TextTreeConfiguration\/propertyPrefixIfChildren.html\">propertyPrefixIfChildren<\/a> but can have a different length.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/propertyPrefixNoChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertyPrefixNoChildren\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "propertySeparator",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Property separator to add between properties.<\/p>\n<p>See <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field\nto render properties as a comma separated list.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/propertySeparator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertySeparator\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showChildren",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the children of a node should be shown.<\/p>\n<p>See <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field to\nhide all children of a node.<\/p>\n        ",
                    "memberOf": "foundation.TextTreeConfiguration",
                    "isConstant": false,
                    "href": "foundation\/TextTreeConfiguration\/showChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showChildren\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/TextTreeConfiguration-class.html",
            "desc": "<p>Configuration specifying how a particular <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> should be\nrendered as text art.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/sparseTextConfiguration.html\">sparseTextConfiguration<\/a>, which is a typical style.<\/li>\n<li>\n<a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a>, which is an example of a complex tree style.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>, for code using <a href=\"foundation\/TextTreeConfiguration-class.html\">TextTreeConfiguration<\/a>\nto render text art for arbitrary trees of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextTreeConfiguration"
        },
        {
            "name": "foundation.Unicode",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "foundation\/Unicode\/ALM-constant.html",
                    "desc": "<p>U+061C ARABIC LETTER MARK<\/p>\n<p>Right-to-left zero-width Arabic character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String ALM = '\\u061C'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ALM",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/FSI-constant.html",
                    "desc": "<p>U+2068 FIRST STRONG ISOLATE<\/p>\n<p>Treat the following text as isolated and in the direction of its first\nstrong directional character that is not inside a nested isolate.<\/p>\n<p>This essentially \"auto-detects\" the directionality of the text. It is not\n100% reliable. For example, Arabic text that starts with an English quote\nwill be detected as LTR, not RTL, which will lead to the text being in a\nweird order.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDI-constant.html\">PDI<\/a> to end the isolated scope.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String FSI = '\\u2068'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FSI",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/LRE-constant.html",
                    "desc": "<p>U+202A LEFT-TO-RIGHT EMBEDDING<\/p>\n<p>Treat the following text as embedded left-to-right.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDF-constant.html\">PDF<\/a> to end the embedding.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String LRE = '\\u202A'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRE",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/LRI-constant.html",
                    "desc": "<p>U+2066 LEFT-TO-RIGHT ISOLATE<\/p>\n<p>Treat the following text as isolated and left-to-right.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDI-constant.html\">PDI<\/a> to end the isolated scope.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String LRI = '\\u2066'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRI",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/LRM-constant.html",
                    "desc": "<p>U+200E LEFT-TO-RIGHT MARK<\/p>\n<p>Left-to-right zero-width character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String LRM = '\\u200E'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRM",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/LRO-constant.html",
                    "desc": "<p>U+202A LEFT-TO-RIGHT OVERRIDE<\/p>\n<p>Force following characters to be treated as strong left-to-right characters.<\/p>\n<p>For example, this causes Hebrew text to render backwards.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDF-constant.html\">PDF<\/a> to end the override.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String LRO = '\\u202D'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LRO",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/PDF-constant.html",
                    "desc": "<p>U+202C POP DIRECTIONAL FORMATTING<\/p>\n<p>End the scope of the last <a href=\"foundation\/Unicode\/LRE-constant.html\">LRE<\/a>, <a href=\"foundation\/Unicode\/RLE-constant.html\">RLE<\/a>, <a href=\"foundation\/Unicode\/RLO-constant.html\">RLO<\/a>, or <a href=\"foundation\/Unicode\/LRO-constant.html\">LRO<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String PDF = '\\u202C'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PDF",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/PDI-constant.html",
                    "desc": "<p>U+2069 POP DIRECTIONAL ISOLATE<\/p>\n<p>End the scope of the last <a href=\"foundation\/Unicode\/LRI-constant.html\">LRI<\/a>, <a href=\"foundation\/Unicode\/RLI-constant.html\">RLI<\/a>, or <a href=\"foundation\/Unicode\/FSI-constant.html\">FSI<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String PDI = '\\u2069'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PDI",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/RLE-constant.html",
                    "desc": "<p>U+202B RIGHT-TO-LEFT EMBEDDING<\/p>\n<p>Treat the following text as embedded right-to-left.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDF-constant.html\">PDF<\/a> to end the embedding.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String RLE = '\\u202B'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLE",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/RLI-constant.html",
                    "desc": "<p>U+2067 RIGHT-TO-LEFT ISOLATE<\/p>\n<p>Treat the following text as isolated and right-to-left.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDI-constant.html\">PDI<\/a> to end the isolated scope.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String RLI = '\\u2067'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLI",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/RLM-constant.html",
                    "desc": "<p>U+200F RIGHT-TO-LEFT MARK<\/p>\n<p>Right-to-left zero-width non-Arabic character.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String RLM = '\\u200F'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLM",
                    "memberOf": "foundation.Unicode"
                },
                {
                    "type": "",
                    "href": "foundation\/Unicode\/RLO-constant.html",
                    "desc": "<p>U+202B RIGHT-TO-LEFT OVERRIDE<\/p>\n<p>Force following characters to be treated as strong right-to-left characters.<\/p>\n<p>For example, this causes English text to render backwards.<\/p>\n<p>Use <a href=\"foundation\/Unicode\/PDF-constant.html\">PDF<\/a> to end the override.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String RLO = '\\u202E'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RLO",
                    "memberOf": "foundation.Unicode"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/Unicode-class.html",
            "desc": "<p>Constants for useful Unicode characters.<\/p>\n<p>Currently, these characters are all related to bidirectional text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"http:\/\/unicode.org\/reports\/tr9\/\">unicode.org\/reports\/tr9\/<\/a>, which describes the Unicode\nbidirectional text algorithm.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Unicode"
        },
        {
            "name": "foundation.ValueChanged",
            "type": "",
            "desc": "<p>Signature for callbacks that report that an underlying value has changed.<\/p>\n<p>See also <a href=\"foundation\/ValueSetter.html\">ValueSetter<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ValueChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ValueChanged&lt;T&gt; = void Function(T value);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.ValueGetter",
            "type": "",
            "desc": "<p>Signature for callbacks that are to report a value on demand.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/ValueSetter.html\">ValueSetter<\/a>, the setter equivalent of this signature.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueGetter.html\">AsyncValueGetter<\/a>, an asynchronous version of this signature.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/ValueGetter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ValueGetter&lt;T&gt; = T Function();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.ValueKey",
            "extends": [
                "foundation.LocalKey",
                "foundation.Key",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"foundation\/ValueKey\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/ValueKey\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ValueKey&lt;T&gt; typedOther = other;\n  return value == typedOther.value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ValueKey",
                    "type": "",
                    "desc": "<p>Creates a key that delegates its <a href=\"foundation\/ValueKey\/operator_equals.html\">operator==<\/a> to the given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/ValueKey\/ValueKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ValueKey(this.value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueKey",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ValueKey\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String valueString = T == String ? '&lt;\\'$value\\'&gt;' : '&lt;$value&gt;';\n  \/\/ The crazy on the next line is a workaround for\n  \/\/ https:\/\/github.com\/dart-lang\/sdk\/issues\/33297\n  if (runtimeType == _TypeLiteral&lt;ValueKey&lt;T&gt;&gt;().type)\n    return '[$valueString]';\n  return '[$T $valueString]';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"foundation\/ValueKey\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "foundation.ValueKey",
                    "isConstant": false,
                    "href": "foundation\/ValueKey\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(runtimeType, value);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "types": [],
                    "desc": "<p>The value to which this key delegates its <a href=\"foundation\/ValueKey\/operator_equals.html\">operator==<\/a><\/p>\n        ",
                    "memberOf": "foundation.ValueKey",
                    "isConstant": false,
                    "href": "foundation\/ValueKey\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.PageStorageKey"
            ],
            "realImplementors": [
                "widgets.PageStorageKey"
            ],
            "cn": [],
            "href": "foundation\/ValueKey-class.html",
            "desc": "<p>A key that uses a value of a particular type to identify itself.<\/p>\n<p>A <a href=\"foundation\/ValueKey-class.html\">ValueKey&lt;T&gt;<\/a> is equal to another <a href=\"foundation\/ValueKey-class.html\">ValueKey&lt;T&gt;<\/a> if, and only if, their\nvalues are <a href=\"foundation\/ValueKey\/operator_equals.html\">operator==<\/a>.<\/p>\n<p>This class can be subclassed to create value keys that will not be equal to\nother value keys that happen to use the same value. If the subclass is\nprivate, this results in a value key type that cannot collide with keys from\nother sources, which could be useful, for example, if the keys are being\nused as fallbacks in the same scope as keys supplied from another widget.<\/p>\n<p>See also the discussion at <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ValueKey"
        },
        {
            "name": "foundation.ValueListenable",
            "extends": [
                "foundation.Listenable",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ValueListenable",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueListenable",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/ValueListenable\/ValueListenable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ValueListenable();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "value",
                    "type": "",
                    "types": [],
                    "desc": "<p>The current value of the object. When the value changes, the callbacks\nregistered with <a href=\"foundation\/Listenable\/addListener.html\">addListener<\/a> will be invoked.<\/p>\n        ",
                    "memberOf": "foundation.ValueListenable",
                    "isConstant": false,
                    "href": "foundation\/ValueListenable\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/ValueListenable-class.html",
            "desc": "<p>An interface for subclasses of <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that expose a <a href=\"foundation\/ValueListenable\/value.html\">value<\/a>.<\/p>\n<p>This interface is implemented by <a href=\"foundation\/ValueNotifier-class.html\">ValueNotifier&lt;T&gt;<\/a> and <a href=\"animation\/Animation-class.html\">Animation&lt;T&gt;<\/a>, and\nallows other APIs to accept either of those implementations interchangeably.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ValueListenable"
        },
        {
            "name": "foundation.ValueNotifier",
            "extends": [
                "foundation.ChangeNotifier",
                "dart:core.Object"
            ],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "ValueNotifier",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> that wraps this value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueNotifier",
                    "sig": "",
                    "params": [
                        {
                            "name": "_value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "foundation\/ValueNotifier\/ValueNotifier.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ValueNotifier(this._value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.ValueNotifier",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/ValueNotifier\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}($value)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "value",
                    "type": "",
                    "types": [],
                    "desc": "<p>The current value stored in this notifier.<\/p>\n<p>When the value is replaced, this class notifies its listeners.<\/p>\n        ",
                    "memberOf": "foundation.ValueNotifier",
                    "isConstant": false,
                    "href": "foundation\/ValueNotifier\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT get value =&gt; _value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.TextEditingController"
            ],
            "realImplementors": [
                "widgets.TextEditingController"
            ],
            "cn": [],
            "href": "foundation\/ValueNotifier-class.html",
            "desc": "<p>A <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> that holds a single value.<\/p>\n<p>When <a href=\"foundation\/ValueNotifier\/value.html\">value<\/a> is replaced, this class notifies its listeners.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ValueNotifier"
        },
        {
            "name": "foundation.ValueSetter",
            "type": "",
            "desc": "<p>Signature for callbacks that report that a value has been set.<\/p>\n<p>This is the same signature as <a href=\"foundation\/ValueChanged.html\">ValueChanged<\/a>, but is used when the\ncallback is called even if the underlying value has not changed.\nFor example, service extensions use this callback because they\ncall the callback whenever the extension is called with a\nvalue, regardless of whether the given value is new or not.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/ValueGetter.html\">ValueGetter<\/a>, the getter equivalent of this signature.<\/li>\n<li>\n<a href=\"foundation\/AsyncValueSetter.html\">AsyncValueSetter<\/a>, an asynchronous version of this signature.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ValueSetter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ValueSetter&lt;T&gt; = void Function(T value);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "foundation.WriteBuffer",
            "extends": [],
            "memberOf": "foundation",
            "events": [],
            "methods": [
                {
                    "name": "WriteBuffer",
                    "type": "",
                    "desc": "<p>Creates an interface for incrementally building a <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a> instance.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "foundation\/WriteBuffer\/WriteBuffer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">WriteBuffer() {\n  _buffer = Uint8Buffer();\n  _eightBytes = ByteData(8);\n  _eightBytesAsList = _eightBytes.buffer.asUint8List();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "done",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Finalize and return the written <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteData done() {\n  final ByteData result = _buffer.buffer.asByteData(0, _buffer.lengthInBytes);\n  _buffer = null;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "putFloat64",
                    "type": "",
                    "desc": "<p>Write an Float64 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putFloat64.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putFloat64(double value) {\n  _alignTo(8);\n  _eightBytes.setFloat64(0, value, Endian.host);\n  _buffer.addAll(_eightBytesAsList);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putFloat64List",
                    "type": "",
                    "desc": "<p>Write all the values from a <a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a> into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Float64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putFloat64List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putFloat64List(Float64List list) {\n  _alignTo(8);\n  _buffer.addAll(list.buffer.asUint8List(list.offsetInBytes, 8 * list.length));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putInt32",
                    "type": "",
                    "desc": "<p>Write an Int32 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putInt32.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putInt32(int value) {\n  _eightBytes.setInt32(0, value, Endian.host);\n  _buffer.addAll(_eightBytesAsList, 0, 4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putInt32List",
                    "type": "",
                    "desc": "<p>Write all the values from an <a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a> into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Int32List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putInt32List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putInt32List(Int32List list) {\n  _alignTo(4);\n  _buffer.addAll(list.buffer.asUint8List(list.offsetInBytes, 4 * list.length));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putInt64",
                    "type": "",
                    "desc": "<p>Write an Int64 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putInt64.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putInt64(int value) {\n  _eightBytes.setInt64(0, value, Endian.host);\n  _buffer.addAll(_eightBytesAsList, 0, 8);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putInt64List",
                    "type": "",
                    "desc": "<p>Write all the values from an <a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a> into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Int64List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putInt64List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putInt64List(Int64List list) {\n  _alignTo(8);\n  _buffer.addAll(list.buffer.asUint8List(list.offsetInBytes, 8 * list.length));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putUint8",
                    "type": "",
                    "desc": "<p>Write a Uint8 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "byte",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putUint8.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putUint8(int byte) {\n  _buffer.add(byte);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putUint8List",
                    "type": "",
                    "desc": "<p>Write all the values from a <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putUint8List.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putUint8List(Uint8List list) {\n  _buffer.addAll(list);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putUint16",
                    "type": "",
                    "desc": "<p>Write a Uint16 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putUint16.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putUint16(int value) {\n  _eightBytes.setUint16(0, value, Endian.host);\n  _buffer.addAll(_eightBytesAsList, 0, 2);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "putUint32",
                    "type": "",
                    "desc": "<p>Write a Uint32 into the buffer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "foundation.WriteBuffer",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "foundation\/WriteBuffer\/putUint32.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void putUint32(int value) {\n  _eightBytes.setUint32(0, value, Endian.host);\n  _buffer.addAll(_eightBytesAsList, 0, 4);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "foundation\/WriteBuffer-class.html",
            "desc": "<p>Write-only buffer for incrementally building a <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a> instance.<\/p>\n<p>A WriteBuffer instance can be used only once. Attempts to reuse will result\nin <a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>s being thrown.<\/p>\n<p>The byte order used is <a href=\"dart-typed_data\/Endian\/host.html\">Endian.host<\/a> throughout.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WriteBuffer"
        },
        {
            "name": "compute",
            "type": "dart:async.Future",
            "desc": "<p>Spawn an isolate, run <code>callback<\/code> on that isolate, passing it <code>message<\/code>, and\n(eventually) return the value returned by <code>callback<\/code>.<\/p>\n<p>This is useful for operations that take longer than a few milliseconds, and\nwhich would therefore risk skipping frames. For tasks that will only take a\nfew milliseconds, consider <code>scheduleTask<\/code> instead.<\/p>\n<p><code>Q<\/code> is the type of the message that kicks off the computation.<\/p>\n<p><code>R<\/code> is the type of the value returned.\nThe <code>callback<\/code> argument must be a top-level function, not a closure or an\ninstance or static method of a class.<\/p>\n<p>There are limitations on the values that can be sent and received to and\nfrom isolates. These limitations constrain the values of <code>Q<\/code> and <code>R<\/code> that\nare possible. See the discussion at <a href=\"dart-isolate\/SendPort\/send.html\">SendPort.send<\/a>.\nThe <code>debugLabel<\/code> argument can be specified to provide a name to add to the\n<a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>. This is useful when profiling an application.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "foundation.ComputeCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "foundation.ComputeCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/compute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;R&gt; compute&lt;Q, R&gt;(ComputeCallback&lt;Q, R&gt; callback, Q message, { String debugLabel }) async {\n  if (!kReleaseMode) {\n    debugLabel ??= callback.toString();\n  }\n  final Flow flow = Flow.begin();\n  Timeline.startSync('$debugLabel: start', flow: flow);\n  final ReceivePort resultPort = ReceivePort();\n  final ReceivePort errorPort = ReceivePort();\n  Timeline.finishSync();\n  final Isolate isolate = await Isolate.spawn&lt;_IsolateConfiguration&lt;Q, R&gt;&gt;(\n    _spawn,\n    _IsolateConfiguration&lt;Q, R&gt;(\n      callback,\n      message,\n      resultPort.sendPort,\n      debugLabel,\n      flow.id,\n    ),\n    errorsAreFatal: true,\n    onExit: resultPort.sendPort,\n    onError: errorPort.sendPort,\n  );\n  final Completer&lt;R&gt; result = Completer&lt;R&gt;();\n  errorPort.listen((dynamic errorData) {\n    assert(errorData is List&lt;dynamic&gt;);\n    assert(errorData.length == 2);\n    final Exception exception = Exception(errorData[0]);\n    final StackTrace stack = StackTrace.fromString(errorData[1]);\n    if (result.isCompleted) {\n      Zone.current.handleUncaughtError(exception, stack);\n    } else {\n      result.completeError(exception, stack);\n    }\n  });\n  resultPort.listen((dynamic resultData) {\n    assert(resultData == null || resultData is R);\n    if (!result.isCompleted)\n      result.complete(resultData);\n  });\n  await result.future;\n  Timeline.startSync('$debugLabel: end', flow: Flow.end(flow.id));\n  resultPort.close();\n  errorPort.close();\n  isolate.kill();\n  Timeline.finishSync();\n  return result.future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "consolidateHttpClientResponseBytes",
            "type": "dart:async.Future<dart:typed_data.Uint8List>",
            "desc": "<p>Efficiently converts the response body of an <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> into a <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>.<\/p>\n<p>The future returned will forward all errors emitted by <code>response<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "response",
                    "type": "dart:io.HttpClientResponse",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "response",
                    "type": "dart:io.HttpClientResponse",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/consolidateHttpClientResponseBytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Uint8List&gt; consolidateHttpClientResponseBytes(HttpClientResponse response) {\n  \/\/ response.contentLength is not trustworthy when GZIP is involved\n  \/\/ or other cases where an intermediate transformer has been applied\n  \/\/ to the stream.\n  final Completer&lt;Uint8List&gt; completer = Completer&lt;Uint8List&gt;.sync();\n  final List&lt;List&lt;int&gt;&gt; chunks = &lt;List&lt;int&gt;&gt;[];\n  int contentLength = 0;\n  response.listen((List&lt;int&gt; chunk) {\n    chunks.add(chunk);\n    contentLength += chunk.length;\n  }, onDone: () {\n    final Uint8List bytes = Uint8List(contentLength);\n    int offset = 0;\n    for (List&lt;int&gt; chunk in chunks) {\n      bytes.setRange(offset, offset + chunk.length, chunk);\n      offset += chunk.length;\n    }\n    completer.complete(bytes);\n  }, onError: completer.completeError, cancelOnError: true);\n\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:typed_data.Uint8List"
            ]
        },
        {
            "name": "debugAssertAllFoundationVarsUnset",
            "type": "dart:core.bool",
            "desc": "<p>Returns true if none of the foundation library debug variables have been\nchanged.<\/p>\n<p>This function is used by the test framework to ensure that debug variables\nhaven't been inadvertently changed.<\/p>\n<p>The <code>debugPrintOverride<\/code> argument can be specified to indicate the expected\nvalue of the <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> variable. This is useful for test frameworks that\noverride <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> themselves and want to check that their own custom\nvalue wasn't overridden by a test.<\/p>\n<p>See <code>https:\/\/docs.flutter.io\/flutter\/foundation\/foundation-library.html<\/code> for\na complete list.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugPrintOverride",
                    "type": "foundation.DebugPrintCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugPrintOverride",
                    "type": "foundation.DebugPrintCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugAssertAllFoundationVarsUnset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertAllFoundationVarsUnset(String reason, { DebugPrintCallback debugPrintOverride = debugPrintThrottled }) {\n  assert(() {\n    if (debugPrint != debugPrintOverride ||\n        debugDefaultTargetPlatformOverride != null)\n      throw FlutterError(reason);\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugInstrumentAction",
            "type": "dart:async.Future",
            "desc": "<p>Runs the specified <code>action<\/code>, timing how long the action takes in debug\nbuilds when <a href=\"foundation\/debugInstrumentationEnabled.html\">debugInstrumentationEnabled<\/a> is true.<\/p>\n<p>The instrumentation will be printed to the logs using <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>. In\nnon-debug builds, or when <a href=\"foundation\/debugInstrumentationEnabled.html\">debugInstrumentationEnabled<\/a> is false, this will\nrun <code>action<\/code> without any instrumentation.<\/p>\n<p>Returns the result of running <code>action<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-developer\/Timeline-class.html\">Timeline<\/a>, which is used to record synchronous tracing events for\nvisualization in Chrome's tracing format. This method does not\nimplicitly add any timeline events.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "action",
                    "type": "dart:async.Future",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "action",
                    "type": "dart:async.Future",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugInstrumentAction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; debugInstrumentAction&lt;T&gt;(String description, Future&lt;T&gt; action()) {\n  bool instrument = false;\n  assert(() { instrument = debugInstrumentationEnabled; return true; }());\n  if (instrument) {\n    final Stopwatch stopwatch = Stopwatch()..start();\n    return action().whenComplete(() {\n      stopwatch.stop();\n      debugPrint('Action \"$description\" took ${stopwatch.elapsed}');\n    });\n  } else {\n    return action();\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugPrintStack",
            "type": "",
            "desc": "<p>Dump the current stack to the console using <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> and\n<a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a>.<\/p>\n<p>The current stack is obtained using <a href=\"dart-core\/StackTrace\/current.html\">StackTrace.current<\/a>.<\/p>\n<p>The <code>maxFrames<\/code> argument can be given to limit the stack to the given number\nof lines. By default, all non-filtered stack lines are shown.<\/p>\n<p>The <code>label<\/code> argument, if present, will be printed before the stack.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxFrames",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxFrames",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugPrintStack.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void debugPrintStack({ String label, int maxFrames }) {\n  if (label != null)\n    debugPrint(label);\n  Iterable&lt;String&gt; lines = StackTrace.current.toString().trimRight().split('\\n');\n  if (maxFrames != null)\n    lines = lines.take(maxFrames);\n  debugPrint(FlutterError.defaultStackFilter(lines).join('\\n'));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "debugPrintSynchronously",
            "type": "",
            "desc": "<p>Alternative implementation of <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> that does not throttle.\nUsed by tests.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWidth",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWidth",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugPrintSynchronously.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void debugPrintSynchronously(String message, { int wrapWidth }) {\n  if (wrapWidth != null) {\n    print(message.split('\\n').expand&lt;String&gt;((String line) =&gt; debugWordWrap(line, wrapWidth)).join('\\n'));\n  } else {\n    print(message);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "debugPrintThrottled",
            "type": "",
            "desc": "<p>Implementation of <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> that throttles messages. This avoids dropping\nmessages on platforms that rate-limit their logging (for example, Android).<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWidth",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapWidth",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugPrintThrottled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void debugPrintThrottled(String message, { int wrapWidth }) {\n  final List&lt;String&gt; messageLines = message?.split('\\n') ?? &lt;String&gt;['null'];\n  if (wrapWidth != null) {\n    _debugPrintBuffer.addAll(messageLines.expand&lt;String&gt;((String line) =&gt; debugWordWrap(line, wrapWidth)));\n  } else {\n    _debugPrintBuffer.addAll(messageLines);\n  }\n  if (!_debugPrintScheduled)\n    _debugPrintTask();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "debugWordWrap",
            "type": "dart:core.Iterable<dart:core.String>",
            "desc": "<p>Wraps the given string at the given width.<\/p>\n<p>Wrapping occurs at space characters (U+0020). Lines that start with an\noctothorpe (\"#\", U+0023) are not wrapped (so for example, Dart stack traces\nwon't be wrapped).<\/p>\n<p>Subsequent lines attempt to duplicate the indentation of the first line, for\nexample if the first line starts with multiple spaces. In addition, if a\n<code>wrapIndent<\/code> argument is provided, each line after the first is prefixed by\nthat string.<\/p>\n<p>This is not suitable for use with arbitrary Unicode text. For example, it\ndoesn't implement UAX #14, can't handle ideographic text, doesn't hyphenate,\nand so forth. It is only intended for formatting error messages.<\/p>\n<p>The default <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> implementation uses this for its line wrapping.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapIndent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wrapIndent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/debugWordWrap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;String&gt; debugWordWrap(String message, int width, { String wrapIndent = '' }) sync* {\n  if (message.length &lt; width || message.trimLeft()[0] == '#') {\n    yield message;\n    return;\n  }\n  final Match prefixMatch = _indentPattern.matchAsPrefix(message);\n  final String prefix = wrapIndent + ' ' * prefixMatch.group(0).length;\n  int start = 0;\n  int startForLengthCalculations = 0;\n  bool addPrefix = false;\n  int index = prefix.length;\n  _WordWrapParseMode mode = _WordWrapParseMode.inSpace;\n  int lastWordStart;\n  int lastWordEnd;\n  while (true) {\n    switch (mode) {\n      case _WordWrapParseMode.inSpace: \/\/ at start of break point (or start of line); can't break until next break\n        while ((index &lt; message.length) &amp;&amp; (message[index] == ' '))\n          index += 1;\n        lastWordStart = index;\n        mode = _WordWrapParseMode.inWord;\n        break;\n      case _WordWrapParseMode.inWord: \/\/ looking for a good break point\n        while ((index &lt; message.length) &amp;&amp; (message[index] != ' '))\n          index += 1;\n        mode = _WordWrapParseMode.atBreak;\n        break;\n      case _WordWrapParseMode.atBreak: \/\/ at start of break point\n        if ((index - startForLengthCalculations &gt; width) || (index == message.length)) {\n          \/\/ we are over the width line, so break\n          if ((index - startForLengthCalculations &lt;= width) || (lastWordEnd == null)) {\n            \/\/ we should use this point, because either it doesn't actually go over the\n            \/\/ end (last line), or it does, but there was no earlier break point\n            lastWordEnd = index;\n          }\n          if (addPrefix) {\n            yield prefix + message.substring(start, lastWordEnd);\n          } else {\n            yield message.substring(start, lastWordEnd);\n            addPrefix = true;\n          }\n          if (lastWordEnd &gt;= message.length)\n            return;\n          \/\/ just yielded a line\n          if (lastWordEnd == index) {\n            \/\/ we broke at current position\n            \/\/ eat all the spaces, then set our start point\n            while ((index &lt; message.length) &amp;&amp; (message[index] == ' '))\n              index += 1;\n            start = index;\n            mode = _WordWrapParseMode.inWord;\n          } else {\n            \/\/ we broke at the previous break point, and we're at the start of a new one\n            assert(lastWordStart &gt; lastWordEnd);\n            start = lastWordStart;\n            mode = _WordWrapParseMode.atBreak;\n          }\n          startForLengthCalculations = start - prefix.length;\n          assert(addPrefix);\n          lastWordEnd = null;\n        } else {\n          \/\/ save this break point, we're not yet over the line width\n          lastWordEnd = index;\n          \/\/ skip to the end of this break point\n          mode = _WordWrapParseMode.inSpace;\n        }\n        break;\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Iterable",
                "dart:core.String"
            ]
        },
        {
            "name": "describeEnum",
            "type": "dart:core.String",
            "desc": "<p>Returns a short description of an enum value.<\/p>\n<p>Strips off the enum class name from the <code>enumEntry.toString()<\/code>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">enum Day {\n  monday, tuesday, wednesday, thursday, friday, saturday, sunday\n}\n\nvoid validateDescribeEnum() {\n  assert(Day.monday.toString() == 'Day.monday');\n  assert(describeEnum(Day.monday) == 'monday');\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "enumEntry",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "enumEntry",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/describeEnum.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String describeEnum(Object enumEntry) {\n  final String description = enumEntry.toString();\n  final int indexOfDot = description.indexOf('.');\n  assert(indexOfDot != -1 &amp;&amp; indexOfDot &lt; description.length - 1);\n  return description.substring(indexOfDot + 1);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "describeIdentity",
            "type": "dart:core.String",
            "desc": "<p>Returns a summary of the runtime type and hash code of <code>object<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>, a value used when placing an object in a <a href=\"dart-core\/Map-class.html\">Map<\/a> or\nother similar data structure, and which is also used in debug output to\ndistinguish instances of the same class (hash collisions are\npossible, but rare enough that its use in debug output is useful).<\/li>\n<li>\n<a href=\"dart-core\/Object\/runtimeType.html\">Object.runtimeType<\/a>, the <a href=\"dart-core\/Type-class.html\">Type<\/a> of an object.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/describeIdentity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String describeIdentity(Object object) =&gt; '${object.runtimeType}#${shortHash(object)}';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "foundation\/kMaxUnsignedSMI-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "kMaxUnsignedSMI",
            "memberOf": "foundation"
        },
        {
            "type": "",
            "href": "foundation\/kNoDefaultValue-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "kNoDefaultValue",
            "memberOf": "foundation"
        },
        {
            "type": "",
            "href": "foundation\/kReleaseMode-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "kReleaseMode",
            "memberOf": "foundation"
        },
        {
            "name": "listEquals",
            "type": "dart:core.bool",
            "desc": "<p>Compares two lists for deep equality.<\/p>\n<p>Returns true if the lists are both null, or if they are both non-null, have\nthe same length, and contain the same members in the same order. Returns\nfalse otherwise.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/setEquals.html\">setEquals<\/a>, which does something similar for sets.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/listEquals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool listEquals&lt;T&gt;(List&lt;T&gt; a, List&lt;T&gt; b) {\n  if (a == null)\n    return b == null;\n  if (b == null || a.length != b.length)\n    return false;\n  for (int index = 0; index &lt; a.length; index += 1) {\n    if (a[index] != b[index])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "profile",
            "type": "",
            "desc": "<p>DEPRECATED. <code>function<\/code> cannot be treeshaken out of release builds.<\/p>\n<p>Instead use:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">if (!kReleaseMode) {\n  function();\n}\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "function",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "function",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/profile.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use `if (!kReleaseMode) { function(); }` instead')\nvoid profile(VoidCallback function) {\n  if (kReleaseMode)\n    return;\n  function();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setEquals",
            "type": "dart:core.bool",
            "desc": "<p>Compares two sets for deep equality.<\/p>\n<p>Returns true if the sets are both null, or if they are both non-null, have\nthe same length, and contain the same members. Returns false otherwise.\nOrder is not compared.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/listEquals.html\">listEquals<\/a>, which does something similar for lists.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/setEquals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool setEquals&lt;T&gt;(Set&lt;T&gt; a, Set&lt;T&gt; b) {\n  if (a == null)\n    return b == null;\n  if (b == null || a.length != b.length)\n    return false;\n  for (T value in a) {\n    if (!b.contains(value))\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shortHash",
            "type": "dart:core.String",
            "desc": "<p>Returns a 5 character long hexadecimal string generated from\n<a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>'s 20 least-significant bits.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/shortHash.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String shortHash(Object object) {\n  return object.hashCode.toUnsigned(20).toRadixString(16).padLeft(5, '0');\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "foundation\/timelineWhitelistArguments-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "timelineWhitelistArguments",
            "memberOf": "foundation"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}