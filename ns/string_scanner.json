{
    "name": "string_scanner",
    "href": "package-string_scanner_string_scanner\/package-string_scanner_string_scanner-library.html",
    "cn": [
        {
            "name": "string_scanner.LineScanner",
            "extends": [
                "string_scanner.StringScanner",
                "dart:core.Object"
            ],
            "memberOf": "string_scanner",
            "events": [],
            "methods": [
                {
                    "name": "LineScanner",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceUrl",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/LineScanner.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LineScanner(String string, {sourceUrl, int position})\n    : super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readChar",
                    "type": "dart:core.int",
                    "desc": "<p>Consumes a single character and returns its character code.<\/p>\n<p>This throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the string has been fully consumed. It\ndoesn't affect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/readChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readChar() {\n  var character = super.readChar();\n  _adjustLineAndColumn(character);\n  return character;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scan",
                    "type": "dart:core.bool",
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>Returns whether or not <code>pattern<\/code> matched.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/scan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scan(Pattern pattern) {\n  if (!super.scan(pattern)) return false;\n\n  var newlines = _newlinesIn(lastMatch[0]);\n  _line += newlines.length;\n  if (newlines.isEmpty) {\n    _column += lastMatch[0].length;\n  } else {\n    _column = lastMatch[0].length - newlines.last.end;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scanChar",
                    "type": "dart:core.bool",
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>Returns whether or not <code>character<\/code> was consumed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "character",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/scanChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scanChar(int character) {\n  if (!super.scanChar(character)) return false;\n  _adjustLineAndColumn(character);\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "column",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/column.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _column;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "line",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/line.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _line;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current position of the scanner in the string, in characters.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/position.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get position =&gt; _position;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "state",
                    "type": "string_scanner.LineScannerState",
                    "types": [],
                    "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScanner\/state.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt;\n    new LineScannerState._(this, position, line, column);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-string_scanner_string_scanner\/LineScanner-class.html",
            "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that tracks line and column information.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LineScanner"
        },
        {
            "name": "string_scanner.LineScannerState",
            "extends": [],
            "memberOf": "string_scanner",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "column",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The zero-based column number of the scanner in this state.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScannerState",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/column.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int column\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "line",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The zero-based line number of the scanner in this state.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScannerState",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/line.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int line\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The position of the scanner in this state.<\/p>\n        ",
                    "memberOf": "string_scanner.LineScannerState",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/position.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int position\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-string_scanner_string_scanner\/LineScannerState-class.html",
            "desc": "<p>A class representing the state of a <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LineScannerState"
        },
        {
            "name": "string_scanner.SpanScanner",
            "extends": [
                "string_scanner.StringScanner",
                "dart:core.Object"
            ],
            "memberOf": "string_scanner",
            "events": [],
            "methods": [
                {
                    "name": "SpanScanner",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>sourceUrl<\/code> is used as <a href=\"package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html\">SourceLocation.sourceUrl<\/a> for the returned\n<a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a>s as well as for error reporting. It can be a <a href=\"dart-core\/String-class.html\">String<\/a>, a\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceUrl",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SpanScanner(String string, {sourceUrl, int position})\n    : _sourceFile = new SourceFile.fromString(string, url: sourceUrl),\n      super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SpanScanner.eager",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that eagerly computes line and column numbers.<\/p>\n<p>In general <a href=\"package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html\">new SpanScanner<\/a> will be more efficient, since it avoids extra\ncomputation on every scan. However, eager scanning can be useful for\nsituations where the normal course of parsing frequently involves\naccessing the current line and column numbers.<\/p>\n<p>Note that <em>only<\/em> the <code>line<\/code> and <code>column<\/code> fields on the <code>SpanScanner<\/code>\nitself and its <code>LineScannerState<\/code> are eagerly computed. To limit their\nmemory footprint, returned spans and locations will still lazily compute\ntheir line and column numbers.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceUrl",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.eager.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SpanScanner.eager(String string, {sourceUrl, int position}) =\n    EagerSpanScanner;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "error",
                    "type": "",
                    "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "match",
                            "type": "dart:core.Match",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/error.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var span = _sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matches",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/matches.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  if (!super.matches(pattern)) {\n    _lastSpan = null;\n    return false;\n  }\n\n  _lastSpan = _sourceFile.span(position, lastMatch.end);\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "spanFrom",
                    "type": "source_span.FileSpan",
                    "desc": "<p>Creates a <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> representing the source range between <code>startState<\/code>\nand the current position.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "startState",
                            "type": "string_scanner.LineScannerState",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "endState",
                            "type": "string_scanner.LineScannerState",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/spanFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan spanFrom(LineScannerState startState, [LineScannerState endState]) {\n  var endPosition = endState == null ? position : endState.position;\n  return _sourceFile.span(startState.position, endPosition);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SpanScanner.within",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that scans within <code>span<\/code>.<\/p>\n<p>This scans through <code>span.text<\/code>, but emits new spans from <code>span.file<\/code> in\ntheir appropriate relative positions. The <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a> field contains only\n<code>span.text<\/code>, and <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a>, <a href=\"package-string_scanner_string_scanner\/SpanScanner\/line.html\">line<\/a>, and <a href=\"package-string_scanner_string_scanner\/SpanScanner\/column.html\">column<\/a> are all relative to the\nspan.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "span",
                            "type": "source_span.FileSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.within.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SpanScanner.within(FileSpan span) = RelativeSpanScanner;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "column",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/column.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _sourceFile.getColumn(position);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "emptySpan",
                    "type": "source_span.FileSpan",
                    "types": [],
                    "desc": "<p>Returns an empty span at the current location.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/emptySpan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get emptySpan =&gt; location.pointSpan();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lastSpan",
                    "type": "source_span.FileSpan",
                    "types": [],
                    "desc": "<p>The <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> for <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n<p>This is the span for the entire match. There's no way to get spans for\nsubgroups since <a href=\"dart-core\/Match-class.html\">Match<\/a> exposes no information about their positions.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/lastSpan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get lastSpan {\n  if (lastMatch == null) _lastSpan = null;\n  return _lastSpan;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "line",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/line.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _sourceFile.getLine(position);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "location",
                    "type": "source_span.FileLocation",
                    "types": [],
                    "desc": "<p>The current location of the scanner.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/location.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get location =&gt; _sourceFile.location(position);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "state",
                    "type": "string_scanner.LineScannerState",
                    "types": [],
                    "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
                    "memberOf": "string_scanner.SpanScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/state.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt; new _SpanScannerState(this, position);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-string_scanner_string_scanner\/SpanScanner-class.html",
            "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that exposes matched ranges as source map\n<code>Span<\/code>s.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SpanScanner"
        },
        {
            "name": "string_scanner.StringScanner",
            "extends": [],
            "memberOf": "string_scanner",
            "events": [],
            "methods": [
                {
                    "name": "StringScanner",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>position<\/code> defaults to 0, the beginning of the string. <code>sourceUrl<\/code> is the\nURL of the source of the string being scanned, if available. It can be\na <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceUrl",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/StringScanner.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringScanner(this.string, {sourceUrl, int position})\n    : sourceUrl = sourceUrl is String ? Uri.parse(sourceUrl) : sourceUrl {\n  if (position != null) this.position = position;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "error",
                    "type": "",
                    "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "match",
                            "type": "dart:core.Match",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/error.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@alwaysThrows\nvoid error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var sourceFile = new SourceFile.fromString(string, url: sourceUrl);\n  var span = sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "expect",
                    "type": "",
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>If <code>pattern<\/code> did not match, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> describing the\nposition of the failure. <code>name<\/code> is used in this error as the expected name\nof the pattern being matched; if it's <code>null<\/code>, the pattern itself is used\ninstead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expect(Pattern pattern, {String name}) {\n  if (scan(pattern)) return;\n\n  if (name == null) {\n    if (pattern is RegExp) {\n      var source = pattern.pattern;\n      if (!_slashAutoEscape) source = source.replaceAll(\"\/\", \"\\\\\/\");\n      name = \"\/$source\/\";\n    } else {\n      name =\n          pattern.toString().replaceAll(\"\\\\\", \"\\\\\\\\\").replaceAll('\"', '\\\\\"');\n      name = '\"$name\"';\n    }\n  }\n  _fail(name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "expectChar",
                    "type": "",
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>If <code>character<\/code> could not be consumed, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>\ndescribing the position of the failure. <code>name<\/code> is used in this error as\nthe expected name of the character being matched; if it's <code>null<\/code>, the\ncharacter itself is used instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "character",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expectChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expectChar(int character, {String name}) {\n  if (scanChar(character)) return;\n\n  if (name == null) {\n    if (character == $backslash) {\n      name = r'\"\\\"';\n    } else if (character == $double_quote) {\n      name = r'\"\\\"\"';\n    } else {\n      name = '\"${new String.fromCharCode(character)}\"';\n    }\n  }\n\n  _fail(name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "expectDone",
                    "type": "",
                    "desc": "<p>If the string has not been fully consumed, this throws a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expectDone.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expectDone() {\n  if (isDone) return;\n  _fail(\"no more input\");\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matches",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/matches.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  _lastMatch = pattern.matchAsPrefix(string, position);\n  _lastMatchPosition = _position;\n  return _lastMatch != null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "peekChar",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the character code of the character <code>offset<\/code> away from <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a>.<\/p>\n<p><code>offset<\/code> defaults to zero, and may be negative to inspect already-consumed\ncharacters.<\/p>\n<p>This returns <code>null<\/code> if <code>offset<\/code> points outside the string. It doesn't\naffect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/peekChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int peekChar([int offset]) {\n  if (offset == null) offset = 0;\n  var index = position + offset;\n  if (index &lt; 0 || index &gt;= string.length) return null;\n  return string.codeUnitAt(index);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readChar",
                    "type": "dart:core.int",
                    "desc": "<p>Consumes a single character and returns its character code.<\/p>\n<p>This throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the string has been fully consumed. It\ndoesn't affect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/readChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readChar() {\n  if (isDone) _fail(\"more input\");\n  return string.codeUnitAt(_position++);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scan",
                    "type": "dart:core.bool",
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>Returns whether or not <code>pattern<\/code> matched.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "pattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/scan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scan(Pattern pattern) {\n  var success = matches(pattern);\n  if (success) {\n    _position = _lastMatch.end;\n    _lastMatchPosition = _position;\n  }\n  return success;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scanChar",
                    "type": "dart:core.bool",
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>Returns whether or not <code>character<\/code> was consumed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "character",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/scanChar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scanChar(int character) {\n  if (isDone) return false;\n  if (string.codeUnitAt(_position) != character) return false;\n  _position++;\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "substring",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the substring of <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a> between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>Unlike <a href=\"package-string_scanner_string_scanner\/StringScanner\/substring.html\">String.substring<\/a>, <code>end<\/code> defaults to <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a> rather than the\nend of the string.<\/p>\n    ",
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/substring.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String substring(int start, [int end]) {\n  if (end == null) end = position;\n  return string.substring(start, end);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isDone",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the scanner has completely consumed <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a>.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/isDone.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDone =&gt; position == string.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lastMatch",
                    "type": "dart:core.Match",
                    "types": [],
                    "desc": "<p>The data about the previous match made by the scanner.<\/p>\n<p>If the last match failed, this will be <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/lastMatch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Match get lastMatch {\n  \/\/ Lazily unset [_lastMatch] so that we avoid extra assignments in\n  \/\/ character-by-character methods that are used in core loops.\n  if (_position != _lastMatchPosition) _lastMatch = null;\n  return _lastMatch;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current position of the scanner in the string, in characters.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/position.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get position =&gt; _position;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "rest",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The portion of the string that hasn't yet been scanned.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/rest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get rest =&gt; string.substring(position);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "sourceUrl",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The URL of the source of the string being scanned.<\/p>\n<p>This is used for error reporting. It may be <code>null<\/code>, indicating that the\nsource URL is unknown or unavailable.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri sourceUrl\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The string being scanned through.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScanner",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScanner\/string.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String string\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "string_scanner.LineScanner",
                "string_scanner.SpanScanner"
            ],
            "realImplementors": [
                "string_scanner.LineScanner",
                "string_scanner.SpanScanner"
            ],
            "cn": [],
            "href": "package-string_scanner_string_scanner\/StringScanner-class.html",
            "desc": "<p>A class that scans through a string using <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a>s.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StringScanner"
        },
        {
            "name": "string_scanner.StringScannerException",
            "extends": [
                "source_span.SourceSpanFormatException",
                "source_span.SourceSpanException",
                "dart:core.Object"
            ],
            "memberOf": "string_scanner",
            "events": [],
            "methods": [
                {
                    "name": "StringScannerException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "string_scanner.StringScannerException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "span",
                            "type": "source_span.SourceSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "source",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/StringScannerException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringScannerException(String message, SourceSpan span, String source)\n    : super(message, span, source);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The actual source input which caused the error.<\/p>\n<p>This is usually a <a href=\"dart-core\/String-class.html\">String<\/a>, but can be other types too.\nIf it is a string, parts of it may be included in the <a href=\"package-source_span_source_span\/SourceSpanException\/toString.html\">toString<\/a> message.<\/p>\n<p>The source is <code>null<\/code> if omitted or unknown.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScannerException",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/source.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get source =&gt; super.source;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "sourceUrl",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The URL of the source file being parsed.<\/p>\n<p>This may be <code>null<\/code>, indicating that the source URL is unknown.<\/p>\n        ",
                    "memberOf": "string_scanner.StringScannerException",
                    "isConstant": false,
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/sourceUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl =&gt; span.sourceUrl;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-string_scanner_string_scanner\/StringScannerException-class.html",
            "desc": "<p>An exception thrown by a <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that failed to parse a string.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StringScannerException"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}