{
    "class": [
        {
            "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that tracks line and column information.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-string_scanner_string_scanner\/LineScanner-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "string_scanner",
            "name": "string_scanner.LineScanner",
            "shortname": "LineScanner",
            "extends": [
                "string_scanner.StringScanner",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LineScanner(String string, {sourceUrl, int position})\n    : super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/LineScanner.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LineScanner",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": [
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "sourceUrl",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Consumes a single character and returns its character code.<\/p>\n<p>This throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the string has been fully consumed. It\ndoesn't affect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readChar() {\n  var character = super.readChar();\n  _adjustLineAndColumn(character);\n  return character;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/readChar.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "readChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": []
                },
                {
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>Returns whether or not <code>pattern<\/code> matched.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scan(Pattern pattern) {\n  if (!super.scan(pattern)) return false;\n\n  var newlines = _newlinesIn(lastMatch[0]);\n  _line += newlines.length;\n  if (newlines.isEmpty) {\n    _column += lastMatch[0].length;\n  } else {\n    _column = lastMatch[0].length - newlines.last.end;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/scan.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "scan",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>Returns whether or not <code>character<\/code> was consumed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scanChar(int character) {\n  if (!super.scanChar(character)) return false;\n  _adjustLineAndColumn(character);\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/scanChar.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "scanChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": [
                        {
                            "name": "character",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _column;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": []
                },
                {
                    "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _line;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": []
                },
                {
                    "desc": "<p>The current position of the scanner in the string, in characters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get position =&gt; _position;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/position.html",
                    "name": "position",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": []
                },
                {
                    "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt;\n    new LineScannerState._(this, position, line, column);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScanner\/state.html",
                    "name": "state",
                    "isDeprecated": false,
                    "type": "string_scanner.LineScannerState",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScanner",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class representing the state of a <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-string_scanner_string_scanner\/LineScannerState-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "string_scanner",
            "name": "string_scanner.LineScannerState",
            "shortname": "LineScannerState",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "<p>The zero-based column number of the scanner in this state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int column\n\n<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScannerState",
                    "params": []
                },
                {
                    "desc": "<p>The zero-based line number of the scanner in this state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int line\n\n<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScannerState",
                    "params": []
                },
                {
                    "desc": "<p>The position of the scanner in this state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int position\n\n<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/LineScannerState\/position.html",
                    "name": "position",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.LineScannerState",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that exposes matched ranges as source map\n<code>Span<\/code>s.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-string_scanner_string_scanner\/SpanScanner-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "string_scanner",
            "name": "string_scanner.SpanScanner",
            "shortname": "SpanScanner",
            "extends": [
                "string_scanner.StringScanner",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>sourceUrl<\/code> is used as <a href=\"package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html\">SourceLocation.sourceUrl<\/a> for the returned\n<a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a>s as well as for error reporting. It can be a <a href=\"dart-core\/String-class.html\">String<\/a>, a\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SpanScanner(String string, {sourceUrl, int position})\n    : _sourceFile = new SourceFile.fromString(string, url: sourceUrl),\n      super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SpanScanner",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": [
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "sourceUrl",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var span = _sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/error.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "error",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": [
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "match",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Match"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  if (!super.matches(pattern)) {\n    _lastSpan = null;\n    return false;\n  }\n\n  _lastSpan = _sourceFile.span(position, lastMatch.end);\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/matches.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "matches",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> representing the source range between <code>startState<\/code>\nand the current position.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan spanFrom(LineScannerState startState, [LineScannerState endState]) {\n  var endPosition = endState == null ? position : endState.position;\n  return _sourceFile.span(startState.position, endPosition);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/spanFrom.html",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "name": "spanFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": [
                        {
                            "name": "endState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "string_scanner.LineScannerState"
                        },
                        {
                            "name": "startState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "string_scanner.LineScannerState"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _sourceFile.getColumn(position);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                },
                {
                    "desc": "<p>Returns an empty span at the current location.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get emptySpan =&gt; location.pointSpan();<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/emptySpan.html",
                    "name": "emptySpan",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> for <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n<p>This is the span for the entire match. There's no way to get spans for\nsubgroups since <a href=\"dart-core\/Match-class.html\">Match<\/a> exposes no information about their positions.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get lastSpan {\n  if (lastMatch == null) _lastSpan = null;\n  return _lastSpan;\n}<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/lastSpan.html",
                    "name": "lastSpan",
                    "isDeprecated": false,
                    "type": "source_span.FileSpan",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                },
                {
                    "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _sourceFile.getLine(position);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                },
                {
                    "desc": "<p>The current location of the scanner.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get location =&gt; _sourceFile.location(position);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/location.html",
                    "name": "location",
                    "isDeprecated": false,
                    "type": "source_span.FileLocation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                },
                {
                    "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt; new _SpanScannerState(this, position);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/SpanScanner\/state.html",
                    "name": "state",
                    "isDeprecated": false,
                    "type": "string_scanner.LineScannerState",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.SpanScanner",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class that scans through a string using <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a>s.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-string_scanner_string_scanner\/StringScanner-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "string_scanner",
            "name": "string_scanner.StringScanner",
            "shortname": "StringScanner",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "string_scanner.LineScanner",
                "string_scanner.SpanScanner"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>position<\/code> defaults to 0, the beginning of the string. <code>sourceUrl<\/code> is the\nURL of the source of the string being scanned, if available. It can be\na <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringScanner(this.string, {sourceUrl, int position})\n    : sourceUrl = sourceUrl is String ? Uri.parse(sourceUrl) : sourceUrl {\n  if (position != null) this.position = position;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/StringScanner.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringScanner",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "sourceUrl",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@alwaysThrows\nvoid error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var sourceFile = new SourceFile.fromString(string, url: sourceUrl);\n  var span = sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/error.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "error",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "match",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Match"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>If <code>pattern<\/code> did not match, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> describing the\nposition of the failure. <code>name<\/code> is used in this error as the expected name\nof the pattern being matched; if it's <code>null<\/code>, the pattern itself is used\ninstead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expect(Pattern pattern, {String name}) {\n  if (scan(pattern)) return;\n\n  if (name == null) {\n    if (pattern is RegExp) {\n      var source = pattern.pattern;\n      if (!_slashAutoEscape) source = source.replaceAll(\"\/\", \"\\\\\/\");\n      name = \"\/$source\/\";\n    } else {\n      name =\n          pattern.toString().replaceAll(\"\\\\\", \"\\\\\\\\\").replaceAll('\"', '\\\\\"');\n      name = '\"$name\"';\n    }\n  }\n  _fail(name);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expect.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "expect",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>If <code>character<\/code> could not be consumed, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>\ndescribing the position of the failure. <code>name<\/code> is used in this error as\nthe expected name of the character being matched; if it's <code>null<\/code>, the\ncharacter itself is used instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expectChar(int character, {String name}) {\n  if (scanChar(character)) return;\n\n  if (name == null) {\n    if (character == $backslash) {\n      name = r'\"\\\"';\n    } else if (character == $double_quote) {\n      name = r'\"\\\"\"';\n    } else {\n      name = '\"${new String.fromCharCode(character)}\"';\n    }\n  }\n\n  _fail(name);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expectChar.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "expectChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "character",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>If the string has not been fully consumed, this throws a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expectDone() {\n  if (isDone) return;\n  _fail(\"no more input\");\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/expectDone.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "expectDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  _lastMatch = pattern.matchAsPrefix(string, position);\n  _lastMatchPosition = _position;\n  return _lastMatch != null;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/matches.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "matches",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the character code of the character <code>offset<\/code> away from <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a>.<\/p>\n<p><code>offset<\/code> defaults to zero, and may be negative to inspect already-consumed\ncharacters.<\/p>\n<p>This returns <code>null<\/code> if <code>offset<\/code> points outside the string. It doesn't\naffect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int peekChar([int offset]) {\n  if (offset == null) offset = 0;\n  var index = position + offset;\n  if (index &lt; 0 || index &gt;= string.length) return null;\n  return string.codeUnitAt(index);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/peekChar.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "peekChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Consumes a single character and returns its character code.<\/p>\n<p>This throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the string has been fully consumed. It\ndoesn't affect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readChar() {\n  if (isDone) _fail(\"more input\");\n  return string.codeUnitAt(_position++);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/readChar.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "readChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>Returns whether or not <code>pattern<\/code> matched.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scan(Pattern pattern) {\n  var success = matches(pattern);\n  if (success) {\n    _position = _lastMatch.end;\n    _lastMatchPosition = _position;\n  }\n  return success;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/scan.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "scan",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>Returns whether or not <code>character<\/code> was consumed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scanChar(int character) {\n  if (isDone) return false;\n  if (string.codeUnitAt(_position) != character) return false;\n  _position++;\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/scanChar.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "scanChar",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "character",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the substring of <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a> between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>Unlike <a href=\"package-string_scanner_string_scanner\/StringScanner\/substring.html\">String.substring<\/a>, <code>end<\/code> defaults to <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a> rather than the\nend of the string.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String substring(int start, [int end]) {\n  if (end == null) end = position;\n  return string.substring(start, end);\n}<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/substring.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "substring",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether the scanner has completely consumed <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDone =&gt; position == string.length;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/isDone.html",
                    "name": "isDone",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>The data about the previous match made by the scanner.<\/p>\n<p>If the last match failed, this will be <code>null<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Match get lastMatch {\n  \/\/ Lazily unset [_lastMatch] so that we avoid extra assignments in\n  \/\/ character-by-character methods that are used in core loops.\n  if (_position != _lastMatchPosition) _lastMatch = null;\n  return _lastMatch;\n}<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/lastMatch.html",
                    "name": "lastMatch",
                    "isDeprecated": false,
                    "type": "dart:core.Match",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>The current position of the scanner in the string, in characters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get position =&gt; _position;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/position.html",
                    "name": "position",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>The portion of the string that hasn't yet been scanned.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get rest =&gt; string.substring(position);<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/rest.html",
                    "name": "rest",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>The URL of the source of the string being scanned.<\/p>\n<p>This is used for error reporting. It may be <code>null<\/code>, indicating that the\nsource URL is unknown or unavailable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri sourceUrl\n\n<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                },
                {
                    "desc": "<p>The string being scanned through.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String string\n\n<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScanner\/string.html",
                    "name": "string",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScanner",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An exception thrown by a <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that failed to parse a string.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-string_scanner_string_scanner\/StringScannerException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "string_scanner",
            "name": "string_scanner.StringScannerException",
            "shortname": "StringScannerException",
            "extends": [
                "source_span.SourceSpanFormatException",
                "source_span.SourceSpanException",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringScannerException(String message, SourceSpan span, String source)\n    : super(message, span, source);<\/code><\/pre>\n    ",
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/StringScannerException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringScannerException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "string_scanner.StringScannerException",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "span",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "source_span.SourceSpan"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The actual source input which caused the error.<\/p>\n<p>This is usually a <a href=\"dart-core\/String-class.html\">String<\/a>, but can be other types too.\nIf it is a string, parts of it may be included in the <a href=\"package-source_span_source_span\/SourceSpanException\/toString.html\">toString<\/a> message.<\/p>\n<p>The source is <code>null<\/code> if omitted or unknown.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get source =&gt; super.source;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/source.html",
                    "name": "source",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScannerException",
                    "params": []
                },
                {
                    "desc": "<p>The URL of the source file being parsed.<\/p>\n<p>This may be <code>null<\/code>, indicating that the source URL is unknown.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl =&gt; span.sourceUrl;<\/code><\/pre>\n        ",
                    "href": "package-string_scanner_string_scanner\/StringScannerException\/sourceUrl.html",
                    "name": "sourceUrl",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "string_scanner.StringScannerException",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}