{
    "name": "flutter_test",
    "href": "flutter_test\/flutter_test-library.html",
    "cn": [
        {
            "name": "flutter_test.AccessibilityGuideline",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "AccessibilityGuideline",
                    "type": "",
                    "desc": "<p>A const constructor allows subclasses to be const.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AccessibilityGuideline",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/AccessibilityGuideline\/AccessibilityGuideline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AccessibilityGuideline();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "evaluate",
                    "type": "dart:async.FutureOr<flutter_test.Evaluation>",
                    "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AccessibilityGuideline",
                    "sig": "",
                    "params": [
                        {
                            "name": "tester",
                            "type": "flutter_test.WidgetTester",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/AccessibilityGuideline\/evaluate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FutureOr&lt;Evaluation&gt; evaluate(WidgetTester tester);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.FutureOr",
                        "flutter_test.Evaluation"
                    ]
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
                    "memberOf": "flutter_test.AccessibilityGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/AccessibilityGuideline\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "flutter_test.LabeledTapTargetGuideline",
                "flutter_test.MinimumTapTargetGuideline",
                "flutter_test.MinimumTextContrastGuideline"
            ],
            "realImplementors": [
                "flutter_test.LabeledTapTargetGuideline",
                "flutter_test.MinimumTapTargetGuideline",
                "flutter_test.MinimumTextContrastGuideline"
            ],
            "cn": [],
            "href": "flutter_test\/AccessibilityGuideline-class.html",
            "desc": "<p>An accessibility guideline describes a recommendation an application should\nmeet to be considered accessible.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AccessibilityGuideline"
        },
        {
            "name": "flutter_test.AnyDistanceFunction",
            "type": "dart:core.num",
            "desc": "<p>The type of a union of instances of <a href=\"flutter_test\/DistanceFunction.html\">DistanceFunction&lt;T&gt;<\/a> for various types\nT.<\/p>\n<p>This type is used to describe a collection of <a href=\"flutter_test\/DistanceFunction.html\">DistanceFunction&lt;T&gt;<\/a>\nfunctions which have (potentially) unrelated argument types. Since the\nargument types of the functions may be unrelated, the only thing that the\ntype system can statically assume about them is that they accept null (since\nall types in Dart are nullable).<\/p>\n<p>Calling an instance of this type must either be done dynamically, or by\nfirst casting it to a <a href=\"flutter_test\/DistanceFunction.html\">DistanceFunction&lt;T&gt;<\/a> for some concrete T.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.Null",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.Null",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/AnyDistanceFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef AnyDistanceFunction = num Function(Null a, Null b);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "flutter_test.AutomatedTestWidgetsFlutterBinding",
            "extends": [
                "flutter_test.TestWidgetsFlutterBinding",
                "foundation.BindingBase",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "AutomatedTestWidgetsFlutterBinding",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/AutomatedTestWidgetsFlutterBinding.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addTime",
                    "type": "",
                    "desc": "<p>Increase the timeout for the current test by the given duration.<\/p>\n<p>Tests by default time out after two seconds, but the timeout can be\nincreased before an expensive operation to allow it to complete without\nhitting the test timeout.<\/p>\n<p>By default, each <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html\">pump<\/a> and <code>pumpWidget<\/code> call increases the timeout by a\nhundred milliseconds, and each <a href=\"flutter_test\/matchesGoldenFile.html\">matchesGoldenFile<\/a> expectation increases\nit by several seconds.<\/p>\n<p>In general, unit tests are expected to run very fast, and this method is\nusually not necessary.<\/p>\n<p>The granularity of timeouts is coarse: the time is checked once per\nsecond, and only when the test is not executing. It is therefore possible\nfor a timeout to be exceeded by hundreds of milliseconds and for the test\nto still succeed. If precise timing is required, it should be implemented\nas a part of the test rather than relying on this mechanism.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/defaultTestTimeout.html\">defaultTestTimeout<\/a>, the maximum that the timeout can reach.\n(That timeout is implemented by the test package.)<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/addTime.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addTime(Duration duration) {\n  assert(_timeout != null, 'addTime can only be called during a test.');\n  _timeout += duration;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "asyncBarrier",
                    "type": "",
                    "desc": "<p>This is called during test execution before and after the body has been\nexecuted.<\/p>\n<p>It's used by <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> to drain the microtasks\nbefore the final <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html\">pump<\/a> that happens during test cleanup.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/asyncBarrier.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid asyncBarrier() {\n  assert(_currentFakeAsync != null);\n  _currentFakeAsync.flushMicrotasks();\n  super.asyncBarrier();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "drawFrame",
                    "type": "",
                    "desc": "<p>Pump the rendering pipeline to generate a frame.<\/p>\n<p>This method is called by <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>, which itself is called\nautomatically by the engine when it is time to lay out and paint a frame.<\/p>\n<p>Each frame consists of the following phases:<\/p>\n<ol>\n<li>\n<p>The animation phase: The <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a> method, which is registered\nwith <a href=\"dart-ui\/Window\/onBeginFrame.html\">Window.onBeginFrame<\/a>, invokes all the transient frame callbacks\nregistered with <a href=\"scheduler\/SchedulerBinding\/scheduleFrameCallback.html\">scheduleFrameCallback<\/a>, in registration order. This\nincludes all the <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> instances that are driving <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>\nobjects, which means all of the active <a href=\"animation\/Animation-class.html\">Animation<\/a> objects tick at this\npoint.<\/p>\n<\/li>\n<li>\n<p>Microtasks: After <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a> returns, any microtasks that got\nscheduled by transient frame callbacks get to run. This typically includes\ncallbacks for futures from <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a>s and <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s that\ncompleted this frame.<\/p>\n<\/li>\n<\/ol>\n<p>After <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a>, <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>, which is registered with\n<a href=\"dart-ui\/Window\/onDrawFrame.html\">Window.onDrawFrame<\/a>, is called, which invokes all the persistent frame\ncallbacks, of which the most notable is this method, <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/drawFrame.html\">drawFrame<\/a>, which\nproceeds as follows:<\/p>\n<ol start=\"3\">\n<li>\n<p>The layout phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system are laid\nout (see <a href=\"rendering\/RenderObject\/performLayout.html\">RenderObject.performLayout<\/a>). See <a href=\"rendering\/RenderObject\/markNeedsLayout.html\">RenderObject.markNeedsLayout<\/a>\nfor further details on marking an object dirty for layout.<\/p>\n<\/li>\n<li>\n<p>The compositing bits phase: The compositing bits on any dirty\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> objects are updated. See\n<a href=\"rendering\/RenderObject\/markNeedsCompositingBitsUpdate.html\">RenderObject.markNeedsCompositingBitsUpdate<\/a>.<\/p>\n<\/li>\n<li>\n<p>The paint phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system are\nrepainted (see <a href=\"rendering\/RenderObject\/paint.html\">RenderObject.paint<\/a>). This generates the <a href=\"rendering\/Layer-class.html\">Layer<\/a> tree. See\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> for further details on marking an object\ndirty for paint.<\/p>\n<\/li>\n<li>\n<p>The compositing phase: The layer tree is turned into a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> and\nsent to the GPU.<\/p>\n<\/li>\n<li>\n<p>The semantics phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system have\ntheir semantics updated (see <code>RenderObject.semanticsAnnotator<\/code>). This\ngenerates the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> tree. See\n<a href=\"rendering\/RenderObject\/markNeedsSemanticsUpdate.html\">RenderObject.markNeedsSemanticsUpdate<\/a> for further details on marking an\nobject dirty for semantics.<\/p>\n<\/li>\n<\/ol>\n<p>For more details on steps 3-7, see <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a>.<\/p>\n<ol start=\"8\"><li>The finalization phase: After <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/drawFrame.html\">drawFrame<\/a> returns, <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>\nthen invokes post-frame callbacks (registered with <a href=\"scheduler\/SchedulerBinding\/addPostFrameCallback.html\">addPostFrameCallback<\/a>).<\/li><\/ol>\n<p>Some bindings (for example, the <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>) add extra steps to this\nlist (for example, see <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/drawFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid drawFrame() {\n  assert(inTest);\n  try {\n    debugBuildingDirtyElements = true;\n    buildOwner.buildScope(renderViewElement);\n    if (_phase != EnginePhase.build) {\n      assert(renderView != null);\n      pipelineOwner.flushLayout();\n      if (_phase != EnginePhase.layout) {\n        pipelineOwner.flushCompositingBits();\n        if (_phase != EnginePhase.compositingBits) {\n          pipelineOwner.flushPaint();\n          if (_phase != EnginePhase.paint) {\n            renderView.compositeFrame(); \/\/ this sends the bits to the GPU\n            if (_phase != EnginePhase.composite) {\n              pipelineOwner.flushSemantics();\n              assert(_phase == EnginePhase.flushSemantics ||\n                     _phase == EnginePhase.sendSemanticsUpdate);\n            }\n          }\n        }\n      }\n    }\n    buildOwner.finalizeTree();\n  } finally {\n    debugBuildingDirtyElements = false;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "idle",
                    "type": "dart:async.Future",
                    "desc": "<p>Acts as if the application went idle.<\/p>\n<p>Runs all remaining microtasks, including those scheduled as a result of\nrunning them, until there are no more microtasks scheduled. Then, runs any\npreviously scheduled timers with zero time, and completes the returned future.<\/p>\n<p>May result in an infinite loop or run out of memory if microtasks continue\nto recursively schedule new microtasks. Will not run any timers scheduled\nafter this method was invoked, even if they are zero-time timers.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/idle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; idle() {\n  final Future&lt;void&gt; result = super.idle();\n  _currentFakeAsync.elapse(Duration.zero);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  window.onBeginFrame = null;\n  window.onDrawFrame = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "postTest",
                    "type": "",
                    "desc": "<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> function after a test is executed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/postTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid postTest() {\n  super.postTest();\n  assert(_currentFakeAsync != null);\n  assert(_clock != null);\n  _clock = null;\n  _currentFakeAsync = null;\n  _timeoutCompleter = null;\n  _timeoutTimer.cancel();\n  _timeoutTimer = null;\n  _timeoutStopwatch = null;\n  _timeout = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Triggers a frame sequence (build\/layout\/paint\/etc),\nthen flushes microtasks.<\/p>\n<p>If duration is set, then advances the clock by that much first.\nDoing this flushes microtasks.<\/p>\n<p>The supplied EnginePhase is the final phase reached during the pump pass;\nif not supplied, the whole pass is executed.<\/p>\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newPhase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; pump([ Duration duration, EnginePhase newPhase = EnginePhase.sendSemanticsUpdate ]) {\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    assert(inTest);\n    assert(_clock != null);\n    if (duration != null)\n      _currentFakeAsync.elapse(duration);\n    _phase = newPhase;\n    if (hasScheduledFrame) {\n      addTime(const Duration(milliseconds: 500));\n      _currentFakeAsync.flushMicrotasks();\n      handleBeginFrame(Duration(\n        milliseconds: _clock.now().millisecondsSinceEpoch,\n      ));\n      _currentFakeAsync.flushMicrotasks();\n      handleDrawFrame();\n    }\n    _currentFakeAsync.flushMicrotasks();\n    return Future&lt;void&gt;.value();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runAsync",
                    "type": "dart:async.Future",
                    "desc": "<p>Runs a <code>callback<\/code> that performs real asynchronous work.<\/p>\n<p>This is intended for callers who need to call asynchronous methods where\nthe methods spawn isolates or OS threads and thus cannot be executed\nsynchronously by calling <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html\">pump<\/a>.<\/p>\n<p>If <code>callback<\/code> completes successfully, this will return the future\nreturned by <code>callback<\/code>.<\/p>\n<p>If <code>callback<\/code> completes with an error, the error will be caught by the\nFlutter framework and made available via <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>, and this method\nwill return a future that completes will <code>null<\/code>.<\/p>\n<p>Re-entrant calls to this method are not allowed; callers of this method\nare required to wait for the returned future to complete before calling\nthis method again. Attempts to do otherwise will result in a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> error being thrown.<\/p>\n<p>The <code>additionalTime<\/code> argument is used by the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> implementation to increase the\ncurrent timeout. See <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a> for\ndetails. The value is ignored by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "additionalTime",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/runAsync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; runAsync&lt;T&gt;(\n  Future&lt;T&gt; callback(), {\n  Duration additionalTime = const Duration(milliseconds: 1000),\n}) {\n  assert(additionalTime != null);\n  assert(() {\n    if (_pendingAsyncTasks == null)\n      return true;\n    throw test_package.TestFailure(\n        'Reentrant call to runAsync() denied.\\n'\n        'runAsync() was called, then before its future completed, it '\n        'was called again. You must wait for the first returned future '\n        'to complete before calling runAsync() again.'\n    );\n  }());\n\n  final Zone realAsyncZone = Zone.current.fork(\n    specification: ZoneSpecification(\n      scheduleMicrotask: (Zone self, ZoneDelegate parent, Zone zone, void f()) {\n        Zone.root.scheduleMicrotask(f);\n      },\n      createTimer: (Zone self, ZoneDelegate parent, Zone zone, Duration duration, void f()) {\n        return Zone.root.createTimer(duration, f);\n      },\n      createPeriodicTimer: (Zone self, ZoneDelegate parent, Zone zone, Duration period, void f(Timer timer)) {\n        return Zone.root.createPeriodicTimer(period, f);\n      },\n    ),\n  );\n\n  addTime(additionalTime);\n\n  return realAsyncZone.run&lt;Future&lt;T&gt;&gt;(() {\n    _pendingAsyncTasks = Completer&lt;void&gt;();\n    return callback().catchError((dynamic exception, StackTrace stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'Flutter test framework',\n        context: 'while running async test code',\n      ));\n      return null;\n    }).whenComplete(() {\n      \/\/ We complete the _pendingAsyncTasks future successfully regardless of\n      \/\/ whether an exception occurred because in the case of an exception,\n      \/\/ we already reported the exception to FlutterError. Moreover,\n      \/\/ completing the future with an error would trigger an unhandled\n      \/\/ exception due to zone error boundaries.\n      _pendingAsyncTasks.complete();\n      _pendingAsyncTasks = null;\n    });\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runTest",
                    "type": "dart:async.Future",
                    "desc": "<p>Call the testBody inside a <a href=\"quiver.testing.async\/FakeAsync-class.html\">FakeAsync<\/a> scope on which <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html\">pump<\/a> can\nadvance time.<\/p>\n<p>Returns a future which completes when the test has run.<\/p>\n<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> and <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a> functions to\nrun a test.<\/p>\n<p>The <code>invariantTester<\/code> argument is called after the <code>testBody<\/code>'s <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes. If it throws, then the test is marked as failed.<\/p>\n<p>The <code>description<\/code> is used by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> to\nshow a label on the screen during the test. The description comes from\nthe value passed to <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a>. It must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "testBody",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "invariantTester",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/runTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; runTest(\n  Future&lt;void&gt; testBody(),\n  VoidCallback invariantTester, {\n  String description = '',\n  Duration timeout = const Duration(seconds: 2),\n}) {\n  assert(description != null);\n  assert(!inTest);\n  assert(_currentFakeAsync == null);\n  assert(_clock == null);\n\n  _timeout = timeout;\n  _timeoutStopwatch = Stopwatch()..start();\n  _timeoutTimer = Timer.periodic(const Duration(seconds: 1), _checkTimeout);\n  _timeoutCompleter = Completer&lt;void&gt;();\n\n  final FakeAsync fakeAsync = FakeAsync();\n  _currentFakeAsync = fakeAsync; \/\/ reset in postTest\n  _clock = fakeAsync.getClock(DateTime.utc(2015, 1, 1));\n  Future&lt;void&gt; testBodyResult;\n  fakeAsync.run((FakeAsync localFakeAsync) {\n    assert(fakeAsync == _currentFakeAsync);\n    assert(fakeAsync == localFakeAsync);\n    testBodyResult = _runTest(testBody, invariantTester, description, timeout: _timeoutCompleter.future);\n    assert(inTest);\n  });\n\n  return Future&lt;void&gt;.microtask(() async {\n    \/\/ testBodyResult is a Future that was created in the Zone of the\n    \/\/ fakeAsync. This means that if we await it here, it will register a\n    \/\/ microtask to handle the future _in the fake async zone_. We avoid this\n    \/\/ by calling '.then' in the current zone. While flushing the microtasks\n    \/\/ of the fake-zone below, the new future will be completed and can then\n    \/\/ be used without fakeAsync.\n    final Future&lt;void&gt; resultFuture = testBodyResult.then&lt;void&gt;((_) {\n      \/\/ Do nothing.\n    });\n\n    \/\/ Resolve interplay between fake async and real async calls.\n    fakeAsync.flushMicrotasks();\n    while (_pendingAsyncTasks != null) {\n      await _pendingAsyncTasks.future;\n      fakeAsync.flushMicrotasks();\n    }\n    return resultFuture;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scheduleWarmUpFrame",
                    "type": "",
                    "desc": "<p>Schedule a frame to run as soon as possible, rather than waiting for\nthe engine to request a frame in response to a system \"Vsync\" signal.<\/p>\n<p>This is used during application startup so that the first frame (which is\nlikely to be quite expensive) gets a few extra milliseconds to run.<\/p>\n<p>Locks events dispatching until the scheduled frame has completed.<\/p>\n<p>If a frame has already been scheduled with <a href=\"scheduler\/SchedulerBinding\/scheduleFrame.html\">scheduleFrame<\/a> or\n<a href=\"scheduler\/SchedulerBinding\/scheduleForcedFrame.html\">scheduleForcedFrame<\/a>, this call may delay that frame.<\/p>\n<p>If any scheduled frame has already begun or if another\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/scheduleWarmUpFrame.html\">scheduleWarmUpFrame<\/a> was already called, this call will be ignored.<\/p>\n<p>Prefer <a href=\"scheduler\/SchedulerBinding\/scheduleFrame.html\">scheduleFrame<\/a> to update the display in normal operation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/scheduleWarmUpFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid scheduleWarmUpFrame() {\n  \/\/ We override the default version of this so that the application-startup warm-up frame\n  \/\/ does not schedule timers which we might never get around to running.\n  handleBeginFrame(null);\n  _currentFakeAsync.flushMicrotasks();\n  handleDrawFrame();\n  _currentFakeAsync.flushMicrotasks();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "checkIntrinsicSizes",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"rendering\/debugCheckIntrinsicSizes.html\">debugCheckIntrinsicSizes<\/a> to while tests are running.<\/p>\n<p>This can be used to enable additional checks. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with aggressive intrinsic sizing tests enabled.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/checkIntrinsicSizes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get checkIntrinsicSizes =&gt; true;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "clock",
                    "type": "quiver.time.Clock",
                    "types": [],
                    "desc": "<p>The current time.<\/p>\n<p>In the automated test environment (<code>flutter test<\/code>), this is a fake clock\nthat begins in January 2015 at the start of the test and advances each\ntime <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/pump.html\">pump<\/a> is called with a non-zero duration.<\/p>\n<p>In the live testing environment (<code>flutter run<\/code>), this object shows the\nactual current wall-clock time.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/clock.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nClock get clock =&gt; _clock;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "debugPrintOverride",
                    "type": "foundation.DebugPrintCallback",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> to while tests are running.<\/p>\n<p>This can be used to redirect console output from the framework, or to\nchange the behavior of <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> uses it to make <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>\nsynchronous, disabling its normal throttling behavior.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/debugPrintOverride.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDebugPrintCallback get debugPrintOverride =&gt; debugPrintSynchronously;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultTestTimeout",
                    "type": "test_api.Timeout",
                    "types": [],
                    "desc": "<p>The default test timeout for tests when using this binding.<\/p>\n<p>The <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> layers in an additional timeout\nmechanism beyond this, with much more aggressive timeouts. See\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/defaultTestTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ntest_package.Timeout get defaultTestTimeout =&gt; const test_package.Timeout(Duration(minutes: 5));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "disableShadows",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"painting\/debugDisableShadows.html\">debugDisableShadows<\/a> to while tests are running.<\/p>\n<p>This can be used to reduce the likelihood of golden file tests being\nflaky, because shadow rendering is not always deterministic. The\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with shadows disabled.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/disableShadows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get disableShadows =&gt; true;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inTest",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether there is currently a test executing.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/inTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get inTest =&gt; _currentFakeAsync != null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "microtaskCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of outstanding microtasks in the queue.<\/p>\n        ",
                    "memberOf": "flutter_test.AutomatedTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding\/microtaskCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get microtaskCount =&gt; _currentFakeAsync.microtaskCount;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html",
            "desc": "<p>A variant of <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a> for executing tests in\nthe <code>flutter test<\/code> environment.<\/p>\n<p>This binding controls time, allowing tests to verify long\nanimation sequences without having to execute them in real time.<\/p>\n<p>This class assumes it is always run in checked mode (since tests are always\nrun in checked mode).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AutomatedTestWidgetsFlutterBinding"
        },
        {
            "name": "flutter_test.ChainedFinder",
            "extends": [
                "flutter_test.Finder",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "ChainedFinder",
                    "type": "",
                    "desc": "<p>Create a Finder chained against the candidates of another <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.ChainedFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "parent",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/ChainedFinder\/ChainedFinder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChainedFinder(this.parent) : assert(parent != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "apply",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "desc": "<p>Returns all the elements in the given list that match this\nfinder's pattern.<\/p>\n<p>When implementing your own Finders that inherit directly from\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, this is the main method to override. If your finder\ncan efficiently be described just in terms of a predicate\nfunction, consider extending <a href=\"flutter_test\/MatchFinder-class.html\">MatchFinder<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.ChainedFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "candidates",
                            "type": "dart:core.Iterable<widgets.Element>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "widgets.Element"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/ChainedFinder\/apply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;Element&gt; apply(Iterable&lt;Element&gt; candidates) {\n  return filter(parent.apply(candidates));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ]
                },
                {
                    "name": "filter",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "desc": "<p>Return another <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> when given an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of candidates from a\nparent <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>.<\/p>\n<p>This is the method to implement when subclassing <a href=\"flutter_test\/ChainedFinder-class.html\">ChainedFinder<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.ChainedFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentCandidates",
                            "type": "dart:core.Iterable<widgets.Element>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "widgets.Element"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/ChainedFinder\/filter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; filter(Iterable&lt;Element&gt; parentCandidates);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ]
                }
            ],
            "props": [
                {
                    "name": "allCandidates",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ],
                    "desc": "<p>Returns all the <a href=\"widgets\/Element-class.html\">Element<\/a>s that will be considered by this finder.<\/p>\n<p>See <a href=\"flutter_test\/collectAllElementsFrom.html\">collectAllElementsFrom<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.ChainedFinder",
                    "isConstant": false,
                    "href": "flutter_test\/ChainedFinder\/allCandidates.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;Element&gt; get allCandidates =&gt; parent.allCandidates;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "flutter_test.Finder",
                    "types": [],
                    "desc": "<p>Another <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> that will run first.<\/p>\n        ",
                    "memberOf": "flutter_test.ChainedFinder",
                    "isConstant": false,
                    "href": "flutter_test\/ChainedFinder\/parent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Finder parent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/ChainedFinder-class.html",
            "desc": "<p>Applies additional filtering against a <a href=\"flutter_test\/ChainedFinder\/parent.html\">parent<\/a> <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ChainedFinder"
        },
        {
            "name": "flutter_test.CommonFinders",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "ancestor",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets that are ancestors of the <code>of<\/code> parameter and that match\nthe <code>matching<\/code> parameter.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Test if a Text widget that contains 'faded' is the\n\/\/ descendant of an Opacity widget with opacity 0.5:\nexpect(\n  tester.widget&lt;Opacity&gt;(\n    find.ancestor(\n      of: find.text('faded'),\n      matching: find.byType('Opacity'),\n    )\n  ).opacity,\n  0.5\n);\n<\/code><\/pre>\n<p>If the <code>matchRoot<\/code> argument is true then the widget(s) specified by <code>of<\/code>\nwill be matched along with the ancestors.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "of",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matching",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matchRoot",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/ancestor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder ancestor({ Finder of, Finder matching, bool matchRoot = false }) {\n  return _AncestorFinder(of, matching, matchRoot: matchRoot);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byElementPredicate",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets using an element <code>predicate<\/code>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byElementPredicate(\n  \/\/ finds elements of type SingleChildRenderObjectElement, including\n  \/\/ those that are actually subclasses of that type.\n  \/\/ (contrast with byElementType, which only returns exact matches)\n  (Element element) =&gt; element is SingleChildRenderObjectElement,\n  description: '$SingleChildRenderObjectElement element',\n), findsOneWidget);\n<\/code><\/pre>\n<p>If <code>description<\/code> is provided, then this uses it as the description of the\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a> and appears, for example, in the error message when the finder\nfails to locate the desired widget. Otherwise, the description prints the\nsignature of the predicate function.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "predicate",
                            "type": "flutter_test.ElementPredicate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byElementPredicate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byElementPredicate(ElementPredicate predicate, { String description, bool skipOffstage = true }) {\n  return _ElementPredicateFinder(predicate, description: description, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byElementType",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets by searching for elements with a particular type.<\/p>\n<p>This does not do subclass tests, so for example\n<code>byElementType(VirtualViewportElement)<\/code> will never find anything\nsince that's an abstract class.<\/p>\n<p>The <code>type<\/code> argument must be a subclass of <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byElementType(SingleChildRenderObjectElement), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "type",
                            "type": "dart:core.Type",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byElementType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byElementType(Type type, { bool skipOffstage = true }) =&gt; _ElementTypeFinder(type, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byIcon",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds <a href=\"widgets\/Icon-class.html\">Icon<\/a> widgets containing icon data equal to the <code>icon<\/code>\nargument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byIcon(Icons.inbox), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "icon",
                            "type": "widgets.IconData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byIcon.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byIcon(IconData icon, { bool skipOffstage = true }) =&gt; _WidgetIconFinder(icon, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byKey",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets by searching for one with a particular <a href=\"foundation\/Key-class.html\">Key<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byKey(backKey), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "foundation.Key",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byKey(Key key, { bool skipOffstage = true }) =&gt; _KeyFinder(key, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "bySemanticsLabel",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widgets matching the given <code>label<\/code>, either by\n<a href=\"dart-core\/RegExp\/hasMatch.html\">RegExp.hasMatch<\/a> or string equality.<\/p>\n<p>The framework may combine semantics labels in certain scenarios, such as\nwhen multiple <a href=\"widgets\/Text-class.html\">Text<\/a> widgets are in a <a href=\"material\/MaterialButton-class.html\">MaterialButton<\/a> widget. In such a\ncase, it may be preferable to match by regular expression. Consumers of\nthis API <strong>must not<\/strong> introduce unsuitable content into the semantics tree\nfor the purposes of testing; in particular, you should prefer matching by\nregular expression rather than by string if the framework has combined\nyour semantics, and not try to force the framework to break up the\nsemantics nodes. Breaking up the nodes would have an undesirable effect on\nscreen readers and other accessibility services.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.BySemanticsLabel('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "label",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/bySemanticsLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder bySemanticsLabel(Pattern label, { bool skipOffstage = true }) {\n  if (WidgetsBinding.instance.pipelineOwner.semanticsOwner == null)\n    throw StateError('Semantics are not enabled. '\n                     'Make sure to call tester.enableSemantics() before using '\n                     'this finder, and call dispose on its return value after.');\n  return byElementPredicate(\n    (Element element) {\n      \/\/ Multiple elements can have the same renderObject - we want the \"owner\"\n      \/\/ of the renderObject, i.e. the RenderObjectElement.\n      if (element is! RenderObjectElement) {\n        return false;\n      }\n      final String semanticsLabel = element.renderObject?.debugSemantics?.label;\n      if (semanticsLabel == null) {\n        return false;\n      }\n      return label is RegExp\n          ? label.hasMatch(semanticsLabel)\n          : label == semanticsLabel;\n    },\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byTooltip",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds Tooltip widgets with the given message.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byTooltip('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byTooltip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byTooltip(String message, { bool skipOffstage = true }) {\n  return byWidgetPredicate(\n    (Widget widget) =&gt; widget is Tooltip &amp;&amp; widget.message == message,\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byType",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets by searching for widgets with a particular type.<\/p>\n<p>This does not do subclass tests, so for example\n<code>byType(StatefulWidget)<\/code> will never find anything since that's\nan abstract class.<\/p>\n<p>The <code>type<\/code> argument must be a subclass of <a href=\"widgets\/Widget-class.html\">Widget<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byType(IconButton), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "type",
                            "type": "dart:core.Type",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byType(Type type, { bool skipOffstage = true }) =&gt; _WidgetTypeFinder(type, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byWidget",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets whose current widget is the instance given by the\nargument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button created like this:\nWidget myButton = new Button(\n  child: new Text('Update')\n);\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.byWidget(myButton));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "widget",
                            "type": "widgets.Widget",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byWidget.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byWidget(Widget widget, { bool skipOffstage = true }) =&gt; _WidgetFinder(widget, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "byWidgetPredicate",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets using a widget <code>predicate<\/code>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byWidgetPredicate(\n  (Widget widget) =&gt; widget is Tooltip &amp;&amp; widget.message == 'Back',\n  description: 'widget with tooltip \"Back\"',\n), findsOneWidget);\n<\/code><\/pre>\n<p>If <code>description<\/code> is provided, then this uses it as the description of the\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a> and appears, for example, in the error message when the finder\nfails to locate the desired widget. Otherwise, the description prints the\nsignature of the predicate function.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "predicate",
                            "type": "flutter_test.WidgetPredicate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/byWidgetPredicate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byWidgetPredicate(WidgetPredicate predicate, { String description, bool skipOffstage = true }) {\n  return _WidgetPredicateFinder(predicate, description: description, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "descendant",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds widgets that are descendants of the <code>of<\/code> parameter and that match\nthe <code>matching<\/code> parameter.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.descendant(\n  of: find.widgetWithText(Row, 'label_1'), matching: find.text('value_1')\n), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>matchRoot<\/code> argument is true then the widget(s) specified by <code>of<\/code>\nwill be matched along with the descendants.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then nodes that are\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s are skipped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "of",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matching",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matchRoot",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/descendant.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder descendant({ Finder of, Finder matching, bool matchRoot = false, bool skipOffstage = true }) {\n  return _DescendantFinder(of, matching, matchRoot: matchRoot, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Finds <a href=\"widgets\/Text-class.html\">Text<\/a> and <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> widgets containing string equal to the\n<code>text<\/code> argument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.text('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder text(String text, { bool skipOffstage = true }) =&gt; _TextFinder(text, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "widgetWithIcon",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Looks for widgets that contain an <a href=\"widgets\/Icon-class.html\">Icon<\/a> descendant displaying <a href=\"widgets\/IconData-class.html\">IconData<\/a>\n<code>icon<\/code> in it.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button with icon 'arrow_forward' in it:\nnew Button(\n  child: new Icon(Icons.arrow_forward)\n)\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.widgetWithIcon(Button, Icons.arrow_forward));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "widgetType",
                            "type": "dart:core.Type",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "icon",
                            "type": "widgets.IconData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/widgetWithIcon.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder widgetWithIcon(Type widgetType, IconData icon, { bool skipOffstage = true }) {\n  return find.ancestor(\n    of: find.byIcon(icon),\n    matching: find.byType(widgetType),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "widgetWithText",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Looks for widgets that contain a <a href=\"widgets\/Text-class.html\">Text<\/a> descendant with <code>text<\/code>\nin it.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button with text 'Update' in it:\nnew Button(\n  child: new Text('Update')\n)\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.widgetWithText(Button, 'Update'));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.CommonFinders",
                    "sig": "",
                    "params": [
                        {
                            "name": "widgetType",
                            "type": "dart:core.Type",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/CommonFinders\/widgetWithText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder widgetWithText(Type widgetType, String text, { bool skipOffstage = true }) {\n  return find.ancestor(\n    of: find.text(text, skipOffstage: skipOffstage),\n    matching: find.byType(widgetType, skipOffstage: skipOffstage),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/CommonFinders-class.html",
            "desc": "<p>Provides lightweight syntax for getting frequently used widget <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>s.<\/p>\n<p>This class is instantiated once, as <a href=\"flutter_test\/find-constant.html\">find<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CommonFinders"
        },
        {
            "name": "flutter_test.DistanceFunction",
            "type": "dart:core.num",
            "desc": "<p>Computes the distance between two values.<\/p>\n<p>The distance should be a metric in a metric space (see\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Metric_space)\">https:\/\/en.wikipedia.org\/wiki\/Metric_space)<\/a>. Specifically, if <code>f<\/code> is a\ndistance function then the following conditions should hold:<\/p>\n<ul>\n<li>f(a, b) &gt;= 0<\/li>\n<li>f(a, b) == 0 if and only if a == b<\/li>\n<li>f(a, b) == f(b, a)<\/li>\n<li>f(a, c) &lt;= f(a, b) + f(b, c), known as triangle inequality<\/li>\n<\/ul>\n<p>This makes it useful for comparing numbers, <a href=\"dart-ui\/Color-class.html\">Color<\/a>s, <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>s and other\nsets of value for which a metric space is defined.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/DistanceFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef DistanceFunction&lt;T&gt; = num Function(T a, T b);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "flutter_test.ElementPredicate",
            "type": "dart:core.bool",
            "desc": "<p>Signature for <a href=\"flutter_test\/CommonFinders\/byElementPredicate.html\">CommonFinders.byElementPredicate<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "widgets.Element",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/ElementPredicate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ElementPredicate = bool Function(Element element);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "type": "",
            "name": "flutter_test.EnginePhase",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.EnginePhase",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/EnginePhase\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/EnginePhase-class.html",
            "desc": "<p>Phases that can be reached by <a href=\"flutter_test\/WidgetTester\/pumpWidget.html\">WidgetTester.pumpWidget<\/a> and\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">TestWidgetsFlutterBinding.pump<\/a>.<\/p>\n<p>See <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a> for a more detailed description of some of\nthese phases.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "EnginePhase"
        },
        {
            "name": "flutter_test.Evaluation",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "operator +",
                    "type": "flutter_test.Evaluation",
                    "desc": "<p>Combines two evaluation results.<\/p>\n<p>The <a href=\"flutter_test\/Evaluation\/reason.html\">reason<\/a> will be concatenated with a newline, and <a href=\"flutter_test\/Evaluation\/passed.html\">passed<\/a> will be\ncombined with an <code>&amp;&amp;<\/code> operator.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Evaluation",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "flutter_test.Evaluation",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/Evaluation\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Evaluation operator +(Evaluation other) {\n  if (other == null)\n    return this;\n  final StringBuffer buffer = StringBuffer();\n  if (reason != null) {\n    buffer.write(reason);\n    buffer.write(' ');\n  }\n  if (other.reason != null)\n    buffer.write(other.reason);\n  return Evaluation._(passed &amp;&amp; other.passed, buffer.isEmpty ? null : buffer.toString());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Evaluation.fail",
                    "type": "",
                    "desc": "<p>Create a failing evaluation, with an optional <code>reason<\/code> explaining the\nresult.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Evaluation",
                    "sig": "",
                    "params": [
                        {
                            "name": "reason",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/Evaluation\/Evaluation.fail.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Evaluation.fail([this.reason]) : passed = false;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Evaluation.pass",
                    "type": "",
                    "desc": "<p>Create a passing evaluation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Evaluation",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/Evaluation\/Evaluation.pass.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Evaluation.pass()\n  : passed = true,\n    reason = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "passed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the given tree or node passed the policy evaluation.<\/p>\n        ",
                    "memberOf": "flutter_test.Evaluation",
                    "isConstant": false,
                    "href": "flutter_test\/Evaluation\/passed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool passed\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>If <a href=\"flutter_test\/Evaluation\/passed.html\">passed<\/a> is false, contains the reason for failure.<\/p>\n        ",
                    "memberOf": "flutter_test.Evaluation",
                    "isConstant": false,
                    "href": "flutter_test\/Evaluation\/reason.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String reason\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/Evaluation-class.html",
            "desc": "<p>The result of evaluating a semantics node by a <a href=\"flutter_test\/AccessibilityGuideline-class.html\">AccessibilityGuideline<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Evaluation"
        },
        {
            "name": "flutter_test.EventDispatcher",
            "type": "dart:async.Future",
            "desc": "<p>Signature for a callback that can dispatch events and returns a future that\ncompletes when the event dispatch is complete.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "result",
                    "type": "gestures.HitTestResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/EventDispatcher.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef EventDispatcher = Future&lt;void&gt; Function(PointerEvent event, HitTestResult result);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "flutter_test.Finder",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "Finder",
                    "type": "",
                    "desc": "<p>Initializes a Finder. Used by subclasses to initialize the <code>skipOffstage<\/code>\nproperty.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/Finder\/Finder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder({ this.skipOffstage = true });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "apply",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "desc": "<p>Returns all the elements in the given list that match this\nfinder's pattern.<\/p>\n<p>When implementing your own Finders that inherit directly from\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, this is the main method to override. If your finder\ncan efficiently be described just in terms of a predicate\nfunction, consider extending <a href=\"flutter_test\/MatchFinder-class.html\">MatchFinder<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [
                        {
                            "name": "candidates",
                            "type": "dart:core.Iterable<widgets.Element>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "widgets.Element"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/apply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; apply(Iterable&lt;Element&gt; candidates);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ]
                },
                {
                    "name": "at",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Returns a variant of this finder that only matches the element at the\ngiven index matched by this finder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/at.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder at(int index) =&gt; _IndexFinder(this, index);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "evaluate",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "desc": "<p>Returns the current result. If <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a> was called and returned true, this will\ncheaply return the result that was computed then. Otherwise, it creates a new\niterable to compute the answer.<\/p>\n<p>Calling this clears the cache from <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/evaluate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; evaluate() {\n  final Iterable&lt;Element&gt; result = _cachedResult ?? apply(allCandidates);\n  _cachedResult = null;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ]
                },
                {
                    "name": "hitTestable",
                    "type": "flutter_test.Finder",
                    "desc": "<p>Returns a variant of this finder that only matches elements reachable by\na hit test.<\/p>\n<p>The <code>at<\/code> parameter specifies the location relative to the size of the\ntarget element where the hit test is performed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [
                        {
                            "name": "at",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/hitTestable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder hitTestable({ Alignment at = Alignment.center }) =&gt; _HitTestableFinder(this, at);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "precache",
                    "type": "dart:core.bool",
                    "desc": "<p>Attempts to evaluate the finder. Returns whether any elements in the tree\nmatched the finder. If any did, then the result is cached and can be obtained\nfrom <a href=\"flutter_test\/Finder\/evaluate.html\">evaluate<\/a>.<\/p>\n<p>If this returns true, you must call <a href=\"flutter_test\/Finder\/evaluate.html\">evaluate<\/a> before you call <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a> again.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/precache.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool precache() {\n  assert(_cachedResult == null);\n  final Iterable&lt;Element&gt; result = apply(allCandidates);\n  if (result.isNotEmpty) {\n    _cachedResult = result;\n    return true;\n  }\n  _cachedResult = null;\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.Finder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/Finder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String additional = skipOffstage ? ' (ignoring offstage widgets)' : '';\n  final List&lt;Element&gt; widgets = evaluate().toList();\n  final int count = widgets.length;\n  if (count == 0)\n    return 'zero widgets with $description$additional';\n  if (count == 1)\n    return 'exactly one widget with $description$additional: ${widgets.single}';\n  if (count &lt; 4)\n    return '$count widgets with $description$additional: $widgets';\n  return '$count widgets with $description$additional: ${widgets[0]}, ${widgets[1]}, ${widgets[2]}, ...';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "allCandidates",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ],
                    "desc": "<p>Returns all the <a href=\"widgets\/Element-class.html\">Element<\/a>s that will be considered by this finder.<\/p>\n<p>See <a href=\"flutter_test\/collectAllElementsFrom.html\">collectAllElementsFrom<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.Finder",
                    "isConstant": false,
                    "href": "flutter_test\/Finder\/allCandidates.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nIterable&lt;Element&gt; get allCandidates {\n  return collectAllElementsFrom(\n    WidgetsBinding.instance.renderViewElement,\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Describes what the finder is looking for. The description should be\na brief English noun phrase describing the finder's pattern.<\/p>\n        ",
                    "memberOf": "flutter_test.Finder",
                    "isConstant": false,
                    "href": "flutter_test\/Finder\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "first",
                    "type": "flutter_test.Finder",
                    "types": [],
                    "desc": "<p>Returns a variant of this finder that only matches the first element\nmatched by this finder.<\/p>\n        ",
                    "memberOf": "flutter_test.Finder",
                    "isConstant": false,
                    "href": "flutter_test\/Finder\/first.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Finder get first =&gt; _FirstFinder(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "last",
                    "type": "flutter_test.Finder",
                    "types": [],
                    "desc": "<p>Returns a variant of this finder that only matches the last element\nmatched by this finder.<\/p>\n        ",
                    "memberOf": "flutter_test.Finder",
                    "isConstant": false,
                    "href": "flutter_test\/Finder\/last.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Finder get last =&gt; _LastFinder(this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "skipOffstage",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this finder skips nodes that are offstage.<\/p>\n<p>If this is true, then the elements are walked using\n<a href=\"widgets\/Element\/debugVisitOnstageChildren.html\">Element.debugVisitOnstageChildren<\/a>. This skips offstage children of\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a> widgets, as well as children of inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n        ",
                    "memberOf": "flutter_test.Finder",
                    "isConstant": false,
                    "href": "flutter_test\/Finder\/skipOffstage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool skipOffstage\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "flutter_test.ChainedFinder",
                "flutter_test.MatchFinder"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/Finder-class.html",
            "desc": "<p>Searches a widget tree and returns nodes that match a particular\npattern.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Finder"
        },
        {
            "name": "flutter_test.GoldenFileComparator",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "GoldenFileComparator",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "flutter_test.GoldenFileComparator",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/GoldenFileComparator\/GoldenFileComparator.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "compare",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Compares <code>imageBytes<\/code> against the golden file identified by <code>golden<\/code>.<\/p>\n<p>The returned future completes with a boolean value that indicates whether\n<code>imageBytes<\/code> matches the golden file's bytes within the tolerance defined\nby the comparator.<\/p>\n<p>In the case of comparison mismatch, the comparator may choose to throw a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> if it wants to control the failure message.<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are loaded\nis left up to the implementation class. For instance, some implementations\nmay load files from the local file system, whereas others may load files\nover the network or from a remote repository.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.GoldenFileComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/GoldenFileComparator\/compare.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; compare(Uint8List imageBytes, Uri golden);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "update",
                    "type": "dart:async.Future",
                    "desc": "<p>Updates the golden file identified by <code>golden<\/code> with <code>imageBytes<\/code>.<\/p>\n<p>This will be invoked in lieu of <a href=\"flutter_test\/GoldenFileComparator\/compare.html\">compare<\/a> when <a href=\"flutter_test\/autoUpdateGoldenFiles.html\">autoUpdateGoldenFiles<\/a>\nis <code>true<\/code> (which gets set automatically by the test framework when the\nuser runs <code>flutter test --update-goldens<\/code>).<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are written\nis left up to the implementation class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.GoldenFileComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/GoldenFileComparator\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; update(Uri golden, Uint8List imageBytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/GoldenFileComparator-class.html",
            "desc": "<p>Compares rasterized image bytes against a golden image file.<\/p>\n<p>Instances of this comparator will be used as the backend for\n<a href=\"flutter_test\/matchesGoldenFile.html\">matchesGoldenFile<\/a>.<\/p>\n<p>Instances of this comparator will be invoked by the test framework in the\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/runAsync.html\">TestWidgetsFlutterBinding.runAsync<\/a> zone and are thus not subject to the\nfake async constraints that are normally imposed on widget tests (i.e. the\nneed or the ability to call <a href=\"flutter_test\/WidgetTester\/pump.html\">WidgetTester.pump<\/a> to advance the microtask\nqueue).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "GoldenFileComparator"
        },
        {
            "name": "flutter_test.HitTester",
            "type": "gestures.HitTestResult",
            "desc": "<p>Signature for callbacks that perform hit-testing at a given location.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "location",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/HitTester.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef HitTester = HitTestResult Function(Offset location);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "flutter_test.LabeledTapTargetGuideline",
            "extends": [
                "flutter_test.AccessibilityGuideline",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "evaluate",
                    "type": "dart:async.FutureOr<flutter_test.Evaluation>",
                    "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LabeledTapTargetGuideline",
                    "sig": "",
                    "params": [
                        {
                            "name": "tester",
                            "type": "flutter_test.WidgetTester",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LabeledTapTargetGuideline\/evaluate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFutureOr&lt;Evaluation&gt; evaluate(WidgetTester tester) {\n  final SemanticsNode root = tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n  Evaluation traverse(SemanticsNode node) {\n    Evaluation result = const Evaluation.pass();\n    node.visitChildren((SemanticsNode child) {\n      result += traverse(child);\n      return true;\n    });\n    if (node.isMergedIntoParent || node.isInvisible || node.hasFlag(ui.SemanticsFlag.isHidden))\n      return result;\n    final SemanticsData data = node.getSemanticsData();\n    \/\/ Skip node if it has no actions, or is marked as hidden.\n    if (!data.hasAction(ui.SemanticsAction.longPress) &amp;&amp; !data.hasAction(ui.SemanticsAction.tap))\n      return result;\n    if (data.label == null || data.label.isEmpty) {\n      result += Evaluation.fail(\n        '$node: expected tappable node to have semantic label, but none was found\\n',\n      );\n    }\n    return result;\n  }\n  return traverse(root);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.FutureOr",
                        "flutter_test.Evaluation"
                    ]
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
                    "memberOf": "flutter_test.LabeledTapTargetGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/LabeledTapTargetGuideline\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get description =&gt; 'Tappable widgets should have a semantic label';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/LabeledTapTargetGuideline-class.html",
            "desc": "<p>A guideline which enforces that all nodes with a tap or long press action\nalso have a label.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LabeledTapTargetGuideline"
        },
        {
            "name": "flutter_test.LiveTestWidgetsFlutterBinding",
            "extends": [
                "flutter_test.TestWidgetsFlutterBinding",
                "foundation.BindingBase",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "LiveTestWidgetsFlutterBinding",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/LiveTestWidgetsFlutterBinding.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "createViewConfiguration",
                    "type": "rendering.ViewConfiguration",
                    "desc": "<p>Returns a <a href=\"rendering\/ViewConfiguration-class.html\">ViewConfiguration<\/a> configured for the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> based on the\ncurrent environment.<\/p>\n<p>This is called during construction and also in response to changes to the\nsystem metrics.<\/p>\n<p>Bindings can override this method to change what size or device pixel\nratio the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> will use. For example, the testing framework uses\nthis to force the display into 800x600 when a test is run on the device\nusing <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/createViewConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nViewConfiguration createViewConfiguration() {\n  return TestViewConfiguration(\n    size: _surfaceSize ?? _kDefaultTestViewportSize,\n    window: window,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispatchEvent",
                    "type": "",
                    "desc": "<p>Dispatch an event to a hit test result's path.<\/p>\n<p>This sends the given event to every <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> in the entries of the\ngiven <a href=\"gestures\/HitTestResult-class.html\">HitTestResult<\/a>, and catches exceptions that any of the handlers\nmight throw. The <code>hitTestResult<\/code> argument may only be null for\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, <a href=\"gestures\/PointerAddedEvent-class.html\">PointerAddedEvent<\/a>, or <a href=\"gestures\/PointerRemovedEvent-class.html\">PointerRemovedEvent<\/a> events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hitTestResult",
                            "type": "gestures.HitTestResult",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "source",
                            "type": "flutter_test.TestBindingEventSource",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/dispatchEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispatchEvent(\n  PointerEvent event,\n  HitTestResult hitTestResult, {\n  TestBindingEventSource source = TestBindingEventSource.device,\n}) {\n  switch (source) {\n    case TestBindingEventSource.test:\n      if (!renderView._pointers.containsKey(event.pointer)) {\n        assert(event.down);\n        renderView._pointers[event.pointer] = _LiveTestPointerRecord(event.pointer, event.position);\n      } else {\n        renderView._pointers[event.pointer].position = event.position;\n        if (!event.down)\n          renderView._pointers[event.pointer].decay = _kPointerDecay;\n      }\n      _handleViewNeedsPaint();\n      super.dispatchEvent(event, hitTestResult, source: source);\n      break;\n    case TestBindingEventSource.device:\n      if (deviceEventDispatcher != null)\n        deviceEventDispatcher.dispatchEvent(event, hitTestResult);\n      break;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "globalToLocal",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Convert the given point from the global coordinate system (as used by\npointer events from the device) to the coordinate system used by the\ntests (an 800 by 600 window).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/globalToLocal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOffset globalToLocal(Offset point) {\n  final Matrix4 transform = renderView.configuration.toHitTestMatrix();\n  final double det = transform.invert();\n  assert(det != 0.0);\n  final Offset result = MatrixUtils.transformPoint(transform, point);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "handleBeginFrame",
                    "type": "",
                    "desc": "<p>Called by the engine to prepare the framework to produce a new frame.<\/p>\n<p>This function calls all the transient frame callbacks registered by\n<a href=\"scheduler\/SchedulerBinding\/scheduleFrameCallback.html\">scheduleFrameCallback<\/a>. It then returns, any scheduled microtasks are run\n(e.g. handlers for any <a href=\"dart-async\/Future-class.html\">Future<\/a>s resolved by transient frame callbacks),\nand <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/handleDrawFrame.html\">handleDrawFrame<\/a> is called to continue the frame.<\/p>\n<p>If the given time stamp is null, the time stamp from the last frame is\nreused.<\/p>\n<p>To have a banner shown at the start of every frame in debug mode, set\n<a href=\"scheduler\/debugPrintBeginFrameBanner.html\">debugPrintBeginFrameBanner<\/a> to true. The banner will be printed to the\nconsole using <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> and will contain the frame number (which\nincrements by one for each frame), and the time stamp of the frame. If the\ngiven time stamp was null, then the string \"warm-up frame\" is shown\ninstead of the time stamp. This allows frames eagerly pushed by the\nframework to be distinguished from those requested by the engine in\nresponse to the \"Vsync\" signal from the operating system.<\/p>\n<p>You can also show a banner at the end of every frame by setting\n<a href=\"scheduler\/debugPrintEndFrameBanner.html\">debugPrintEndFrameBanner<\/a> to true. This allows you to distinguish log\nstatements printed during a frame from those printed between frames (e.g.\nin response to events or timers).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "rawTimeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/handleBeginFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleBeginFrame(Duration rawTimeStamp) {\n  assert(_doDrawThisFrame == null);\n  if (_expectingFrame ||\n      (framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.fullyLive) ||\n      (framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.benchmark) ||\n      (framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.fadePointers &amp;&amp; _viewNeedsPaint)) {\n    _doDrawThisFrame = true;\n    super.handleBeginFrame(rawTimeStamp);\n  } else {\n    _doDrawThisFrame = false;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "handleDrawFrame",
                    "type": "",
                    "desc": "<p>Called by the engine to produce a new frame.<\/p>\n<p>This method is called immediately after <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/handleBeginFrame.html\">handleBeginFrame<\/a>. It calls all\nthe callbacks registered by <a href=\"scheduler\/SchedulerBinding\/addPersistentFrameCallback.html\">addPersistentFrameCallback<\/a>, which typically\ndrive the rendering pipeline, and then calls the callbacks registered by\n<a href=\"scheduler\/SchedulerBinding\/addPostFrameCallback.html\">addPostFrameCallback<\/a>.<\/p>\n<p>See <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/handleBeginFrame.html\">handleBeginFrame<\/a> for a discussion about debugging hooks that may be\nuseful when working with frame callbacks.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/handleDrawFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleDrawFrame() {\n  assert(_doDrawThisFrame != null);\n  if (_doDrawThisFrame)\n    super.handleDrawFrame();\n  _doDrawThisFrame = null;\n  _viewNeedsPaint = false;\n  if (_expectingFrame) { \/\/ set during pump\n    assert(_pendingFrame != null);\n    _pendingFrame.complete(); \/\/ unlocks the test API\n    _pendingFrame = null;\n    _expectingFrame = false;\n  } else if (framePolicy != LiveTestWidgetsFlutterBindingFramePolicy.benchmark) {\n    window.scheduleFrame();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  assert(!autoUpdateGoldenFiles);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initRenderView",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> object to be the root of the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> rendering tree, and initializes it so that it\nwill be rendered when the engine is next ready to display a\nframe.<\/p>\n<p>Called automatically when the binding is created.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/initRenderView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initRenderView() {\n  assert(renderView == null);\n  renderView = _LiveTestRenderView(\n    configuration: createViewConfiguration(),\n    onNeedPaint: _handleViewNeedsPaint,\n    window: window,\n  );\n  renderView.scheduleInitialFrame();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "localToGlobal",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Convert the given point from the coordinate system used by the tests (an\n800 by 600 window) to the global coordinate system (as used by pointer\nevents from the device).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/localToGlobal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOffset localToGlobal(Offset point) {\n  final Matrix4 transform = renderView.configuration.toHitTestMatrix();\n  return MatrixUtils.transformPoint(transform, point);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "postTest",
                    "type": "",
                    "desc": "<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> function after a test is executed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/postTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid postTest() {\n  super.postTest();\n  assert(!_expectingFrame);\n  assert(_pendingFrame == null);\n  _inTest = false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Triggers a frame sequence (build\/layout\/paint\/etc),\nthen flushes microtasks.<\/p>\n<p>If duration is set, then advances the clock by that much first.\nDoing this flushes microtasks.<\/p>\n<p>The supplied EnginePhase is the final phase reached during the pump pass;\nif not supplied, the whole pass is executed.<\/p>\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newPhase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; pump([ Duration duration, EnginePhase newPhase = EnginePhase.sendSemanticsUpdate ]) {\n  assert(newPhase == EnginePhase.sendSemanticsUpdate);\n  assert(inTest);\n  assert(!_expectingFrame);\n  assert(_pendingFrame == null);\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    if (duration != null) {\n      Timer(duration, () {\n        _expectingFrame = true;\n        scheduleFrame();\n      });\n    } else {\n      _expectingFrame = true;\n      scheduleFrame();\n    }\n    _pendingFrame = Completer&lt;void&gt;();\n    return _pendingFrame.future;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "reportExceptionNoticed",
                    "type": "",
                    "desc": "<p>Called when the framework catches an exception, even if that exception is\nbeing handled by <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>.<\/p>\n<p>This is called when there is no pending exception; if multiple exceptions\nare thrown and <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a> isn't used, then subsequent exceptions are\nlogged to the console regardless (and the test will fail).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "exception",
                            "type": "foundation.FlutterErrorDetails",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/reportExceptionNoticed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid reportExceptionNoticed(FlutterErrorDetails exception) {\n  final DebugPrintCallback testPrint = debugPrint;\n  debugPrint = debugPrintOverride;\n  debugPrint('(The following exception is now available via WidgetTester.takeException:)');\n  FlutterError.dumpErrorToConsole(exception, forceReport: true);\n  debugPrint(\n    '(If WidgetTester.takeException is called, the above exception will be ignored. '\n    'If it is not, then the above exception will be dumped when another exception is '\n    'caught by the framework or when the test ends, whichever happens first, and then '\n    'the test will fail due to having not caught or expected the exception.)'\n  );\n  debugPrint = testPrint;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "runAsync",
                    "type": "dart:async.Future",
                    "desc": "<p>Runs a <code>callback<\/code> that performs real asynchronous work.<\/p>\n<p>This is intended for callers who need to call asynchronous methods where\nthe methods spawn isolates or OS threads and thus cannot be executed\nsynchronously by calling <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html\">pump<\/a>.<\/p>\n<p>If <code>callback<\/code> completes successfully, this will return the future\nreturned by <code>callback<\/code>.<\/p>\n<p>If <code>callback<\/code> completes with an error, the error will be caught by the\nFlutter framework and made available via <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>, and this method\nwill return a future that completes will <code>null<\/code>.<\/p>\n<p>Re-entrant calls to this method are not allowed; callers of this method\nare required to wait for the returned future to complete before calling\nthis method again. Attempts to do otherwise will result in a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> error being thrown.<\/p>\n<p>The <code>additionalTime<\/code> argument is used by the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> implementation to increase the\ncurrent timeout. See <a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a> for\ndetails. The value is ignored by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "additionalTime",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/runAsync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; runAsync&lt;T&gt;(\n  Future&lt;T&gt; callback(), {\n  Duration additionalTime = const Duration(milliseconds: 1000),\n}) async {\n  assert(() {\n    if (!_runningAsyncTasks)\n      return true;\n    throw test_package.TestFailure(\n        'Reentrant call to runAsync() denied.\\n'\n        'runAsync() was called, then before its future completed, it '\n        'was called again. You must wait for the first returned future '\n        'to complete before calling runAsync() again.'\n    );\n  }());\n\n  _runningAsyncTasks = true;\n  try {\n    return await callback();\n  } catch (error, stack) {\n    FlutterError.reportError(FlutterErrorDetails(\n      exception: error,\n      stack: stack,\n      library: 'Flutter test framework',\n      context: 'while running async test code',\n    ));\n    return null;\n  } finally {\n    _runningAsyncTasks = false;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runTest",
                    "type": "dart:async.Future",
                    "desc": "<p>Call the testBody inside a <a href=\"quiver.testing.async\/FakeAsync-class.html\">FakeAsync<\/a> scope on which <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html\">pump<\/a> can\nadvance time.<\/p>\n<p>Returns a future which completes when the test has run.<\/p>\n<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> and <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a> functions to\nrun a test.<\/p>\n<p>The <code>invariantTester<\/code> argument is called after the <code>testBody<\/code>'s <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes. If it throws, then the test is marked as failed.<\/p>\n<p>The <code>description<\/code> is used by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> to\nshow a label on the screen during the test. The description comes from\nthe value passed to <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a>. It must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "testBody",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "invariantTester",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/runTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; runTest(Future&lt;void&gt; testBody(), VoidCallback invariantTester, { String description = '' }) async {\n  assert(description != null);\n  assert(!inTest);\n  _inTest = true;\n  renderView._setDescription(description);\n  return _runTest(testBody, invariantTester, description);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scheduleForcedFrame",
                    "type": "",
                    "desc": "<p>Schedules a new frame by calling <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleFrame.html\">Window.scheduleFrame<\/a>.<\/p>\n<p>After this is called, the engine will call <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/handleBeginFrame.html\">handleBeginFrame<\/a>, even if\nframes would normally not be scheduled by <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleFrame.html\">scheduleFrame<\/a> (e.g. even if\nthe device's screen is turned off).<\/p>\n<p>The framework uses this to force a frame to be rendered at the correct\nsize when the phone is rotated, so that a correctly-sized rendering is\navailable when the screen is turned back on.<\/p>\n<p>To have a stack trace printed to the console any time this function\nschedules a frame, set <a href=\"scheduler\/debugPrintScheduleFrameStacks.html\">debugPrintScheduleFrameStacks<\/a> to true.<\/p>\n<p>Prefer using <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleFrame.html\">scheduleFrame<\/a> unless it is imperative that a frame be\nscheduled immediately, since using <code>scheduleForceFrame<\/code> will cause\nsignificantly higher battery usage when the device should be idle.<\/p>\n<p>Consider using <a href=\"scheduler\/SchedulerBinding\/scheduleWarmUpFrame.html\">scheduleWarmUpFrame<\/a> instead if the goal is to update the\nrendering as soon as possible (e.g. at application startup).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleForcedFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid scheduleForcedFrame() {\n  if (framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.benchmark)\n    return; \/\/ In benchmark mode, don't actually schedule any engine frames.\n  super.scheduleForcedFrame();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scheduleFrame",
                    "type": "",
                    "desc": "<p>If necessary, schedules a new frame by calling\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleFrame.html\">Window.scheduleFrame<\/a>.<\/p>\n<p>After this is called, the engine will (eventually) call\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/handleBeginFrame.html\">handleBeginFrame<\/a>. (This call might be delayed, e.g. if the device's\nscreen is turned off it will typically be delayed until the screen is on\nand the application is visible.) Calling this during a frame forces\nanother frame to be scheduled, even if the current frame has not yet\ncompleted.<\/p>\n<p>Scheduled frames are serviced when triggered by a \"Vsync\" signal provided\nby the operating system. The \"Vsync\" signal, or vertical synchronization\nsignal, was historically related to the display refresh, at a time when\nhardware physically moved a beam of electrons vertically between updates\nof the display. The operation of contemporary hardware is somewhat more\nsubtle and complicated, but the conceptual \"Vsync\" refresh signal continue\nto be used to indicate when applications should update their rendering.<\/p>\n<p>To have a stack trace printed to the console any time this function\nschedules a frame, set <a href=\"scheduler\/debugPrintScheduleFrameStacks.html\">debugPrintScheduleFrameStacks<\/a> to true.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleForcedFrame.html\">scheduleForcedFrame<\/a>, which ignores the <a href=\"scheduler\/SchedulerBinding\/lifecycleState.html\">lifecycleState<\/a> when\nscheduling a frame.<\/li>\n<li>\n<a href=\"scheduler\/SchedulerBinding\/scheduleWarmUpFrame.html\">scheduleWarmUpFrame<\/a>, which ignores the \"Vsync\" signal entirely and\ntriggers a frame immediately.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/scheduleFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid scheduleFrame() {\n  if (framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.benchmark)\n    return; \/\/ In benchmark mode, don't actually schedule any engine frames.\n  super.scheduleFrame();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "clock",
                    "type": "quiver.time.Clock",
                    "types": [],
                    "desc": "<p>The current time.<\/p>\n<p>In the automated test environment (<code>flutter test<\/code>), this is a fake clock\nthat begins in January 2015 at the start of the test and advances each\ntime <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html\">pump<\/a> is called with a non-zero duration.<\/p>\n<p>In the live testing environment (<code>flutter run<\/code>), this object shows the\nactual current wall-clock time.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/clock.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nClock get clock =&gt; const Clock();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultTestTimeout",
                    "type": "test_api.Timeout",
                    "types": [],
                    "desc": "<p>The default test timeout for tests when using this binding.<\/p>\n<p>The <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> layers in an additional timeout\nmechanism beyond this, with much more aggressive timeouts. See\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/defaultTestTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ntest_package.Timeout get defaultTestTimeout =&gt; test_package.Timeout.none;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "deviceEventDispatcher",
                    "type": "gestures.HitTestDispatcher",
                    "types": [],
                    "desc": "<p>An object to which real device events should be routed.<\/p>\n<p>Normally, device events are silently dropped. However, if this property is\nset to a non-null value, then the events will be routed to its\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/dispatchEvent.html\">HitTestDispatcher.dispatchEvent<\/a> method instead.<\/p>\n<p>Events dispatched by <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> are not affected by this.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/deviceEventDispatcher.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HitTestDispatcher deviceEventDispatcher\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "framePolicy",
                    "type": "flutter_test.LiveTestWidgetsFlutterBindingFramePolicy",
                    "types": [],
                    "desc": "<p>Whether to have <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html\">pump<\/a> with a duration only pump a single frame\n(as would happen in a normal test environment using\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a>), or whether to instead\npump every frame that the system requests during any\nasynchronous pause in the test (as would normally happen when\nrunning an application with <a href=\"widgets\/WidgetsFlutterBinding-class.html\">WidgetsFlutterBinding<\/a>).<\/p>\n<ul>\n<li>\n<p><a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.fadePointers<\/a> is the default\nbehavior, which is to only pump once, except when there has been some\nactivity with <a href=\"flutter_test\/TestPointer-class.html\">TestPointer<\/a>s, in which case those are shown and may pump\nadditional frames.<\/p>\n<\/li>\n<li>\n<p><a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps<\/a> is the strictest\nbehavior, which is to only pump once. This most closely matches the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> (<code>flutter test<\/code>) behavior.<\/p>\n<\/li>\n<li>\n<p><a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.fullyLive<\/a> allows all frame\nrequests from the engine to be serviced, even those the test did not\nexplicitly pump.<\/p>\n<\/li>\n<li>\n<p><a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.benchmark<\/a> allows all frame\nrequests from the engine to be serviced, and allows all frame requests\nthat are artificially triggered to be serviced, but prevents the\nframework from requesting any frames from the engine itself. The\n<a href=\"scheduler\/SchedulerBinding\/hasScheduledFrame.html\">SchedulerBinding.hasScheduledFrame<\/a> property will never be true in this\nmode. This can cause unexpected effects. For instance,\n<a href=\"flutter_test\/WidgetTester\/pumpAndSettle.html\">WidgetTester.pumpAndSettle<\/a> does not function in this mode, as it\nrelies on the <a href=\"scheduler\/SchedulerBinding\/hasScheduledFrame.html\">SchedulerBinding.hasScheduledFrame<\/a> property to determine\nwhen the application has \"settled\".<\/p>\n<\/li>\n<\/ul>\n<p>Setting this to anything other than\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps<\/a> means pumping extra\nframes, which might involve calling builders more, or calling paint\ncallbacks more, etc, which might interfere with the test. If you know your\ntest file wouldn't be affected by this, you can set it to\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.fullyLive<\/a> persistently in that\nparticular test file. To set this to\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.fullyLive<\/a> while still allowing\nthe test file to work as a normal test, add the following code to your\ntest file at the top of your <code>void main() { }<\/code> function, before calls to\n<a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();\nif (binding is LiveTestWidgetsFlutterBinding)\n  binding.framePolicy = LiveTestWidgetsFlutterBindingFramePolicy.fullyLive;\n<\/code><\/pre>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/framePolicy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LiveTestWidgetsFlutterBindingFramePolicy framePolicy = LiveTestWidgetsFlutterBindingFramePolicy.fadePointers\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inTest",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether there is currently a test executing.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/inTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get inTest =&gt; _inTest;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "microtaskCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of outstanding microtasks in the queue.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/microtaskCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get microtaskCount {\n  \/\/ The Dart SDK doesn't report this number.\n  assert(false, 'microtaskCount cannot be reported when running in real time');\n  return -1;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "renderView",
                    "type": "",
                    "types": [],
                    "desc": "<p>The render tree that's attached to the output surface.<\/p>\n        ",
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBinding\/renderView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_LiveTestRenderView get renderView =&gt; super.renderView;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/LiveTestWidgetsFlutterBinding-class.html",
            "desc": "<p>A variant of <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a> for executing tests in\nthe <code>flutter run<\/code> environment, on a device. This is intended to\nallow interactive test development.<\/p>\n<p>This is not the way to run a remote-control test. To run a test on\na device from a development computer, see the <a href=\"flutter_driver\/flutter_driver-library.html\">flutter_driver<\/a>\npackage and the <code>flutter drive<\/code> command.<\/p>\n<p>When running tests using <code>flutter run<\/code>, consider adding the\n<code>--use-test-fonts<\/code> argument so that the fonts used match those used under\n<code>flutter test<\/code>. (This forces all text to use the \"Ahem\" font, which is a\nfont that covers ASCII characters and gives them all the appearance of a\nsquare whose size equals the font size.)<\/p>\n<p>This binding overrides the default <a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a> behavior to ensure\nthat tests work in the same way in this environment as they would under the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a>. To override this (and see intermediate\nframes that the test does not explicitly trigger), set <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/framePolicy.html\">framePolicy<\/a> to\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.fullyLive<\/a>. (This is likely to\nmake tests fail, though, especially if e.g. they test how many times a\nparticular widget was built.) The default behavior is to show pumped frames\nand a few additional frames when pointers are triggered (to animate the\npointer crosshairs).<\/p>\n<p>This binding does not support the <a href=\"flutter_test\/EnginePhase-class.html\">EnginePhase<\/a> argument to\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/pump.html\">pump<\/a>. (There would be no point setting it to a value that\ndoesn't trigger a paint, since then you could not see anything\nanyway.)<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LiveTestWidgetsFlutterBinding"
        },
        {
            "type": "",
            "name": "flutter_test.LiveTestWidgetsFlutterBindingFramePolicy",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveTestWidgetsFlutterBindingFramePolicy",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html",
            "desc": "<p>Available policies for how a <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> should paint\nframes.<\/p>\n<p>These values are set on the binding's\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding\/framePolicy.html\">LiveTestWidgetsFlutterBinding.framePolicy<\/a> property. The default is\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">fadePointers<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "LiveTestWidgetsFlutterBindingFramePolicy"
        },
        {
            "name": "flutter_test.LiveWidgetController",
            "extends": [
                "flutter_test.WidgetController",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "LiveWidgetController",
                    "type": "",
                    "desc": "<p>Creates a widget controller that uses the given binding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveWidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "binding",
                            "type": "widgets.WidgetsBinding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/LiveWidgetController\/LiveWidgetController.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LiveWidgetController(WidgetsBinding binding) : super(binding);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Called to indicate that time should advance.<\/p>\n<p>This is invoked by <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a>, for instance, so that the sequence of\npointer events occurs over time.<\/p>\n<p>The <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> subclass implements this by deferring to the <a href=\"flutter_test\/WidgetController\/binding.html\">binding<\/a>.<\/p>\n<p>See also <a href=\"scheduler\/SchedulerBinding\/endOfFrame.html\">SchedulerBinding.endOfFrame<\/a>, which returns a future that could\nbe appropriate to return in the implementation of this method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LiveWidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LiveWidgetController\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; pump(Duration duration) async {\n  if (duration != null)\n    await Future&lt;void&gt;.delayed(duration);\n  binding.scheduleFrame();\n  await binding.endOfFrame;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/LiveWidgetController-class.html",
            "desc": "<p>Variant of <a href=\"flutter_test\/WidgetController-class.html\">WidgetController<\/a> that can be used in tests running\non a device.<\/p>\n<p>This is used, for instance, by <a href=\"flutter_driver\/FlutterDriver-class.html\">FlutterDriver<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LiveWidgetController"
        },
        {
            "name": "flutter_test.LocalFileComparator",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "LocalFileComparator",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"flutter_test\/LocalFileComparator-class.html\">LocalFileComparator<\/a> for the specified <code>testFile<\/code>.<\/p>\n<p>Golden file keys will be interpreted as file paths relative to the\ndirectory in which <code>testFile<\/code> resides.<\/p>\n<p>The <code>testFile<\/code> URL must represent a file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LocalFileComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "testFile",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pathStyle",
                            "type": "path.Style",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/LocalFileComparator\/LocalFileComparator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LocalFileComparator(Uri testFile, {path.Style pathStyle})\n  : basedir = _getBasedir(testFile, pathStyle),\n    _path = _getPath(pathStyle);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compare",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Compares <code>imageBytes<\/code> against the golden file identified by <code>golden<\/code>.<\/p>\n<p>The returned future completes with a boolean value that indicates whether\n<code>imageBytes<\/code> matches the golden file's bytes within the tolerance defined\nby the comparator.<\/p>\n<p>In the case of comparison mismatch, the comparator may choose to throw a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> if it wants to control the failure message.<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are loaded\nis left up to the implementation class. For instance, some implementations\nmay load files from the local file system, whereas others may load files\nover the network or from a remote repository.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LocalFileComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LocalFileComparator\/compare.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; compare(Uint8List imageBytes, Uri golden) async {\n  final File goldenFile = _getFile(golden);\n  if (!goldenFile.existsSync()) {\n    throw test_package.TestFailure('Could not be compared against non-existent file: \"$golden\"');\n  }\n  final List&lt;int&gt; goldenBytes = await goldenFile.readAsBytes();\n  return _areListsEqual&lt;int&gt;(imageBytes, goldenBytes);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "update",
                    "type": "dart:async.Future",
                    "desc": "<p>Updates the golden file identified by <code>golden<\/code> with <code>imageBytes<\/code>.<\/p>\n<p>This will be invoked in lieu of <a href=\"flutter_test\/LocalFileComparator\/compare.html\">compare<\/a> when <a href=\"flutter_test\/autoUpdateGoldenFiles.html\">autoUpdateGoldenFiles<\/a>\nis <code>true<\/code> (which gets set automatically by the test framework when the\nuser runs <code>flutter test --update-goldens<\/code>).<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are written\nis left up to the implementation class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.LocalFileComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/LocalFileComparator\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; update(Uri golden, Uint8List imageBytes) async {\n  final File goldenFile = _getFile(golden);\n  await goldenFile.parent.create(recursive: true);\n  await goldenFile.writeAsBytes(imageBytes, flush: true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "basedir",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The directory in which the test was loaded.<\/p>\n<p>Golden file keys will be interpreted as file paths relative to this\ndirectory.<\/p>\n        ",
                    "memberOf": "flutter_test.LocalFileComparator",
                    "isConstant": false,
                    "href": "flutter_test\/LocalFileComparator\/basedir.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri basedir\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/LocalFileComparator-class.html",
            "desc": "<p>The default <a href=\"flutter_test\/GoldenFileComparator-class.html\">GoldenFileComparator<\/a> implementation for <code>flutter test<\/code>.<\/p>\n<p>This comparator loads golden files from the local file system, treating the\ngolden key as a relative path from the test file's directory.<\/p>\n<p>This comparator performs a very simplistic comparison, doing a byte-for-byte\ncomparison of the encoded PNGs, returning true only if there's an exact\nmatch. This means it will fail the test if two PNGs represent the same\npixels but are encoded differently.<\/p>\n<p>When using <code>flutter test --update-goldens<\/code>, <a href=\"flutter_test\/LocalFileComparator-class.html\">LocalFileComparator<\/a>\nupdates the files on disk to match the rendering.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LocalFileComparator"
        },
        {
            "name": "flutter_test.MatchFinder",
            "extends": [
                "flutter_test.Finder",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "MatchFinder",
                    "type": "",
                    "desc": "<p>Initializes a predicate-based Finder. Used by subclasses to initialize the\n<code>skipOffstage<\/code> property.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.MatchFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "skipOffstage",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/MatchFinder\/MatchFinder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MatchFinder({ bool skipOffstage = true }) : super(skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "apply",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "desc": "<p>Returns all the elements in the given list that match this\nfinder's pattern.<\/p>\n<p>When implementing your own Finders that inherit directly from\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, this is the main method to override. If your finder\ncan efficiently be described just in terms of a predicate\nfunction, consider extending <a href=\"flutter_test\/MatchFinder-class.html\">MatchFinder<\/a> instead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.MatchFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "candidates",
                            "type": "dart:core.Iterable<widgets.Element>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "widgets.Element"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/MatchFinder\/apply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;Element&gt; apply(Iterable&lt;Element&gt; candidates) {\n  return candidates.where(matches);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ]
                },
                {
                    "name": "matches",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given element matches the pattern.<\/p>\n<p>When implementing your own MatchFinder, this is the main method to override.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.MatchFinder",
                    "sig": "",
                    "params": [
                        {
                            "name": "candidate",
                            "type": "widgets.Element",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/MatchFinder\/matches.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Element candidate);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/MatchFinder-class.html",
            "desc": "<p>Searches a widget tree and returns nodes that match a particular\npattern.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MatchFinder"
        },
        {
            "name": "flutter_test.MinimumTapTargetGuideline",
            "extends": [
                "flutter_test.AccessibilityGuideline",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "evaluate",
                    "type": "dart:async.FutureOr<flutter_test.Evaluation>",
                    "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.MinimumTapTargetGuideline",
                    "sig": "",
                    "params": [
                        {
                            "name": "tester",
                            "type": "flutter_test.WidgetTester",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/MinimumTapTargetGuideline\/evaluate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFutureOr&lt;Evaluation&gt; evaluate(WidgetTester tester) {\n  final SemanticsNode root = tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n  Evaluation traverse(SemanticsNode node) {\n    Evaluation result = const Evaluation.pass();\n    node.visitChildren((SemanticsNode child) {\n      result += traverse(child);\n      return true;\n    });\n    if (node.isMergedIntoParent)\n      return result;\n    final SemanticsData data = node.getSemanticsData();\n    \/\/ Skip node if it has no actions, or is marked as hidden.\n    if ((!data.hasAction(ui.SemanticsAction.longPress)\n      &amp;&amp; !data.hasAction(ui.SemanticsAction.tap))\n      || data.hasFlag(ui.SemanticsFlag.isHidden))\n      return result;\n    Rect paintBounds = node.rect;\n    SemanticsNode current = node;\n    while (current != null) {\n      if (current.transform != null)\n        paintBounds = MatrixUtils.transformRect(current.transform, paintBounds);\n      current = current.parent;\n    }\n    \/\/ skip node if it is touching the edge of the screen, since it might\n    \/\/ be partially scrolled offscreen.\n    const double delta = 0.001;\n    if (paintBounds.left &lt;= delta\n      || paintBounds.top &lt;= delta\n      || (paintBounds.bottom - tester.binding.window.physicalSize.height).abs() &lt;= delta\n      || (paintBounds.right - tester.binding.window.physicalSize.width).abs() &lt;= delta)\n      return result;\n    \/\/ shrink by device pixel ratio.\n    final Size candidateSize = paintBounds.size \/ tester.binding.window.devicePixelRatio;\n    if (candidateSize.width &lt; size.width || candidateSize.height &lt; size.height)\n      result += Evaluation.fail(\n        '$node: expected tap target size of at least $size, but found $candidateSize\\n'\n        'See also: $link');\n    return result;\n  }\n  return traverse(root);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.FutureOr",
                        "flutter_test.Evaluation"
                    ]
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
                    "memberOf": "flutter_test.MinimumTapTargetGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/MinimumTapTargetGuideline\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get description =&gt; 'Tappable objects should be at least $size';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "link",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A link describing the tap target guidelines for a platform.<\/p>\n        ",
                    "memberOf": "flutter_test.MinimumTapTargetGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/MinimumTapTargetGuideline\/link.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String link\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The minimum allowed size of a tapable node.<\/p>\n        ",
                    "memberOf": "flutter_test.MinimumTapTargetGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/MinimumTapTargetGuideline\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size size\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/MinimumTapTargetGuideline-class.html",
            "desc": "<p>A guideline which enforces that all tapable semantics nodes have a minimum\nsize.<\/p>\n<p>Each platform defines its own guidelines for minimum tap areas.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MinimumTapTargetGuideline"
        },
        {
            "name": "flutter_test.MinimumTextContrastGuideline",
            "extends": [
                "flutter_test.AccessibilityGuideline",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "evaluate",
                    "type": "dart:async.Future<flutter_test.Evaluation>",
                    "desc": "<p>Evaluate whether the current state of the <code>tester<\/code> conforms to the rule.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.MinimumTextContrastGuideline",
                    "sig": "",
                    "params": [
                        {
                            "name": "tester",
                            "type": "flutter_test.WidgetTester",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/MinimumTextContrastGuideline\/evaluate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Evaluation&gt; evaluate(WidgetTester tester) async {\n  final SemanticsNode root = tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n  final RenderView renderView = tester.binding.renderView;\n  final OffsetLayer layer = renderView.layer;\n  ui.Image image;\n  final ByteData byteData = await tester.binding.runAsync&lt;ByteData&gt;(() async {\n    \/\/ Needs to be the same pixel ratio otherwise our dimensions won't match the\n    \/\/ last transform layer.\n    image = await layer.toImage(renderView.paintBounds, pixelRatio: 1.0);\n    return image.toByteData();\n  });\n\n  Future&lt;Evaluation&gt; evaluateNode(SemanticsNode node) async {\n    Evaluation result = const Evaluation.pass();\n    if (node.isInvisible || node.isMergedIntoParent || node.hasFlag(ui.SemanticsFlag.isHidden))\n      return result;\n    final SemanticsData data = node.getSemanticsData();\n    final List&lt;SemanticsNode&gt; children = &lt;SemanticsNode&gt;[];\n    node.visitChildren((SemanticsNode child) {\n      children.add(child);\n      return true;\n    });\n    for (SemanticsNode child in children)\n      result += await evaluateNode(child);\n    if (_shouldSkipNode(data))\n      return result;\n\n    \/\/ We need to look up the inherited text properties to determine the\n    \/\/ contrast ratio based on text size\/weight.\n    double fontSize;\n    bool isBold;\n    final String text = (data.label?.isEmpty == true) ? data.value : data.label;\n    final List&lt;Element&gt; elements = find.text(text).hitTestable().evaluate().toList();\n    if (elements.length == 1) {\n      final Element element = elements.single;\n      final Widget widget = element.widget;\n      final DefaultTextStyle defaultTextStyle = DefaultTextStyle.of(element);\n      if (widget is Text) {\n        TextStyle effectiveTextStyle = widget.style;\n        if (widget.style == null || widget.style.inherit)\n          effectiveTextStyle = defaultTextStyle.style.merge(widget.style);\n        fontSize = effectiveTextStyle.fontSize;\n        isBold = effectiveTextStyle.fontWeight == FontWeight.bold;\n      } else if (widget is EditableText) {\n        isBold = widget.style.fontWeight == FontWeight.bold;\n        fontSize = widget.style.fontSize;\n      } else {\n        assert(false);\n      }\n    } else if (elements.length &gt; 1) {\n      return Evaluation.fail('Multiple nodes with the same label: ${data.label}\\n');\n    } else {\n      \/\/ If we can't find the text node then assume the label does not\n      \/\/ correspond to actual text.\n      return result;\n    }\n\n    \/\/ Transform local coordinate to screen coordinates.\n    Rect paintBounds = node.rect;\n    SemanticsNode current = node;\n    while (current != null &amp;&amp; current.parent != null) {\n      if (current.transform != null)\n        paintBounds = MatrixUtils.transformRect(current.transform, paintBounds);\n      paintBounds = paintBounds.shift(current.parent?.rect?.topLeft ?? Offset.zero);\n      current = current.parent;\n    }\n    if (_isNodeOffScreen(paintBounds))\n      return result;\n    final List&lt;int&gt; subset = _subsetToRect(byteData, paintBounds, image.width, image.height);\n    \/\/ Node was too far off screen.\n    if (subset.isEmpty)\n      return result;\n    final _ContrastReport report = _ContrastReport(subset);\n    final double contrastRatio = report.contrastRatio();\n    const double delta = -0.01;\n    double targetContrastRatio;\n    if ((isBold &amp;&amp; fontSize &gt; kBoldTextMinimumSize) || (fontSize ?? 12.0) &gt; kLargeTextMinimumSize) {\n      targetContrastRatio = kMinimumRatioLargeText;\n    } else {\n      targetContrastRatio = kMinimumRatioNormalText;\n    }\n    if (contrastRatio - targetContrastRatio &gt;= delta)\n      return result + const Evaluation.pass();\n    return result + Evaluation.fail(\n      '$node:\\nExpected contrast ratio of at least '\n      '$targetContrastRatio but found ${contrastRatio.toStringAsFixed(2)} for a font size of $fontSize. '\n      'The computed foreground color was: ${report.lightColor}, '\n      'The computed background color was: ${report.darkColor}\\n'\n      'See also: https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html'\n    );\n  }\n  return evaluateNode(root);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "flutter_test.Evaluation"
                    ]
                }
            ],
            "props": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A description of the policy restrictions and criteria.<\/p>\n        ",
                    "memberOf": "flutter_test.MinimumTextContrastGuideline",
                    "isConstant": false,
                    "href": "flutter_test\/MinimumTextContrastGuideline\/description.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get description =&gt; 'Text contrast should follow WCAG guidelines';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "flutter_test\/MinimumTextContrastGuideline\/kBoldTextMinimumSize-constant.html",
                    "desc": "<p>The minimum text size for bold text to be considered large for contrast\nchecking.<\/p>\n<p>Defined by <a href=\"http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kBoldTextMinimumSize = 14\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kBoldTextMinimumSize",
                    "memberOf": "flutter_test.MinimumTextContrastGuideline"
                },
                {
                    "type": "",
                    "href": "flutter_test\/MinimumTextContrastGuideline\/kLargeTextMinimumSize-constant.html",
                    "desc": "<p>The minimum text size considered large for contrast checking.<\/p>\n<p>Defined by <a href=\"http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kLargeTextMinimumSize = 18\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kLargeTextMinimumSize",
                    "memberOf": "flutter_test.MinimumTextContrastGuideline"
                },
                {
                    "type": "",
                    "href": "flutter_test\/MinimumTextContrastGuideline\/kMinimumRatioLargeText-constant.html",
                    "desc": "<p>The minimum contrast ratio for large text.<\/p>\n<p>Defined by <a href=\"http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double kMinimumRatioLargeText = 3.0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kMinimumRatioLargeText",
                    "memberOf": "flutter_test.MinimumTextContrastGuideline"
                },
                {
                    "type": "",
                    "href": "flutter_test\/MinimumTextContrastGuideline\/kMinimumRatioNormalText-constant.html",
                    "desc": "<p>The minimum contrast ratio for normal text.<\/p>\n<p>Defined by <a href=\"http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double kMinimumRatioNormalText = 4.5\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kMinimumRatioNormalText",
                    "memberOf": "flutter_test.MinimumTextContrastGuideline"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/MinimumTextContrastGuideline-class.html",
            "desc": "<p>A guideline which verifies that all nodes that contribute semantics via text\nmeet minimum contrast levels.<\/p>\n<p>The guidelines are defined by the Web Content Accessibility Guidelines,\n<a href=\"http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">http:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MinimumTextContrastGuideline"
        },
        {
            "name": "flutter_test.TestAsyncUtils",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "guard",
                    "type": "dart:async.Future",
                    "desc": "<p>Calls the given callback in a new async scope. The callback argument is\nthe asynchronous body of the calling method. The calling method is said to\nbe \"guarded\". Nested calls to guarded methods from within the body of this\none are fine, but calls to other guarded methods from outside the body of\nthis one before this one has finished will throw an exception.<\/p>\n<p>This method first calls <a href=\"flutter_test\/TestAsyncUtils\/guardSync.html\">guardSync<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestAsyncUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "body",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestAsyncUtils\/guard.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;T&gt; guard&lt;T&gt;(Future&lt;T&gt; body()) {\n  guardSync();\n  final Zone zone = Zone.current.fork(\n    zoneValues: &lt;dynamic, dynamic&gt;{\n      _scopeStack: true, \/\/ so we can recognize this as our own zone\n    }\n  );\n  final _AsyncScope scope = _AsyncScope(StackTrace.current, zone);\n  _scopeStack.add(scope);\n  final Future&lt;T&gt; result = scope.zone.run&lt;Future&lt;T&gt;&gt;(body);\n  T resultValue; \/\/ This is set when the body of work completes with a result value.\n  Future&lt;T&gt; completionHandler(dynamic error, StackTrace stack) {\n    assert(_scopeStack.isNotEmpty);\n    assert(_scopeStack.contains(scope));\n    bool leaked = false;\n    _AsyncScope closedScope;\n    final StringBuffer message = StringBuffer();\n    while (_scopeStack.isNotEmpty) {\n      closedScope = _scopeStack.removeLast();\n      if (closedScope == scope)\n        break;\n      if (!leaked) {\n        message.writeln('Asynchronous call to guarded function leaked. You must use \"await\" with all Future-returning test APIs.');\n        leaked = true;\n      }\n      final _StackEntry originalGuarder = _findResponsibleMethod(closedScope.creationStack, 'guard', message);\n      if (originalGuarder != null) {\n        message.writeln(\n          'The test API method \"${originalGuarder.methodName}\" '\n          'from class ${originalGuarder.className} '\n          'was called from ${originalGuarder.callerFile} '\n          'on line ${originalGuarder.callerLine}, '\n          'but never completed before its parent scope closed.'\n        );\n      }\n    }\n    if (leaked) {\n      if (error != null) {\n        message.writeln('An uncaught exception may have caused the guarded function leak. The exception was:');\n        message.writeln('$error');\n        message.writeln('The stack trace associated with this exception was:');\n        FlutterError.defaultStackFilter(stack.toString().trimRight().split('\\n')).forEach(message.writeln);\n      }\n      throw FlutterError(message.toString().trimRight());\n    }\n    if (error != null)\n      return Future&lt;T&gt;.error(error, stack);\n    return Future&lt;T&gt;.value(resultValue);\n  }\n  return result.then&lt;T&gt;(\n    (T value) {\n      resultValue = value;\n      return completionHandler(null, null);\n    },\n    onError: completionHandler,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "guardSync",
                    "type": "",
                    "desc": "<p>Verifies that there are no guarded methods currently pending (see <a href=\"flutter_test\/TestAsyncUtils\/guard.html\">guard<\/a>).<\/p>\n<p>If a guarded method is currently pending, and this is not a call nested\nfrom inside that method's body (directly or indirectly), then this method\nwill throw a detailed exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestAsyncUtils",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestAsyncUtils\/guardSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void guardSync() {\n  if (_scopeStack.isEmpty) {\n    \/\/ No scopes open, so we must be fine.\n    return;\n  }\n  \/\/ Find the current TestAsyncUtils scope zone so we can see if it's the one we expect.\n  final Zone zone = _currentScopeZone;\n  if (zone == _scopeStack.last.zone) {\n    \/\/ We're still in the current scope zone. All good.\n    return;\n  }\n  \/\/ If we get here, we know we've got a conflict on our hands.\n  \/\/ We got an async barrier, but the current zone isn't the last scope that\n  \/\/ we pushed on the stack.\n  \/\/ Find which scope the conflict happened in, so that we know\n  \/\/ which stack trace to report the conflict as starting from.\n  \/\/\n  \/\/ For example, if we called an async method A, which ran its body in a\n  \/\/ guarded block, and in its body it ran an async method B, which ran its\n  \/\/ body in a guarded block, but we didn't await B, then in A's block we ran\n  \/\/ an async method C, which ran its body in a guarded block, then we should\n  \/\/ complain about the call to B then the call to C. BUT. If we called an async\n  \/\/ method A, which ran its body in a guarded block, and in its body it ran\n  \/\/ an async method B, which ran its body in a guarded block, but we didn't\n  \/\/ await A, and then at the top level we called a method D, then we should\n  \/\/ complain about the call to A then the call to D.\n  \/\/\n  \/\/ In both examples, the scope stack would have two scopes. In the first\n  \/\/ example, the current zone would be the zone of the _scopeStack[0] scope,\n  \/\/ and we would want to show _scopeStack[1]'s creationStack. In the second\n  \/\/ example, the current zone would not be in the _scopeStack, and we would\n  \/\/ want to show _scopeStack[0]'s creationStack.\n  int skipCount = 0;\n  _AsyncScope candidateScope = _scopeStack.last;\n  _AsyncScope scope;\n  do {\n    skipCount += 1;\n    scope = candidateScope;\n    if (skipCount &gt;= _scopeStack.length) {\n      if (zone == null)\n        break;\n      \/\/ Some people have reported reaching this point, but it's not clear\n      \/\/ why. For now, just silently return.\n      \/\/ TODO(ianh): If we ever get a test case that shows how we reach\n      \/\/ this point, reduce it and report the error if there is one.\n      return;\n    }\n    candidateScope = _scopeStack[_scopeStack.length - skipCount - 1];\n    assert(candidateScope != null);\n    assert(candidateScope.zone != null);\n  } while (candidateScope.zone != zone);\n  assert(scope != null);\n  final StringBuffer message = StringBuffer();\n  message.writeln('Guarded function conflict. You must use \"await\" with all Future-returning test APIs.');\n  final _StackEntry originalGuarder = _findResponsibleMethod(scope.creationStack, 'guard', message);\n  final _StackEntry collidingGuarder = _findResponsibleMethod(StackTrace.current, 'guardSync', message);\n  if (originalGuarder != null &amp;&amp; collidingGuarder != null) {\n    String originalName;\n    if (originalGuarder.className == null) {\n      originalName = '(${originalGuarder.methodName}) ';\n      message.writeln(\n        'The guarded \"${originalGuarder.methodName}\" function '\n        'was called from ${originalGuarder.callerFile} '\n        'on line ${originalGuarder.callerLine}.'\n      );\n    } else {\n      originalName = '(${originalGuarder.className}.${originalGuarder.methodName}) ';\n      message.writeln(\n        'The guarded method \"${originalGuarder.methodName}\" '\n        'from class ${originalGuarder.className} '\n        'was called from ${originalGuarder.callerFile} '\n        'on line ${originalGuarder.callerLine}.'\n      );\n    }\n    final String again = (originalGuarder.callerFile == collidingGuarder.callerFile) &amp;&amp;\n                         (originalGuarder.callerLine == collidingGuarder.callerLine) ?\n                         'again ' : '';\n    String collidingName;\n    if ((originalGuarder.className == collidingGuarder.className) &amp;&amp;\n        (originalGuarder.methodName == collidingGuarder.methodName)) {\n      originalName = '';\n      collidingName = '';\n      message.writeln(\n        'Then, it '\n        'was called ${again}from ${collidingGuarder.callerFile} '\n        'on line ${collidingGuarder.callerLine}.'\n      );\n    } else if (collidingGuarder.className == null) {\n      collidingName = '(${collidingGuarder.methodName}) ';\n      message.writeln(\n        'Then, the \"${collidingGuarder.methodName}\" function '\n        'was called ${again}from ${collidingGuarder.callerFile} '\n        'on line ${collidingGuarder.callerLine}.'\n      );\n    } else {\n      collidingName = '(${collidingGuarder.className}.${collidingGuarder.methodName}) ';\n      message.writeln(\n        'Then, the \"${collidingGuarder.methodName}\" method '\n        '${originalGuarder.className == collidingGuarder.className ? \"(also from class ${collidingGuarder.className})\"\n                                                                   : \"from class ${collidingGuarder.className}\"} '\n        'was called ${again}from ${collidingGuarder.callerFile} '\n        'on line ${collidingGuarder.callerLine}.'\n      );\n    }\n    message.writeln(\n      'The first ${originalGuarder.className == null ? \"function\" : \"method\"} $originalName'\n      'had not yet finished executing at the time that '\n      'the second ${collidingGuarder.className == null ? \"function\" : \"method\"} $collidingName'\n      'was called. Since both are guarded, and the second was not a nested call inside the first, the '\n      'first must complete its execution before the second can be called. Typically, this is achieved by '\n      'putting an \"await\" statement in front of the call to the first.'\n    );\n    if (collidingGuarder.className == null &amp;&amp; collidingGuarder.methodName == 'expect') {\n      message.writeln(\n        'If you are confident that all test APIs are being called using \"await\", and '\n        'this expect() call is not being called at the top level but is itself being '\n        'called from some sort of callback registered before the ${originalGuarder.methodName} '\n        'method was called, then consider using expectSync() instead.'\n      );\n    }\n    message.writeln(\n      '\\n'\n      'When the first ${originalGuarder.className == null ? \"function\" : \"method\"} '\n      '$originalName'\n      'was called, this was the stack:'\n    );\n    message.writeln(FlutterError.defaultStackFilter(scope.creationStack.toString().trimRight().split('\\n')).join('\\n'));\n  }\n  throw FlutterError(message.toString().trimRight());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "verifyAllScopesClosed",
                    "type": "",
                    "desc": "<p>Verifies that there are no guarded methods currently pending (see <a href=\"flutter_test\/TestAsyncUtils\/guard.html\">guard<\/a>).<\/p>\n<p>This is used at the end of tests to ensure that nothing leaks out of the test.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestAsyncUtils",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestAsyncUtils\/verifyAllScopesClosed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void verifyAllScopesClosed() {\n  if (_scopeStack.isNotEmpty) {\n    final StringBuffer message = StringBuffer();\n    message.writeln('Asynchronous call to guarded function leaked. You must use \"await\" with all Future-returning test APIs.');\n    for (_AsyncScope scope in _scopeStack) {\n      final _StackEntry guarder = _findResponsibleMethod(scope.creationStack, 'guard', message);\n      if (guarder != null) {\n        message.writeln(\n          'The guarded method \"${guarder.methodName}\" '\n          '${guarder.className != null ? \"from class ${guarder.className} \" : \"\"}'\n          'was called from ${guarder.callerFile} '\n          'on line ${guarder.callerLine}, '\n          'but never completed before its parent scope closed.'\n        );\n      }\n    }\n    throw FlutterError(message.toString().trimRight());\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestAsyncUtils-class.html",
            "desc": "<p>Utility class for all the async APIs in the <code>flutter_test<\/code> library.<\/p>\n<p>This class provides checking for asynchronous APIs, allowing the library to\nverify that all the asynchronous APIs are properly <code>await<\/code>ed before calling\nanother.<\/p>\n<p>For example, it prevents this kind of code:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">tester.pump(); \/\/ forgot to call \"await\"!\ntester.pump();\n<\/code><\/pre>\n<p>...by detecting, in the second call to <code>pump<\/code>, that it should actually be:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">await tester.pump();\nawait tester.pump();\n<\/code><\/pre>\n<p>It does this while still allowing nested calls, e.g. so that you can\ncall <a href=\"flutter_test\/expect.html\">expect<\/a> from inside callbacks.<\/p>\n<p>You can use this in your own test functions, if you have some asynchronous\nfunctions that must be used with \"await\". Wrap the contents of the function\nin a call to TestAsyncUtils.guard(), as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; myTestFunction() =&gt; TestAsyncUtils.guard(() async {\n  \/\/ ...\n});\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestAsyncUtils"
        },
        {
            "type": "",
            "name": "flutter_test.TestBindingEventSource",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestBindingEventSource",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestBindingEventSource\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestBindingEventSource-class.html",
            "desc": "<p>Parts of the system that can generate pointer events that reach the test\nbinding.<\/p>\n<p>This is used to identify how to handle events in the\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a>. See\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/dispatchEvent.html\">TestWidgetsFlutterBinding.dispatchEvent<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TestBindingEventSource"
        },
        {
            "name": "flutter_test.TestExceptionReporter",
            "type": "",
            "desc": "<p>Signature for the <a href=\"flutter_test\/reportTestException.html\">reportTestException<\/a> callback.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "details",
                    "type": "foundation.FlutterErrorDetails",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "testDescription",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestExceptionReporter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef TestExceptionReporter = void Function(FlutterErrorDetails details, String testDescription);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "flutter_test.TestGesture",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "TestGesture",
                    "type": "",
                    "desc": "<p>Create a <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> without dispatching any events from it.\nThe <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> can then be manipulated to perform future actions.<\/p>\n<p>By default, the pointer identifier used is 1. This can be overridden by\nproviding the <code>pointer<\/code> argument.<\/p>\n<p>A function to use for hit testing must be provided via the <code>hitTester<\/code>\nargument, and a function to use for dispatching events must be provided\nvia the <code>dispatcher<\/code> argument.<\/p>\n<p>The device <code>kind<\/code> defaults to <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.touch<\/a>, but move events\nwhen the pointer is \"up\" require a kind other than\n<a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.touch<\/a>, like <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.mouse<\/a>, for example,\nbecause touch devices can't produce movement events when they are \"up\".<\/p>\n<p>None of the arguments may be null. The <code>dispatcher<\/code> and <code>hitTester<\/code>\narguments are required.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "dispatcher",
                            "type": "flutter_test.EventDispatcher",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hitTester",
                            "type": "flutter_test.HitTester",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "kind",
                            "type": "dart:ui.PointerDeviceKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/TestGesture\/TestGesture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestGesture({\n  @required EventDispatcher dispatcher,\n  @required HitTester hitTester,\n  int pointer = 1,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n}) : assert(dispatcher != null),\n     assert(hitTester != null),\n     assert(pointer != null),\n     assert(kind != null),\n     _dispatcher = dispatcher,\n     _hitTester = hitTester,\n     _pointer = TestPointer(pointer, kind),\n     _result = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cancel",
                    "type": "dart:async.Future",
                    "desc": "<p>End the gesture by canceling the pointer (as would happen if the\nsystem showed a modal dialog on top of the Flutter application,\nfor instance).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/cancel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; cancel() {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(_pointer._isDown);\n    await _dispatcher(_pointer.cancel(), _result);\n    assert(!_pointer._isDown);\n    _result = null;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "down",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down event at the given <code>downLocation<\/code>, caching the\nhit test result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "downLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/down.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; down(Offset downLocation) async {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    _result = _hitTester(downLocation);\n    return _dispatcher(_pointer.down(downLocation), _result);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "downWithCustomEvent",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down event at the given <code>downLocation<\/code>, caching the\nhit test result with a custom down event.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "downLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "event",
                            "type": "gestures.PointerDownEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/downWithCustomEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; downWithCustomEvent(Offset downLocation, PointerDownEvent event) async {\n  _pointer.setDownInfo(event, downLocation);\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    _result = _hitTester(downLocation);\n    return _dispatcher(event, _result);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "moveBy",
                    "type": "dart:async.Future",
                    "desc": "<p>Send a move event moving the pointer by the given offset.<\/p>\n<p>If the pointer is down, then a move event is dispatched. If the pointer is\nup, then a hover event is dispatched. Touch devices are not able to send\nhover events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/moveBy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; moveBy(Offset offset, {Duration timeStamp = Duration.zero}) {\n  return moveTo(_pointer.location + offset, timeStamp: timeStamp);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "moveTo",
                    "type": "dart:async.Future",
                    "desc": "<p>Send a move event moving the pointer to the given location.<\/p>\n<p>If the pointer is down, then a move event is dispatched. If the pointer is\nup, then a hover event is dispatched. Touch devices are not able to send\nhover events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/moveTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; moveTo(Offset location, {Duration timeStamp = Duration.zero}) {\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    if (_pointer._isDown) {\n      assert(_result != null,\n          'Move events with the pointer down must be preceeded by a down '\n          'event that captures a hit test result.');\n      return _dispatcher(_pointer.move(location, timeStamp: timeStamp), _result);\n    } else {\n      assert(_pointer.kind != PointerDeviceKind.touch,\n          'Touch device move events can only be sent if the pointer is down.');\n      return _dispatcher(_pointer.hover(location, timeStamp: timeStamp), null);\n    }\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "up",
                    "type": "dart:async.Future",
                    "desc": "<p>End the gesture by releasing the pointer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/up.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; up() {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(_pointer._isDown);\n    await _dispatcher(_pointer.up(), _result);\n    assert(!_pointer._isDown);\n    _result = null;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "updateWithCustomEvent",
                    "type": "dart:async.Future",
                    "desc": "<p>In a test, send a move event that moves the pointer by the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestGesture",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestGesture\/updateWithCustomEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nFuture&lt;void&gt; updateWithCustomEvent(PointerEvent event, { Duration timeStamp = Duration.zero }) {\n  _pointer.setDownInfo(event, event.position);\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    return _dispatcher(event, _result);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestGesture-class.html",
            "desc": "<p>A class for performing gestures in tests.<\/p>\n<p>The simplest way to create a <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> is to call\n<a href=\"flutter_test\/WidgetController\/startGesture.html\">WidgetTester.startGesture<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestGesture"
        },
        {
            "name": "flutter_test.TestPointer",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "TestPointer",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"flutter_test\/TestPointer-class.html\">TestPointer<\/a>. By default, the pointer identifier used is 1,\nhowever this can be overridden by providing an argument to the\nconstructor.<\/p>\n<p>Multiple <a href=\"flutter_test\/TestPointer-class.html\">TestPointer<\/a>s created with the same pointer identifier will\ninterfere with each other if they are used in parallel.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "kind",
                            "type": "dart:ui.PointerDeviceKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/TestPointer\/TestPointer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestPointer([this.pointer = 1, this.kind = PointerDeviceKind.touch])\n    : assert(kind != null),\n      assert(pointer != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "cancel",
                    "type": "gestures.PointerCancelEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a>.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n<p>The object is no longer usable after this method has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/cancel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerCancelEvent cancel({Duration timeStamp = Duration.zero}) {\n  assert(isDown);\n  _isDown = false;\n  return PointerCancelEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    pointer: pointer,\n    position: location,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "down",
                    "type": "gestures.PointerDownEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a> at the given location.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "newLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/down.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerDownEvent down(Offset newLocation, {Duration timeStamp = Duration.zero}) {\n  assert(!isDown);\n  _isDown = true;\n  _location = newLocation;\n  return PointerDownEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    pointer: pointer,\n    position: location,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hover",
                    "type": "gestures.PointerHoverEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a> to the given location.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n<p><a href=\"flutter_test\/TestPointer\/isDown.html\">isDown<\/a> must be false, since hover events can't be sent when the pointer\nis up.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "newLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/hover.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerHoverEvent hover(\n  Offset newLocation, {\n  Duration timeStamp = Duration.zero,\n}) {\n  assert(newLocation != null);\n  assert(timeStamp != null);\n  assert(\n      !isDown,\n      'Hover events can only be generated when the pointer is up. To '\n      'simulate movement when the pointer is down, use move() instead.');\n  assert(kind != PointerDeviceKind.touch, \"Touch pointers can't generate hover events\");\n  final Offset delta = location != null ?  newLocation - location : Offset.zero;\n  _location = newLocation;\n  return PointerHoverEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    position: newLocation,\n    delta: delta,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "move",
                    "type": "gestures.PointerMoveEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a> to the given location.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n<p><a href=\"flutter_test\/TestPointer\/isDown.html\">isDown<\/a> must be true when this is called, since move events can only\nbe generated when the pointer is down.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "newLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/move.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerMoveEvent move(Offset newLocation, {Duration timeStamp = Duration.zero}) {\n  assert(\n      isDown,\n      'Move events can only be generated when the pointer is down. To '\n      'create a movement event simulating a pointer move when the pointer is '\n      'up, use hover() instead.');\n  final Offset delta = newLocation - location;\n  _location = newLocation;\n  return PointerMoveEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    pointer: pointer,\n    position: newLocation,\n    delta: delta,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scroll",
                    "type": "gestures.PointerScrollEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerScrollEvent-class.html\">PointerScrollEvent<\/a> (e.g., scroll wheel scroll; not finger-drag\nscroll) with the given delta.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "scrollDelta",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/scroll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerScrollEvent scroll(\n  Offset scrollDelta, {\n  Duration timeStamp = Duration.zero,\n}) {\n  assert(scrollDelta != null);\n  assert(timeStamp != null);\n  assert(kind != PointerDeviceKind.touch, \"Touch pointers can't generate pointer signal events\");\n  return PointerScrollEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    position: location,\n    scrollDelta: scrollDelta,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setDownInfo",
                    "type": "dart:core.bool",
                    "desc": "<p>If a custom event is created outside of this class, this function is used\nto set the <a href=\"flutter_test\/TestPointer\/isDown.html\">isDown<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/setDownInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool setDownInfo(PointerEvent event, Offset newLocation) {\n  _location = newLocation;\n  switch (event.runtimeType) {\n    case PointerDownEvent:\n      assert(!isDown);\n      _isDown = true;\n      break;\n    case PointerUpEvent:\n    case PointerCancelEvent:\n      assert(isDown);\n      _isDown = false;\n      break;\n    default: break;\n  }\n  return isDown;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "up",
                    "type": "gestures.PointerUpEvent",
                    "desc": "<p>Create a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>.<\/p>\n<p>By default, the time stamp on the event is <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>. You can give a\nspecific time stamp by passing the <code>timeStamp<\/code> argument.<\/p>\n<p>The object is no longer usable after this method has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestPointer",
                    "sig": "",
                    "params": [
                        {
                            "name": "timeStamp",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestPointer\/up.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PointerUpEvent up({Duration timeStamp = Duration.zero}) {\n  assert(isDown);\n  _isDown = false;\n  return PointerUpEvent(\n    timeStamp: timeStamp,\n    kind: kind,\n    pointer: pointer,\n    position: location,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isDown",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the pointer simulated by this object is currently down.<\/p>\n<p>A pointer is released (goes up) by calling <a href=\"flutter_test\/TestPointer\/up.html\">up<\/a> or <a href=\"flutter_test\/TestPointer\/cancel.html\">cancel<\/a>.<\/p>\n<p>Once a pointer is released, it can no longer generate events.<\/p>\n        ",
                    "memberOf": "flutter_test.TestPointer",
                    "isConstant": false,
                    "href": "flutter_test\/TestPointer\/isDown.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDown =&gt; _isDown;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "kind",
                    "type": "dart:ui.PointerDeviceKind",
                    "types": [],
                    "desc": "<p>The kind of pointer device to simulate. Defaults to\n<a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.touch<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestPointer",
                    "isConstant": false,
                    "href": "flutter_test\/TestPointer\/kind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerDeviceKind kind\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "location",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The position of the last event sent by this object.<\/p>\n<p>If no event has ever been sent by this object, returns null.<\/p>\n        ",
                    "memberOf": "flutter_test.TestPointer",
                    "isConstant": false,
                    "href": "flutter_test\/TestPointer\/location.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get location =&gt; _location;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The pointer identifier used for events generated by this object.<\/p>\n<p>Set when the object is constructed. Defaults to 1.<\/p>\n        ",
                    "memberOf": "flutter_test.TestPointer",
                    "isConstant": false,
                    "href": "flutter_test\/TestPointer\/pointer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int pointer\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestPointer-class.html",
            "desc": "<p>A class for generating coherent artificial pointer events.<\/p>\n<p>You can use this to manually simulate individual events, but the simplest\nway to generate coherent gestures is to use <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestPointer"
        },
        {
            "name": "flutter_test.TestTextInput",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [
                {
                    "name": "onCleared",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>Called when the keyboard goes away.<\/p>\n<p>To use the methods on this API that send fake keyboard messages (such as\n<a href=\"flutter_test\/TestTextInput\/updateEditingValue.html\">updateEditingValue<\/a>, <a href=\"flutter_test\/TestTextInput\/enterText.html\">enterText<\/a>, or <a href=\"flutter_test\/TestTextInput\/receiveAction.html\">receiveAction<\/a>), the keyboard must\nfirst be requested, e.g. using <a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/onCleared.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCleared\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                }
            ],
            "methods": [
                {
                    "name": "TestTextInput",
                    "type": "",
                    "desc": "<p>Create a fake keyboard backend.<\/p>\n<p>The <code>onCleared<\/code> argument may be set to be notified of when the keyboard\nis dismissed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [
                        {
                            "name": "onCleared",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/TestTextInput\/TestTextInput.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestTextInput({ this.onCleared });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enterText",
                    "type": "",
                    "desc": "<p>Simulates the user typing the given text.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/enterText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void enterText(String text) {\n  updateEditingValue(TextEditingValue(\n    text: text,\n  ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "hide",
                    "type": "",
                    "desc": "<p>Simulates the user hiding the onscreen keyboard.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/hide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hide() {\n  _isVisible = false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "receiveAction",
                    "type": "dart:async.Future",
                    "desc": "<p>Simulates the user pressing one of the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> buttons.\nDoes not check that the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> performed is an acceptable one\nbased on the <code>inputAction<\/code> <a href=\"flutter_test\/TestTextInput\/setClientArgs.html\">setClientArgs<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [
                        {
                            "name": "action",
                            "type": "services.TextInputAction",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/receiveAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; receiveAction(TextInputAction action) async {\n  return TestAsyncUtils.guard(() {\n    \/\/ Not using the `expect` function because in the case of a FlutterDriver\n    \/\/ test this code does not run in a package:test test zone.\n    if (_client == 0) {\n      throw TestFailure('Tried to use TestTextInput with no keyboard attached. You must use WidgetTester.showKeyboard() first.');\n    }\n\n    final Completer&lt;void&gt; completer = Completer&lt;void&gt;();\n\n    BinaryMessages.handlePlatformMessage(\n      SystemChannels.textInput.name,\n      SystemChannels.textInput.codec.encodeMethodCall(\n        MethodCall(\n          'TextInputClient.performAction',\n          &lt;dynamic&gt;[_client, action.toString()],\n        ),\n      ),\n      (ByteData data) {\n        try {\n          \/\/ Decoding throws a PlatformException if the data represents an\n          \/\/ error, and that's all we care about here.\n          SystemChannels.textInput.codec.decodeEnvelope(data);\n\n          \/\/ No error was found. Complete without issue.\n          completer.complete();\n        } catch (error) {\n          \/\/ An exception occurred as a result of receiveAction()'ing. Report\n          \/\/ that error.\n          completer.completeError(error);\n        }\n      },\n    );\n\n    return completer.future;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "register",
                    "type": "",
                    "desc": "<p>Installs this object as a mock handler for <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/register.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void register() {\n  SystemChannels.textInput.setMockMethodCallHandler(_handleTextInputCall);\n  _isRegistered = true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "unregister",
                    "type": "",
                    "desc": "<p>Removes this object as a mock handler for <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n<p>After calling this method, the channel will exchange messages with the\nFlutter engine. Use this with <a href=\"flutter_driver\/FlutterDriver-class.html\">FlutterDriver<\/a> tests that need to display\non-screen keyboard provided by the operating system.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/unregister.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unregister() {\n  SystemChannels.textInput.setMockMethodCallHandler(null);\n  _isRegistered = false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateEditingValue",
                    "type": "",
                    "desc": "<p>Simulates the user changing the <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> to the given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestTextInput",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestTextInput\/updateEditingValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateEditingValue(TextEditingValue value) {\n  \/\/ Not using the `expect` function because in the case of a FlutterDriver\n  \/\/ test this code does not run in a package:test test zone.\n  if (_client == 0)\n    throw TestFailure('Tried to use TestTextInput with no keyboard attached. You must use WidgetTester.showKeyboard() first.');\n  BinaryMessages.handlePlatformMessage(\n    SystemChannels.textInput.name,\n    SystemChannels.textInput.codec.encodeMethodCall(\n      MethodCall(\n        'TextInputClient.updateEditingState',\n        &lt;dynamic&gt;[_client, value.toJSON()],\n      ),\n    ),\n    (ByteData data) { \/* response from framework is discarded *\/ },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "editingState",
                    "type": "dart:core.Map<dart:core.String>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ],
                    "desc": "<p>The last set of arguments that <a href=\"services\/TextInputConnection\/setEditingState.html\">TextInputConnection.setEditingState<\/a> sent\nto the embedder.<\/p>\n<p>This is a map representation of a <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> object. For example,\nit will have a <code>text<\/code> entry whose value matches the most recent\n<a href=\"services\/TextEditingValue\/text.html\">TextEditingValue.text<\/a> that was sent to the embedder.<\/p>\n        ",
                    "memberOf": "flutter_test.TestTextInput",
                    "isConstant": false,
                    "href": "flutter_test\/TestTextInput\/editingState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; editingState\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isRegistered",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this <a href=\"flutter_test\/TestTextInput-class.html\">TestTextInput<\/a> is registered with <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n<p>Use <a href=\"flutter_test\/TestTextInput\/register.html\">register<\/a> and <a href=\"flutter_test\/TestTextInput\/unregister.html\">unregister<\/a> methods to control this value.<\/p>\n        ",
                    "memberOf": "flutter_test.TestTextInput",
                    "isConstant": false,
                    "href": "flutter_test\/TestTextInput\/isRegistered.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRegistered =&gt; _isRegistered;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isVisible",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the onscreen keyboard is visible to the user.<\/p>\n        ",
                    "memberOf": "flutter_test.TestTextInput",
                    "isConstant": false,
                    "href": "flutter_test\/TestTextInput\/isVisible.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isVisible =&gt; _isVisible;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "setClientArgs",
                    "type": "dart:core.Map<dart:core.String>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ],
                    "desc": "<p>Arguments supplied to the TextInput.setClient method call.<\/p>\n        ",
                    "memberOf": "flutter_test.TestTextInput",
                    "isConstant": false,
                    "href": "flutter_test\/TestTextInput\/setClientArgs.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; setClientArgs\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestTextInput-class.html",
            "desc": "<p>A testing stub for the system's onscreen keyboard.<\/p>\n<p>Typical app tests will not need to use this class directly.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/TestTextInput\/enterText.html\">WidgetTester.enterText<\/a>, which uses this class to simulate keyboard input.<\/li>\n<li>\n<a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>, which uses this class to simulate showing the\npopup keyboard and initializing its text.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestTextInput"
        },
        {
            "name": "flutter_test.TestVSync",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "TestVSync",
                    "type": "",
                    "desc": "<p>Creates a ticker provider that creates standalone tickers.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestVSync",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/TestVSync\/TestVSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TestVSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createTicker",
                    "type": "scheduler.Ticker",
                    "desc": "<p>Creates a ticker with the given callback.<\/p>\n<p>The kind of ticker provided depends on the kind of ticker provider.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestVSync",
                    "sig": "",
                    "params": [
                        {
                            "name": "onTick",
                            "type": "scheduler.TickerCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestVSync\/createTicker.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTicker createTicker(TickerCallback onTick) =&gt; Ticker(onTick);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestVSync-class.html",
            "desc": "<p>A <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> that creates a standalone ticker.<\/p>\n<p>Useful in tests that create an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> outside of the widget\ntree.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestVSync"
        },
        {
            "name": "flutter_test.TestViewConfiguration",
            "extends": [
                "rendering.ViewConfiguration",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "TestViewConfiguration",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"flutter_test\/TestViewConfiguration-class.html\">TestViewConfiguration<\/a> with the given size. Defaults to 800x600.<\/p>\n<p>If a <code>window<\/code> instance is not provided it defaults to <a href=\"dart-ui\/window.html\">ui.window<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestViewConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "window",
                            "type": "dart:ui.Window",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/TestViewConfiguration\/TestViewConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TestViewConfiguration({\n  Size size = _kDefaultTestViewportSize,\n  ui.Window window,\n}) {\n  return TestViewConfiguration._(size, window ?? ui.window);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toHitTestMatrix",
                    "type": "vector_math_64.Matrix4",
                    "desc": "<p>Provides the transformation matrix that converts coordinates in the test\ncoordinate space to coordinates in logical pixels on the real display.<\/p>\n<p>This is essentially the same as <a href=\"flutter_test\/TestViewConfiguration\/toMatrix.html\">toMatrix<\/a> but ignoring the device pixel\nratio.<\/p>\n<p>This is useful because pointers are described in logical pixels, as\nopposed to graphics which are expressed in physical pixels.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestViewConfiguration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestViewConfiguration\/toHitTestMatrix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matrix4 toHitTestMatrix() =&gt; _hitTestMatrix.clone();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toMatrix",
                    "type": "vector_math_64.Matrix4",
                    "desc": "<p>Creates a transformation matrix that applies the <a href=\"rendering\/ViewConfiguration\/devicePixelRatio.html\">devicePixelRatio<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestViewConfiguration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestViewConfiguration\/toMatrix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMatrix4 toMatrix() =&gt; _paintMatrix.clone();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestViewConfiguration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestViewConfiguration\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TestViewConfiguration';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestViewConfiguration-class.html",
            "desc": "<p>A <a href=\"rendering\/ViewConfiguration-class.html\">ViewConfiguration<\/a> that pretends the display is of a particular size. The\nsize is in logical pixels. The resulting ViewConfiguration maps the given\nsize onto the actual display using the <a href=\"painting\/BoxFit-class.html\">BoxFit.contain<\/a> algorithm.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestViewConfiguration"
        },
        {
            "name": "flutter_test.TestWidgetsFlutterBinding",
            "extends": [
                "foundation.BindingBase",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "TestWidgetsFlutterBinding",
                    "type": "",
                    "desc": "<p>Constructor for <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>.<\/p>\n<p>This constructor overrides the <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> global hook to point to\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/debugPrintOverride.html\">debugPrintOverride<\/a>, which can be overridden by subclasses.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/TestWidgetsFlutterBinding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestWidgetsFlutterBinding() : _window = TestWindow(window: ui.window) {\n  debugPrint = debugPrintOverride;\n  debugDisableShadows = disableShadows;\n  debugCheckIntrinsicSizes = checkIntrinsicSizes;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addTime",
                    "type": "",
                    "desc": "<p>Increase the timeout for the current test by the given duration.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/addTime.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTime(Duration duration) {\n  \/\/ Noop, see [AutomatedTestWidgetsFlutterBinding. addTime] for an actual implementation.\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "asyncBarrier",
                    "type": "",
                    "desc": "<p>This is called during test execution before and after the body has been\nexecuted.<\/p>\n<p>It's used by <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> to drain the microtasks\nbefore the final <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> that happens during test cleanup.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/asyncBarrier.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void asyncBarrier() {\n  TestAsyncUtils.verifyAllScopesClosed();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "createViewConfiguration",
                    "type": "rendering.ViewConfiguration",
                    "desc": "<p>Returns a <a href=\"rendering\/ViewConfiguration-class.html\">ViewConfiguration<\/a> configured for the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> based on the\ncurrent environment.<\/p>\n<p>This is called during construction and also in response to changes to the\nsystem metrics.<\/p>\n<p>Bindings can override this method to change what size or device pixel\nratio the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> will use. For example, the testing framework uses\nthis to force the display into 800x600 when a test is run on the device\nusing <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/createViewConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nViewConfiguration createViewConfiguration() {\n  final double devicePixelRatio = window.devicePixelRatio;\n  final Size size = _surfaceSize ?? window.physicalSize \/ devicePixelRatio;\n  return ViewConfiguration(\n    size: size,\n    devicePixelRatio: devicePixelRatio,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispatchEvent",
                    "type": "",
                    "desc": "<p>Dispatch an event to a hit test result's path.<\/p>\n<p>This sends the given event to every <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> in the entries of the\ngiven <a href=\"gestures\/HitTestResult-class.html\">HitTestResult<\/a>, and catches exceptions that any of the handlers\nmight throw. The <code>hitTestResult<\/code> argument may only be null for\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, <a href=\"gestures\/PointerAddedEvent-class.html\">PointerAddedEvent<\/a>, or <a href=\"gestures\/PointerRemovedEvent-class.html\">PointerRemovedEvent<\/a> events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hitTestResult",
                            "type": "gestures.HitTestResult",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "source",
                            "type": "flutter_test.TestBindingEventSource",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/dispatchEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispatchEvent(\n  PointerEvent event,\n  HitTestResult hitTestResult, {\n  TestBindingEventSource source = TestBindingEventSource.device,\n}) {\n  assert(source == TestBindingEventSource.test);\n  super.dispatchEvent(event, hitTestResult);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "ensureInitialized",
                    "type": "widgets.WidgetsBinding",
                    "desc": "<p>Creates and initializes the binding. This function is\nidempotent; calling it a second time will just return the\npreviously-created instance.<\/p>\n<p>This function will use <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> if\nthe test was run using <code>flutter test<\/code>, and\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> otherwise (e.g. if it was run\nusing <code>flutter run<\/code>). (This is determined by looking at the\nenvironment variables for a variable called <code>FLUTTER_TEST<\/code>.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/ensureInitialized.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static WidgetsBinding ensureInitialized() {\n  if (WidgetsBinding.instance == null) {\n    if (Platform.environment.containsKey('FLUTTER_TEST')) {\n      AutomatedTestWidgetsFlutterBinding();\n    } else {\n      LiveTestWidgetsFlutterBinding();\n    }\n  }\n  assert(WidgetsBinding.instance is TestWidgetsFlutterBinding);\n  return WidgetsBinding.instance;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "globalToLocal",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Convert the given point from the global coordinate system (as used by\npointer events from the device) to the coordinate system used by the\ntests (an 800 by 600 window).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/globalToLocal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset globalToLocal(Offset point) =&gt; point;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "idle",
                    "type": "dart:async.Future",
                    "desc": "<p>Acts as if the application went idle.<\/p>\n<p>Runs all remaining microtasks, including those scheduled as a result of\nrunning them, until there are no more microtasks scheduled. Then, runs any\npreviously scheduled timers with zero time, and completes the returned future.<\/p>\n<p>May result in an infinite loop or run out of memory if microtasks continue\nto recursively schedule new microtasks. Will not run any timers scheduled\nafter this method was invoked, even if they are zero-time timers.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/idle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; idle() {\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    final Completer&lt;void&gt; completer = Completer&lt;void&gt;();\n    Timer.run(() {\n      completer.complete();\n    });\n    return completer.future;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  timeDilation = 1.0; \/\/ just in case the developer has artificially changed it for development\n  HttpOverrides.global = _MockHttpOverrides();\n  _testTextInput = TestTextInput(onCleared: _resetFocusedEditable)..register();\n  super.initInstances();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initLicenses",
                    "type": "",
                    "desc": "<p>Adds relevant licenses to the <a href=\"foundation\/LicenseRegistry-class.html\">LicenseRegistry<\/a>.<\/p>\n<p>By default, the <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>'s implementation of <a href=\"flutter_test\/TestWidgetsFlutterBinding\/initLicenses.html\">initLicenses<\/a> adds\nall the licenses collected by the <code>flutter<\/code> tool during compilation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/initLicenses.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initLicenses() {\n  \/\/ Do not include any licenses, because we're a test, and the LICENSE file\n  \/\/ doesn't get generated for tests.\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "localToGlobal",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Convert the given point from the coordinate system used by the tests (an\n800 by 600 window) to the global coordinate system (as used by pointer\nevents from the device).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/localToGlobal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset localToGlobal(Offset point) =&gt; point;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "postTest",
                    "type": "",
                    "desc": "<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> function after a test is executed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/postTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void postTest() {\n  assert(inTest);\n  FlutterError.onError = _oldExceptionHandler;\n  _pendingExceptionDetails = null;\n  _parentZone = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Triggers a frame sequence (build\/layout\/paint\/etc),\nthen flushes microtasks.<\/p>\n<p>If duration is set, then advances the clock by that much first.\nDoing this flushes microtasks.<\/p>\n<p>The supplied EnginePhase is the final phase reached during the pump pass;\nif not supplied, the whole pass is executed.<\/p>\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newPhase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pump([ Duration duration, EnginePhase newPhase = EnginePhase.sendSemanticsUpdate ]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readTestInitialLifecycleStateFromNativeWindow",
                    "type": "",
                    "desc": "<p>Re-attempts the initialization of the lifecycle state after providing\ntest values in <a href=\"flutter_test\/TestWindow\/initialLifecycleStateTestValue.html\">TestWindow.initialLifecycleStateTestValue<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/readTestInitialLifecycleStateFromNativeWindow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void readTestInitialLifecycleStateFromNativeWindow() {\n  readInitialLifecycleStateFromNativeWindow();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reportExceptionNoticed",
                    "type": "",
                    "desc": "<p>Called when the framework catches an exception, even if that exception is\nbeing handled by <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>.<\/p>\n<p>This is called when there is no pending exception; if multiple exceptions\nare thrown and <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a> isn't used, then subsequent exceptions are\nlogged to the console regardless (and the test will fail).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "exception",
                            "type": "foundation.FlutterErrorDetails",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/reportExceptionNoticed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid reportExceptionNoticed(FlutterErrorDetails exception) {\n  \/\/ By default we do nothing.\n  \/\/ The LiveTestWidgetsFlutterBinding overrides this to report the exception to the console.\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "runAsync",
                    "type": "dart:async.Future",
                    "desc": "<p>Runs a <code>callback<\/code> that performs real asynchronous work.<\/p>\n<p>This is intended for callers who need to call asynchronous methods where\nthe methods spawn isolates or OS threads and thus cannot be executed\nsynchronously by calling <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a>.<\/p>\n<p>If <code>callback<\/code> completes successfully, this will return the future\nreturned by <code>callback<\/code>.<\/p>\n<p>If <code>callback<\/code> completes with an error, the error will be caught by the\nFlutter framework and made available via <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>, and this method\nwill return a future that completes will <code>null<\/code>.<\/p>\n<p>Re-entrant calls to this method are not allowed; callers of this method\nare required to wait for the returned future to complete before calling\nthis method again. Attempts to do otherwise will result in a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> error being thrown.<\/p>\n<p>The <code>additionalTime<\/code> argument is used by the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> implementation to increase the\ncurrent timeout. See <a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a> for\ndetails. The value is ignored by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "additionalTime",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/runAsync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; runAsync&lt;T&gt;(\n  Future&lt;T&gt; callback(), {\n  Duration additionalTime = const Duration(milliseconds: 1000),\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runTest",
                    "type": "dart:async.Future",
                    "desc": "<p>Call the testBody inside a <a href=\"quiver.testing.async\/FakeAsync-class.html\">FakeAsync<\/a> scope on which <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> can\nadvance time.<\/p>\n<p>Returns a future which completes when the test has run.<\/p>\n<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> and <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a> functions to\nrun a test.<\/p>\n<p>The <code>invariantTester<\/code> argument is called after the <code>testBody<\/code>'s <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes. If it throws, then the test is marked as failed.<\/p>\n<p>The <code>description<\/code> is used by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> to\nshow a label on the screen during the test. The description comes from\nthe value passed to <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a>. It must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "testBody",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "invariantTester",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "description",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/runTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; runTest(Future&lt;void&gt; testBody(), VoidCallback invariantTester, { String description = '' });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLocale",
                    "type": "dart:async.Future",
                    "desc": "<p>Artificially calls dispatchLocalesChanged on the Widget binding,\nthen flushes microtasks.<\/p>\n<p>Passes only one single Locale. Use <a href=\"flutter_test\/TestWidgetsFlutterBinding\/setLocales.html\">setLocales<\/a> to pass a full preferred\nlocales list.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "languageCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "countryCode",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/setLocale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLocale(String languageCode, String countryCode) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    final Locale locale = Locale(languageCode, countryCode == '' ? null : countryCode);\n    dispatchLocalesChanged(&lt;Locale&gt;[locale]);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLocales",
                    "type": "dart:async.Future",
                    "desc": "<p>Artificially calls dispatchLocalesChanged on the Widget binding,\nthen flushes microtasks.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "locales",
                            "type": "dart:core.List<dart:ui.Locale>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Locale"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/setLocales.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLocales(List&lt;Locale&gt; locales) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    dispatchLocalesChanged(locales);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setSurfaceSize",
                    "type": "dart:async.Future",
                    "desc": "<p>Artificially changes the surface size to <code>size<\/code> on the Widget binding,\nthen flushes microtasks.<\/p>\n<p>Set to null to use the default surface size.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/setSurfaceSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setSurfaceSize(Size size) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    if (_surfaceSize == size)\n      return;\n    _surfaceSize = size;\n    handleMetricsChanged();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeException",
                    "type": "",
                    "desc": "<p>Returns the exception most recently caught by the Flutter framework.<\/p>\n<p>Call this if you expect an exception during a test. If an exception is\nthrown and this is not called, then the exception is rethrown when\nthe <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> call completes.<\/p>\n<p>If two exceptions are thrown in a row without the first one being\nacknowledged with a call to this method, then when the second exception is\nthrown, they are both dumped to the console and then the second is\nrethrown from the exception handler. This will likely result in the\nframework entering a highly unstable state and everything collapsing.<\/p>\n<p>It's safe to call this when there's no pending exception; it will return\nnull in that case.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/takeException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic takeException() {\n  assert(inTest);\n  final dynamic result = _pendingExceptionDetails?.exception;\n  _pendingExceptionDetails = null;\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "checkIntrinsicSizes",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"rendering\/debugCheckIntrinsicSizes.html\">debugCheckIntrinsicSizes<\/a> to while tests are running.<\/p>\n<p>This can be used to enable additional checks. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with aggressive intrinsic sizing tests enabled.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/checkIntrinsicSizes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get checkIntrinsicSizes =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "clock",
                    "type": "quiver.time.Clock",
                    "types": [],
                    "desc": "<p>The current time.<\/p>\n<p>In the automated test environment (<code>flutter test<\/code>), this is a fake clock\nthat begins in January 2015 at the start of the test and advances each\ntime <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> is called with a non-zero duration.<\/p>\n<p>In the live testing environment (<code>flutter run<\/code>), this object shows the\nactual current wall-clock time.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/clock.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Clock get clock;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "debugPrintOverride",
                    "type": "foundation.DebugPrintCallback",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> to while tests are running.<\/p>\n<p>This can be used to redirect console output from the framework, or to\nchange the behavior of <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> uses it to make <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>\nsynchronous, disabling its normal throttling behavior.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/debugPrintOverride.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDebugPrintCallback get debugPrintOverride =&gt; debugPrint;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultTestTimeout",
                    "type": "test_api.Timeout",
                    "types": [],
                    "desc": "<p>The default test timeout for tests when using this binding.<\/p>\n<p>The <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> layers in an additional timeout\nmechanism beyond this, with much more aggressive timeouts. See\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/defaultTestTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">test_package.Timeout get defaultTestTimeout;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "disableShadows",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The value to set <a href=\"painting\/debugDisableShadows.html\">debugDisableShadows<\/a> to while tests are running.<\/p>\n<p>This can be used to reduce the likelihood of golden file tests being\nflaky, because shadow rendering is not always deterministic. The\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with shadows disabled.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/disableShadows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get disableShadows =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "focusedEditable",
                    "type": "widgets.EditableTextState",
                    "types": [],
                    "desc": "<p>The current client of the onscreen keyboard. Callers must pump\nan additional frame after setting this property to complete the\nthe focus change.<\/p>\n<p>Instead of setting this directly, consider using\n<a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/focusedEditable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EditableTextState get focusedEditable =&gt; _focusedEditable;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inTest",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether there is currently a test executing.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/inTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get inTest;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "microtaskCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of outstanding microtasks in the queue.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/microtaskCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get microtaskCount;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "showAppDumpInErrors",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to include the output of debugDumpApp() when reporting\ntest failures.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/showAppDumpInErrors.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool showAppDumpInErrors = false\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "testTextInput",
                    "type": "flutter_test.TestTextInput",
                    "types": [],
                    "desc": "<p>A stub for the system's onscreen keyboard. Callers must set the\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/focusedEditable.html\">focusedEditable<\/a> before using this value.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/testTextInput.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TestTextInput get testTextInput =&gt; _testTextInput;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "window",
                    "type": "flutter_test.TestWindow",
                    "types": [],
                    "desc": "<p>The window to which this binding is bound.<\/p>\n<p>A number of additional bindings are defined as extensions of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>,\ne.g., <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>, <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, and <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>. Each of\nthese bindings define behaviors that interact with a <a href=\"dart-ui\/Window-class.html\">ui.Window<\/a>, e.g.,\n<a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> registers a <a href=\"dart-ui\/Window\/onPlatformMessage.html\">ui.Window.onPlatformMessage<\/a> handler, and\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> registers <a href=\"dart-ui\/Window\/onMetricsChanged.html\">ui.Window.onMetricsChanged<\/a>,\n<a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">ui.Window.onTextScaleFactorChanged<\/a>, <a href=\"dart-ui\/Window\/onSemanticsEnabledChanged.html\">ui.Window.onSemanticsEnabledChanged<\/a>,\nand <a href=\"dart-ui\/Window\/onSemanticsAction.html\">ui.Window.onSemanticsAction<\/a> handlers.<\/p>\n<p>Each of these other bindings could individually access a <a href=\"dart-ui\/Window-class.html\">Window<\/a> statically,\nbut that would preclude the ability to test these behaviors with a fake\nwindow for verification purposes.  Therefore, <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a> exposes this\n<a href=\"dart-ui\/Window-class.html\">Window<\/a> for use by other bindings.  A subclass of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>, such as\n<a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>, can override this accessor to return a\ndifferent <a href=\"dart-ui\/Window-class.html\">Window<\/a> implementation, such as a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWidgetsFlutterBinding",
                    "isConstant": false,
                    "href": "flutter_test\/TestWidgetsFlutterBinding\/window.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTestWindow get window =&gt; _window;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "flutter_test.AutomatedTestWidgetsFlutterBinding",
                "flutter_test.LiveTestWidgetsFlutterBinding"
            ],
            "realImplementors": [
                "flutter_test.AutomatedTestWidgetsFlutterBinding",
                "flutter_test.LiveTestWidgetsFlutterBinding"
            ],
            "cn": [],
            "href": "flutter_test\/TestWidgetsFlutterBinding-class.html",
            "desc": "<p>Base class for bindings used by widgets library tests.<\/p>\n<p>The <a href=\"flutter_test\/TestWidgetsFlutterBinding\/ensureInitialized.html\">ensureInitialized<\/a> method creates (if necessary) and returns\nan instance of the appropriate subclass.<\/p>\n<p>When using these bindings, certain features are disabled. For\nexample, <a href=\"scheduler\/timeDilation.html\">timeDilation<\/a> is reset to 1.0 on initialization.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestWidgetsFlutterBinding"
        },
        {
            "name": "flutter_test.TestWindow",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [
                {
                    "name": "onAccessibilityFeaturesChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked when the value of <a href=\"flutter_test\/TestWindow\/accessibilityFeatures.html\">accessibilityFeatures<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onAccessibilityFeaturesChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onAccessibilityFeaturesChanged =&gt; _window.onAccessibilityFeaturesChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onBeginFrame",
                    "type": "dart:ui.FrameCallback",
                    "desc": "<p>A callback that is invoked to notify the application that it is an\nappropriate time to provide a scene using the <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> API and the\n<a href=\"flutter_test\/TestWindow\/render.html\">render<\/a> method. When possible, this is driven by the hardware VSync\nsignal. This is only called if <a href=\"flutter_test\/TestWindow\/scheduleFrame.html\">scheduleFrame<\/a> has been called since the\nlast time this callback was invoked.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callback is invoked immediately after <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>,\nafter draining any microtasks (e.g. completions of any <a href=\"dart-async\/Future-class.html\">Future<\/a>s) queued\nby the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> handler.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.FrameCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onBeginFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFrameCallback get onBeginFrame =&gt; _window.onBeginFrame;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onDrawFrame",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked for each frame after <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> has\ncompleted and after the microtask queue has been drained. This can be\nused to implement a second phase of frame rendering that happens\nafter any deferred work queued by the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> phase.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onDrawFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onDrawFrame =&gt; _window.onDrawFrame;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onLocaleChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/locale.html\">locale<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onLocaleChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onLocaleChanged =&gt; _window.onLocaleChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onMetricsChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever the <a href=\"flutter_test\/TestWindow\/devicePixelRatio.html\">devicePixelRatio<\/a>,\n<a href=\"flutter_test\/TestWindow\/physicalSize.html\">physicalSize<\/a>, <a href=\"flutter_test\/TestWindow\/padding.html\">padding<\/a>, or <a href=\"flutter_test\/TestWindow\/viewInsets.html\">viewInsets<\/a> values change, for example\nwhen the device is rotated or when the application is resized (e.g. when\nshowing applications side-by-side on Android).<\/p>\n<p>The engine invokes this callback in the same zone in which the callback\nwas set.<\/p>\n<p>The framework registers with this callback and updates the layout\nappropriately.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nregister for notifications when this is called.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onMetricsChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onMetricsChanged =&gt; _window.onMetricsChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPlatformBrightnessChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/platformBrightness.html\">platformBrightness<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onPlatformBrightnessChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onPlatformBrightnessChanged =&gt; _window.onPlatformBrightnessChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPlatformMessage",
                    "type": "dart:ui.PlatformMessageCallback",
                    "desc": "<p>Called whenever this window receives a message from a platform-specific\nplugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin sent the message. The <code>data<\/code>\nparameter is the payload and is typically UTF-8 encoded JSON but can be\narbitrary data.<\/p>\n<p>Message handlers must call the function given in the <code>callback<\/code> parameter.\nIf the handler does not need to respond, the handler should pass null to\nthe callback.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.PlatformMessageCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onPlatformMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPlatformMessageCallback get onPlatformMessage =&gt; _window.onPlatformMessage;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onPointerDataPacket",
                    "type": "dart:ui.PointerDataPacketCallback",
                    "desc": "<p>A callback that is invoked when pointer data is available.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a>, the Flutter framework class which manages pointer\nevents.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.PointerDataPacketCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onPointerDataPacket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPointerDataPacketCallback get onPointerDataPacket =&gt; _window.onPointerDataPacket;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onSemanticsAction",
                    "type": "dart:ui.SemanticsActionCallback",
                    "desc": "<p>A callback that is invoked whenever the user requests an action to be\nperformed.<\/p>\n<p>This callback is used when the user expresses the action they wish to\nperform based on the semantics supplied by <a href=\"flutter_test\/TestWindow\/updateSemantics.html\">updateSemantics<\/a>.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.SemanticsActionCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onSemanticsAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSemanticsActionCallback get onSemanticsAction =&gt; _window.onSemanticsAction;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onSemanticsEnabledChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked when the value of <a href=\"flutter_test\/TestWindow\/semanticsEnabled.html\">semanticsEnabled<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onSemanticsEnabledChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onSemanticsEnabledChanged =&gt; _window.onSemanticsEnabledChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                },
                {
                    "name": "onTextScaleFactorChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/textScaleFactor.html\">textScaleFactor<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/onTextScaleFactorChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onTextScaleFactorChanged =&gt; _window.onTextScaleFactorChanged;<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                }
            ],
            "methods": [
                {
                    "name": "TestWindow",
                    "type": "",
                    "desc": "<p>Constructs a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> that defers all behavior to the given <code>window<\/code> unless\nexplicitly overidden for test purposes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [
                        {
                            "name": "window",
                            "type": "dart:ui.Window",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/TestWindow\/TestWindow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestWindow({\n  @required Window window,\n}) : _window = window;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clearAccessibilityFeaturesTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test accessibility features and returns to using the real accessibility features.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearAccessibilityFeaturesTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAccessibilityFeaturesTestValue() {\n  _accessibilityFeaturesTestValue = null;\n  onAccessibilityFeaturesChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearAllTestValues",
                    "type": "",
                    "desc": "<p>Delete any test value properties that have been set on this <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>\nand return to reporting the real <a href=\"dart-ui\/Window-class.html\">Window<\/a> values for all <a href=\"dart-ui\/Window-class.html\">Window<\/a> properties.<\/p>\n<p>If desired, clearing of properties can be done on an individual basis, e.g.,\n<a href=\"flutter_test\/TestWindow\/clearLocaleTestValue.html\">clearLocaleTestValue()<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearAllTestValues.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAllTestValues() {\n  clearAccessibilityFeaturesTestValue();\n  clearAlwaysUse24HourTestValue();\n  clearDefaultRouteNameTestValue();\n  clearDevicePixelRatioTestValue();\n  clearPlatformBrightnessTestValue();\n  clearLocaleTestValue();\n  clearLocalesTestValue();\n  clearPaddingTestValue();\n  clearPhysicalSizeTestValue();\n  clearSemanticsEnabledTestValue();\n  clearTextScaleFactorTestValue();\n  clearViewInsetsTestValue();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearAlwaysUse24HourTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test clock format and returns to using the real clock format.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearAlwaysUse24HourTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAlwaysUse24HourTestValue() {\n  _alwaysUse24HourFormatTestValue = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearDefaultRouteNameTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test default route name and returns to using the real default route name.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearDefaultRouteNameTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearDefaultRouteNameTestValue() {\n  _defaultRouteNameTestValue = null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearDevicePixelRatioTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test device pixel ratio and returns to using the real device pixel ratio.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearDevicePixelRatioTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearDevicePixelRatioTestValue() {\n  _devicePixelRatio = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearLocaleTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test locale and returns to using the real locale.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearLocaleTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearLocaleTestValue() {\n  _localeTestValue = null;\n  onLocaleChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearLocalesTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test locales and returns to using the real locales.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearLocalesTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearLocalesTestValue() {\n  _localesTestValue = null;\n  onLocaleChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearPaddingTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test padding and returns to using the real padding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearPaddingTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPaddingTestValue() {\n  _paddingTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearPhysicalSizeTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test physical size and returns to using the real physical size.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearPhysicalSizeTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPhysicalSizeTestValue() {\n  _physicalSizeTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearPlatformBrightnessTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test platform brightness and returns to using the real platform brightness.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearPlatformBrightnessTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPlatformBrightnessTestValue() {\n  _platformBrightnessTestValue = null;\n  onPlatformBrightnessChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearSemanticsEnabledTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test semantics enabled and returns to using the real semantics enabled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearSemanticsEnabledTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearSemanticsEnabledTestValue() {\n  _semanticsEnabledTestValue = null;\n  onSemanticsEnabledChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearTextScaleFactorTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test text scale factor and returns to using the real text scale factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearTextScaleFactorTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearTextScaleFactorTestValue() {\n  _textScaleFactorTestValue = null;\n  onTextScaleFactorChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clearViewInsetsTestValue",
                    "type": "",
                    "desc": "<p>Deletes any existing test view insets and returns to using the real view insets.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/clearViewInsetsTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearViewInsetsTestValue() {\n  _viewInsetsTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "render",
                    "type": "",
                    "desc": "<p>Updates the application's rendering on the GPU with the newly provided\n<a href=\"dart-ui\/Scene-class.html\">Scene<\/a>. This function must be called within the scope of the\n<a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> or <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callbacks being invoked. If this function\nis called a second time during a single <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>\/<a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a>\ncallback sequence or called outside the scope of those callbacks, the call\nwill be ignored.<\/p>\n<p>To record graphical operations, first create a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a>, then\nconstruct a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, passing that <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to its constructor.\nAfter issuing all the graphical operations, call the\n<a href=\"dart-ui\/PictureRecorder\/endRecording.html\">PictureRecorder.endRecording<\/a> function on the <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to obtain\nthe final <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> that represents the issued graphical operations.<\/p>\n<p>Next, create a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a>, and add the <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> to it using\n<a href=\"dart-ui\/SceneBuilder\/addPicture.html\">SceneBuilder.addPicture<\/a>. With the <a href=\"dart-ui\/SceneBuilder\/build.html\">SceneBuilder.build<\/a> method you can\nthen obtain a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> object, which you can display to the user via this\n<a href=\"flutter_test\/TestWindow\/render.html\">render<\/a> function.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [
                        {
                            "name": "scene",
                            "type": "dart:ui.Scene",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/render.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid render(Scene scene) {\n  _window.render(scene);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scheduleFrame",
                    "type": "",
                    "desc": "<p>Requests that, at the next appropriate opportunity, the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>\nand <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callbacks be invoked.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/scheduleFrame.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid scheduleFrame() {\n  _window.scheduleFrame();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sendPlatformMessage",
                    "type": "",
                    "desc": "<p>Sends a message to a platform-specific plugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin receives the message. The\n<code>data<\/code> parameter contains the message payload and is typically UTF-8\nencoded JSON but can be arbitrary data. If the plugin replies to the\nmessage, <code>callback<\/code> will be called with the response.<\/p>\n<p>The framework invokes <code>callback<\/code> in the same zone in which this method\nwas called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "data",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "callback",
                            "type": "dart:ui.PlatformMessageResponseCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/sendPlatformMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid sendPlatformMessage(\n  String name,\n  ByteData data,\n  PlatformMessageResponseCallback callback,\n) {\n  _window.sendPlatformMessage(name, data, callback);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setIsolateDebugName",
                    "type": "",
                    "desc": "<p>Set the debug name associated with this window's root isolate.<\/p>\n<p>Normally debug names are automatically generated from the Dart port, entry\npoint, and source file. For example: <code>main.dart$main-1234<\/code>.<\/p>\n<p>This can be combined with flutter tools <code>--isolate-filter<\/code> flag to debug\nspecific root isolates. For example: <code>flutter attach --isolate-filter=[name]<\/code>.\nNote that this does not rename any child isolates of the root.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/setIsolateDebugName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setIsolateDebugName(String name) {\n  _window.setIsolateDebugName(name);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateSemantics",
                    "type": "",
                    "desc": "<p>Change the retained semantics data about this window.<\/p>\n<p>If <a href=\"flutter_test\/TestWindow\/semanticsEnabled.html\">semanticsEnabled<\/a> is true, the user has requested that this function\nbe called whenever the semantic content of this window changes.<\/p>\n<p>In either case, this function disposes the given update, which means the\nsemantics update cannot be used further.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TestWindow",
                    "sig": "",
                    "params": [
                        {
                            "name": "update",
                            "type": "dart:ui.SemanticsUpdate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TestWindow\/updateSemantics.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateSemantics(SemanticsUpdate update) {\n  _window.updateSemantics(update);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "accessibilityFeatures",
                    "type": "dart:ui.AccessibilityFeatures",
                    "types": [],
                    "desc": "<p>Additional accessibility features that may be enabled by the platform.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/accessibilityFeatures.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAccessibilityFeatures get accessibilityFeatures =&gt; _accessibilityFeaturesTestValue ?? _window.accessibilityFeatures;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "accessibilityFeaturesTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real accessibility features and reports the given <code>accessibilityFeaturesTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/accessibilityFeaturesTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set accessibilityFeaturesTestValue(AccessibilityFeatures accessibilityFeaturesTestValue) {\n  _accessibilityFeaturesTestValue = accessibilityFeaturesTestValue;\n  onAccessibilityFeaturesChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "alwaysUse24HourFormat",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The setting indicating whether time should always be shown in the 24-hour\nformat.<\/p>\n<p>This option is used by <a href=\"material\/showTimePicker.html\">showTimePicker<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/alwaysUse24HourFormat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get alwaysUse24HourFormat =&gt; _alwaysUse24HourFormatTestValue ?? _window.alwaysUse24HourFormat;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "alwaysUse24HourFormatTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real clock format and reports the given <code>alwaysUse24HourFormatTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/alwaysUse24HourFormatTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set alwaysUse24HourFormatTestValue(bool alwaysUse24HourFormatTestValue) {\n  _alwaysUse24HourFormatTestValue = alwaysUse24HourFormatTestValue;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultRouteName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The route or path that the embedder requested when the application was\nlaunched.<\/p>\n<p>This will be the string \"<code>\/<\/code>\" if no particular route was requested.<\/p>\n<h2 id=\"android\">Android<\/h2>\n<p>On Android, calling\n<a href=\"\/javadoc\/io\/flutter\/view\/FlutterView.html#setInitialRoute-java.lang.String-\"><code>FlutterView.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>createFlutterView<\/code> method in your <code>FlutterActivity<\/code>\nsubclass is a suitable time to set the value. The application's\n<code>AndroidManifest.xml<\/code> file must also be updated to have a suitable\n<a href=\"https:\/\/developer.android.com\/guide\/topics\/manifest\/intent-filter-element.html\"><code>&lt;intent-filter&gt;<\/code><\/a>.<\/p>\n<h2 id=\"ios\">iOS<\/h2>\n<p>On iOS, calling\n<a href=\"\/objcdoc\/Classes\/FlutterViewController.html#\/c:objc%28cs%29FlutterViewController%28im%29setInitialRoute:\"><code>FlutterViewController.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>application:didFinishLaunchingWithOptions:<\/code> method is a\nsuitable time to set this value.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, a widget that handles routing.<\/li>\n<li>\n<a href=\"services\/SystemChannels\/navigation-constant.html\">SystemChannels.navigation<\/a>, which handles subsequent navigation\nrequests from the embedder.<\/li>\n<\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/defaultRouteName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get defaultRouteName =&gt; _defaultRouteNameTestValue ?? _window.defaultRouteName;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultRouteNameTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real default route name and reports the given <code>defaultRouteNameTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/defaultRouteNameTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set defaultRouteNameTestValue(String defaultRouteNameTestValue) {\n  _defaultRouteNameTestValue = defaultRouteNameTestValue;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "devicePixelRatio",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The number of device pixels for each logical pixel. This number might not\nbe a power of two. Indeed, it might not even be an integer. For example,\nthe Nexus 6 has a device pixel ratio of 3.5.<\/p>\n<p>Device pixels are also referred to as physical pixels. Logical pixels are\nalso referred to as device-independent or resolution-independent pixels.<\/p>\n<p>By definition, there are roughly 38 logical pixels per centimeter, or\nabout 96 logical pixels per inch, of the physical display. The value\nreturned by <a href=\"flutter_test\/TestWindow\/devicePixelRatio.html\">devicePixelRatio<\/a> is ultimately obtained either from the\nhardware itself, the device drivers, or a hard-coded value stored in the\noperating system or firmware, and may be inaccurate, sometimes by a\nsignificant margin.<\/p>\n<p>The Flutter framework operates in logical pixels, so it is rarely\nnecessary to directly deal with this property.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/devicePixelRatio.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get devicePixelRatio =&gt; _devicePixelRatio ?? _window.devicePixelRatio;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "devicePixelRatioTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real device pixel ratio and reports the given <code>devicePixelRatio<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/devicePixelRatioTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set devicePixelRatioTestValue(double devicePixelRatio) {\n  _devicePixelRatio = devicePixelRatio;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "initialLifecycleState",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The lifecycle state immediately after dart isolate initialization.<\/p>\n<p>This property will not be updated as the lifecycle changes.<\/p>\n<p>It is used to initialize <a href=\"scheduler\/SchedulerBinding\/lifecycleState.html\">SchedulerBinding.lifecycleState<\/a> at startup\nwith any buffered lifecycle state events.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/initialLifecycleState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get initialLifecycleState =&gt; _initialLifecycleStateTestValue;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "initialLifecycleStateTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets a faked initialLifecycleState for testing.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/initialLifecycleStateTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set initialLifecycleStateTestValue(String state) {\n  _initialLifecycleStateTestValue = state;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "<p>The system-reported default locale of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>This is the first locale selected by the user and is the user's\nprimary locale (the locale the device UI is displayed in)<\/p>\n<p>This is equivalent to <code>locales.first<\/code> and will provide an empty non-null locale\nif the <a href=\"flutter_test\/TestWindow\/locales.html\">locales<\/a> list has not been set or is empty.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLocale get locale =&gt; _localeTestValue ?? _window.locale;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localeTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real locale and reports the given <code>localeTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/localeTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set localeTestValue(Locale localeTestValue) {\n  _localeTestValue = localeTestValue;\n  onLocaleChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locales",
                    "type": "dart:core.List<dart:ui.Locale>",
                    "types": [
                        "dart:core.List",
                        "dart:ui.Locale"
                    ],
                    "desc": "<p>The full system-reported supported locales of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>The list is ordered in order of priority, with lower-indexed locales being\npreferred over higher-indexed ones. The first element is the primary <a href=\"flutter_test\/TestWindow\/locale.html\">locale<\/a>.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onLocaleChanged.html\">onLocaleChanged<\/a> callback is called whenever this value changes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/locales.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;Locale&gt; get locales =&gt; _localesTestValue ?? _window.locales;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localesTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real locales and reports the given <code>localesTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/localesTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set localesTestValue(List&lt;Locale&gt; localesTestValue) {\n  _localesTestValue = localesTestValue;\n  onLocaleChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "dart:ui.WindowPadding",
                    "types": [],
                    "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but which may be partially obscured by\nsystem UI (such as the system notification area), or or physical\nintrusions in the display (e.g. overscan regions on television screens or\nphone sensor housings).<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the padding in material design\napplications.<\/li>\n<\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/padding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWindowPadding get padding =&gt; _paddingTestValue ?? _window.padding;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "paddingTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real padding and reports the given <code>paddingTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/paddingTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set paddingTestValue(WindowPadding paddingTestValue) {\n  _paddingTestValue = paddingTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalSize",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The dimensions of the rectangle into which the application will be drawn,\nin physical pixels.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>At startup, the size of the application window may not be known before Dart\ncode runs. If this value is observed early in the application lifecycle,\nit may report <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>This value does not take into account any on-screen keyboards or other\nsystem UI. The <a href=\"flutter_test\/TestWindow\/padding.html\">padding<\/a> and <a href=\"flutter_test\/TestWindow\/viewInsets.html\">viewInsets<\/a> properties provide a view into\nhow much of each side of the application may be obscured by system UI.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/physicalSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize get physicalSize =&gt; _physicalSizeTestValue ?? _window.physicalSize;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalSizeTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real physical size and reports the given <code>physicalSizeTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/physicalSizeTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set physicalSizeTestValue (Size physicalSizeTestValue) {\n  _physicalSizeTestValue = physicalSizeTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platformBrightness",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The setting indicating the current brightness mode of the host platform.\nIf the platform has no preference, <a href=\"flutter_test\/TestWindow\/platformBrightness.html\">platformBrightness<\/a> defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/platformBrightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBrightness get platformBrightness =&gt; _platformBrightnessTestValue ?? _window.platformBrightness;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platformBrightnessTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real text scale factor and reports the given <code>platformBrightnessTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/platformBrightnessTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set platformBrightnessTestValue(Brightness platformBrightnessTestValue) {\n  _platformBrightnessTestValue = platformBrightnessTestValue;\n  onPlatformBrightnessChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the user has requested that <a href=\"flutter_test\/TestWindow\/updateSemantics.html\">updateSemantics<\/a> be called when\nthe semantic contents of window changes.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onSemanticsEnabledChanged.html\">onSemanticsEnabledChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/semanticsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get semanticsEnabled =&gt; _semanticsEnabledTestValue ?? _window.semanticsEnabled;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsEnabledTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real semantics enabled and reports the given <code>semanticsEnabledTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/semanticsEnabledTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set semanticsEnabledTestValue(bool semanticsEnabledTestValue) {\n  _semanticsEnabledTestValue = semanticsEnabledTestValue;\n  onSemanticsEnabledChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textScaleFactor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The system-reported text scale.<\/p>\n<p>This establishes the text scaling factor to use when rendering text,\naccording to the user's platform preferences.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onTextScaleFactorChanged.html\">onTextScaleFactorChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/textScaleFactor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get textScaleFactor =&gt; _textScaleFactorTestValue ?? _window.textScaleFactor;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textScaleFactorTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real text scale factor and reports the given <code>textScaleFactorTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/textScaleFactorTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set textScaleFactorTestValue(double textScaleFactorTestValue) {\n  _textScaleFactorTestValue = textScaleFactorTestValue;\n  onTextScaleFactorChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "viewInsets",
                    "type": "dart:ui.WindowPadding",
                    "types": [],
                    "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but over which the operating system\nwill likely place system UI, such as the keyboard, that fully obscures\nany content.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the view insets in material\ndesign applications.<\/li>\n<\/ul>",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/viewInsets.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWindowPadding get viewInsets =&gt; _viewInsetsTestValue ??  _window.viewInsets;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "viewInsetsTestValue",
                    "type": "",
                    "types": [],
                    "desc": "<p>Hides the real view insets and reports the given <code>viewInsetsTestValue<\/code> instead.<\/p>\n        ",
                    "memberOf": "flutter_test.TestWindow",
                    "isConstant": false,
                    "href": "flutter_test\/TestWindow\/viewInsetsTestValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set viewInsetsTestValue(WindowPadding viewInsetsTestValue) {\n  _viewInsetsTestValue = viewInsetsTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TestWindow-class.html",
            "desc": "<p><a href=\"dart-ui\/Window-class.html\">Window<\/a> that wraps another <a href=\"dart-ui\/Window-class.html\">Window<\/a> and allows faking of some properties\nfor testing purposes.<\/p>\n<p>Tests for certain widgets, e.g., <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>, might require faking certain\nproperties of a <a href=\"dart-ui\/Window-class.html\">Window<\/a>. <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> facilitates the faking of these properties\nby overidding the properties of a real <a href=\"dart-ui\/Window-class.html\">Window<\/a> with desired fake values. The\nbinding used within tests, <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>, contains a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>\nthat is used by all tests.<\/p>\n<h2 id=\"sample-code\">Sample Code<\/h2>\n<p>A test can utilize a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> in the following way:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">testWidgets('your test name here', (WidgetTester tester) async {\n  \/\/ Retrieve the TestWidgetsFlutterBinding.\n  final TestWidgetsFlutterBinding testBinding = tester.binding;\n\n  \/\/ Fake the desired properties of the TestWindow. All code running\n  \/\/ within this test will perceive the following fake text scale\n  \/\/ factor as the real text scale factor of the window.\n  testBinding.window.textScaleFactorFakeValue = 2.5;\n\n  \/\/ Test code that depends on text scale factor here.\n});\n<\/code><\/pre>\n<p>The <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a> is recreated for each test and\ntherefore any fake values defined in one test will not persist\nto the next.<\/p>\n<p>If a test needs to override a real <a href=\"dart-ui\/Window-class.html\">Window<\/a> property and then later\nreturn to using the real <a href=\"dart-ui\/Window-class.html\">Window<\/a> property, <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> provides\nmethods to clear each individual test value, e.g., <a href=\"flutter_test\/TestWindow\/clearLocaleTestValue.html\">clearLocaleTestValue()<\/a>.<\/p>\n<p>To clear all fake test values in a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>, consider using <a href=\"flutter_test\/TestWindow\/clearAllTestValues.html\">clearAllTestValues()<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TestWindow"
        },
        {
            "name": "flutter_test.TrivialComparator",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "compare",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Compares <code>imageBytes<\/code> against the golden file identified by <code>golden<\/code>.<\/p>\n<p>The returned future completes with a boolean value that indicates whether\n<code>imageBytes<\/code> matches the golden file's bytes within the tolerance defined\nby the comparator.<\/p>\n<p>In the case of comparison mismatch, the comparator may choose to throw a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> if it wants to control the failure message.<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are loaded\nis left up to the implementation class. For instance, some implementations\nmay load files from the local file system, whereas others may load files\nover the network or from a remote repository.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TrivialComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TrivialComparator\/compare.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; compare(Uint8List imageBytes, Uri golden) {\n  debugPrint('Golden file comparison requested for \"$golden\"; skipping...');\n  return Future&lt;bool&gt;.value(true);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "update",
                    "type": "dart:async.Future",
                    "desc": "<p>Updates the golden file identified by <code>golden<\/code> with <code>imageBytes<\/code>.<\/p>\n<p>This will be invoked in lieu of <a href=\"flutter_test\/TrivialComparator\/compare.html\">compare<\/a> when <a href=\"flutter_test\/autoUpdateGoldenFiles.html\">autoUpdateGoldenFiles<\/a>\nis <code>true<\/code> (which gets set automatically by the test framework when the\nuser runs <code>flutter test --update-goldens<\/code>).<\/p>\n<p>The method by which <code>golden<\/code> is located and by which its bytes are written\nis left up to the implementation class.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.TrivialComparator",
                    "sig": "",
                    "params": [
                        {
                            "name": "golden",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "imageBytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/TrivialComparator\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; update(Uri golden, Uint8List imageBytes) {\n  \/\/ [autoUpdateGoldenFiles] should never be set in a live widget binding.\n  throw StateError('goldenFileComparator has not been initialized');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/TrivialComparator-class.html",
            "desc": "<p>Placeholder comparator that is set as the value of <a href=\"flutter_test\/goldenFileComparator.html\">goldenFileComparator<\/a>\nwhen the initialization that happens in the test bootstrap either has not\nyet happened or has been bypassed.<\/p>\n<p>The test bootstrap file that gets generated by the Flutter tool when the\nuser runs <code>flutter test<\/code> is expected to set <a href=\"flutter_test\/goldenFileComparator.html\">goldenFileComparator<\/a> to\na comparator that resolves golden file references relative to the test\ndirectory. From there, the caller may choose to override the comparator by\nsetting it to another value during test initialization. The only case\nwhere we expect it to remain uninitialized is when the user runs a test\nvia <code>flutter run<\/code>. In this case, the <a href=\"flutter_test\/TrivialComparator\/compare.html\">compare<\/a> method will just print a\nmessage that it would have otherwise run a real comparison, and it will\nreturn trivial success.<\/p>\n<p>This class can't be constructed. It represents the default value of\n<a href=\"flutter_test\/goldenFileComparator.html\">goldenFileComparator<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TrivialComparator"
        },
        {
            "name": "flutter_test.WidgetController",
            "extends": [],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "WidgetController",
                    "type": "",
                    "desc": "<p>Creates a widget controller that uses the given binding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "binding",
                            "type": "widgets.WidgetsBinding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "flutter_test\/WidgetController\/WidgetController.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">WidgetController(this.binding);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "any",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks if <code>finder<\/code> exists in the tree.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/any.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().isNotEmpty;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createGesture",
                    "type": "dart:async.Future<flutter_test.TestGesture>",
                    "desc": "<p>Creates gesture and returns the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object which you can use\nto continue the gesture using calls on the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object.<\/p>\n<p>You can use <a href=\"flutter_test\/WidgetController\/startGesture.html\">startGesture<\/a> instead if your gesture begins with a down\nevent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "kind",
                            "type": "dart:ui.PointerDeviceKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/createGesture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; createGesture({int pointer, PointerDeviceKind kind = PointerDeviceKind.touch}) async {\n  return TestGesture(\n    hitTester: hitTestOnBinding,\n    dispatcher: sendEventToBinding,\n    kind: kind,\n    pointer: pointer ?? _getNextPointer(),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "flutter_test.TestGesture"
                    ]
                },
                {
                    "name": "drag",
                    "type": "dart:async.Future",
                    "desc": "<p>Attempts to drag the given widget by the given offset, by\nstarting a drag in the middle of the widget.<\/p>\n<p>If the middle of the widget is not exposed, this might send\nevents to another object.<\/p>\n<p>If you want the drag to end with a speed so that the gesture recognition\nsystem identifies the gesture as a fling, consider using <a href=\"flutter_test\/WidgetController\/fling.html\">fling<\/a> instead.<\/p>\n<p>{@template flutter.flutter_test.drag}\nBy default, if the x or y component of offset is greater than <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a>, the\ngesture is broken up into two separate moves calls. Changing 'touchSlopX' or\n<code>touchSlopY<\/code> will change the minimum amount of movement in the respective axis\nbefore the drag will be broken into multiple calls. To always send the\ndrag with just a single call to <a href=\"flutter_test\/TestGesture\/moveBy.html\">TestGesture.moveBy<\/a>, <code>touchSlopX<\/code> and <code>touchSlopY<\/code>\nshould be set to 0.<\/p>\n<p>Breaking the drag into multiple moves is necessary for accurate execution\nof drag update calls with a <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior<\/a> variable set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>. Without such a change, the dragUpdate callback\nfrom a drag recognizer will never be invoked.<\/p>\n<p>To force this function to a send a single move event, the 'touchSlopX' and\n'touchSlopY' variables should be set to 0. However, generally, these values\nshould be left to their default values.\n{@end template}<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchSlopX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchSlopY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/drag.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; drag(Finder finder, Offset offset, { int pointer, double touchSlopX = kDragSlopDefault, double touchSlopY = kDragSlopDefault }) {\n  assert(kDragSlopDefault &gt; kTouchSlop);\n  return dragFrom(getCenter(finder), offset, pointer: pointer, touchSlopX: touchSlopX, touchSlopY: touchSlopY);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dragFrom",
                    "type": "dart:async.Future",
                    "desc": "<p>Attempts a drag gesture consisting of a pointer down, a move by\nthe given offset, and a pointer up.<\/p>\n<p>If you want the drag to end with a speed so that the gesture recognition\nsystem identifies the gesture as a fling, consider using <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a>\ninstead.<\/p>\n<p>null<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "startLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchSlopX",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchSlopY",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/dragFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; dragFrom(Offset startLocation, Offset offset, { int pointer, double touchSlopX = kDragSlopDefault, double touchSlopY = kDragSlopDefault }) {\n  assert(kDragSlopDefault &gt; kTouchSlop);\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(startLocation, pointer: pointer);\n    assert(gesture != null);\n\n    final double xSign = offset.dx.sign;\n    final double ySign = offset.dy.sign;\n\n    final double offsetX = offset.dx;\n    final double offsetY = offset.dy;\n\n    final bool separateX = offset.dx.abs() &gt; touchSlopX &amp;&amp; touchSlopX &gt; 0;\n    final bool separateY = offset.dy.abs() &gt; touchSlopY &amp;&amp; touchSlopY &gt; 0;\n\n    if (separateY || separateX) {\n      final double offsetSlope = offsetY \/ offsetX;\n      final double inverseOffsetSlope = offsetX \/ offsetY;\n      final double slopSlope = touchSlopY \/ touchSlopX;\n      final double absoluteOffsetSlope = offsetSlope.abs();\n      final double signedSlopX = touchSlopX * xSign;\n      final double signedSlopY = touchSlopY * ySign;\n      if (absoluteOffsetSlope != slopSlope) {\n        \/\/ The drag goes through one or both of the extents of the edges of the box.\n        if (absoluteOffsetSlope &lt; slopSlope) {\n          assert(offsetX.abs() &gt; touchSlopX);\n          \/\/ The drag goes through the vertical edge of the box.\n          \/\/ It is guaranteed that the |offsetX| &gt; touchSlopX.\n          final double diffY = offsetSlope.abs() * touchSlopX * ySign;\n\n          \/\/ The vector from the origin to the vertical edge.\n          await gesture.moveBy(Offset(signedSlopX, diffY));\n          if (offsetY.abs() &lt;= touchSlopY) {\n            \/\/ The drag ends on or before getting to the horizontal extension of the horizontal edge.\n            await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - diffY));\n          } else {\n            final double diffY2 = signedSlopY - diffY;\n            final double diffX2 = inverseOffsetSlope * diffY2;\n\n            \/\/ The vector from the edge of the box to the horizontal extension of the horizontal edge.\n            await gesture.moveBy(Offset(diffX2, diffY2));\n            await gesture.moveBy(Offset(offsetX - diffX2 - signedSlopX, offsetY - signedSlopY));\n          }\n        } else {\n          assert(offsetY.abs() &gt; touchSlopY);\n          \/\/ The drag goes through the horizontal edge of the box.\n          \/\/ It is guaranteed that the |offsetY| &gt; touchSlopY.\n          final double diffX = inverseOffsetSlope.abs() * touchSlopY * xSign;\n\n          \/\/ The vector from the origin to the vertical edge.\n          await gesture.moveBy(Offset(diffX, signedSlopY));\n          if (offsetX.abs() &lt;= touchSlopX) {\n            \/\/ The drag ends on or before getting to the vertical extension of the vertical edge.\n            await gesture.moveBy(Offset(offsetX - diffX, offsetY - signedSlopY));\n          } else {\n            final double diffX2 = signedSlopX - diffX;\n            final double diffY2 = offsetSlope * diffX2;\n\n            \/\/ The vector from the edge of the box to the vertical extension of the vertical edge.\n            await gesture.moveBy(Offset(diffX2, diffY2));\n            await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - diffY2 - signedSlopY));\n          }\n        }\n      } else { \/\/ The drag goes through the corner of the box.\n        await gesture.moveBy(Offset(signedSlopX, signedSlopY));\n        await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - signedSlopY));\n      }\n    } else { \/\/ The drag ends inside the box.\n      await gesture.moveBy(offset);\n    }\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "<p>The matching element in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none element.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstElement.html\">firstElement<\/a> if you expect to match several elements but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/elementList.html\">elementList<\/a> if you expect to match several elements and want all of them.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/element.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T element&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "elementList",
                    "type": "dart:core.Iterable",
                    "desc": "<p>The matching elements in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/element.html\">element<\/a> if you only expect to match one element.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstElement.html\">firstElement<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/elementList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; elementList&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "firstElement",
                    "type": "",
                    "desc": "<p>The first matching element according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/element.html\">element<\/a> if you only expect to match one element.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/firstElement.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstElement&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstRenderObject",
                    "type": "",
                    "desc": "<p>The render object of the first matching widget according to a\ndepth-first pre-order traversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/renderObject.html\">renderObject<\/a> if you only expect to match one render object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/firstRenderObject.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstRenderObject&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first.renderObject;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstState",
                    "type": "",
                    "desc": "<p>The first matching state according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or if the first\nmatching widget has no state.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/state.html\">state<\/a> if you only expect to match one state.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/firstState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstState&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return _stateOf&lt;T&gt;(finder.evaluate().first, finder);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "firstWidget",
                    "type": "",
                    "desc": "<p>The first matching widget according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/widget.html\">widget<\/a> if you only expect to match one widget.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/firstWidget.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstWidget&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first.widget;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "fling",
                    "type": "dart:async.Future",
                    "desc": "<p>Attempts a fling gesture starting from the center of the given\nwidget, moving the given distance, reaching the given speed.<\/p>\n<p>If the middle of the widget is not exposed, this might send\nevents to another object.<\/p>\n<p>This can pump frames. See <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a> for a discussion of how the\n<code>offset<\/code>, <code>velocity<\/code> and <code>frameInterval<\/code> arguments affect this.<\/p>\n<p>The <code>speed<\/code> is in pixels per second in the direction given by <code>offset<\/code>.<\/p>\n<p>A fling is essentially a drag that ends at a particular speed. If you\njust want to drag and end without a fling, use <a href=\"flutter_test\/WidgetController\/drag.html\">drag<\/a>.<\/p>\n<p>The <code>initialOffset<\/code> argument, if non-zero, causes the pointer to first\napply that offset, then pump a delay of <code>initialOffsetDelay<\/code>. This can be\nused to simulate a drag followed by a fling, including dragging in the\nopposite direction of the fling (e.g. dragging 200 pixels to the right,\nthen fling to the left over 200 pixels, ending at the exact point that the\ndrag started).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "speed",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "frameInterval",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "initialOffset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "initialOffsetDelay",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/fling.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; fling(\n  Finder finder,\n  Offset offset,\n  double speed, {\n  int pointer,\n  Duration frameInterval = const Duration(milliseconds: 16),\n  Offset initialOffset = Offset.zero,\n  Duration initialOffsetDelay = const Duration(seconds: 1),\n}) {\n  return flingFrom(\n    getCenter(finder),\n    offset,\n    speed,\n    pointer: pointer,\n    frameInterval: frameInterval,\n    initialOffset: initialOffset,\n    initialOffsetDelay: initialOffsetDelay,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "flingFrom",
                    "type": "dart:async.Future",
                    "desc": "<p>Attempts a fling gesture starting from the given location, moving the\ngiven distance, reaching the given speed.<\/p>\n<p>Exactly 50 pointer events are synthesized.<\/p>\n<p>The offset and speed control the interval between each pointer event. For\nexample, if the offset is 200 pixels down, and the speed is 800 pixels per\nsecond, the pointer events will be sent for each increment of 4 pixels\n(200\/50), over 250ms (200\/800), meaning events will be sent every 1.25ms\n(250\/200).<\/p>\n<p>To make tests more realistic, frames may be pumped during this time (using\ncalls to <a href=\"flutter_test\/WidgetController\/pump.html\">pump<\/a>). If the total duration is longer than <code>frameInterval<\/code>,\nthen one frame is pumped each time that amount of time elapses while\nsending events, or each time an event is synthesized, whichever is rarer.<\/p>\n<p>A fling is essentially a drag that ends at a particular speed. If you\njust want to drag and end without a fling, use <a href=\"flutter_test\/WidgetController\/dragFrom.html\">dragFrom<\/a>.<\/p>\n<p>The <code>initialOffset<\/code> argument, if non-zero, causes the pointer to first\napply that offset, then pump a delay of <code>initialOffsetDelay<\/code>. This can be\nused to simulate a drag followed by a fling, including dragging in the\nopposite direction of the fling (e.g. dragging 200 pixels to the right,\nthen fling to the left over 200 pixels, ending at the exact point that the\ndrag started).<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "startLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "speed",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "frameInterval",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "initialOffset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "initialOffsetDelay",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/flingFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; flingFrom(\n  Offset startLocation,\n  Offset offset,\n  double speed, {\n  int pointer,\n  Duration frameInterval = const Duration(milliseconds: 16),\n  Offset initialOffset = Offset.zero,\n  Duration initialOffsetDelay = const Duration(seconds: 1),\n}) {\n  assert(offset.distance &gt; 0.0);\n  assert(speed &gt; 0.0); \/\/ speed is pixels\/second\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestPointer testPointer = TestPointer(pointer ?? _getNextPointer());\n    final HitTestResult result = hitTestOnBinding(startLocation);\n    const int kMoveCount = 50; \/\/ Needs to be &gt;= kHistorySize, see _LeastSquaresVelocityTrackerStrategy\n    final double timeStampDelta = 1000.0 * offset.distance \/ (kMoveCount * speed);\n    double timeStamp = 0.0;\n    double lastTimeStamp = timeStamp;\n    await sendEventToBinding(testPointer.down(startLocation, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n    if (initialOffset.distance &gt; 0.0) {\n      await sendEventToBinding(testPointer.move(startLocation + initialOffset, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n      timeStamp += initialOffsetDelay.inMilliseconds;\n      await pump(initialOffsetDelay);\n    }\n    for (int i = 0; i &lt;= kMoveCount; i += 1) {\n      final Offset location = startLocation + initialOffset + Offset.lerp(Offset.zero, offset, i \/ kMoveCount);\n      await sendEventToBinding(testPointer.move(location, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n      timeStamp += timeStampDelta;\n      if (timeStamp - lastTimeStamp &gt; frameInterval.inMilliseconds) {\n        await pump(Duration(milliseconds: (timeStamp - lastTimeStamp).truncate()));\n        lastTimeStamp = timeStamp;\n      }\n    }\n    await sendEventToBinding(testPointer.up(timeStamp: Duration(milliseconds: timeStamp.round())), result);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getBottomLeft",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point at the bottom left of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getBottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getBottomLeft(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.bottomLeft(Offset.zero));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getBottomRight",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point at the bottom right of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getBottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getBottomRight(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.bottomRight(Offset.zero));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getCenter",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point at the center of the given widget.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getCenter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getCenter(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.center(Offset.zero));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns the rect of the given widget. This is only valid once\nthe widget's render object has been laid out at least once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect getRect(Finder finder) =&gt; getTopLeft(finder) &amp; getSize(finder);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getSize",
                    "type": "dart:ui.Size",
                    "desc": "<p>Returns the size of the given widget. This is only valid once\nthe widget's render object has been laid out at least once.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size getSize(Finder finder) {\n  TestAsyncUtils.guardSync();\n  final Element element = finder.evaluate().single;\n  final RenderBox box = element.renderObject;\n  assert(box != null);\n  return box.size;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getTopLeft",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point at the top left of the given widget.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getTopLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getTopLeft(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; Offset.zero);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getTopRight",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point at the top right of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/getTopRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getTopRight(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.topRight(Offset.zero));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hitTestOnBinding",
                    "type": "gestures.HitTestResult",
                    "desc": "<p>Forwards the given location to the binding's hitTest logic.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/hitTestOnBinding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HitTestResult hitTestOnBinding(Offset location) {\n  final HitTestResult result = HitTestResult();\n  binding.hitTest(result, location);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "longPress",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down \/ pointer up sequence (with a delay of\n<a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> + <a href=\"gestures\/kPressTimeout-constant.html\">kPressTimeout<\/a> between the two events) at the\ncenter of the given widget, assuming it is exposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/longPress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; longPress(Finder finder, {int pointer}) {\n  return longPressAt(getCenter(finder), pointer: pointer);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "longPressAt",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the given location with\na delay of <a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> + <a href=\"gestures\/kPressTimeout-constant.html\">kPressTimeout<\/a> between the two events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/longPressAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; longPressAt(Offset location, {int pointer}) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(location, pointer: pointer);\n    await pump(kLongPressTimeout + kPressTimeout);\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "press",
                    "type": "dart:async.Future<flutter_test.TestGesture>",
                    "desc": "<p>Dispatch a pointer down at the center of the given widget, assuming it is\nexposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/press.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; press(Finder finder, {int pointer}) {\n  return TestAsyncUtils.guard&lt;TestGesture&gt;(() {\n    return startGesture(getCenter(finder), pointer: pointer);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "flutter_test.TestGesture"
                    ]
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Called to indicate that time should advance.<\/p>\n<p>This is invoked by <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a>, for instance, so that the sequence of\npointer events occurs over time.<\/p>\n<p>The <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> subclass implements this by deferring to the <a href=\"flutter_test\/WidgetController\/binding.html\">binding<\/a>.<\/p>\n<p>See also <a href=\"scheduler\/SchedulerBinding\/endOfFrame.html\">SchedulerBinding.endOfFrame<\/a>, which returns a future that could\nbe appropriate to return in the implementation of this method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pump(Duration duration);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "",
                    "desc": "<p>The render object of the matching widget in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none widget (even if they all have the same render object).<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstRenderObject.html\">firstRenderObject<\/a> if you expect to match several render objects but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/renderObjectList.html\">renderObjectList<\/a> if you expect to match several render objects and want all of them.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/renderObject.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T renderObject&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single.renderObject;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "renderObjectList",
                    "type": "dart:core.Iterable",
                    "desc": "<p>The render objects of the matching widgets in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/renderObject.html\">renderObject<\/a> if you only expect to match one render object.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstRenderObject.html\">firstRenderObject<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/renderObjectList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; renderObjectList&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) {\n    final T result = element.renderObject;\n    return result;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "sendEventToBinding",
                    "type": "dart:async.Future",
                    "desc": "<p>Forwards the given pointer event to the binding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "result",
                            "type": "gestures.HitTestResult",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/sendEventToBinding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; sendEventToBinding(PointerEvent event, HitTestResult result) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    binding.dispatchEvent(event, result);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "startGesture",
                    "type": "dart:async.Future<flutter_test.TestGesture>",
                    "desc": "<p>Creates a gesture with an initial down gesture at a particular point, and\nreturns the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object which you can use to continue the\ngesture.<\/p>\n<p>You can use <a href=\"flutter_test\/WidgetController\/createGesture.html\">createGesture<\/a> if your gesture doesn't begin with an initial\ndown gesture.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "downLocation",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "kind",
                            "type": "dart:ui.PointerDeviceKind",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/startGesture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; startGesture(\n  Offset downLocation, {\n  int pointer,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n}) async {\n  final TestGesture result = await createGesture(pointer: pointer, kind: kind);\n  await result.down(downLocation);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "flutter_test.TestGesture"
                    ]
                },
                {
                    "name": "state",
                    "type": "",
                    "desc": "<p>The matching state in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty, matches more than\none state, or matches a widget that has no state.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstState.html\">firstState<\/a> if you expect to match several states but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/stateList.html\">stateList<\/a> if you expect to match several states and want all of them.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/state.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T state&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return _stateOf&lt;T&gt;(finder.evaluate().single, finder);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "stateList",
                    "type": "dart:core.Iterable",
                    "desc": "<p>The matching states in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if any of the elements in <code>finder<\/code> match a widget\nthat has no state.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/state.html\">state<\/a> if you only expect to match one state.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstState.html\">firstState<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/stateList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; stateList&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) =&gt; _stateOf&lt;T&gt;(element, finder));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "tap",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the center of\nthe given widget, assuming it is exposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/tap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; tap(Finder finder, {int pointer}) {\n  return tapAt(getCenter(finder), pointer: pointer);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "tapAt",
                    "type": "dart:async.Future",
                    "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the given location.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointer",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/tapAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; tapAt(Offset location, {int pointer}) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(location, pointer: pointer);\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "widget",
                    "type": "",
                    "desc": "<p>The matching widget in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none widget.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstWidget.html\">firstWidget<\/a> if you expect to match several widgets but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/widgetList.html\">widgetList<\/a> if you expect to match several widgets and want all of them.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/widget.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T widget&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single.widget;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "widgetList",
                    "type": "dart:core.Iterable",
                    "desc": "<p>The matching widgets in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/widget.html\">widget<\/a> if you only expect to match one widget.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstWidget.html\">firstWidget<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "flutter_test.WidgetController",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetController\/widgetList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; widgetList&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) {\n    final T result = element.widget;\n    return result;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "allElements",
                    "type": "dart:core.Iterable<widgets.Element>",
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Element"
                    ],
                    "desc": "<p>All elements currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>The returned iterable is lazy. It does not walk the entire widget tree\nimmediately, but rather a chunk at a time as the iteration progresses\nusing <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/allElements.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; get allElements {\n  TestAsyncUtils.guardSync();\n  return collectAllElementsFrom(binding.renderViewElement, skipOffstage: false);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "allRenderObjects",
                    "type": "dart:core.Iterable<rendering.RenderObject>",
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderObject"
                    ],
                    "desc": "<p>Render objects of all the widgets currently in the widget tree\n(lazy pre-order traversal).<\/p>\n<p>This will almost certainly include many duplicates since the\nrender object of a <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> or <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> is the\nrender object of its child; only <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s have\ntheir own render object.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/allRenderObjects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;RenderObject&gt; get allRenderObjects {\n  TestAsyncUtils.guardSync();\n  return allElements.map&lt;RenderObject&gt;((Element element) =&gt; element.renderObject);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "allStates",
                    "type": "dart:core.Iterable<widgets.State<widgets.StatefulWidget>>",
                    "types": [
                        "dart:core.Iterable",
                        "widgets.State",
                        "widgets.StatefulWidget"
                    ],
                    "desc": "<p>All states currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>The returned iterable is lazy. It does not walk the entire widget tree\nimmediately, but rather a chunk at a time as the iteration progresses\nusing <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/allStates.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;State&gt; get allStates {\n  TestAsyncUtils.guardSync();\n  return allElements.whereType&lt;StatefulElement&gt;().map&lt;State&gt;((StatefulElement element) =&gt; element.state);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "allWidgets",
                    "type": "dart:core.Iterable<widgets.Widget>",
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Widget"
                    ],
                    "desc": "<p>All widgets currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>Can contain duplicates, since widgets can be used in multiple\nplaces in the widget tree.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/allWidgets.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Widget&gt; get allWidgets {\n  TestAsyncUtils.guardSync();\n  return allElements.map&lt;Widget&gt;((Element element) =&gt; element.widget);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "binding",
                    "type": "widgets.WidgetsBinding",
                    "types": [],
                    "desc": "<p>A reference to the current instance of the binding.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/binding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetsBinding binding\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "layers",
                    "type": "dart:core.List<rendering.Layer>",
                    "types": [
                        "dart:core.List",
                        "rendering.Layer"
                    ],
                    "desc": "<p>Returns a list of all the <a href=\"rendering\/Layer-class.html\">Layer<\/a> objects in the rendering.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/layers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Layer&gt; get layers =&gt; _walkLayers(binding.renderView.layer).toList();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nextPointer",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The next available pointer identifier.<\/p>\n<p>This is the default pointer identifier that will be used the next time the\n<a href=\"flutter_test\/WidgetController\/startGesture.html\">startGesture<\/a> method is called without an explicit pointer identifier.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetController",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetController\/nextPointer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int nextPointer = 1\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "flutter_test.LiveWidgetController",
                "flutter_test.WidgetTester"
            ],
            "realImplementors": [
                "flutter_test.LiveWidgetController",
                "flutter_test.WidgetTester"
            ],
            "cn": [],
            "href": "flutter_test\/WidgetController-class.html",
            "desc": "<p>Class that programmatically interacts with widgets.<\/p>\n<p>For a variant of this class suited specifically for unit tests, see\n<a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>. For one suitable for live tests on a device, consider\n<a href=\"flutter_test\/LiveWidgetController-class.html\">LiveWidgetController<\/a>.<\/p>\n<p>Concrete subclasses must implement the <a href=\"flutter_test\/WidgetController\/pump.html\">pump<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WidgetController"
        },
        {
            "name": "flutter_test.WidgetPredicate",
            "type": "dart:core.bool",
            "desc": "<p>Signature for <a href=\"flutter_test\/CommonFinders\/byWidgetPredicate.html\">CommonFinders.byWidgetPredicate<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "widget",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/WidgetPredicate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef WidgetPredicate = bool Function(Widget widget);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "flutter_test.WidgetTester",
            "extends": [
                "flutter_test.WidgetController",
                "dart:core.Object"
            ],
            "memberOf": "flutter_test",
            "events": [],
            "methods": [
                {
                    "name": "createTicker",
                    "type": "scheduler.Ticker",
                    "desc": "<p>Creates a ticker with the given callback.<\/p>\n<p>The kind of ticker provided depends on the kind of ticker provider.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "onTick",
                            "type": "scheduler.TickerCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/createTicker.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTicker createTicker(TickerCallback onTick) {\n  _tickers ??= &lt;_TestTicker&gt;{};\n  final _TestTicker result = _TestTicker(onTick, _removeTicker);\n  _tickers.add(result);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispatchEvent",
                    "type": "",
                    "desc": "<p>Handler for device events caught by the binding in live test mode.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "result",
                            "type": "gestures.HitTestResult",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/dispatchEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispatchEvent(PointerEvent event, HitTestResult result) {\n  if (event is PointerDownEvent) {\n    final RenderObject innerTarget = result.path.firstWhere(\n      (HitTestEntry candidate) =&gt; candidate.target is RenderObject,\n    ).target;\n    final Element innerTargetElement = collectAllElementsFrom(\n      binding.renderViewElement,\n      skipOffstage: true,\n    ).lastWhere(\n      (Element element) =&gt; element.renderObject == innerTarget,\n      orElse: () =&gt; null,\n    );\n    if (innerTargetElement == null) {\n      debugPrint('No widgets found at ${binding.globalToLocal(event.position)}.');\n      return;\n    }\n    final List&lt;Element&gt; candidates = &lt;Element&gt;[];\n    innerTargetElement.visitAncestorElements((Element element) {\n      candidates.add(element);\n      return true;\n    });\n    assert(candidates.isNotEmpty);\n    String descendantText;\n    int numberOfWithTexts = 0;\n    int numberOfTypes = 0;\n    int totalNumber = 0;\n    debugPrint('Some possible finders for the widgets at ${binding.globalToLocal(event.position)}:');\n    for (Element element in candidates) {\n      if (totalNumber &gt; 13) \/\/ an arbitrary number of finders that feels useful without being overwhelming\n        break;\n      totalNumber += 1; \/\/ optimistically assume we'll be able to describe it\n\n      if (element.widget is Tooltip) {\n        final Tooltip widget = element.widget;\n        final Iterable&lt;Element&gt; matches = find.byTooltip(widget.message).evaluate();\n        if (matches.length == 1) {\n          debugPrint('  find.byTooltip(\\'${widget.message}\\')');\n          continue;\n        }\n      }\n\n      if (element.widget is Text) {\n        assert(descendantText == null);\n        final Text widget = element.widget;\n        final Iterable&lt;Element&gt; matches = find.text(widget.data).evaluate();\n        descendantText = widget.data;\n        if (matches.length == 1) {\n          debugPrint('  find.text(\\'${widget.data}\\')');\n          continue;\n        }\n      }\n\n      if (element.widget.key is ValueKey&lt;dynamic&gt;) {\n        final ValueKey&lt;dynamic&gt; key = element.widget.key;\n        String keyLabel;\n        if (key is ValueKey&lt;int&gt; ||\n            key is ValueKey&lt;double&gt; ||\n            key is ValueKey&lt;bool&gt;) {\n          keyLabel = 'const ${element.widget.key.runtimeType}(${key.value})';\n        } else if (key is ValueKey&lt;String&gt;) {\n          keyLabel = 'const Key(\\'${key.value}\\')';\n        }\n        if (keyLabel != null) {\n          final Iterable&lt;Element&gt; matches = find.byKey(key).evaluate();\n          if (matches.length == 1) {\n            debugPrint('  find.byKey($keyLabel)');\n            continue;\n          }\n        }\n      }\n\n      if (!_isPrivate(element.widget.runtimeType)) {\n        if (numberOfTypes &lt; 5) {\n          final Iterable&lt;Element&gt; matches = find.byType(element.widget.runtimeType).evaluate();\n          if (matches.length == 1) {\n            debugPrint('  find.byType(${element.widget.runtimeType})');\n            numberOfTypes += 1;\n            continue;\n          }\n        }\n\n        if (descendantText != null &amp;&amp; numberOfWithTexts &lt; 5) {\n          final Iterable&lt;Element&gt; matches = find.widgetWithText(element.widget.runtimeType, descendantText).evaluate();\n          if (matches.length == 1) {\n            debugPrint('  find.widgetWithText(${element.widget.runtimeType}, \\'$descendantText\\')');\n            numberOfWithTexts += 1;\n            continue;\n          }\n        }\n      }\n\n      if (!_isPrivate(element.runtimeType)) {\n        final Iterable&lt;Element&gt; matches = find.byElementType(element.runtimeType).evaluate();\n        if (matches.length == 1) {\n          debugPrint('  find.byElementType(${element.runtimeType})');\n          continue;\n        }\n      }\n\n      totalNumber -= 1; \/\/ if we got here, we didn't actually find something to say about it\n    }\n    if (totalNumber == 0)\n      debugPrint('  &lt;could not come up with any unique finders&gt;');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "ensureSemantics",
                    "type": "rendering.SemanticsHandle",
                    "desc": "<p>Enable semantics in a test by creating a <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>.<\/p>\n<p>The handle must be disposed at the end of the test.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/ensureSemantics.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHandle ensureSemantics() {\n  return binding.pipelineOwner.ensureSemantics();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ensureVisible",
                    "type": "dart:async.Future",
                    "desc": "<p>Given a widget <code>W<\/code> specified by <code>finder<\/code> and a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget <code>S<\/code> in\nits ancestry tree, this scrolls <code>S<\/code> so as to make <code>W<\/code> visible.<\/p>\n<p>Shorthand for <code>Scrollable.ensureVisible(tester.element(finder))<\/code><\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/ensureVisible.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; ensureVisible(Finder finder) =&gt; Scrollable.ensureVisible(element(finder));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "enterText",
                    "type": "dart:async.Future",
                    "desc": "<p>Give the text input widget specified by <code>finder<\/code> the focus and\nenter <code>text<\/code> as if it been provided by the onscreen keyboard.<\/p>\n<p>The widget specified by <code>finder<\/code> must be an <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> or have\nan <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> descendant. For example <code>find.byType(TextField)<\/code>\nor <code>find.byType(TextFormField)<\/code>, or <code>find.byType(EditableText)<\/code>.<\/p>\n<p>To just give <code>finder<\/code> the focus without entering any text,\nsee <a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">showKeyboard<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/enterText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; enterText(Finder finder, String text) async {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    await showKeyboard(finder);\n    testTextInput.enterText(text);\n    await idle();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getSemantics",
                    "type": "semantics.SemanticsNode",
                    "desc": "<p>Attempts to find the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> of first result from <code>finder<\/code>.<\/p>\n<p>If the object identified by the finder doesn't own it's semantic node,\nthis will return the semantics data of the first ancestor with semantics.\nThe ancestor's semantic data will include the child's as well as\nother nodes that have been merged together.<\/p>\n<p>Will throw a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the finder returns more than one element or\nif no semantics are found or are not enabled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/getSemantics.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsNode getSemantics(Finder finder) {\n  if (binding.pipelineOwner.semanticsOwner == null)\n    throw StateError('Semantics are not enabled.');\n  final Iterable&lt;Element&gt; candidates = finder.evaluate();\n  if (candidates.isEmpty) {\n    throw StateError('Finder returned no matching elements.');\n  }\n  if (candidates.length &gt; 1) {\n    throw StateError('Finder returned more than one element.');\n  }\n  final Element element = candidates.single;\n  RenderObject renderObject = element.findRenderObject();\n  SemanticsNode result = renderObject.debugSemantics;\n  while (renderObject != null &amp;&amp; result == null) {\n    renderObject = renderObject?.parent;\n    result = renderObject?.debugSemantics;\n  }\n  if (result == null)\n    throw StateError('No Semantics data found.');\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hitTestOnBinding",
                    "type": "gestures.HitTestResult",
                    "desc": "<p>Forwards the given location to the binding's hitTest logic.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/hitTestOnBinding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nHitTestResult hitTestOnBinding(Offset location) {\n  location = binding.localToGlobal(location);\n  return super.hitTestOnBinding(location);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "idle",
                    "type": "dart:async.Future",
                    "desc": "<p>Acts as if the application went idle.<\/p>\n<p>Runs all remaining microtasks, including those scheduled as a result of\nrunning them, until there are no more microtasks scheduled.<\/p>\n<p>Does not run timers. May result in an infinite loop or run out of memory\nif microtasks continue to recursively schedule new microtasks.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/idle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; idle() {\n  return TestAsyncUtils.guard&lt;void&gt;(() =&gt; binding.idle());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pageBack",
                    "type": "dart:async.Future",
                    "desc": "<p>Makes an effort to dismiss the current page with a Material <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> or\na <a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>.<\/p>\n<p>Will throw an error if there is no back button in the page.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/pageBack.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pageBack() async {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    Finder backButton = find.byTooltip('Back');\n    if (backButton.evaluate().isEmpty) {\n      backButton = find.byType(CupertinoNavigationBarBackButton);\n    }\n\n    expectSync(backButton, findsOneWidget, reason: 'One back button expected on screen');\n\n    await tap(backButton);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pump",
                    "type": "dart:async.Future",
                    "desc": "<p>Triggers a frame after <code>duration<\/code> amount of time.<\/p>\n<p>This makes the framework act as if the application had janked (missed\nframes) for <code>duration<\/code> amount of time, and then received a v-sync signal\nto paint the application.<\/p>\n<p>This is a convenience function that just calls\n<a href=\"flutter_test\/WidgetTester\/pump.html\">TestWidgetsFlutterBinding.pump<\/a>.<\/p>\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "phase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/pump.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; pump([\n  Duration duration,\n  EnginePhase phase = EnginePhase.sendSemanticsUpdate,\n]) {\n  return TestAsyncUtils.guard&lt;void&gt;(() =&gt; binding.pump(duration, phase));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pumpAndSettle",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Repeatedly calls <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> with the given <code>duration<\/code> until there are no\nlonger any frames scheduled. This will call <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> at least once, even if\nno frames are scheduled when the function is called, to flush any pending\nmicrotasks which may themselves schedule a frame.<\/p>\n<p>This essentially waits for all animations to have completed.<\/p>\n<p>If it takes longer that the given <code>timeout<\/code> to settle, then the test will\nfail (this method will throw an exception). In particular, this means that\nif there is an infinite animation in progress (for example, if there is an\nindeterminate progress indicator spinning), this method will throw.<\/p>\n<p>The default timeout is ten minutes, which is longer than most reasonable\nfinite animations would last.<\/p>\n<p>If the function returns, it returns the number of pumps that it performed.<\/p>\n<p>In general, it is better practice to figure out exactly why each frame is\nneeded, and then to <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> exactly as many frames as necessary. This will\nhelp catch regressions where, for instance, an animation is being started\none frame later than it should.<\/p>\n<p>Alternatively, one can check that the return value from this function\nmatches the expected number of pumps.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "phase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/pumpAndSettle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; pumpAndSettle([\n  Duration duration = const Duration(milliseconds: 100),\n  EnginePhase phase = EnginePhase.sendSemanticsUpdate,\n  Duration timeout = const Duration(minutes: 10),\n]) {\n  assert(duration != null);\n  assert(duration &gt; Duration.zero);\n  assert(timeout != null);\n  assert(timeout &gt; Duration.zero);\n  assert(() {\n    final WidgetsBinding binding = this.binding;\n    if (binding is LiveTestWidgetsFlutterBinding &amp;&amp;\n        binding.framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.benchmark) {\n      throw 'When using LiveTestWidgetsFlutterBindingFramePolicy.benchmark, '\n            'hasScheduledFrame is never set to true. This means that pumpAndSettle() '\n            'cannot be used, because it has no way to know if the application has '\n            'stopped registering new frames.';\n    }\n    return true;\n  }());\n  int count = 0;\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final DateTime endTime = binding.clock.fromNowBy(timeout);\n    do {\n      if (binding.clock.now().isAfter(endTime))\n        throw FlutterError('pumpAndSettle timed out');\n      await binding.pump(duration, phase);\n      count += 1;\n    } while (binding.hasScheduledFrame);\n  }).then&lt;int&gt;((_) =&gt; count);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "pumpBenchmark",
                    "type": "dart:async.Future",
                    "desc": "<p>Triggers a frame after <code>duration<\/code> amount of time, return as soon as the frame is drawn.<\/p>\n<p>This enables driving an artificially high CPU load by rendering frames in\na tight loop. It must be used with the frame policy set to\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy.benchmark<\/a>.<\/p>\n<p>Similarly to <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a>, this doesn't actually wait for <code>duration<\/code>, just\nadvances the clock.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/pumpBenchmark.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pumpBenchmark(Duration duration) async {\n  assert(() {\n    final TestWidgetsFlutterBinding widgetsBinding = binding;\n    return widgetsBinding is LiveTestWidgetsFlutterBinding &amp;&amp;\n            widgetsBinding.framePolicy == LiveTestWidgetsFlutterBindingFramePolicy.benchmark;\n  }());\n\n  dynamic caughtException;\n  void handleError(dynamic error, StackTrace stackTrace) =&gt; caughtException ??= error;\n\n  await Future&lt;void&gt;.microtask(() { binding.handleBeginFrame(duration); }).catchError(handleError);\n  await idle();\n  await Future&lt;void&gt;.microtask(() { binding.handleDrawFrame(); }).catchError(handleError);\n  await idle();\n\n  if (caughtException != null) {\n    throw caughtException;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pumpWidget",
                    "type": "dart:async.Future",
                    "desc": "<p>Renders the UI from the given <code>widget<\/code>.<\/p>\n<p>Calls <a href=\"widgets\/runApp.html\">runApp<\/a> with the given widget, then triggers a frame and flushes\nmicrotasks, by calling <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> with the same <code>duration<\/code> (if any). The\nsupplied <a href=\"flutter_test\/EnginePhase-class.html\">EnginePhase<\/a> is the final phase reached during the pump pass; if\nnot supplied, the whole pass is executed.<\/p>\n<p>Subsequent calls to this is different from <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> in that it forces a full\nrebuild of the tree, even if <code>widget<\/code> is the same as the previous call.\n<a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> will only rebuild the widgets that have changed.<\/p>\n<p>This method should not be used as the first parameter to an <a href=\"flutter_test\/expect.html\">expect<\/a> or\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a> call to test that a widget throws an exception. Instead, use\n<a href=\"flutter_test\/WidgetTester\/takeException.html\">TestWidgetsFlutterBinding.takeException<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">testWidgets('MyWidget asserts invalid bounds', (WidgetTester tester) async {\n  await tester.pumpWidget(MyWidget(-1));\n  expect(tester.takeException(), isAssertionError); \/\/ or isNull, as appropriate.\n});<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "widget",
                            "type": "widgets.Widget",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "duration",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "phase",
                            "type": "flutter_test.EnginePhase",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/pumpWidget.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pumpWidget(\n  Widget widget, [\n  Duration duration,\n  EnginePhase phase = EnginePhase.sendSemanticsUpdate,\n]) {\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    binding.attachRootWidget(widget);\n    binding.scheduleFrame();\n    return binding.pump(duration, phase);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runAsync",
                    "type": "dart:async.Future",
                    "desc": "<p>Runs a <code>callback<\/code> that performs real asynchronous work.<\/p>\n<p>This is intended for callers who need to call asynchronous methods where\nthe methods spawn isolates or OS threads and thus cannot be executed\nsynchronously by calling <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a>.<\/p>\n<p>If callers were to run these types of asynchronous tasks directly in\ntheir test methods, they run the possibility of encountering deadlocks.<\/p>\n<p>If <code>callback<\/code> completes successfully, this will return the future\nreturned by <code>callback<\/code>.<\/p>\n<p>If <code>callback<\/code> completes with an error, the error will be caught by the\nFlutter framework and made available via <a href=\"flutter_test\/WidgetTester\/takeException.html\">takeException<\/a>, and this method\nwill return a future that completes will <code>null<\/code>.<\/p>\n<p>Re-entrant calls to this method are not allowed; callers of this method\nare required to wait for the returned future to complete before calling\nthis method again. Attempts to do otherwise will result in a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> error being thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "dart:async.Future",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "additionalTime",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/runAsync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; runAsync&lt;T&gt;(\n  Future&lt;T&gt; callback(), {\n  Duration additionalTime = const Duration(milliseconds: 1000),\n}) =&gt; binding.runAsync&lt;T&gt;(callback, additionalTime: additionalTime);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "sendEventToBinding",
                    "type": "dart:async.Future",
                    "desc": "<p>Forwards the given pointer event to the binding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "gestures.PointerEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "result",
                            "type": "gestures.HitTestResult",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/sendEventToBinding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; sendEventToBinding(PointerEvent event, HitTestResult result) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    binding.dispatchEvent(event, result, source: TestBindingEventSource.test);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "showKeyboard",
                    "type": "dart:async.Future",
                    "desc": "<p>Give the text input widget specified by <code>finder<\/code> the focus, as if the\nonscreen keyboard had appeared.<\/p>\n<p>Implies a call to <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a>.<\/p>\n<p>The widget specified by <code>finder<\/code> must be an <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> or have\nan <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> descendant. For example <code>find.byType(TextField)<\/code>\nor <code>find.byType(TextFormField)<\/code>, or <code>find.byType(EditableText)<\/code>.<\/p>\n<p>Tests that just need to add text to widgets like <a href=\"material\/TextField-class.html\">TextField<\/a>\nor <a href=\"material\/TextFormField-class.html\">TextFormField<\/a> only need to call <a href=\"flutter_test\/WidgetTester\/enterText.html\">enterText<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "finder",
                            "type": "flutter_test.Finder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/showKeyboard.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; showKeyboard(Finder finder) async {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final EditableTextState editable = state&lt;EditableTextState&gt;(\n      find.descendant(\n        of: finder,\n        matching: find.byType(EditableText),\n        matchRoot: true,\n      ),\n    );\n    binding.focusedEditable = editable;\n    await pump();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "takeException",
                    "type": "",
                    "desc": "<p>Returns the exception most recently caught by the Flutter framework.<\/p>\n<p>See <a href=\"flutter_test\/WidgetTester\/takeException.html\">TestWidgetsFlutterBinding.takeException<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/takeException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic takeException() {\n  return binding.takeException();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "verifyTickersWereDisposed",
                    "type": "",
                    "desc": "<p>Throws an exception if any tickers created by the <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> are still\nactive when the method is called.<\/p>\n<p>An argument can be specified to provide a string that will be used in the\nerror message. It should be an adverbial phrase describing the current\nsituation, such as \"at the end of the test\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "flutter_test.WidgetTester",
                    "sig": "",
                    "params": [
                        {
                            "name": "when",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "flutter_test\/WidgetTester\/verifyTickersWereDisposed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void verifyTickersWereDisposed([ String when = 'when none should have been' ]) {\n  assert(when != null);\n  if (_tickers != null) {\n    for (Ticker ticker in _tickers) {\n      if (ticker.isActive) {\n        throw FlutterError(\n          'A Ticker was active $when.\\n'\n          'All Tickers must be disposed. Tickers used by AnimationControllers '\n          'should be disposed by calling dispose() on the AnimationController itself. '\n          'Otherwise, the ticker will leak.\\n'\n          'The offending ticker was: ${ticker.toString(debugIncludeStack: true)}'\n        );\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "binding",
                    "type": "flutter_test.TestWidgetsFlutterBinding",
                    "types": [],
                    "desc": "<p>The binding instance used by the testing framework.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetTester",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetTester\/binding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTestWidgetsFlutterBinding get binding =&gt; super.binding;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hasRunningAnimations",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether there are any any transient callbacks scheduled.<\/p>\n<p>This essentially checks whether all animations have completed.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/WidgetTester\/pumpAndSettle.html\">pumpAndSettle<\/a>, which essentially calls <a href=\"flutter_test\/WidgetTester\/pump.html\">pump<\/a> until there are no\nscheduled frames.<\/li>\n<li>\n<a href=\"scheduler\/SchedulerBinding\/transientCallbackCount.html\">SchedulerBinding.transientCallbackCount<\/a>, which is the value on which\nthis is based.<\/li>\n<li>\n<a href=\"scheduler\/SchedulerBinding\/hasScheduledFrame.html\">SchedulerBinding.hasScheduledFrame<\/a>, which is true whenever a frame is\npending. <a href=\"scheduler\/SchedulerBinding\/hasScheduledFrame.html\">SchedulerBinding.hasScheduledFrame<\/a> is made true when a\nwidget calls <a href=\"widgets\/State\/setState.html\">State.setState<\/a>, even if there are no transient callbacks\nscheduled. This is what <a href=\"flutter_test\/WidgetTester\/pumpAndSettle.html\">pumpAndSettle<\/a> uses.<\/li>\n<\/ul>",
                    "memberOf": "flutter_test.WidgetTester",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetTester\/hasRunningAnimations.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasRunningAnimations =&gt; binding.transientCallbackCount &gt; 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "testTextInput",
                    "type": "flutter_test.TestTextInput",
                    "types": [],
                    "desc": "<p>Returns the TestTextInput singleton.<\/p>\n<p>Typical app tests will not need to use this value. To add text to widgets\nlike <a href=\"material\/TextField-class.html\">TextField<\/a> or <a href=\"material\/TextFormField-class.html\">TextFormField<\/a>, call <a href=\"flutter_test\/WidgetTester\/enterText.html\">enterText<\/a>.<\/p>\n        ",
                    "memberOf": "flutter_test.WidgetTester",
                    "isConstant": false,
                    "href": "flutter_test\/WidgetTester\/testTextInput.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TestTextInput get testTextInput =&gt; binding.testTextInput;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "flutter_test\/WidgetTester-class.html",
            "desc": "<p>Class that programmatically interacts with widgets and the test environment.<\/p>\n<p>For convenience, instances of this class (such as the one provided by\n<code>testWidget<\/code>) can be used as the <code>vsync<\/code> for <code>AnimationController<\/code> objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WidgetTester"
        },
        {
            "name": "flutter_test.WidgetTesterCallback",
            "type": "dart:async.Future",
            "desc": "<p>Signature for callback to <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> and <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "widgetTester",
                    "type": "flutter_test.WidgetTester",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/WidgetTesterCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef WidgetTesterCallback = Future&lt;void&gt; Function(WidgetTester widgetTester);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "type": "",
            "href": "flutter_test\/androidTapTargetGuideline-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "androidTapTargetGuideline",
            "memberOf": "flutter_test"
        },
        {
            "name": "benchmarkWidgets",
            "type": "dart:async.Future",
            "desc": "<p>Runs the <code>callback<\/code> inside the Flutter benchmark environment.<\/p>\n<p>Use this function for benchmarking custom <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>s and\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>s when you want to be able to use features from\n<a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>. The callback, when run, will be given\na new instance of <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>. The <a href=\"flutter_test\/find-constant.html\">find<\/a> object provides\nconvenient widget <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>s for use with the <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>.<\/p>\n<p>The callback can be asynchronous (using <code>async<\/code>\/<code>await<\/code> or using\nexplicit <a href=\"dart-async\/Future-class.html\">Future<\/a>s). If it is, then <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a> will return\na <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the callback's does. Otherwise, it\nwill return a Future that is always complete.<\/p>\n<p>If the callback is asynchronous, make sure you <code>await<\/code> the call\nto <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a>, otherwise it won't run!<\/p>\n<p>Benchmarks must not be run in checked mode. To avoid this, this\nfunction will print a big message if it is run in checked mode.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>main() async {\n  assert(false); \/\/ fail in checked mode\n  await benchmarkWidgets((WidgetTester tester) async {\n    await tester.pumpWidget(new MyWidget());\n    final Stopwatch timer = new Stopwatch()..start();\n    for (int index = 0; index &lt; 10000; index += 1) {\n      await tester.tap(find.text('Tap me'));\n      await tester.pump();\n    }\n    timer.stop();\n    debugPrint('Time taken: ${timer.elapsedMilliseconds}ms');\n  });\n  exit(0);\n}\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "flutter_test.WidgetTesterCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "flutter_test.WidgetTesterCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/benchmarkWidgets.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; benchmarkWidgets(WidgetTesterCallback callback) {\n  assert(() {\n    print('\u250f\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2513');\n    print('\u2507 \u26a0 THIS BENCHMARK IS BEING RUN WITH ASSERTS ENABLED \u26a0  \u2507');\n    print('\u2521\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2526');\n    print('\u2502                                                       \u2502');\n    print('\u2502  Numbers obtained from a benchmark while asserts are  \u2502');\n    print('\u2502  enabled will not accurately reflect the performance  \u2502');\n    print('\u2502  that will be experienced by end users using release  \u254e');\n    print('\u2502  builds. Benchmarks should be run using this command  \u2506');\n    print('\u2502  line:  flutter run --release benchmark.dart          \u250a');\n    print('\u2502                                                        ');\n    print('\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u254c\u2504\u2508  \ud83d\udc22');\n    return true;\n  }());\n  final TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();\n  assert(binding is! AutomatedTestWidgetsFlutterBinding);\n  final WidgetTester tester = WidgetTester._(binding);\n  tester._recordNumberOfSemanticsHandles();\n  return binding.runTest(\n    () =&gt; callback(tester),\n    tester._endOfTestVerifications,\n  ) ?? Future&lt;void&gt;.value();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clipsWithBoundingRRect",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> locates a single object whose root RenderObject\nis a <a href=\"rendering\/RenderClipRRect-class.html\">RenderClipRRect<\/a> with no clipper set, and border radius equals to\n<code>borderRadius<\/code>, or an equivalent <a href=\"rendering\/RenderClipPath-class.html\">RenderClipPath<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/clipsWithBoundingRRect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher clipsWithBoundingRRect({ @required BorderRadius borderRadius }) {\n  return _ClipsWithBoundingRRect(borderRadius: borderRadius);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "flutter_test\/clipsWithBoundingRect-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "clipsWithBoundingRect",
            "memberOf": "flutter_test"
        },
        {
            "name": "clipsWithShapeBorder",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> locates a single object whose root RenderObject\nis a <a href=\"rendering\/RenderClipPath-class.html\">RenderClipPath<\/a> with a <a href=\"rendering\/ShapeBorderClipper-class.html\">ShapeBorderClipper<\/a> that clips to\n<code>shape<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/clipsWithShapeBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher clipsWithShapeBorder({ @required ShapeBorder shape }) {\n  return _ClipsWithShapeBorder(shape: shape);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "collectAllElementsFrom",
            "type": "dart:core.Iterable<widgets.Element>",
            "desc": "<p>Provides an iterable that efficiently returns all the elements\nrooted at the given element. See <a href=\"foundation\/CachingIterable-class.html\">CachingIterable<\/a> for details.<\/p>\n<p>This method must be called again if the tree changes. You cannot\ncall this function once, then reuse the iterable after having\nchanged the state of the tree, because the iterable returned by\nthis function caches the results and only walks the tree once.<\/p>\n<p>The same applies to any iterable obtained indirectly through this\none, for example the results of calling <code>where<\/code> on this iterable\nare also cached.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "rootElement",
                    "type": "widgets.Element",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skipOffstage",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rootElement",
                    "type": "widgets.Element",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skipOffstage",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/collectAllElementsFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; collectAllElementsFrom(\n  Element rootElement, {\n  @required bool skipOffstage,\n}) {\n  return CachingIterable&lt;Element&gt;(_DepthFirstChildIterator(rootElement, skipOffstage));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Iterable",
                "widgets.Element"
            ]
        },
        {
            "name": "coversSameAreaAs",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that 2 paths cover the same area by sampling multiple points.<\/p>\n<p>Samples at least <code>sampleSize<\/code>^2 points inside <code>areaToCompare<\/code>, and asserts\nthat the <a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a> method returns the same value for each of the\npoints for both paths.<\/p>\n<p>When using this matcher you typically want to use a rectangle larger than\nthe area you expect to paint in for <code>areaToCompare<\/code> to catch errors where\nthe path draws outside the expected area.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "expectedPath",
                    "type": "dart:ui.Path",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "areaToCompare",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sampleSize",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "expectedPath",
                    "type": "dart:ui.Path",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "areaToCompare",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sampleSize",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/coversSameAreaAs.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher coversSameAreaAs(Path expectedPath, { @required Rect areaToCompare, int sampleSize = 20 })\n  =&gt; _CoversSameAreaAs(expectedPath, areaToCompare: areaToCompare, sampleSize: sampleSize);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "doesNotMeetGuideline",
            "type": "",
            "desc": "<p>The inverse matcher of <a href=\"flutter_test\/meetsGuideline.html\">meetsGuideline<\/a>.<\/p>\n<p>This is needed because the <a href=\"package-matcher_matcher\/isNot.html\">isNot<\/a> matcher does not compose with an\n<code>AsyncMatcher<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "guideline",
                    "type": "flutter_test.AccessibilityGuideline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "guideline",
                    "type": "flutter_test.AccessibilityGuideline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/doesNotMeetGuideline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncMatcher doesNotMeetGuideline(AccessibilityGuideline guideline) {\n  return _DoesNotMatchAccessibilityGuideline(guideline);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "equalsIgnoringHashCodes",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that two <a href=\"dart-core\/String-class.html\">String<\/a>s are equal after normalizing likely hash codes.<\/p>\n<p>A <code>#<\/code> followed by 5 hexadecimal digits is assumed to be a short hash code\nand is normalized to #00000.<\/p>\n<p>See Also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/describeIdentity.html\">describeIdentity<\/a>, a method that generates short descriptions of objects\nwith ids that match the pattern #<code>0-9a-f<\/code>{5}.<\/li>\n<li>\n<a href=\"foundation\/shortHash.html\">shortHash<\/a>, a method that generates a 5 character long hexadecimal\n<a href=\"dart-core\/String-class.html\">String<\/a> based on <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>.<\/li>\n<li>\n<code>TreeDiagnosticsMixin.toStringDeep<\/code>, a method that returns a <a href=\"dart-core\/String-class.html\">String<\/a>\ntypically containing multiple hash codes.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/equalsIgnoringHashCodes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher equalsIgnoringHashCodes(String value) {\n  return _EqualsIgnoringHashCodes(value);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expect",
            "type": "",
            "desc": "<p>Assert that <code>actual<\/code> matches <code>matcher<\/code>.<\/p>\n<p>See <a href=\"package-test_api_test_api\/expect.html\">test_package.expect<\/a> for details. This is a variant of that function\nthat additionally verifies that there are no asynchronous APIs\nthat have not yet resolved.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a> for use with asynchronous matchers.<\/li><\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/expect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expect(\n  dynamic actual,\n  dynamic matcher, {\n  String reason,\n  dynamic skip, \/\/ true or a String\n}) {\n  TestAsyncUtils.guardSync();\n  test_package.expect(actual, matcher, reason: reason, skip: skip);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "expectLater",
            "type": "dart:async.Future",
            "desc": "<p>Just like <a href=\"flutter_test\/expect.html\">expect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the matcher\nhas finished matching.<\/p>\n<p>See <a href=\"package-test_api_test_api\/expectLater.html\">test_package.expectLater<\/a> for details.<\/p>\n<p>If the matcher fails asynchronously, that failure is piped to the returned\nfuture where it can be handled by user code. If it is not handled by user\ncode, the test will fail.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/expectLater.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; expectLater(\n  dynamic actual,\n  dynamic matcher, {\n  String reason,\n  dynamic skip, \/\/ true or a String\n}) {\n  \/\/ We can't wrap the delegate in a guard, or we'll hit async barriers in\n  \/\/ [TestWidgetsFlutterBinding] while we're waiting for the matcher to complete\n  TestAsyncUtils.guardSync();\n  return test_package.expectLater(actual, matcher, reason: reason, skip: skip)\n           .then&lt;void&gt;((dynamic value) =&gt; null);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expectSync",
            "type": "",
            "desc": "<p>Assert that <code>actual<\/code> matches <code>matcher<\/code>.<\/p>\n<p>See <a href=\"package-test_api_test_api\/expect.html\">test_package.expect<\/a> for details. This variant will <em>not<\/em> check that\nthere are no outstanding asynchronous API requests. As such, it can be\ncalled from, e.g., callbacks that are run during build or layout, or in the\ncompletion handlers of futures that execute in response to user input.<\/p>\n<p>Generally, it is better to use <a href=\"flutter_test\/expect.html\">expect<\/a>, which does include checks to ensure\nthat asynchronous APIs are not being called.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "actual",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "matcher",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/expectSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void expectSync(\n  dynamic actual,\n  dynamic matcher, {\n  String reason,\n}) {\n  test_package.expect(actual, matcher, reason: reason);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "flutter_test\/find-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "find",
            "memberOf": "flutter_test"
        },
        {
            "name": "findsNWidgets",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that the <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> locates the specified number of widgets in the widget tree.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.text('Save'), findsNWidgets(2));\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/findsNothing-constant.html\">findsNothing<\/a>, when you want the finder to not find anything.<\/li>\n<li>\n<a href=\"flutter_test\/findsWidgets-constant.html\">findsWidgets<\/a>, when you want the finder to find one or more widgets.<\/li>\n<li>\n<a href=\"flutter_test\/findsOneWidget-constant.html\">findsOneWidget<\/a>, when you want the finder to find exactly one widget.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "n",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "n",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/findsNWidgets.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher findsNWidgets(int n) =&gt; _FindsWidgetMatcher(n, n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "flutter_test\/findsNothing-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "findsNothing",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/findsOneWidget-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "findsOneWidget",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/findsWidgets-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "findsWidgets",
            "memberOf": "flutter_test"
        },
        {
            "name": "group",
            "type": "",
            "desc": "<p>Creates a group of tests.<\/p>\n<p>A group's description (converted to a string) is included in the descriptions\nof any tests or sub-groups it contains. <a href=\"flutter_test\/setUp.html\">setUp<\/a> and <a href=\"flutter_test\/tearDown.html\">tearDown<\/a> are also scoped\nto the containing group.<\/p>\n<p>If <code>testOn<\/code> is passed, it's parsed as a <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">platform selector<\/a>; the test will\nonly be run on matching platforms.<\/p>\n<p>If <code>timeout<\/code> is passed, it's used to modify or replace the default timeout\nof 30 seconds. Timeout modifications take precedence in suite-group-test\norder, so <code>timeout<\/code> will also modify any timeouts set on the suite, and will\nbe modified by any timeouts set on individual tests.<\/p>\n<p>If <code>skip<\/code> is a String or <code>true<\/code>, the group is skipped. If it's a String, it\nshould explain why the group is skipped; this reason will be printed instead\nof running the group's tests.<\/p>\n<p>If <code>tags<\/code> is passed, it declares user-defined tags that are applied to the\ntest. These tags can be used to select or skip the test on the command line,\nor to do bulk test configuration. All tags should be declared in the\n<a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/doc\/package_config.md#configuring-tags\">package configuration file<\/a>. The parameter can be an\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of tag names, or a <a href=\"dart-core\/String-class.html\">String<\/a> representing a single tag.<\/p>\n<p><code>onPlatform<\/code> allows groups to be configured on a platform-by-platform\nbasis. It's a map from strings that are parsed as <code>PlatformSelector<\/code>s to\nannotation classes: <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a>, <a href=\"package-test_api_test_api\/Skip-class.html\">Skip<\/a>, or lists of those. These\nannotations apply only on the given platforms. For example:<\/p>\n<pre class=\"language-dart\"><code>group('potentially slow tests', () {\n  \/\/ ...\n}, onPlatform: {\n  \/\/ These tests are especially slow on Windows.\n  'windows': new Timeout.factor(2),\n  'browser': [\n    new Skip('TODO: add browser support'),\n    \/\/ They'll be slow on browsers once it works on them.\n    new Timeout.factor(2)\n  ]\n});\n<\/code><\/pre>\n<p>If multiple platforms match, the annotations apply in order as through\nthey were in nested groups.<\/p>\n<p>If the <code>solo<\/code> flag is <code>true<\/code>, only tests and groups marked as\n'solo' will be be run. This only restricts tests <em>within this test\nsuite<\/em>\u2014tests in other suites will run as normal. We recommend that users\navoid this flag if possible, and instead use the test runner flag <code>-n<\/code> to\nfilter tests by name.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/group.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@isTestGroup\nvoid group(Object description, Function body, { dynamic skip }) {\n  _declarer.group(description.toString(), body, skip: skip);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "flutter_test\/hasAGoodToStringDeep-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "hasAGoodToStringDeep",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/hasNoImmediateClip-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "hasNoImmediateClip",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/hasOneLineDescription-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "hasOneLineDescription",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/iOSTapTargetGuideline-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "iOSTapTargetGuideline",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/isInCard-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "isInCard",
            "memberOf": "flutter_test"
        },
        {
            "name": "isInstanceOf",
            "type": "matcher.Matcher",
            "desc": "<p>A matcher that compares the type of the actual value to the type argument T.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/isInstanceOf.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(ianh): Remove this once https:\/\/github.com\/dart-lang\/matcher\/issues\/98 is fixed\nMatcher isInstanceOf&lt;T&gt;() =&gt; test_package.TypeMatcher&lt;T&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isMethodCall",
            "type": "matcher.Matcher",
            "desc": "<p>A matcher for <a href=\"services\/MethodCall-class.html\">MethodCall<\/a>s, asserting that it has the specified\nmethod <code>name<\/code> and <code>arguments<\/code>.<\/p>\n<p>Arguments checking implements deep equality for <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"dart-core\/Map-class.html\">Map<\/a> types.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arguments",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "arguments",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/isMethodCall.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher isMethodCall(String name, { @required dynamic arguments }) {\n  return _IsMethodCall(name, arguments);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "flutter_test\/isNotInCard-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "isNotInCard",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/isOffstage-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "isOffstage",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/isOnstage-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "isOnstage",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/kDragSlopDefault-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "kDragSlopDefault",
            "memberOf": "flutter_test"
        },
        {
            "type": "",
            "href": "flutter_test\/labeledTapTargetGuideline-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "labeledTapTargetGuideline",
            "memberOf": "flutter_test"
        },
        {
            "name": "matchesGoldenFile",
            "type": "",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, <a href=\"dart-async\/Future-class.html\">Future&lt;ui.Image&gt;<\/a>, or <a href=\"dart-ui\/Image-class.html\">ui.Image<\/a> matches the\ngolden image file identified by <code>key<\/code>.<\/p>\n<p>For the case of a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, the <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> must match exactly one widget and\nthe rendered image of the first <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> ancestor of the widget is\ntreated as the image for the widget.<\/p>\n<p><code>key<\/code> may be either a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> or a <a href=\"dart-core\/String-class.html\">String<\/a> representation of a URI.<\/p>\n<p>This is an asynchronous matcher, meaning that callers should use\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a> when using this matcher and await the future returned by\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">await expectLater(find.text('Save'), matchesGoldenFile('save.png'));\nawait expectLater(image, matchesGoldenFile('save.png'));\nawait expectLater(imageFuture, matchesGoldenFile('save.png'));\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/goldenFileComparator.html\">goldenFileComparator<\/a>, which acts as the backend for this matcher.<\/li>\n<li>\n<a href=\"flutter_test\/matchesReferenceImage.html\">matchesReferenceImage<\/a>, which should be used instead if you want to\nverify that two different code paths create identical images.<\/li>\n<li>\n<a href=\"flutter_test\/flutter_test-library.html\">flutter_test<\/a> for a discussion of test configurations, whereby callers\nmay swap out the backend for this matcher.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/matchesGoldenFile.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncMatcher matchesGoldenFile(dynamic key) {\n  if (key is Uri) {\n    return _MatchesGoldenFile(key);\n  } else if (key is String) {\n    return _MatchesGoldenFile.forStringPath(key);\n  }\n  throw ArgumentError('Unexpected type for golden file: ${key.runtimeType}');\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "matchesReferenceImage",
            "type": "",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, <a href=\"dart-async\/Future-class.html\">Future&lt;ui.Image&gt;<\/a>, or <a href=\"dart-ui\/Image-class.html\">ui.Image<\/a> matches a\nreference image identified by <code>image<\/code>.<\/p>\n<p>For the case of a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, the <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> must match exactly one widget and\nthe rendered image of the first <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> ancestor of the widget is\ntreated as the image for the widget.<\/p>\n<p>This is an asynchronous matcher, meaning that callers should use\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a> when using this matcher and await the future returned by\n<a href=\"flutter_test\/expectLater.html\">expectLater<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">final ui.Paint paint = ui.Paint()\n  ..style = ui.PaintingStyle.stroke\n  ..strokeWidth = 1.0;\nfinal ui.PictureRecorder recorder = ui.PictureRecorder();\nfinal ui.Canvas pictureCanvas = ui.Canvas(recorder);\npictureCanvas.drawCircle(Offset.zero, 20.0, paint);\nfinal ui.Picture picture = recorder.endRecording();\nui.Image referenceImage = picture.toImage(50, 50);\n\nawait expectLater(find.text('Save'), matchesReferenceImage(referenceImage));\nawait expectLater(image, matchesReferenceImage(referenceImage);\nawait expectLater(imageFuture, matchesReferenceImage(referenceImage));\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"flutter_test\/matchesGoldenFile.html\">matchesGoldenFile<\/a>, which should be used instead if you need to verify\nthat a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> or <a href=\"dart-ui\/Image-class.html\">ui.Image<\/a> matches a golden image.<\/li><\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/matchesReferenceImage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncMatcher matchesReferenceImage(ui.Image image) {\n  return _MatchesReferenceImage(image);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "matchesSemantics",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> contains the specified information.<\/p>\n<p>If either the label, hint, value, textDirection, or rect fields are not\nprovided, then they are not part of the comparison.  All of the boolean\nflag and action fields must match, and default to false.<\/p>\n<p>To retrieve the semantics data of a widget, use <code>tester.getSemantics<\/code>\nwith a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> that returns a single widget. Semantics must be enabled\nin order to use this method.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsHandle handle = tester.ensureSemantics();\nexpect(tester.getSemantics(find.text('hello')), matchesSemanticsNode(label: 'hello'));\nhandle.dispose();\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"flutter_test\/WidgetTester\/getSemantics.html\">WidgetTester.getSemantics<\/a>, the tester method which retrieves semantics.<\/li><\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "increasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decreasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "thickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "platformViewId",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCheckedState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isChecked",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isSelected",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isButton",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isFocused",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isTextField",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasEnabledState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isInMutuallyExclusiveGroup",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isHeader",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isObscured",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "namesRoute",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scopesRoute",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isHidden",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isImage",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isLiveRegion",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasToggledState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isToggled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasImplicitScrolling",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasTapAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasLongPressAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollLeftAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollRightAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollUpAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollDownAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasIncreaseAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDecreaseAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasShowOnScreenAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorForwardByCharacterAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorBackwardByCharacterAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorForwardByWordAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorBackwardByWordAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasSetSelectionAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCopyAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCutAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasPasteAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDidGainAccessibilityFocusAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDidLoseAccessibilityFocusAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDismissAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTapHint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onLongPressHint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "customActions",
                    "type": "dart:core.List<semantics.CustomSemanticsAction>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "semantics.CustomSemanticsAction"
                    ]
                },
                {
                    "name": "children",
                    "type": "dart:core.List<matcher.Matcher>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "matcher.Matcher"
                    ]
                },
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "increasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decreasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "thickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "platformViewId",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCheckedState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isChecked",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isSelected",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isButton",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isFocused",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isTextField",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasEnabledState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isInMutuallyExclusiveGroup",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isHeader",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isObscured",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "namesRoute",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scopesRoute",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isHidden",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isImage",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isLiveRegion",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasToggledState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isToggled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasImplicitScrolling",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasTapAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasLongPressAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollLeftAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollRightAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollUpAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasScrollDownAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasIncreaseAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDecreaseAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasShowOnScreenAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorForwardByCharacterAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorBackwardByCharacterAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorForwardByWordAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasMoveCursorBackwardByWordAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasSetSelectionAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCopyAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasCutAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasPasteAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDidGainAccessibilityFocusAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDidLoseAccessibilityFocusAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hasDismissAction",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTapHint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onLongPressHint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "customActions",
                    "type": "dart:core.List<semantics.CustomSemanticsAction>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "semantics.CustomSemanticsAction"
                    ]
                },
                {
                    "name": "children",
                    "type": "dart:core.List<matcher.Matcher>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "matcher.Matcher"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/matchesSemantics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher matchesSemantics({\n  String label,\n  String hint,\n  String value,\n  String increasedValue,\n  String decreasedValue,\n  TextDirection textDirection,\n  Rect rect,\n  Size size,\n  double elevation,\n  double thickness,\n  int platformViewId,\n  \/\/ Flags \/\/\n  bool hasCheckedState = false,\n  bool isChecked = false,\n  bool isSelected = false,\n  bool isButton = false,\n  bool isFocused = false,\n  bool isTextField = false,\n  bool hasEnabledState = false,\n  bool isEnabled = false,\n  bool isInMutuallyExclusiveGroup = false,\n  bool isHeader = false,\n  bool isObscured = false,\n  bool namesRoute = false,\n  bool scopesRoute = false,\n  bool isHidden = false,\n  bool isImage = false,\n  bool isLiveRegion = false,\n  bool hasToggledState = false,\n  bool isToggled = false,\n  bool hasImplicitScrolling = false,\n  \/\/ Actions \/\/\n  bool hasTapAction = false,\n  bool hasLongPressAction = false,\n  bool hasScrollLeftAction = false,\n  bool hasScrollRightAction = false,\n  bool hasScrollUpAction = false,\n  bool hasScrollDownAction = false,\n  bool hasIncreaseAction = false,\n  bool hasDecreaseAction = false,\n  bool hasShowOnScreenAction = false,\n  bool hasMoveCursorForwardByCharacterAction = false,\n  bool hasMoveCursorBackwardByCharacterAction = false,\n  bool hasMoveCursorForwardByWordAction = false,\n  bool hasMoveCursorBackwardByWordAction = false,\n  bool hasSetSelectionAction = false,\n  bool hasCopyAction = false,\n  bool hasCutAction = false,\n  bool hasPasteAction = false,\n  bool hasDidGainAccessibilityFocusAction = false,\n  bool hasDidLoseAccessibilityFocusAction = false,\n  bool hasDismissAction = false,\n  \/\/ Custom actions and overrides\n  String onTapHint,\n  String onLongPressHint,\n  List&lt;CustomSemanticsAction&gt; customActions,\n  List&lt;Matcher&gt; children,\n}) {\n  final List&lt;SemanticsFlag&gt; flags = &lt;SemanticsFlag&gt;[];\n  if (hasCheckedState)\n    flags.add(SemanticsFlag.hasCheckedState);\n  if (isChecked)\n    flags.add(SemanticsFlag.isChecked);\n  if (isSelected)\n    flags.add(SemanticsFlag.isSelected);\n  if (isButton)\n    flags.add(SemanticsFlag.isButton);\n  if (isTextField)\n    flags.add(SemanticsFlag.isTextField);\n  if (isFocused)\n    flags.add(SemanticsFlag.isFocused);\n  if (hasEnabledState)\n    flags.add(SemanticsFlag.hasEnabledState);\n  if (isEnabled)\n    flags.add(SemanticsFlag.isEnabled);\n  if (isInMutuallyExclusiveGroup)\n    flags.add(SemanticsFlag.isInMutuallyExclusiveGroup);\n  if (isHeader)\n    flags.add(SemanticsFlag.isHeader);\n  if (isObscured)\n    flags.add(SemanticsFlag.isObscured);\n  if (namesRoute)\n    flags.add(SemanticsFlag.namesRoute);\n  if (scopesRoute)\n    flags.add(SemanticsFlag.scopesRoute);\n  if (isHidden)\n    flags.add(SemanticsFlag.isHidden);\n  if (isImage)\n    flags.add(SemanticsFlag.isImage);\n  if (isLiveRegion)\n    flags.add(SemanticsFlag.isLiveRegion);\n  if (hasToggledState)\n    flags.add(SemanticsFlag.hasToggledState);\n  if (isToggled)\n    flags.add(SemanticsFlag.isToggled);\n  if (hasImplicitScrolling)\n    flags.add(SemanticsFlag.hasImplicitScrolling);\n\n  final List&lt;SemanticsAction&gt; actions = &lt;SemanticsAction&gt;[];\n  if (hasTapAction)\n    actions.add(SemanticsAction.tap);\n  if (hasLongPressAction)\n    actions.add(SemanticsAction.longPress);\n  if (hasScrollLeftAction)\n    actions.add(SemanticsAction.scrollLeft);\n  if (hasScrollRightAction)\n    actions.add(SemanticsAction.scrollRight);\n  if (hasScrollUpAction)\n    actions.add(SemanticsAction.scrollUp);\n  if (hasScrollDownAction)\n    actions.add(SemanticsAction.scrollDown);\n  if (hasIncreaseAction)\n    actions.add(SemanticsAction.increase);\n  if (hasDecreaseAction)\n    actions.add(SemanticsAction.decrease);\n  if (hasShowOnScreenAction)\n    actions.add(SemanticsAction.showOnScreen);\n  if (hasMoveCursorForwardByCharacterAction)\n    actions.add(SemanticsAction.moveCursorForwardByCharacter);\n  if (hasMoveCursorBackwardByCharacterAction)\n    actions.add(SemanticsAction.moveCursorBackwardByCharacter);\n  if (hasSetSelectionAction)\n    actions.add(SemanticsAction.setSelection);\n  if (hasCopyAction)\n    actions.add(SemanticsAction.copy);\n  if (hasCutAction)\n    actions.add(SemanticsAction.cut);\n  if (hasPasteAction)\n    actions.add(SemanticsAction.paste);\n  if (hasDidGainAccessibilityFocusAction)\n    actions.add(SemanticsAction.didGainAccessibilityFocus);\n  if (hasDidLoseAccessibilityFocusAction)\n    actions.add(SemanticsAction.didLoseAccessibilityFocus);\n  if (customActions != null &amp;&amp; customActions.isNotEmpty)\n    actions.add(SemanticsAction.customAction);\n  if (hasDismissAction)\n    actions.add(SemanticsAction.dismiss);\n  if (hasMoveCursorForwardByWordAction)\n    actions.add(SemanticsAction.moveCursorForwardByWord);\n  if (hasMoveCursorBackwardByWordAction)\n    actions.add(SemanticsAction.moveCursorBackwardByWord);\n  SemanticsHintOverrides hintOverrides;\n  if (onTapHint != null || onLongPressHint != null)\n    hintOverrides = SemanticsHintOverrides(\n      onTapHint: onTapHint,\n      onLongPressHint: onLongPressHint,\n    );\n\n  return _MatchesSemanticsData(\n    label: label,\n    hint: hint,\n    value: value,\n    increasedValue: increasedValue,\n    decreasedValue: decreasedValue,\n    actions: actions,\n    flags: flags,\n    textDirection: textDirection,\n    rect: rect,\n    size: size,\n    elevation: elevation,\n    thickness: thickness,\n    platformViewId: platformViewId,\n    customActions: customActions,\n    hintOverrides: hintOverrides,\n    children: children,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "meetsGuideline",
            "type": "",
            "desc": "<p>Asserts that the currently rendered widget meets the provided accessibility\n<code>guideline<\/code>.<\/p>\n<p>This matcher requires the result to be awaited and for semantics to be\nenabled first.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsHandle handle = tester.ensureSemantics();\nawait meetsGuideline(tester, meetsGuideline(textContrastGuideline));\nhandle.dispose();\n<\/code><\/pre>\n<p>Supported accessibility guidelines:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/androidTapTargetGuideline-constant.html\">androidTapTargetGuideline<\/a>, for Android minimum tapable area guidelines.<\/li>\n<li>\n<a href=\"flutter_test\/iOSTapTargetGuideline-constant.html\">iOSTapTargetGuideline<\/a>, for iOS minimum tapable area guidelines.<\/li>\n<li>\n<a href=\"flutter_test\/textContrastGuideline-constant.html\">textContrastGuideline<\/a>, for WCAG minimum text contrast guidelines.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "guideline",
                    "type": "flutter_test.AccessibilityGuideline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "guideline",
                    "type": "flutter_test.AccessibilityGuideline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/meetsGuideline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncMatcher meetsGuideline(AccessibilityGuideline guideline) {\n  return _MatchesAccessibilityGuideline(guideline);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "moreOrLessEquals",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that two <a href=\"dart-core\/double-class.html\">double<\/a>s are equal, within some tolerated error.<\/p>\n<p>Two values are considered equal if the difference between them is within\n1e-10 of the larger one. This is an arbitrary value which can be adjusted\nusing the <code>epsilon<\/code> argument. This matcher is intended to compare floating\npoint numbers that are the result of different sequences of operations, such\nthat they may have accumulated slightly different errors.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"package-matcher_matcher\/closeTo.html\">closeTo<\/a>, which is identical except that the epsilon argument is\nrequired and not named.<\/li>\n<li>\n<a href=\"package-matcher_matcher\/inInclusiveRange.html\">inInclusiveRange<\/a>, which matches if the argument is in a specified\nrange.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "epsilon",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "epsilon",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/moreOrLessEquals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher moreOrLessEquals(double value, { double epsilon = 1e-10 }) {\n  return _MoreOrLessEquals(value, epsilon);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "nonconst",
            "type": "",
            "desc": "<p>This function can be used to call a const constructor in such a way as to\ncreate a new instance rather than creating the common const instance.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class A {\n  const A(this.i);\n  int i;\n}\n\nmain () {\n  \/\/ prevent prefer_const_constructors lint\n  new A(nonconst(null));\n\n  \/\/ prevent prefer_const_declarations lint\n  final int $null = nonconst(null);\n  final A a = nonconst(const A(null));\n}\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "t",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/nonconst.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T nonconst&lt;T&gt;(T t) =&gt; t;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "rendersOnPhysicalModel",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> locates a single object whose root RenderObject\nis a <a href=\"rendering\/RenderPhysicalModel-class.html\">RenderPhysicalModel<\/a> or a <a href=\"rendering\/RenderPhysicalShape-class.html\">RenderPhysicalShape<\/a>.<\/p>\n<ul>\n<li>If the render object is a <a href=\"rendering\/RenderPhysicalModel-class.html\">RenderPhysicalModel<\/a><ul>\n<li>If <code>shape<\/code> is non null asserts that <a href=\"rendering\/RenderPhysicalModel\/shape.html\">RenderPhysicalModel.shape<\/a> is equal to\n<code>shape<\/code>.<\/li>\n<li>If <code>borderRadius<\/code> is non null asserts that <a href=\"rendering\/RenderPhysicalModel\/borderRadius.html\">RenderPhysicalModel.borderRadius<\/a> is equal to\n<code>borderRadius<\/code>.<\/li>\n<li>If <code>elevation<\/code> is non null asserts that <a href=\"rendering\/RenderPhysicalModel\/elevation.html\">RenderPhysicalModel.elevation<\/a> is equal to\n<code>elevation<\/code>.<\/li>\n<\/ul>\n<\/li>\n<li>If the render object is a <a href=\"rendering\/RenderPhysicalShape-class.html\">RenderPhysicalShape<\/a><ul>\n<li>If <code>borderRadius<\/code> is non null asserts that the shape is a rounded\nrectangle with this radius.<\/li>\n<li>If <code>borderRadius<\/code> is null, asserts that the shape is equivalent to\n<code>shape<\/code>.<\/li>\n<li>If <code>elevation<\/code> is non null asserts that <a href=\"rendering\/RenderPhysicalModel\/elevation.html\">RenderPhysicalModel.elevation<\/a> is equal to\n<code>elevation<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "shape",
                    "type": "painting.BoxShape",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.BoxShape",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/rendersOnPhysicalModel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher rendersOnPhysicalModel({\n  BoxShape shape,\n  BorderRadius borderRadius,\n  double elevation,\n}) {\n  return _RendersOnPhysicalModel(\n    shape: shape,\n    borderRadius: borderRadius,\n    elevation: elevation,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "rendersOnPhysicalShape",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that a <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> locates a single object whose root RenderObject\nis <a href=\"rendering\/RenderPhysicalShape-class.html\">RenderPhysicalShape<\/a> that uses a <a href=\"rendering\/ShapeBorderClipper-class.html\">ShapeBorderClipper<\/a> that clips to\n<code>shape<\/code> as its clipper.\nIf <code>elevation<\/code> is non null asserts that <a href=\"rendering\/RenderPhysicalShape\/elevation.html\">RenderPhysicalShape.elevation<\/a> is\nequal to <code>elevation<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/rendersOnPhysicalShape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher rendersOnPhysicalShape({\n  ShapeBorder shape,\n  double elevation,\n}) {\n  return _RendersOnPhysicalShape(\n    shape: shape,\n    elevation: elevation,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "reportExpectCall",
            "type": "dart:core.int",
            "desc": "<p>Report call site for <code>expect()<\/code> call. Returns the number of frames that\nshould be elided if a stack were to be modified to hide the expect call, or\nzero if no such call was found.<\/p>\n<p>If the head of the stack trace consists of a failure as a result of calling\nthe test_widgets <a href=\"flutter_test\/expect.html\">expect<\/a> function, this will fill the given StringBuffer\nwith the precise file and line number that called that function.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "stack",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "information",
                    "type": "dart:core.StringBuffer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stack",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "information",
                    "type": "dart:core.StringBuffer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/reportExpectCall.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int reportExpectCall(StackTrace stack, StringBuffer information) {\n  final RegExp line0 = RegExp(r'^#0 +fail \\(.+\\)$');\n  final RegExp line1 = RegExp(r'^#1 +_expect \\(.+\\)$');\n  final RegExp line2 = RegExp(r'^#2 +expect \\(.+\\)$');\n  final RegExp line3 = RegExp(r'^#3 +expect \\(.+\\)$');\n  final RegExp line4 = RegExp(r'^#4 +[^(]+ \\((.+?):([0-9]+)(?::[0-9]+)?\\)$');\n  final List&lt;String&gt; stackLines = stack.toString().split('\\n');\n  if (line0.firstMatch(stackLines[0]) != null &amp;&amp;\n      line1.firstMatch(stackLines[1]) != null &amp;&amp;\n      line2.firstMatch(stackLines[2]) != null &amp;&amp;\n      line3.firstMatch(stackLines[3]) != null) {\n    final Match expectMatch = line4.firstMatch(stackLines[4]);\n    assert(expectMatch != null);\n    assert(expectMatch.groupCount == 2);\n    information.writeln('This was caught by the test expectation on the following line:');\n    information.writeln('  ${expectMatch.group(1)} line ${expectMatch.group(2)}');\n    return 4;\n  }\n  return 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setUp",
            "type": "",
            "desc": "<p>Registers a function to be run before tests.<\/p>\n<p>This function will be called before each test is run. <code>callback<\/code> may be\nasynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, it applies only to tests in that\ngroup. <code>callback<\/code> will be run after any set-up callbacks in parent groups or\nat the top level.<\/p>\n<p>Each callback at the top level or in a given group will be run in the order\nthey were declared.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/setUp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUp(Function body) {\n  _declarer.setUp(body);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUpAll",
            "type": "",
            "desc": "<p>Registers a function to be run once before all tests.<\/p>\n<p><code>callback<\/code> may be asynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, <code>callback<\/code> will run before all tests\nin that group. It will be run after any <a href=\"flutter_test\/setUpAll.html\">setUpAll<\/a> callbacks in parent\ngroups or at the top level. It won't be run if none of the tests in the\ngroup are run.<\/p>\n<p><strong>Note<\/strong>: This function makes it very easy to accidentally introduce hidden\ndependencies between tests that should be isolated. In general, you should\nprefer <a href=\"flutter_test\/setUp.html\">setUp<\/a>, and only use <a href=\"flutter_test\/setUpAll.html\">setUpAll<\/a> if the callback is prohibitively\nslow.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/setUpAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUpAll(Function body) {\n  _declarer.setUpAll(body);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "tearDown",
            "type": "",
            "desc": "<p>Registers a function to be run after tests.<\/p>\n<p>This function will be called after each test is run. <code>callback<\/code> may be\nasynchronous; if so, it must return a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>If this is called within a test group, it applies only to tests in that\ngroup. <code>callback<\/code> will be run before any tear-down callbacks in parent\ngroups or at the top level.<\/p>\n<p>Each callback at the top level or in a given group will be run in the\nreverse of the order they were declared.<\/p>\n<p>See also <a href=\"package-test_api_test_api\/addTearDown.html\">addTearDown<\/a>, which adds tear-downs to a running test.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/tearDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void tearDown(Function body) {\n  _declarer.tearDown(body);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "tearDownAll",
            "type": "",
            "desc": "<p>Registers a function to be run once after all tests.<\/p>\n<p>If this is called within a test group, <code>callback<\/code> will run after all tests\nin that group. It will be run before any <a href=\"flutter_test\/tearDownAll.html\">tearDownAll<\/a> callbacks in parent\ngroups or at the top level. It won't be run if none of the tests in the\ngroup are run.<\/p>\n<p><strong>Note<\/strong>: This function makes it very easy to accidentally introduce hidden\ndependencies between tests that should be isolated. In general, you should\nprefer <a href=\"flutter_test\/tearDown.html\">tearDown<\/a>, and only use <a href=\"flutter_test\/tearDownAll.html\">tearDownAll<\/a> if the callback is\nprohibitively slow.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/tearDownAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void tearDownAll(Function body) {\n  _declarer.tearDownAll(body);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "test",
            "type": "",
            "desc": "<p>Creates a new test case with the given description (converted to a string)\nand body.<\/p>\n<p>The description will be added to the descriptions of any surrounding\n<a href=\"flutter_test\/group.html\">group<\/a>s. If <code>testOn<\/code> is passed, it's parsed as a <a href=\"https:\/\/github.com\/dart-lang\/test\/tree\/master\/pkgs\/test#platform-selectors\">platform selector<\/a>; the\ntest will only be run on matching platforms.<\/p>\n<p>If <code>timeout<\/code> is passed, it's used to modify or replace the default timeout\nof 30 seconds. Timeout modifications take precedence in suite-group-test\norder, so <code>timeout<\/code> will also modify any timeouts set on the group or suite.<\/p>\n<p>If <code>skip<\/code> is a String or <code>true<\/code>, the test is skipped. If it's a String, it\nshould explain why the test is skipped; this reason will be printed instead\nof running the test.<\/p>\n<p>If <code>tags<\/code> is passed, it declares user-defined tags that are applied to the\ntest. These tags can be used to select or skip the test on the command line,\nor to do bulk test configuration. All tags should be declared in the\n<a href=\"https:\/\/github.com\/dart-lang\/test\/blob\/master\/doc\/package_config.md#configuring-tags\">package configuration file<\/a>. The parameter can be an\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of tag names, or a <a href=\"dart-core\/String-class.html\">String<\/a> representing a single tag.<\/p>\n<p>If <code>retry<\/code> is passed, the test will be retried the provided number of times\nbefore being marked as a failure.<\/p>\n<p><code>onPlatform<\/code> allows tests to be configured on a platform-by-platform\nbasis. It's a map from strings that are parsed as <code>PlatformSelector<\/code>s to\nannotation classes: <a href=\"package-test_api_test_api\/Timeout-class.html\">Timeout<\/a>, <a href=\"package-test_api_test_api\/Skip-class.html\">Skip<\/a>, or lists of those. These\nannotations apply only on the given platforms. For example:<\/p>\n<pre class=\"language-dart\"><code>test('potentially slow test', () {\n  \/\/ ...\n}, onPlatform: {\n  \/\/ This test is especially slow on Windows.\n  'windows': new Timeout.factor(2),\n  'browser': [\n    new Skip('TODO: add browser support'),\n    \/\/ This will be slow on browsers once it works on them.\n    new Timeout.factor(2)\n  ]\n});\n<\/code><\/pre>\n<p>If multiple platforms match, the annotations apply in order as through\nthey were in nested groups.<\/p>\n<p>If the <code>solo<\/code> flag is <code>true<\/code>, only tests and groups marked as\n'solo' will be be run. This only restricts tests <em>within this test\nsuite<\/em>\u2014tests in other suites will run as normal. We recommend that users\navoid this flag if possible and instead use the test runner flag <code>-n<\/code> to\nfilter tests by name.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "testOn",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "tags",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onPlatform",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "retry",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/test.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@isTest\nvoid test(\n  Object description,\n  Function body, {\n  String testOn,\n  Timeout timeout,\n  dynamic skip,\n  dynamic tags,\n  Map&lt;String, dynamic&gt; onPlatform,\n  int retry,\n}) {\n  _declarer.test(\n    description.toString(), body,\n    testOn: testOn,\n    timeout: timeout,\n    skip: skip,\n    onPlatform: onPlatform,\n    tags: tags,\n    retry: retry,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "testWidgets",
            "type": "",
            "desc": "<p>Runs the <code>callback<\/code> inside the Flutter test environment.<\/p>\n<p>Use this function for testing custom <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>s and\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>s.<\/p>\n<p>The callback can be asynchronous (using <code>async<\/code>\/<code>await<\/code> or\nusing explicit <a href=\"dart-async\/Future-class.html\">Future<\/a>s).\nTests using the <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a>\nhave a default time out of two seconds,\nwhich is automatically increased for some expensive operations,\nand can also be manually increased by calling\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a>.\nThe maximum that this timeout can reach (automatically or manually increased)\nis defined by the timeout property,\nwhich defaults to <a href=\"flutter_test\/TestWidgetsFlutterBinding\/defaultTestTimeout.html\">TestWidgetsFlutterBinding.defaultTestTimeout<\/a>.<\/p>\n<p>If the <code>enableSemantics<\/code> parameter is set to <code>true<\/code>,\n<a href=\"flutter_test\/WidgetTester\/ensureSemantics.html\">WidgetTester.ensureSemantics<\/a> will have been called before the tester is\npassed to the <code>callback<\/code>, and that handle will automatically be disposed\nafter the callback is finished.<\/p>\n<p>This function uses the <a href=\"flutter_test\/test.html\">test<\/a> function in the test package to\nregister the given callback as a test. The callback, when run,\nwill be given a new instance of <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>. The <a href=\"flutter_test\/find-constant.html\">find<\/a> object\nprovides convenient widget <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>s for use with the\n<a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a> to learn more about\ntimeout and how to manually increase timeouts.<\/li><\/ul>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">testWidgets('MyWidget', (WidgetTester tester) async {\n  await tester.pumpWidget(new MyWidget());\n  await tester.tap(find.text('Save'));\n  expect(find.text('Success'), findsOneWidget);\n});\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "flutter_test.WidgetTesterCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "flutter_test.WidgetTesterCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "timeout",
                    "type": "test_api.Timeout",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/testWidgets.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@isTest\nvoid testWidgets(\n  String description,\n  WidgetTesterCallback callback, {\n  bool skip = false,\n  test_package.Timeout timeout,\n  bool semanticsEnabled = false,\n}) {\n  final TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();\n  final WidgetTester tester = WidgetTester._(binding);\n  timeout ??= binding.defaultTestTimeout;\n  test(\n    description,\n    () {\n      SemanticsHandle semanticsHandle;\n      if (semanticsEnabled == true) {\n        semanticsHandle = tester.ensureSemantics();\n      }\n      tester._recordNumberOfSemanticsHandles();\n      test_package.addTearDown(binding.postTest);\n      return binding.runTest(\n        () async {\n          await callback(tester);\n          semanticsHandle?.dispose();\n        },\n        tester._endOfTestVerifications,\n        description: description ?? '',\n      );\n    },\n    skip: skip,\n    timeout: timeout,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "flutter_test\/textContrastGuideline-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "textContrastGuideline",
            "memberOf": "flutter_test"
        },
        {
            "name": "within",
            "type": "matcher.Matcher",
            "desc": "<p>Asserts that two values are within a certain distance from each other.<\/p>\n<p>The distance is computed by a <a href=\"flutter_test\/DistanceFunction.html\">DistanceFunction<\/a>.<\/p>\n<p>If <code>distanceFunction<\/code> is null, a standard distance function is used for the\n<code>runtimeType<\/code> of the <code>from<\/code> argument. Standard functions are defined for\nthe following types:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Color-class.html\">Color<\/a>, whose distance is the maximum component-wise delta.<\/li>\n<li>\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, whose distance is the Euclidean distance computed using the\nmethod <a href=\"dart-ui\/Offset\/distance.html\">Offset.distance<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>, whose distance is the maximum component-wise delta.<\/li>\n<li>\n<a href=\"dart-ui\/Size-class.html\">Size<\/a>, whose distance is the <a href=\"dart-ui\/Offset\/distance.html\">Offset.distance<\/a> of the offset computed as\nthe difference between two sizes.<\/li>\n<li>\n<a href=\"dart-core\/int-class.html\">int<\/a>, whose distance is the absolute difference between two integers.<\/li>\n<li>\n<a href=\"dart-core\/double-class.html\">double<\/a>, whose distance is the absolute difference between two doubles.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/moreOrLessEquals.html\">moreOrLessEquals<\/a>, which is similar to this function, but specializes in\n<a href=\"dart-core\/double-class.html\">double<\/a>s and has an optional <code>epsilon<\/code> parameter.<\/li>\n<li>\n<a href=\"package-matcher_matcher\/closeTo.html\">closeTo<\/a>, which specializes in numbers only.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test",
            "sig": "",
            "params": [
                {
                    "name": "distance",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "from",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "distanceFunction",
                    "type": "flutter_test.DistanceFunction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "distance",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "from",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "distanceFunction",
                    "type": "flutter_test.DistanceFunction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/within.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matcher within&lt;T&gt;({\n  @required num distance,\n  @required T from,\n  DistanceFunction&lt;T&gt; distanceFunction,\n}) {\n  distanceFunction ??= _kStandardDistanceFunctions[from.runtimeType];\n\n  if (distanceFunction == null) {\n    throw ArgumentError(\n      'The specified distanceFunction was null, and a standard distance '\n      'function was not found for type ${from.runtimeType} of the provided '\n      '`from` argument.'\n    );\n  }\n\n  return _IsWithinDistance&lt;T&gt;(distanceFunction, from, distance);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}