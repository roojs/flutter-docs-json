{
    "name": "process",
    "href": "package-process_process\/package-process_process-library.html",
    "cn": [
        {
            "name": "process.LocalProcessManager",
            "extends": [],
            "memberOf": "process",
            "events": [],
            "methods": [
                {
                    "name": "LocalProcessManager",
                    "type": "",
                    "desc": "<p>Creates a new <code>LocalProcessManager<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-process_process\/LocalProcessManager\/LocalProcessManager.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LocalProcessManager();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "canRun",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if the <code>executable<\/code> exists and if it can be executed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/LocalProcessManager\/canRun.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canRun(covariant Object executable, {String workingDirectory}) =&gt;\n    getExecutablePath(executable, workingDirectory) != null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "killPid",
                    "type": "dart:core.bool",
                    "desc": "<p>Kills the process with id <code>pid<\/code>.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process with id\n<code>pid<\/code>. This includes Linux and OS X. The default signal is\n<a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a> which will normally terminate the\nprocess.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process with id <code>pid<\/code> in a platform specific\nway, and the <code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "pid",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "signal",
                            "type": "dart:io.ProcessSignal",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/LocalProcessManager\/killPid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool killPid(int pid, [ProcessSignal signal = ProcessSignal.sigterm]) {\n  return Process.killPid(pid, signal);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "run",
                    "type": "dart:async.Future<dart:io.ProcessResult>",
                    "desc": "<p>Starts a process and runs it non-interactively to completion.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is true, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>The encoding used for decoding <code>stdout<\/code> and <code>stderr<\/code> into text is\ncontrolled through <code>stdoutEncoding<\/code> and <code>stderrEncoding<\/code>. The\ndefault encoding is <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>. If <code>null<\/code> is used no\ndecoding will happen and the <a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> will hold binary\ndata.<\/p>\n<p>Returns a <code>Future&lt;ProcessResult&gt;<\/code> that completes with the\nresult of running the process, i.e., exit code, standard out and\nstandard in.<\/p>\n<p>The following code uses <code>run<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.run('grep', ['-i', 'main', 'test.dart']).then((result) {\n  stdout.write(result.stdout);\n  stderr.write(result.stderr);\n});\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.Object"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/LocalProcessManager\/run.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;ProcessResult&gt; run(\n  covariant List&lt;Object&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: systemEncoding,\n  Encoding stderrEncoding: systemEncoding,\n}) {\n  return Process.run(\n    _getExecutable(command, workingDirectory, runInShell),\n    _getArguments(command),\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ProcessResult"
                    ]
                },
                {
                    "name": "runSync",
                    "type": "dart:io.ProcessResult",
                    "desc": "<p>Starts a process and runs it to completion. This is a synchronous\ncall and will block until the child process terminates.<\/p>\n<p>The arguments are the same as for <a href=\"package-process_process\/LocalProcessManager\/run.html\">run<\/a>`.<\/p>\n<p>Returns a <code>ProcessResult<\/code> with the result of running the process,\ni.e., exit code, standard out and standard in.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.Object"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/LocalProcessManager\/runSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nProcessResult runSync(\n  covariant List&lt;Object&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: systemEncoding,\n  Encoding stderrEncoding: systemEncoding,\n}) {\n  return Process.runSync(\n    _getExecutable(command, workingDirectory, runInShell),\n    _getArguments(command),\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:async.Future<dart:io.Process>",
                    "desc": "<p>Starts a process by running the specified <code>command<\/code>.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Returns a <code>Future&lt;Process&gt;<\/code> that completes with a Process instance when\nthe process has been successfully started. That <a href=\"dart-io\/Process-class.html\">Process<\/a> object can be\nused to interact with the process. If the process cannot be started, the\nreturned <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with an exception.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset, the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is <code>true<\/code>, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>Users must read all data coming on the <code>stdout<\/code> and <code>stderr<\/code>\nstreams of processes started with <a href=\"package-process_process\/LocalProcessManager\/start.html\">start<\/a>. If the user\ndoes not read all data on the streams the underlying system\nresources will not be released since there is still pending data.<\/p>\n<p>The following code uses <code>start<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.start('grep', ['-i', 'main', 'test.dart']).then((process) {\n  stdout.addStream(process.stdout);\n  stderr.addStream(process.stderr);\n});\n<\/code><\/pre>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/normal-constant.html\">ProcessStartMode.normal<\/a> (the default) a child\nprocess will be started with <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nconnected.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detached-constant.html\">ProcessStartMode.detached<\/a> a detached process will\nbe created. A detached process has no connection to its parent,\nand can keep running on its own when the parent dies. The only\ninformation available from a detached process is its <code>pid<\/code>. There\nis no connection to its <code>stdin<\/code>, <code>stdout<\/code> or <code>stderr<\/code>, nor will\nthe process' exit code become available when it terminates.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detachedWithStdio-constant.html\">ProcessStartMode.detachedWithStdio<\/a> a detached\nprocess will be created where the <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nare connected. The creator can communicate with the child through\nthese. The detached process will keep running even if these\ncommunication channels are closed. The process' exit code will\nnot become available when it terminated.<\/p>\n<p>The default value for <code>mode<\/code> is <code>ProcessStartMode.NORMAL<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.LocalProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.Object"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.ProcessStartMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/LocalProcessManager\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Process&gt; start(\n  covariant List&lt;Object&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  ProcessStartMode mode: ProcessStartMode.normal,\n}) {\n  return Process.start(\n    _getExecutable(command, workingDirectory, runInShell),\n    _getArguments(command),\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    mode: mode,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Process"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-process_process\/LocalProcessManager-class.html",
            "desc": "<p>Local implementation of the <code>ProcessManager<\/code> interface.<\/p>\n<p>This implementation delegates directly to the corresponding static methods\nin <code>dart:io<\/code>.<\/p>\n<p>All methods that take a <code>command<\/code> will run <code>toString()<\/code> on the command\nelements to derive the executable and arguments that should be passed to\nthe underlying <code>dart:io<\/code> methods. Thus, the degenerate case of\n<code>List&lt;String&gt;<\/code> will trivially work as expected.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LocalProcessManager"
        },
        {
            "name": "process.ProcessManager",
            "extends": [],
            "memberOf": "process",
            "events": [],
            "methods": [
                {
                    "name": "ProcessManager",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-process_process\/ProcessManager\/ProcessManager.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "canRun",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if the <code>executable<\/code> exists and if it can be executed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessManager\/canRun.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool canRun(dynamic executable, {String workingDirectory});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "killPid",
                    "type": "dart:core.bool",
                    "desc": "<p>Kills the process with id <code>pid<\/code>.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process with id\n<code>pid<\/code>. This includes Linux and OS X. The default signal is\n<a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a> which will normally terminate the\nprocess.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process with id <code>pid<\/code> in a platform specific\nway, and the <code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "pid",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "signal",
                            "type": "dart:io.ProcessSignal",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessManager\/killPid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool killPid(int pid, [ProcessSignal signal = ProcessSignal.sigterm]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "run",
                    "type": "dart:async.Future<dart:io.ProcessResult>",
                    "desc": "<p>Starts a process and runs it non-interactively to completion.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is true, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>The encoding used for decoding <code>stdout<\/code> and <code>stderr<\/code> into text is\ncontrolled through <code>stdoutEncoding<\/code> and <code>stderrEncoding<\/code>. The\ndefault encoding is <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>. If <code>null<\/code> is used no\ndecoding will happen and the <a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> will hold binary\ndata.<\/p>\n<p>Returns a <code>Future&lt;ProcessResult&gt;<\/code> that completes with the\nresult of running the process, i.e., exit code, standard out and\nstandard in.<\/p>\n<p>The following code uses <code>run<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.run('grep', ['-i', 'main', 'test.dart']).then((result) {\n  stdout.write(result.stdout);\n  stderr.write(result.stderr);\n});\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessManager\/run.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ProcessResult&gt; run(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: systemEncoding,\n  Encoding stderrEncoding: systemEncoding,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ProcessResult"
                    ]
                },
                {
                    "name": "runSync",
                    "type": "dart:io.ProcessResult",
                    "desc": "<p>Starts a process and runs it to completion. This is a synchronous\ncall and will block until the child process terminates.<\/p>\n<p>The arguments are the same as for <a href=\"package-process_process\/ProcessManager\/run.html\">run<\/a>`.<\/p>\n<p>Returns a <code>ProcessResult<\/code> with the result of running the process,\ni.e., exit code, standard out and standard in.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessManager\/runSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ProcessResult runSync(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: systemEncoding,\n  Encoding stderrEncoding: systemEncoding,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:async.Future<dart:io.Process>",
                    "desc": "<p>Starts a process by running the specified <code>command<\/code>.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Returns a <code>Future&lt;Process&gt;<\/code> that completes with a Process instance when\nthe process has been successfully started. That <a href=\"dart-io\/Process-class.html\">Process<\/a> object can be\nused to interact with the process. If the process cannot be started, the\nreturned <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with an exception.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset, the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is <code>true<\/code>, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>Users must read all data coming on the <code>stdout<\/code> and <code>stderr<\/code>\nstreams of processes started with <a href=\"package-process_process\/ProcessManager\/start.html\">start<\/a>. If the user\ndoes not read all data on the streams the underlying system\nresources will not be released since there is still pending data.<\/p>\n<p>The following code uses <code>start<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.start('grep', ['-i', 'main', 'test.dart']).then((process) {\n  stdout.addStream(process.stdout);\n  stderr.addStream(process.stderr);\n});\n<\/code><\/pre>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/normal-constant.html\">ProcessStartMode.normal<\/a> (the default) a child\nprocess will be started with <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nconnected.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detached-constant.html\">ProcessStartMode.detached<\/a> a detached process will\nbe created. A detached process has no connection to its parent,\nand can keep running on its own when the parent dies. The only\ninformation available from a detached process is its <code>pid<\/code>. There\nis no connection to its <code>stdin<\/code>, <code>stdout<\/code> or <code>stderr<\/code>, nor will\nthe process' exit code become available when it terminates.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detachedWithStdio-constant.html\">ProcessStartMode.detachedWithStdio<\/a> a detached\nprocess will be created where the <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nare connected. The creator can communicate with the child through\nthese. The detached process will keep running even if these\ncommunication channels are closed. The process' exit code will\nnot become available when it terminated.<\/p>\n<p>The default value for <code>mode<\/code> is <code>ProcessStartMode.NORMAL<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessManager",
                    "sig": "",
                    "params": [
                        {
                            "name": "command",
                            "type": "dart:core.List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.ProcessStartMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessManager\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Process&gt; start(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  ProcessStartMode mode: ProcessStartMode.normal,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Process"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-process_process\/ProcessManager-class.html",
            "desc": "<p>Manages the creation of abstract processes.<\/p>\n<p>Using instances of this class provides level of indirection from the static\nmethods in the <a href=\"dart-io\/Process-class.html\">Process<\/a> class, which in turn allows the underlying\nimplementation to be mocked out or decorated for testing and debugging\npurposes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessManager"
        },
        {
            "name": "process.ProcessWrapper",
            "extends": [],
            "memberOf": "process",
            "events": [],
            "methods": [
                {
                    "name": "ProcessWrapper",
                    "type": "",
                    "desc": "<p>Constructs a <a href=\"package-process_process\/ProcessWrapper-class.html\">ProcessWrapper<\/a> object that delegates to the specified\nunderlying object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessWrapper",
                    "sig": "",
                    "params": [
                        {
                            "name": "_delegate",
                            "type": "dart:io.Process",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-process_process\/ProcessWrapper\/ProcessWrapper.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ProcessWrapper(this._delegate)\n    : _stdout = new StreamController&lt;List&lt;int&gt;&gt;(),\n      _stderr = new StreamController&lt;List&lt;int&gt;&gt;(),\n      _stdoutDone = new Completer&lt;void&gt;(),\n      _stderrDone = new Completer&lt;void&gt;() {\n  _monitorStdioStream(_delegate.stdout, _stdout, _stdoutDone);\n  _monitorStdioStream(_delegate.stderr, _stderr, _stderrDone);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "kill",
                    "type": "dart:core.bool",
                    "desc": "<p>Kills the process.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process. This includes\nLinux and OS X. The default signal is <a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a>\nwhich will normally terminate the process.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process in a platform specific way, and the\n<code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "process.ProcessWrapper",
                    "sig": "",
                    "params": [
                        {
                            "name": "signal",
                            "type": "dart:io.ProcessSignal",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-process_process\/ProcessWrapper\/kill.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool kill([io.ProcessSignal signal = io.ProcessSignal.sigterm]) {\n  return _delegate.kill(signal);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "done",
                    "type": "dart:async.Future<dart:core.int>",
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ],
                    "desc": "<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the process has exited and its standard\noutput and error streams have closed.<\/p>\n<p>This exists as an alternative to <a href=\"package-process_process\/ProcessWrapper\/exitCode.html\">exitCode<\/a>, which does not guarantee\nthat the stdio streams have closed (it is possible for the exit code to\nbe available before stdout and stderr have closed).<\/p>\n<p>The future returned here will complete with the exit code of the process.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; get done async {\n  int result;\n  await Future.wait&lt;void&gt;(&lt;Future&lt;void&gt;&gt;[\n    _stdoutDone.future,\n    _stderrDone.future,\n    _delegate.exitCode.then((int value) {\n      result = value;\n    }),\n  ]);\n  assert(result != null);\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "exitCode",
                    "type": "dart:async.Future<dart:core.int>",
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns a <code>Future<\/code> which completes with the exit code of the process\nwhen the process completes.<\/p>\n<p>The handling of exit codes is platform specific.<\/p>\n<p>On Linux and OS X a normal exit code will be a positive value in\nthe range <code>0..255<\/code>. If the process was terminated due to a signal\nthe exit code will be a negative value in the range <code>-255..-1<\/code>,\nwhere the absolute value of the exit code is the signal\nnumber. For example, if a process crashes due to a segmentation\nviolation the exit code will be -11, as the signal SIGSEGV has the\nnumber 11.<\/p>\n<p>On Windows a process can report any 32-bit value as an exit\ncode. When returning the exit code this exit code is turned into\na signed value. Some special values are used to report\ntermination due to some system event. E.g. if a process crashes\ndue to an access violation the 32-bit exit code is <code>0xc0000005<\/code>,\nwhich will be returned as the negative number <code>-1073741819<\/code>. To\nget the original 32-bit value use <code>(0x100000000 + exitCode) &amp;\n0xffffffff<\/code>.<\/p>\n<p>There is no guarantee that <a href=\"package-process_process\/ProcessWrapper\/stdout.html\">stdout<\/a> and <a href=\"package-process_process\/ProcessWrapper\/stderr.html\">stderr<\/a> have finished reporting\nthe buffered output of the process when the returned future completes.\nTo be sure that all output is captured,\nwait for the done event on the streams.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/exitCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;int&gt; get exitCode =&gt; _delegate.exitCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pid",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the process id of the process.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/pid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get pid =&gt; _delegate.pid;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stderr",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns the standard error stream of the process as a <code>Stream<\/code>.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/stderr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;List&lt;int&gt;&gt; get stderr =&gt; _stderr.stream;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stdin",
                    "type": "dart:io.IOSink",
                    "types": [],
                    "desc": "<p>Returns the standard input stream of the process as an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/stdin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.IOSink get stdin =&gt; _delegate.stdin;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stdout",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns the standard output stream of the process as a <code>Stream<\/code>.<\/p>\n        ",
                    "memberOf": "process.ProcessWrapper",
                    "isConstant": false,
                    "href": "package-process_process\/ProcessWrapper\/stdout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;List&lt;int&gt;&gt; get stdout =&gt; _stdout.stream;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-process_process\/ProcessWrapper-class.html",
            "desc": "<p>A wrapper around an <a href=\"dart-io\/Process-class.html\">io.Process<\/a> class that adds some convenience methods.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessWrapper"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}