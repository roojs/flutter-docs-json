{
    "name": "dart:math",
    "href": "dart-math\/dart-math-library.html",
    "cn": [
        {
            "name": "dart:math.MutableRectangle",
            "extends": [],
            "memberOf": "dart:math",
            "events": [],
            "methods": [
                {
                    "name": "MutableRectangle",
                    "type": "",
                    "desc": "<p>Create a mutable rectangle spanned by <code>(left, top)<\/code> and\n<code>(left+width, top+height)<\/code>.<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>left<\/code> and <code>left + width<\/code>, and\nwith y-coordinate between <code>top<\/code> and <code>top + height<\/code>, both inclusive.<\/p>\n<p>The <code>width<\/code> and <code>height<\/code> should be non-negative.\nIf <code>width<\/code> or <code>height<\/code> are negative, they are clamped to zero.<\/p>\n<p>If <code>width<\/code> and <code>height<\/code> are zero, the \"rectangle\" comprises only the\nsingle point <code>(left, top)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.MutableRectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "top",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "width",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "height",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/MutableRectangle\/MutableRectangle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MutableRectangle(this.left, this.top, T width, T height)\n    : this._width = (width &lt; 0) ? _clampToZero&lt;T&gt;(width) : width,\n      this._height = (height &lt; 0) ? _clampToZero&lt;T&gt;(height) : height;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "MutableRectangle.fromPoints",
                    "type": "",
                    "desc": "<p>Create a mutable rectangle spanned by the points <code>a<\/code> and <code>b<\/code>;<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>a.x<\/code> and <code>b.x<\/code>, and\nwith y-coordinate between <code>a.y<\/code> and <code>b.y<\/code>, both inclusive.<\/p>\n<p>If the distance between <code>a.x<\/code> and <code>b.x<\/code> is not representable\n(which can happen if one or both is a double),\nthe actual right edge might be slightly off from <code>max(a.x, b.x)<\/code>.\nSimilar for the y-coordinates and the bottom edge.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.MutableRectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/MutableRectangle\/MutableRectangle.fromPoints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory MutableRectangle.fromPoints(Point&lt;T&gt; a, Point&lt;T&gt; b) {\n  T left = min(a.x, b.x);\n  T width = max(a.x, b.x) - left;\n  T top = min(a.y, b.y);\n  T height = max(a.y, b.y) - top;\n  return MutableRectangle&lt;T&gt;(left, top, width, height);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "height",
                    "type": "",
                    "types": [],
                    "desc": "<p>The height of the rectangle.<\/p>\n        ",
                    "memberOf": "dart:math.MutableRectangle",
                    "isConstant": false,
                    "href": "dart-math\/MutableRectangle\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get height =&gt; _height;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "",
                    "types": [],
                    "desc": "<p>The x-coordinate of the left edge.<\/p>\n<p>Setting the value will move the rectangle without changing its width.<\/p>\n        ",
                    "memberOf": "dart:math.MutableRectangle",
                    "isConstant": false,
                    "href": "dart-math\/MutableRectangle\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "",
                    "types": [],
                    "desc": "<p>The y-coordinate of the left edge.<\/p>\n<p>Setting the value will move the rectangle without changing its height.<\/p>\n        ",
                    "memberOf": "dart:math.MutableRectangle",
                    "isConstant": false,
                    "href": "dart-math\/MutableRectangle\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "",
                    "types": [],
                    "desc": "<p>The width of the rectangle.<\/p>\n        ",
                    "memberOf": "dart:math.MutableRectangle",
                    "isConstant": false,
                    "href": "dart-math\/MutableRectangle\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get width =&gt; _width;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-math\/MutableRectangle-class.html",
            "desc": "<p>A class for representing two-dimensional axis-aligned rectangles with\nmutable properties.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MutableRectangle"
        },
        {
            "name": "dart:math.Point",
            "extends": [],
            "memberOf": "dart:math",
            "events": [],
            "methods": [
                {
                    "name": "operator *",
                    "type": "dart:math.Point",
                    "desc": "<p>Scale this point by <code>factor<\/code> as if it were a vector.<\/p>\n<p><em>Important<\/em> <em>Note<\/em>: This function accepts a <code>num<\/code> as its argument only so\nthat you can scale Point<double> objects by an <code>int<\/code> factor. Because the\nstar operator always returns the same type of Point that originally called\nit, passing in a double <code>factor<\/code> on a <code>Point&lt;int&gt;<\/code> <em>causes<\/em> <em>a<\/em>\n<em>runtime<\/em> <em>error<\/em> in checked mode.<\/double><\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.num",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator *(num \/*T|int*\/ factor) {\n  return Point&lt;T&gt;((x * factor), (y * factor));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "dart:math.Point",
                    "desc": "<p>Add <code>other<\/code> to <code>this<\/code>, as if both points were vectors.<\/p>\n<p>Returns the resulting \"vector\" as a Point.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator +(Point&lt;T&gt; other) {\n  return Point&lt;T&gt;(x + other.x, y + other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "dart:math.Point",
                    "desc": "<p>Subtract <code>other<\/code> from <code>this<\/code>, as if both points were vectors.<\/p>\n<p>Returns the resulting \"vector\" as a Point.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator -(Point&lt;T&gt; other) {\n  return Point&lt;T&gt;(x - other.x, y - other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>A <code>Point<\/code> is only equal to another <code>Point<\/code> with the same coordinates.<\/p>\n<p>This point is equal to <code>other<\/code> if, and only if,\n<code>other<\/code> is a <code>Point<\/code> with\n<a href=\"dart-math\/Point\/x.html\">x<\/a> equal to <code>other.x<\/code> and <a href=\"dart-math\/Point\/y.html\">y<\/a> equal to <code>other.y<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(dynamic other) =&gt;\n    \/\/ Cannot change parameter type to `Object` in case some class\n    \/\/ inherits the type and uses their argument dynamically.\n    other is Point &amp;&amp; x == other.x &amp;&amp; y == other.y;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Point",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "x",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "y",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/Point\/Point.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Point(T x, T y)\n    : this.x = x,\n      this.y = y;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "distanceTo",
                    "type": "dart:core.double",
                    "desc": "<p>Returns the distance between <code>this<\/code> and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/distanceTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double distanceTo(Point&lt;T&gt; other) {\n  var dx = x - other.x;\n  var dy = y - other.y;\n  return sqrt(dx * dx + dy * dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "squaredDistanceTo",
                    "type": "",
                    "desc": "<p>Returns the squared distance between <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>Squared distances can be used for comparisons when the actual value is not\nrequired.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/squaredDistanceTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T squaredDistanceTo(Point&lt;T&gt; other) {\n  var dx = x - other.x;\n  var dy = y - other.y;\n  return dx * dx + dy * dy;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Point",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-math\/Point\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; 'Point($x, $y)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-math\/Point\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:math.Point",
                    "isConstant": false,
                    "href": "dart-math\/Point\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _JenkinsSmiHash.hash2(x.hashCode, y.hashCode);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "magnitude",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Get the straight line (Euclidean) distance between the origin (0, 0) and\nthis point.<\/p>\n        ",
                    "memberOf": "dart:math.Point",
                    "isConstant": false,
                    "href": "dart-math\/Point\/magnitude.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get magnitude =&gt; sqrt(x * x + y * y);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Point",
                    "isConstant": false,
                    "href": "dart-math\/Point\/x.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T x\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "y",
                    "type": "",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Point",
                    "isConstant": false,
                    "href": "dart-math\/Point\/y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T y\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-math\/Point-class.html",
            "desc": "<p>A utility class for representing two-dimensional positions.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Point"
        },
        {
            "name": "dart:math.Random",
            "extends": [],
            "memberOf": "dart:math",
            "events": [],
            "methods": [
                {
                    "name": "Random",
                    "type": "",
                    "desc": "<p>Creates a random number generator.<\/p>\n<p>The optional parameter <code>seed<\/code> is used to initialize the\ninternal state of the generator. The implementation of the\nrandom stream can change between releases of the library.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Random",
                    "sig": "",
                    "params": [
                        {
                            "name": "seed",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/Random\/Random.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Random([int seed]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "nextBool",
                    "type": "dart:core.bool",
                    "desc": "<p>Generates a random boolean value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Random",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-math\/Random\/nextBool.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool nextBool();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "nextDouble",
                    "type": "dart:core.double",
                    "desc": "<p>Generates a non-negative random floating point value uniformly distributed\nin the range from 0.0, inclusive, to 1.0, exclusive.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Random",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-math\/Random\/nextDouble.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double nextDouble();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "nextInt",
                    "type": "dart:core.int",
                    "desc": "<p>Generates a non-negative random integer uniformly distributed in the range\nfrom 0, inclusive, to <code>max<\/code>, exclusive.<\/p>\n<p>Implementation note: The default implementation supports <code>max<\/code> values\nbetween 1 and (1&lt;&lt;32) inclusive.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Random",
                    "sig": "",
                    "params": [
                        {
                            "name": "max",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Random\/nextInt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int nextInt(int max);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Random.secure",
                    "type": "",
                    "desc": "<p>Creates a cryptographically secure random number generator.<\/p>\n<p>If the program cannot provide a cryptographically secure\nsource of random numbers, it throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Random",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-math\/Random\/Random.secure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Random.secure();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-math\/Random-class.html",
            "desc": "<p>A generator of random bool, int, or double values.<\/p>\n<p>The default implementation supplies a stream of pseudo-random bits that are\nnot suitable for cryptographic purposes.<\/p>\n<p>Use the <a href=\"\">Random.secure<\/a> constructor for cryptographic purposes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Random"
        },
        {
            "name": "dart:math.Rectangle",
            "extends": [],
            "memberOf": "dart:math",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-math\/Rectangle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(dynamic other) =&gt;\n    \/\/ Can't change argument type to `Object` since subclasses inherit it\n    \/\/ and uses their argument dynamically.\n    other is Rectangle &amp;&amp;\n    left == other.left &amp;&amp;\n    top == other.top &amp;&amp;\n    right == other.right &amp;&amp;\n    bottom == other.bottom;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rectangle",
                    "type": "",
                    "desc": "<p>Create a rectangle spanned by <code>(left, top)<\/code> and\n<code>(left+width, top+height)<\/code>.<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>left<\/code> and <code>left + width<\/code>, and\nwith y-coordinate between <code>top<\/code> and <code>top + height<\/code>, both inclusive.<\/p>\n<p>The <code>width<\/code> and <code>height<\/code> should be non-negative.\nIf <code>width<\/code> or <code>height<\/code> are negative, they are clamped to zero.<\/p>\n<p>If <code>width<\/code> and <code>height<\/code> are zero, the \"rectangle\" comprises only the\nsingle point <code>(left, top)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "top",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "width",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "height",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/Rectangle\/Rectangle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Rectangle(this.left, this.top, T width, T height)\n    : this.width = (width &lt; 0) ? -width * 0 : width, \/\/ Inline _clampToZero.\n      this.height = (height &lt; 0) ? -height * 0 : height;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "boundingBox",
                    "type": "dart:math.Rectangle",
                    "desc": "<p>Returns a new rectangle which completely contains <code>this<\/code> and <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Rectangle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/boundingBox.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rectangle&lt;T&gt; boundingBox(Rectangle&lt;T&gt; other) {\n  var right = max(this.left + this.width, other.left + other.width);\n  var bottom = max(this.top + this.height, other.top + other.height);\n\n  var left = min(this.left, other.left);\n  var top = min(this.top, other.top);\n\n  return Rectangle&lt;T&gt;(left, top, right - left, bottom - top);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsPoint",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether <code>another<\/code> is inside or along the edges of <code>this<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "another",
                            "type": "dart:math.Point<dart:core.num>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:math.Point",
                                "dart:core.num"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/containsPoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsPoint(Point&lt;num&gt; another) {\n  return another.x &gt;= left &amp;&amp;\n      another.x &lt;= left + width &amp;&amp;\n      another.y &gt;= top &amp;&amp;\n      another.y &lt;= top + height;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsRectangle",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether <code>this<\/code> entirely contains <code>another<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "another",
                            "type": "dart:math.Rectangle<dart:core.num>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:math.Rectangle",
                                "dart:core.num"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/containsRectangle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsRectangle(Rectangle&lt;num&gt; another) {\n  return left &lt;= another.left &amp;&amp;\n      left + width &gt;= another.left + another.width &amp;&amp;\n      top &lt;= another.top &amp;&amp;\n      top + height &gt;= another.top + another.height;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Rectangle.fromPoints",
                    "type": "",
                    "desc": "<p>Create a rectangle spanned by the points <code>a<\/code> and <code>b<\/code>;<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>a.x<\/code> and <code>b.x<\/code>, and\nwith y-coordinate between <code>a.y<\/code> and <code>b.y<\/code>, both inclusive.<\/p>\n<p>If the distance between <code>a.x<\/code> and <code>b.x<\/code> is not representable\n(which can happen if one or both is a double),\nthe actual right edge might be slightly off from <code>max(a.x, b.x)<\/code>.\nSimilar for the y-coordinates and the bottom edge.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "dart:math.Point",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-math\/Rectangle\/Rectangle.fromPoints.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Rectangle.fromPoints(Point&lt;T&gt; a, Point&lt;T&gt; b) {\n  T left = min(a.x, b.x);\n  T width = max(a.x, b.x) - left;\n  T top = min(a.y, b.y);\n  T height = max(a.y, b.y) - top;\n  return Rectangle&lt;T&gt;(left, top, width, height);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersection",
                    "type": "dart:math.Rectangle",
                    "desc": "<p>Computes the intersection of <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.<\/p>\n<p>Returns the intersection of this and <code>other<\/code>, or <code>null<\/code> if they don't\nintersect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Rectangle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/intersection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rectangle&lt;T&gt; intersection(Rectangle&lt;T&gt; other) {\n  var x0 = max(left, other.left);\n  var x1 = min(left + width, other.left + other.width);\n\n  if (x0 &lt;= x1) {\n    var y0 = max(top, other.top);\n    var y1 = min(top + height, other.top + other.height);\n\n    if (y0 &lt;= y1) {\n      return Rectangle&lt;T&gt;(x0, y0, x1 - x0, y1 - y0);\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "intersects",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if <code>this<\/code> intersects <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:math.Rectangle<dart:core.num>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:math.Rectangle",
                                "dart:core.num"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/intersects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersects(Rectangle&lt;num&gt; other) {\n  return (left &lt;= other.left + other.width &amp;&amp;\n      other.left &lt;= left + width &amp;&amp;\n      top &lt;= other.top + other.height &amp;&amp;\n      other.top &lt;= top + height);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:math.Rectangle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-math\/Rectangle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return 'Rectangle ($left, $top) $width x $height';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "",
                    "types": [],
                    "desc": "<p>The y-coordinate of the bottom edge.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get bottom =&gt; top + height;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomLeft",
                    "type": "dart:math.Point",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/bottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get bottomLeft =&gt; Point&lt;T&gt;(this.left, this.top + this.height);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:math.Point",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/bottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get bottomRight =&gt;\n    Point&lt;T&gt;(this.left + this.width, this.top + this.height);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-math\/Rectangle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _JenkinsSmiHash.hash4(\n    left.hashCode, top.hashCode, right.hashCode, bottom.hashCode);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "",
                    "types": [],
                    "desc": "<p>The height of the rectangle.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T height\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "",
                    "types": [],
                    "desc": "<p>The x-coordinate of the left edge.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "",
                    "types": [],
                    "desc": "<p>The x-coordinate of the right edge.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get right =&gt; left + width;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "",
                    "types": [],
                    "desc": "<p>The y-coordinate of the top edge.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topLeft",
                    "type": "dart:math.Point",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/topLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get topLeft =&gt; Point&lt;T&gt;(this.left, this.top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:math.Point",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/topRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get topRight =&gt; Point&lt;T&gt;(this.left + this.width, this.top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "",
                    "types": [],
                    "desc": "<p>The width of the rectangle.<\/p>\n        ",
                    "memberOf": "dart:math.Rectangle",
                    "isConstant": false,
                    "href": "dart-math\/Rectangle\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T width\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-math\/Rectangle-class.html",
            "desc": "<p>A class for representing two-dimensional rectangles whose properties are\nimmutable.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Rectangle"
        },
        {
            "name": "acos",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns its arc cosine in radians.<\/p>\n<p>Returns a value in the range 0..PI, or NaN if <code>x<\/code> is outside\nthe range -1..1.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/acos.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double acos(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "asin",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns its arc sine in radians.<\/p>\n<p>Returns a value in the range -PI\/2..PI\/2, or NaN if <code>x<\/code> is outside\nthe range -1..1.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/asin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double asin(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "atan",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns its arc tangent in radians.<\/p>\n<p>Returns a value in the range -PI\/2..PI\/2, or NaN if <code>x<\/code> is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/atan.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double atan(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "atan2",
            "type": "dart:core.double",
            "desc": "<p>A variant of <a href=\"dart-math\/atan.html\">atan<\/a>.<\/p>\n<p>Converts both arguments to <a href=\"dart-core\/double-class.html\">double<\/a>s.<\/p>\n<p>Returns the angle in radians between the positive x-axis\nand the vector (<code>b<\/code>,<code>a<\/code>).\nThe result is in the range -PI..PI.<\/p>\n<p>If <code>b<\/code> is positive, this is the same as <code>atan(b\/a)<\/code>.<\/p>\n<p>The result is negative when <code>a<\/code> is negative (including when <code>a<\/code> is the\ndouble -0.0).<\/p>\n<p>If <code>a<\/code> is equal to zero, the vector (<code>b<\/code>,<code>a<\/code>) is considered parallel to\nthe x-axis, even if <code>b<\/code> is also equal to zero. The sign of <code>b<\/code> determines\nthe direction of the vector along the x-axis.<\/p>\n<p>Returns NaN if either argument is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "a",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/atan2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double atan2(num a, num b);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "cos",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>radians<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the cosine of the value.<\/p>\n<p>If <code>radians<\/code> is not a finite number, the result is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/cos.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double cos(num radians);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-math\/e-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "e",
            "memberOf": "dart:math"
        },
        {
            "name": "exp",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the natural exponent, <a href=\"dart-math\/e-constant.html\">e<\/a>,\nto the power <code>x<\/code>.<\/p>\n<p>Returns NaN if <code>x<\/code> is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/exp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double exp(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-math\/ln2-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "ln2",
            "memberOf": "dart:math"
        },
        {
            "type": "",
            "href": "dart-math\/ln10-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "ln10",
            "memberOf": "dart:math"
        },
        {
            "name": "log",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the natural logarithm of the value.<\/p>\n<p>Returns negative infinity if <code>x<\/code> is equal to zero.\nReturns NaN if <code>x<\/code> is NaN or less than zero.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/log.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double log(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-math\/log2e-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "log2e",
            "memberOf": "dart:math"
        },
        {
            "type": "",
            "href": "dart-math\/log10e-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "log10e",
            "memberOf": "dart:math"
        },
        {
            "name": "max",
            "type": "",
            "desc": "<p>Returns the larger of two numbers.<\/p>\n<p>Returns NaN if either argument is NaN.\nThe larger of <code>-0.0<\/code> and <code>0.0<\/code> is <code>0.0<\/code>. If the arguments are\notherwise equal (including int and doubles with the same mathematical value)\nthen it is unspecified which of the two arguments is returned.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/max.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external T max&lt;T extends num&gt;(T a, T b);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "min",
            "type": "",
            "desc": "<p>Returns the lesser of two numbers.<\/p>\n<p>Returns NaN if either argument is NaN.\nThe lesser of <code>-0.0<\/code> and <code>0.0<\/code> is <code>-0.0<\/code>.\nIf the arguments are otherwise equal (including int and doubles with the\nsame mathematical value) then it is unspecified which of the two arguments\nis returned.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/min.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external T min&lt;T extends num&gt;(T a, T b);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "dart-math\/pi-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "pi",
            "memberOf": "dart:math"
        },
        {
            "name": "pow",
            "type": "dart:core.num",
            "desc": "<p>Returns <code>x<\/code> to the power of <code>exponent<\/code>.<\/p>\n<p>If <code>x<\/code> is an <a href=\"dart-core\/int-class.html\">int<\/a> and <code>exponent<\/code> is a non-negative <a href=\"dart-core\/int-class.html\">int<\/a>, the result is\nan <a href=\"dart-core\/int-class.html\">int<\/a>, otherwise both arguments are converted to doubles first, and the\nresult is a <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>For integers, the power is always equal to the mathematical result of <code>x<\/code> to\nthe power <code>exponent<\/code>, only limited by the available memory.<\/p>\n<p>For doubles, <code>pow(x, y)<\/code> handles edge cases as follows:<\/p>\n<ul>\n<li>if <code>y<\/code> is zero (0.0 or -0.0), the result is always 1.0.<\/li>\n<li>if <code>x<\/code> is 1.0, the result is always 1.0.<\/li>\n<li>otherwise, if either <code>x<\/code> or <code>y<\/code> is NaN then the result is NaN.<\/li>\n<li>if <code>x<\/code> is negative (but not -0.0) and <code>y<\/code> is a finite non-integer, the\nresult is NaN.<\/li>\n<li>if <code>x<\/code> is Infinity and <code>y<\/code> is negative, the result is 0.0.<\/li>\n<li>if <code>x<\/code> is Infinity and <code>y<\/code> is positive, the result is Infinity.<\/li>\n<li>if <code>x<\/code> is 0.0 and <code>y<\/code> is negative, the result is Infinity.<\/li>\n<li>if <code>x<\/code> is 0.0 and <code>y<\/code> is positive, the result is 0.0.<\/li>\n<li>if <code>x<\/code> is -Infinity or -0.0 and <code>y<\/code> is an odd integer, then the result is\n<code>-pow(-x ,y)<\/code>.<\/li>\n<li>if <code>x<\/code> is -Infinity or -0.0 and <code>y<\/code> is not an odd integer, then the result\nis the same as <code>pow(-x , y)<\/code>.<\/li>\n<li>if <code>y<\/code> is Infinity and the absolute value of <code>x<\/code> is less than 1, the\nresult is 0.0.<\/li>\n<li>if <code>y<\/code> is Infinity and <code>x<\/code> is -1, the result is 1.0.<\/li>\n<li>if <code>y<\/code> is Infinity and the absolute value of <code>x<\/code> is greater than 1,\nthe result is Infinity.<\/li>\n<li>if <code>y<\/code> is -Infinity, the result is <code>1\/pow(x, Infinity)<\/code>.<\/li>\n<\/ul>\n<p>This corresponds to the <code>pow<\/code> function defined in the IEEE Standard\n754-2008.<\/p>\n<p>Notice that the result may overflow. If integers are represented as 64-bit\nnumbers, an integer result may be truncated, and a double result may\noverflow to positive or negative <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "exponent",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "exponent",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/pow.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external num pow(num x, num exponent);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "sin",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>radians<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the sine of the value.<\/p>\n<p>If <code>radians<\/code> is not a finite number, the result is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/sin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double sin(num radians);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "sqrt",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>x<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the positive square root of the\nvalue.<\/p>\n<p>Returns -0.0 if <code>x<\/code> is -0.0, and NaN if <code>x<\/code> is otherwise negative or NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/sqrt.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double sqrt(num x);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-math\/sqrt1_2-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "sqrt1_2",
            "memberOf": "dart:math"
        },
        {
            "type": "",
            "href": "dart-math\/sqrt2-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "sqrt2",
            "memberOf": "dart:math"
        },
        {
            "name": "tan",
            "type": "dart:core.double",
            "desc": "<p>Converts <code>radians<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> and returns the tangent of the value.<\/p>\n<p>The tangent function is equivalent to <code>sin(radians)\/cos(radians)<\/code> and may be\ninfinite (positive or negative) when <code>cos(radians)<\/code> is equal to zero.\nIf <code>radians<\/code> is not a finite number, the result is NaN.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math",
            "sig": "",
            "params": [
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radians",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/tan.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external double tan(num radians);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}