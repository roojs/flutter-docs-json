{
    "class": [
        {
            "desc": "<p>Recognizes movement both horizontally and vertically on a per-pointer basis\nafter a delay.<\/p>\n<p>In contrast to <a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>,\n<a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a> waits for a <a href=\"gestures\/DelayedMultiDragGestureRecognizer\/delay.html\">delay<\/a> before recognizing\nthe drag. If the pointer moves more than <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a> before the delay\nexpires, the gesture is not recognized.<\/p>\n<p>In contrast to <a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, <a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a>\nwatches each pointer separately, which means multiple drags can be\nrecognized concurrently if multiple pointers are in contact with the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, a similar recognizer but without\nthe delay.<\/li>\n<li>\n<a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, which recognizes only one drag gesture at a time,\nregardless of how many fingers are involved.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DelayedMultiDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DelayedMultiDragGestureRecognizer",
            "shortname": "DelayedMultiDragGestureRecognizer",
            "extends": [
                "gestures.MultiDragGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a drag recognizer that works on a per-pointer basis after a delay.<\/p>\n<p>In order for a drag to be recognized by this recognizer, the pointer must\nremain in the same place for <code>delay<\/code> (up to <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a>). The <code>delay<\/code>\ndefaults to <a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> to match <a href=\"gestures\/LongPressGestureRecognizer-class.html\">LongPressGestureRecognizer<\/a> but\ncan be changed for specific behaviors.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DelayedMultiDragGestureRecognizer({\n  this.delay = kLongPressTimeout,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : assert(delay != null),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/DelayedMultiDragGestureRecognizer\/DelayedMultiDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelayedMultiDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DelayedMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "delay",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_DelayedPointerState createNewPointerState(PointerDownEvent event) {\n  return _DelayedPointerState(event.position, delay);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DelayedMultiDragGestureRecognizer\/createNewPointerState.html",
                    "isDeprecated": false,
                    "type": "<_DelayedPointerState>",
                    "name": "createNewPointerState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DelayedMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'long multidrag';<\/code><\/pre>\n        ",
                    "href": "gestures\/DelayedMultiDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DelayedMultiDragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The amount of time the pointer must remain in the same place for the drag\nto be recognized.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration delay\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DelayedMultiDragGestureRecognizer\/delay.html",
                    "name": "delay",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DelayedMultiDragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes when the user has tapped the screen at the same location twice in\nquick succession.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DoubleTapGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DoubleTapGestureRecognizer",
            "shortname": "DoubleTapGestureRecognizer",
            "extends": [
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when the user has tapped the screen at the same location twice in\nquick succession.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDoubleTapCallback onDoubleTap\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/onDoubleTap.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDoubleTapCallback",
                    "name": "onDoubleTap",
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for double taps.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleTapGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/DoubleTapGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DoubleTapGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/DoubleTapGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  if (_firstTap != null) {\n    if (!_firstTap.isWithinTolerance(event, kDoubleTapSlop)) {\n      \/\/ Ignore out-of-bounds second taps.\n      return;\n    } else if (!_firstTap.hasElapsedMinTime()) {\n      \/\/ Restart when the second tap is too close to the first.\n      _reset();\n      return addAllowedPointer(event);\n    }\n  }\n  _stopDoubleTapTimer();\n  final _TapTracker tracker = _TapTracker(\n    event: event,\n    entry: GestureBinding.instance.gestureArena.add(event.pointer, this),\n    doubleTapMinTime: kDoubleTapMinTime,\n  );\n  _trackers[event.pointer] = tracker;\n  tracker.startTrackingPointer(_handleEvent);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _reset();\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  _TapTracker tracker = _trackers[pointer];\n  \/\/ If tracker isn't in the list, check if this is the first tap tracker\n  if (tracker == null &amp;&amp;\n      _firstTap != null &amp;&amp;\n      _firstTap.pointer == pointer)\n    tracker = _firstTap;\n  \/\/ If tracker is still null, we rejected ourselves already\n  if (tracker != null)\n    _reject(tracker);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'double tap';<\/code><\/pre>\n        ",
                    "href": "gestures\/DoubleTapGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DoubleTapGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Interface for objects that receive updates about drags.<\/p>\n<p>This interface is used in various ways. For example,\n<a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> uses it to update its clients when it\nrecognizes a gesture. Similarly, the scrolling infrastructure in the widgets\nlibrary uses it to notify the <a href=\"widgets\/DragScrollActivity-class.html\">DragScrollActivity<\/a> when the user drags the\nscrollable.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/Drag-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.Drag",
            "shortname": "Drag",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/Drag\/Drag.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Drag",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.Drag",
                    "params": []
                },
                {
                    "desc": "<p>The input from the pointer is no longer directed towards this receiver.<\/p>\n<p>For example, the user might have been interrupted by a system-modal dialog\nin the middle of the drag.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cancel() { }<\/code><\/pre>\n    ",
                    "href": "gestures\/Drag\/cancel.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "cancel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.Drag",
                    "params": []
                },
                {
                    "desc": "<p>The pointer is no longer in contact with the screen.<\/p>\n<p>The velocity at which the pointer was moving when it stopped contacting\nthe screen is available in the <code>details<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void end(DragEndDetails details) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/Drag\/end.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "end",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.Drag",
                    "params": [
                        {
                            "name": "details",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.DragEndDetails"
                        }
                    ]
                },
                {
                    "desc": "<p>The pointer has moved.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void update(DragUpdateDetails details) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/Drag\/update.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.Drag",
                    "params": [
                        {
                            "name": "details",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.DragUpdateDetails"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Details object for callbacks that use <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/DragGestureRecognizer\/onDown.html\">DragGestureRecognizer.onDown<\/a>, which uses <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a>, the details for <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a>, the details for <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragEndDetails-class.html\">DragEndDetails<\/a>, the details for <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DragDownDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragDownDetails",
            "shortname": "DragDownDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragDownDetails({ this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/DragDownDetails\/DragDownDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DragDownDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DragDownDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($globalPosition)';<\/code><\/pre>\n    ",
                    "href": "gestures\/DragDownDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragDownDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer contacted the screen.<\/p>\n<p>Defaults to the origin if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragDownDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragDownDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details object for callbacks that use <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/DragGestureRecognizer\/onEnd.html\">DragGestureRecognizer.onEnd<\/a>, which uses <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragDownDetails-class.html\">DragDownDetails<\/a>, the details for <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a>, the details for <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a>, the details for <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DragEndDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragEndDetails",
            "shortname": "DragEndDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/p>\n<p>The <code>velocity<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragEndDetails({\n  this.velocity = Velocity.zero,\n  this.primaryVelocity,\n}) : assert(velocity != null),\n     assert(primaryVelocity == null\n         || primaryVelocity == velocity.pixelsPerSecond.dx\n         || primaryVelocity == velocity.pixelsPerSecond.dy);<\/code><\/pre>\n    ",
                    "href": "gestures\/DragEndDetails\/DragEndDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DragEndDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DragEndDetails",
                    "params": [
                        {
                            "name": "primaryVelocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.Velocity"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($velocity)';<\/code><\/pre>\n    ",
                    "href": "gestures\/DragEndDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragEndDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The velocity the pointer was moving along the primary axis when it stopped\ncontacting the screen, in logical pixels per second.<\/p>\n<p>If the <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a> is for a one-dimensional drag (e.g., a\nhorizontal or vertical drag), then this value contains the component of\n<a href=\"gestures\/DragEndDetails\/velocity.html\">velocity<\/a> along the primary axis (e.g., horizontal or vertical,\nrespectively). Otherwise, if the <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a> is for a\ntwo-dimensional drag (e.g., a pan), then this value is null.<\/p>\n<p>Defaults to null if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double primaryVelocity\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragEndDetails\/primaryVelocity.html",
                    "name": "primaryVelocity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragEndDetails",
                    "params": []
                },
                {
                    "desc": "<p>The velocity the pointer was moving when it stopped contacting the screen.<\/p>\n<p>Defaults to zero if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Velocity velocity\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragEndDetails\/velocity.html",
                    "name": "velocity",
                    "isDeprecated": false,
                    "type": "gestures.Velocity",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragEndDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes movement.<\/p>\n<p>In contrast to <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>, <a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a>\nrecognizes a single gesture sequence for all the pointers it watches, which\nmeans that the recognizer has at most one drag sequence active at any given\ntime regardless of how many pointers are in contact with the screen.<\/p>\n<p><a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a> is not intended to be used directly. Instead,\nconsider using one of its subclasses to recognize specific types for drag\ngestures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a>, for left and right drags.<\/li>\n<li>\n<a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>, for up and down drags.<\/li>\n<li>\n<a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, for drags that are not locked to a single axis.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DragGestureRecognizer-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragGestureRecognizer",
            "shortname": "DragGestureRecognizer",
            "extends": [
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.HorizontalDragGestureRecognizer",
                "gestures.PanGestureRecognizer",
                "gestures.VerticalDragGestureRecognizer"
            ],
            "events": [
                {
                    "desc": "<p>The pointer that previously triggered <a href=\"gestures\/DragGestureRecognizer\/onDown.html\">onDown<\/a> did not complete.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragCancelCallback onCancel\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/onCancel.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDragCancelCallback",
                    "name": "onCancel",
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer has contacted the screen and might begin to move.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/DragDownDetails-class.html\">DragDownDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragDownCallback onDown\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/onDown.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDragDownCallback",
                    "name": "onDown",
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that was previously in contact with the screen and moving is no\nlonger in contact with the screen and was moving at a specific velocity\nwhen it stopped contacting the screen.<\/p>\n<p>The velocity is provided in the callback's <code>details<\/code> argument, which is a\n<a href=\"gestures\/DragEndDetails-class.html\">DragEndDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragEndCallback onEnd\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/onEnd.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDragEndCallback",
                    "name": "onEnd",
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer has contacted the screen and has begun to move.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a> object.<\/p>\n<p>Depending on the value of <a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">dragStartBehavior<\/a>, this function will be\ncalled on the initial touch down, if set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> or\nwhen the drag gesture is first detected, if set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragStartCallback onStart\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/onStart.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDragStartCallback",
                    "name": "onStart",
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that is in contact with the screen and moving has moved again.<\/p>\n<p>The distance travelled by the pointer since the last update is provided in\nthe callback's <code>details<\/code> argument, which is a <a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/onUpdate.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureDragUpdateCallback",
                    "name": "onUpdate",
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Initialize the object.<\/p>\n<p><code>dragStartBehavior<\/code> must not be null.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(dragStartBehavior != null),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/DragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "dragStartBehavior",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.DragStartBehavior"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state != _DragState.accepted) {\n    _state = _DragState.accepted;\n    final Offset delta = _pendingDragOffset;\n    final Duration timestamp = _lastPendingEventTimestamp;\n    Offset updateDelta;\n    switch (dragStartBehavior) {\n      case DragStartBehavior.start:\n        _initialPosition = _initialPosition + delta;\n        updateDelta = Offset.zero;\n        break;\n      case DragStartBehavior.down:\n        updateDelta = _getDeltaForDetails(delta);\n        break;\n    }\n    _pendingDragOffset = Offset.zero;\n    _lastPendingEventTimestamp = null;\n    if (onStart != null) {\n      invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(DragStartDetails(\n        sourceTimeStamp: timestamp,\n        globalPosition: _initialPosition,\n      )));\n    }\n    if (updateDelta != Offset.zero &amp;&amp; onUpdate != null) {\n      invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(DragUpdateDetails(\n        sourceTimeStamp: timestamp,\n        delta: updateDelta,\n        primaryDelta: _getPrimaryValueFromOffset(updateDelta),\n        globalPosition: _initialPosition + updateDelta, \/\/ Only adds delta for down behaviour\n      )));\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/DragGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  startTrackingPointer(event.pointer);\n  _velocityTrackers[event.pointer] = VelocityTracker();\n  if (_state == _DragState.ready) {\n    _state = _DragState.possible;\n    _initialPosition = event.position;\n    _pendingDragOffset = Offset.zero;\n    _lastPendingEventTimestamp = event.timeStamp;\n    if (onDown != null)\n      invokeCallback&lt;void&gt;('onDown', () =&gt; onDown(DragDownDetails(globalPosition: _initialPosition)));\n  } else if (_state == _DragState.accepted) {\n    resolve(GestureDisposition.accepted);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/DragGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;DragStartBehavior&gt;('start behavior', dragStartBehavior));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  if (_state == _DragState.possible) {\n    resolve(GestureDisposition.rejected);\n    _state = _DragState.ready;\n    if (onCancel != null)\n      invokeCallback&lt;void&gt;('onCancel', onCancel);\n    return;\n  }\n  final bool wasAccepted = _state == _DragState.accepted;\n  _state = _DragState.ready;\n  if (wasAccepted &amp;&amp; onEnd != null) {\n    final VelocityTracker tracker = _velocityTrackers[pointer];\n    assert(tracker != null);\n\n    final VelocityEstimate estimate = tracker.getVelocityEstimate();\n    if (estimate != null &amp;&amp; _isFlingGesture(estimate)) {\n      final Velocity velocity = Velocity(pixelsPerSecond: estimate.pixelsPerSecond)\n        .clampMagnitude(minFlingVelocity ?? kMinFlingVelocity, maxFlingVelocity ?? kMaxFlingVelocity);\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(DragEndDetails(\n        velocity: velocity,\n        primaryVelocity: _getPrimaryValueFromOffset(velocity.pixelsPerSecond),\n      )), debugReport: () {\n        return '$estimate; fling at $velocity.';\n      });\n    } else {\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(DragEndDetails(\n        velocity: Velocity.zero,\n        primaryVelocity: 0.0,\n      )), debugReport: () {\n        if (estimate == null)\n          return 'Could not estimate velocity.';\n        return '$estimate; judged to not be a fling.';\n      });\n    }\n  }\n  _velocityTrackers.clear();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _velocityTrackers.clear();\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _DragState.ready);\n  if (!event.synthesized\n      &amp;&amp; (event is PointerDownEvent || event is PointerMoveEvent)) {\n    final VelocityTracker tracker = _velocityTrackers[event.pointer];\n    assert(tracker != null);\n    tracker.addPosition(event.timeStamp, event.position);\n  }\n\n  if (event is PointerMoveEvent) {\n    final Offset delta = event.delta;\n    if (_state == _DragState.accepted) {\n      if (onUpdate != null) {\n        invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(DragUpdateDetails(\n          sourceTimeStamp: event.timeStamp,\n          delta: _getDeltaForDetails(delta),\n          primaryDelta: _getPrimaryValueFromOffset(delta),\n          globalPosition: event.position,\n        )));\n      }\n    } else {\n      _pendingDragOffset += delta;\n      _lastPendingEventTimestamp = event.timeStamp;\n      if (_hasSufficientPendingDragDeltaToAccept)\n        resolve(GestureDisposition.accepted);\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/DragGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Configure the behavior of offsets sent to <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a>.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> callback will be called at the time and\nposition when the gesture detector wins the arena. If <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a>,\n<a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> will be called at the time and position when a down event was\nfirst detected.<\/p>\n<p>For more information about the gesture arena:\n<a href=\"https:\/\/flutter.io\/docs\/development\/ui\/advanced\/gestures#gesture-disambiguation\">https:\/\/flutter.io\/docs\/development\/ui\/advanced\/gestures#gesture-disambiguation<\/a><\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<h2 id=\"example\">Example:<\/h2>\n<p>A finger presses down on the screen with offset (500.0, 500.0),\nand then moves to position (510.0, 500.0) before winning the arena.\nWith <a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">dragStartBehavior<\/a> set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a>, the <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a>\ncallback will be called at the time corresponding to the touch's position\nat (500.0, 500.0). If it is instead set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>,\n<a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> will be called at the time corresponding to the touch's position\nat (510.0, 500.0).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/dragStartBehavior.html",
                    "name": "dragStartBehavior",
                    "isDeprecated": false,
                    "type": "gestures.DragStartBehavior",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Fling velocity magnitudes will be clamped to this value.<\/p>\n<p>If null then <a href=\"gestures\/kMaxFlingVelocity-constant.html\">kMaxFlingVelocity<\/a> is used.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double maxFlingVelocity\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/maxFlingVelocity.html",
                    "name": "maxFlingVelocity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The minimum distance an input pointer drag must have moved to\nto be considered a fling gesture.<\/p>\n<p>This value is typically compared with the distance traveled along the\nscrolling axis. If null then <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a> is used.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double minFlingDistance\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/minFlingDistance.html",
                    "name": "minFlingDistance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The minimum velocity for an input pointer drag to be considered fling.<\/p>\n<p>This value is typically compared with the magnitude of fling gesture's\nvelocity along the scrolling axis. If null then <a href=\"gestures\/kMinFlingVelocity-constant.html\">kMinFlingVelocity<\/a>\nis used.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double minFlingVelocity\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragGestureRecognizer\/minFlingVelocity.html",
                    "name": "minFlingVelocity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details object for callbacks that use <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/DragGestureRecognizer\/onStart.html\">DragGestureRecognizer.onStart<\/a>, which uses <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragDownDetails-class.html\">DragDownDetails<\/a>, the details for <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a>, the details for <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragEndDetails-class.html\">DragEndDetails<\/a>, the details for <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DragStartDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragStartDetails",
            "shortname": "DragStartDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragStartDetails({ this.sourceTimeStamp, this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/DragStartDetails\/DragStartDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DragStartDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DragStartDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "sourceTimeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($globalPosition)';<\/code><\/pre>\n    ",
                    "href": "gestures\/DragStartDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragStartDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer contacted the screen.<\/p>\n<p>Defaults to the origin if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragStartDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragStartDetails",
                    "params": []
                },
                {
                    "desc": "<p>Recorded timestamp of the source pointer event that triggered the drag\nevent.<\/p>\n<p>Could be null if triggered from proxied events such as accessibility.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration sourceTimeStamp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragStartDetails\/sourceTimeStamp.html",
                    "name": "sourceTimeStamp",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragStartDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details object for callbacks that use <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/DragGestureRecognizer\/onUpdate.html\">DragGestureRecognizer.onUpdate<\/a>, which uses <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragDownDetails-class.html\">DragDownDetails<\/a>, the details for <a href=\"gestures\/GestureDragDownCallback.html\">GestureDragDownCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a>, the details for <a href=\"gestures\/GestureDragStartCallback.html\">GestureDragStartCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/DragEndDetails-class.html\">DragEndDetails<\/a>, the details for <a href=\"gestures\/GestureDragEndCallback.html\">GestureDragEndCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/DragUpdateDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragUpdateDetails",
            "shortname": "DragUpdateDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a>.<\/p>\n<p>The <code>delta<\/code> argument must not be null.<\/p>\n<p>If <code>primaryDelta<\/code> is non-null, then its value must match one of the\ncoordinates of <code>delta<\/code> and the other coordinate must be zero.<\/p>\n<p>The <code>globalPosition<\/code> argument must be provided and must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragUpdateDetails({\n  this.sourceTimeStamp,\n  this.delta = Offset.zero,\n  this.primaryDelta,\n  @required this.globalPosition,\n}) : assert(delta != null),\n     assert(primaryDelta == null\n         || (primaryDelta == delta.dx &amp;&amp; delta.dy == 0.0)\n         || (primaryDelta == delta.dy &amp;&amp; delta.dx == 0.0));<\/code><\/pre>\n    ",
                    "href": "gestures\/DragUpdateDetails\/DragUpdateDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DragUpdateDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": [
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "primaryDelta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "sourceTimeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($delta)';<\/code><\/pre>\n    ",
                    "href": "gestures\/DragUpdateDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The amount the pointer has moved since the previous update.<\/p>\n<p>If the <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a> is for a one-dimensional drag (e.g.,\na horizontal or vertical drag), then this offset contains only the delta\nin that direction (i.e., the coordinate in the other direction is zero).<\/p>\n<p>Defaults to zero if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset delta\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragUpdateDetails\/delta.html",
                    "name": "delta",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The pointer's global position when it triggered this update.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragUpdateDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The amount the pointer has moved along the primary axis since the previous\nupdate.<\/p>\n<p>If the <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a> is for a one-dimensional drag (e.g.,\na horizontal or vertical drag), then this value contains the component of\n<a href=\"gestures\/DragUpdateDetails\/delta.html\">delta<\/a> along the primary axis (e.g., horizontal or vertical,\nrespectively). Otherwise, if the <a href=\"gestures\/GestureDragUpdateCallback.html\">GestureDragUpdateCallback<\/a> is for a\ntwo-dimensional drag (e.g., a pan), then this value is null.<\/p>\n<p>Defaults to null if not specified in the constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double primaryDelta\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragUpdateDetails\/primaryDelta.html",
                    "name": "primaryDelta",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>Recorded timestamp of the source pointer event that triggered the drag\nevent.<\/p>\n<p>Could be null if triggered from proxied events such as accessibility.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration sourceTimeStamp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/DragUpdateDetails\/sourceTimeStamp.html",
                    "name": "sourceTimeStamp",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.DragUpdateDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A gesture recognizer that eagerly claims victory in all gesture arenas.<\/p>\n<p>This is typically passed in <a href=\"widgets\/AndroidView\/gestureRecognizers.html\">AndroidView.gestureRecognizers<\/a> in order to immediately dispatch\nall touch events inside the view bounds to the embedded Android view.\nSee <a href=\"widgets\/AndroidView\/gestureRecognizers.html\">AndroidView.gestureRecognizers<\/a> for more details.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/EagerGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.EagerGestureRecognizer",
            "shortname": "EagerGestureRecognizer",
            "extends": [
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create an eager gesture recognizer.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EagerGestureRecognizer({ PointerDeviceKind kind }) : super(kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/EagerGestureRecognizer\/EagerGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EagerGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.EagerGestureRecognizer",
                    "params": [
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/EagerGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerDownEvent event) {\n  \/\/ We call startTrackingPointer as this is where OneSequenceGestureRecognizer joins the arena.\n  startTrackingPointer(event.pointer);\n  resolve(GestureDisposition.accepted);\n  stopTrackingPointer(event.pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/EagerGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.EagerGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/EagerGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.EagerGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/EagerGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.EagerGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'eager';<\/code><\/pre>\n        ",
                    "href": "gestures\/EagerGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.EagerGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Variant of <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> with extra fields for the gesture\nlibrary's binding's pointer event dispatcher (<a href=\"gestures\/GestureBinding\/dispatchEvent.html\">GestureBinding.dispatchEvent<\/a>).<\/p>\n<p>See also <a href=\"gestures\/FlutterErrorDetailsForPointerRouter-class.html\">FlutterErrorDetailsForPointerRouter<\/a>, which is also used by the\ngesture library.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/FlutterErrorDetailsForPointerEventDispatcher-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.FlutterErrorDetailsForPointerEventDispatcher",
            "shortname": "FlutterErrorDetailsForPointerEventDispatcher",
            "extends": [
                "foundation.FlutterErrorDetails",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"gestures\/FlutterErrorDetailsForPointerEventDispatcher-class.html\">FlutterErrorDetailsForPointerEventDispatcher<\/a> object with the given\narguments setting the object's properties.<\/p>\n<p>The gesture library calls this constructor when catching an exception\nthat will subsequently be reported using <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlutterErrorDetailsForPointerEventDispatcher({\n  dynamic exception,\n  StackTrace stack,\n  String library,\n  String context,\n  this.event,\n  this.hitTestEntry,\n  InformationCollector informationCollector,\n  bool silent = false,\n}) : super(\n  exception: exception,\n  stack: stack,\n  library: library,\n  context: context,\n  informationCollector: informationCollector,\n  silent: silent\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/FlutterErrorDetailsForPointerEventDispatcher\/FlutterErrorDetailsForPointerEventDispatcher.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FlutterErrorDetailsForPointerEventDispatcher",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerEvent"
                        },
                        {
                            "name": "exception",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "hitTestEntry",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.HitTestEntry"
                        },
                        {
                            "name": "informationCollector",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.InformationCollector"
                        },
                        {
                            "name": "library",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "silent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "stack",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.StackTrace"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The pointer event that was being routed when the exception was raised.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerEvent event\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/FlutterErrorDetailsForPointerEventDispatcher\/event.html",
                    "name": "event",
                    "isDeprecated": false,
                    "type": "gestures.PointerEvent",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                    "params": []
                },
                {
                    "desc": "<p>The hit test result entry for the object whose handleEvent method threw\nthe exception. May be null if no hit test entry is associated with the\nevent (e.g. hover and pointer add\/remove events).<\/p>\n<p>The target object itself is given by the <a href=\"gestures\/HitTestEntry\/target.html\">HitTestEntry.target<\/a> property of\nthe hitTestEntry object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestEntry hitTestEntry\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/FlutterErrorDetailsForPointerEventDispatcher\/hitTestEntry.html",
                    "name": "hitTestEntry",
                    "isDeprecated": false,
                    "type": "gestures.HitTestEntry",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Variant of <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> with extra fields for the gestures\nlibrary's pointer router (<a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>).<\/p>\n<p>See also <a href=\"gestures\/FlutterErrorDetailsForPointerEventDispatcher-class.html\">FlutterErrorDetailsForPointerEventDispatcher<\/a>, which is also used\nby the gestures library.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/FlutterErrorDetailsForPointerRouter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.FlutterErrorDetailsForPointerRouter",
            "shortname": "FlutterErrorDetailsForPointerRouter",
            "extends": [
                "foundation.FlutterErrorDetails",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that threw the exception.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerRoute route\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/FlutterErrorDetailsForPointerRouter\/route.html",
                    "isDeprecated": false,
                    "type": "gestures.PointerRoute",
                    "name": "route",
                    "memberOf": "gestures.FlutterErrorDetailsForPointerRouter",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"gestures\/FlutterErrorDetailsForPointerRouter-class.html\">FlutterErrorDetailsForPointerRouter<\/a> object with the given\narguments setting the object's properties.<\/p>\n<p>The gestures library calls this constructor when catching an exception\nthat will subsequently be reported using <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlutterErrorDetailsForPointerRouter({\n  dynamic exception,\n  StackTrace stack,\n  String library,\n  String context,\n  this.router,\n  this.route,\n  this.event,\n  InformationCollector informationCollector,\n  bool silent = false,\n}) : super(\n  exception: exception,\n  stack: stack,\n  library: library,\n  context: context,\n  informationCollector: informationCollector,\n  silent: silent\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/FlutterErrorDetailsForPointerRouter\/FlutterErrorDetailsForPointerRouter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FlutterErrorDetailsForPointerRouter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerRouter",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerEvent"
                        },
                        {
                            "name": "exception",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "informationCollector",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.InformationCollector"
                        },
                        {
                            "name": "library",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerRoute"
                        },
                        {
                            "name": "router",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerRouter"
                        },
                        {
                            "name": "silent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "stack",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.StackTrace"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The pointer event that was being routed when the exception was raised.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerEvent event\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/FlutterErrorDetailsForPointerRouter\/event.html",
                    "name": "event",
                    "isDeprecated": false,
                    "type": "gestures.PointerEvent",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerRouter",
                    "params": []
                },
                {
                    "desc": "<p>The pointer router that caught the exception.<\/p>\n<p>In a typical application, this is the value of <a href=\"gestures\/GestureBinding\/pointerRouter.html\">GestureBinding.pointerRouter<\/a> on\nthe binding (<a href=\"gestures\/GestureBinding\/instance.html\">GestureBinding.instance<\/a>).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerRouter router\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/FlutterErrorDetailsForPointerRouter\/router.html",
                    "name": "router",
                    "isDeprecated": false,
                    "type": "gestures.PointerRouter",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.FlutterErrorDetailsForPointerRouter",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details object for callbacks that use <a href=\"gestures\/GestureForcePressStartCallback.html\">GestureForcePressStartCallback<\/a>,\n<a href=\"gestures\/GestureForcePressPeakCallback.html\">GestureForcePressPeakCallback<\/a>, <a href=\"gestures\/GestureForcePressEndCallback.html\">GestureForcePressEndCallback<\/a> or\n<a href=\"gestures\/GestureForcePressUpdateCallback.html\">GestureForcePressUpdateCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ForcePressGestureRecognizer\/onStart.html\">ForcePressGestureRecognizer.onStart<\/a>, <a href=\"gestures\/ForcePressGestureRecognizer\/onPeak.html\">ForcePressGestureRecognizer.onPeak<\/a>,\n<a href=\"gestures\/ForcePressGestureRecognizer\/onEnd.html\">ForcePressGestureRecognizer.onEnd<\/a>, and <a href=\"gestures\/ForcePressGestureRecognizer\/onUpdate.html\">ForcePressGestureRecognizer.onUpdate<\/a>\nwhich use <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a>.<\/li>\n<li>\n<code>ForcePressUpdateDetails<\/code>, the details for <code>ForcePressUpdateCallback<\/code>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ForcePressDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ForcePressDetails",
            "shortname": "ForcePressDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureForcePressStartCallback.html\">GestureForcePressStartCallback<\/a>,\n<a href=\"gestures\/GestureForcePressPeakCallback.html\">GestureForcePressPeakCallback<\/a> or <a href=\"gestures\/GestureForcePressEndCallback.html\">GestureForcePressEndCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ForcePressDetails({\n  @required this.globalPosition,\n  @required this.pressure,\n}) : assert(globalPosition != null),\n     assert(pressure != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressDetails\/ForcePressDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ForcePressDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ForcePressDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the function was called.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ForcePressDetails",
                    "params": []
                },
                {
                    "desc": "<p>The pressure of the pointer on the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressure\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressDetails\/pressure.html",
                    "name": "pressure",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ForcePressDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes a force press on devices that have force sensors.<\/p>\n<p>Only the force from a single pointer is used to invoke events. A tap\nrecognizer will win against this recognizer on pointer up as long as the\npointer has not pressed with a force greater than\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a>. A long press recognizer will\nwin when the press down time exceeds the threshold time as long as the\npointer's pressure was never greater than\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a> in that duration.<\/p>\n<p>As of November, 2018 iPhone devices of generation 6S and higher have\nforce touch functionality, with the exception of the iPhone XR. In addition,\na small handful of Android devices have this functionality as well.<\/p>\n<p>Devices with faux screen pressure sensors like the Pixel 2 and 3 will not\nsend any force press related callbacks.<\/p>\n<p>Reported pressure will always be in the range 0.0 to 1.0, where 1.0 is\nmaximum pressure and 0.0 is minimum pressure. If using a custom\n<a href=\"gestures\/ForcePressGestureRecognizer\/interpolation.html\">interpolation<\/a> callback, the pressure reported will correspond to that\ncustom curve.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ForcePressGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ForcePressGestureRecognizer",
            "shortname": "ForcePressGestureRecognizer",
            "extends": [
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The function used to convert the raw device pressure values into a value\nin the range 0.0 to 1.0.<\/p>\n<p>The function takes in the device's minimum, maximum and raw touch pressure\nand returns a value in the range 0.0 to 1.0 denoting the interpolated\ntouch pressure.<\/p>\n<p>This function must always return values in the range 0.0 to 1.0 given a\npressure that is between the minimum and maximum pressures. It may return\n<code>double.NaN<\/code> for values that it does not want to support.<\/p>\n<p>By default, the function is a linear interpolation; however, changing the\nfunction could be useful to accommodate variations in the way different\ndevices respond to pressure, or to change how animations from pressure\nfeedback are rendered.<\/p>\n<p>For example, an ease-in curve can be used to determine the interpolated\nvalue:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">static double interpolateWithEasing(double min, double max, double t) {\n   final double lerp = (t - min) \/ (max - min);\n   return Curves.easeIn.transform(lerp);\n}\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForceInterpolation interpolation\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/interpolation.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureForceInterpolation",
                    "name": "interpolation",
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer is no longer in contact with the screen.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressEndCallback onEnd\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/onEnd.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureForcePressEndCallback",
                    "name": "onEnd",
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer is in contact with the screen and has just pressed with a force\nexceeding the <a href=\"gestures\/ForcePressGestureRecognizer\/peakPressure.html\">peakPressure<\/a>. This is an arbitrary second level action\nthreshold and isn't necessarily the maximum possible device pressure\n(which is 1.0).<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressPeakCallback onPeak\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/onPeak.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureForcePressPeakCallback",
                    "name": "onPeak",
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer is in contact with the screen and has just pressed with a force\nexceeding the <a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">startPressure<\/a>. Consequently, if there were other gesture\ndetectors, only the force press gesture will be detected and all others\nwill be rejected.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressStartCallback onStart\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/onStart.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureForcePressStartCallback",
                    "name": "onStart",
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer is in contact with the screen and is either moving on the plane\nof the screen, pressing the screen with varying forces or both\nsimultaneously.<\/p>\n<p>This callback will be invoked for every pointer event after the invocation\nof <a href=\"gestures\/ForcePressGestureRecognizer\/onStart.html\">onStart<\/a> and\/or <a href=\"gestures\/ForcePressGestureRecognizer\/onPeak.html\">onPeak<\/a> and before the invocation of <a href=\"gestures\/ForcePressGestureRecognizer\/onEnd.html\">onEnd<\/a>, no\nmatter what the pressure is during this time period. The position and\npressure of the pointer is provided in the callback's <code>details<\/code> argument,\nwhich is a <code>ForcePressUpdateDetails<\/code> object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/onUpdate.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureForcePressUpdateCallback",
                    "name": "onUpdate",
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a force press gesture recognizer.<\/p>\n<p>The <code>startPressure<\/code> defaults to 0.4, and <code>peakPressure<\/code> defaults to 0.85\nwhere a value of 0.0 is no pressure and a value of 1.0 is maximum pressure.<\/p>\n<p>The <code>startPressure<\/code>, <code>peakPressure<\/code> and <code>interpolation<\/code> arguments must not\nbe null. The <code>peakPressure<\/code> argument must be greater than <code>startPressure<\/code>.\nThe <code>interpolation<\/code> callback must always return a value in the range 0.0\nto 1.0 for values of <code>pressure<\/code> that are between <code>pressureMin<\/code> and\n<code>pressureMax<\/code>.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ForcePressGestureRecognizer({\n  this.startPressure = 0.4,\n  this.peakPressure = 0.85,\n  this.interpolation = _inverseLerp,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : assert(startPressure != null),\n     assert(peakPressure != null),\n     assert(interpolation != null),\n     assert(peakPressure &gt; startPressure),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/ForcePressGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ForcePressGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "interpolation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.GestureForceInterpolation"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "peakPressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "startPressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state == _ForceState.possible)\n    _state = _ForceState.accepted;\n\n  if (onStart != null &amp;&amp; _state == _ForceState.started) {\n    invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(ForcePressDetails(\n      pressure: _lastPressure,\n      globalPosition: _lastPosition,\n    )));\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/ForcePressGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  \/\/ If the device has a maximum pressure of less than or equal to 1, it\n  \/\/ doesn't have touch pressure sensing capabilities. Do not participate\n  \/\/ in the gesture arena.\n  if (!(event is PointerUpEvent) &amp;&amp; event.pressureMax &lt;= 1.0) {\n    resolve(GestureDisposition.rejected);\n  } else {\n    startTrackingPointer(event.pointer);\n    if (_state == _ForceState.ready) {\n      _state = _ForceState.possible;\n      _lastPosition = event.position;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  final bool wasAccepted = _state == _ForceState.started || _state == _ForceState.peaked;\n  if (_state == _ForceState.possible) {\n    resolve(GestureDisposition.rejected);\n    return;\n  }\n  if (wasAccepted &amp;&amp; onEnd != null) {\n    if (onEnd != null) {\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(ForcePressDetails(\n        pressure: 0.0,\n        globalPosition: _lastPosition,\n      )));\n    }\n  }\n  _state = _ForceState.ready;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _ForceState.ready);\n  \/\/ A static pointer with changes in pressure creates PointerMoveEvent events.\n  if (event is PointerMoveEvent || event is PointerDownEvent) {\n    if (event.pressure &gt; event.pressureMax || event.pressure &lt; event.pressureMin) {\n      debugPrint(\n        'The reported device pressure ' + event.pressure.toString() +\n        ' is outside of the device pressure range where: ' +\n        event.pressureMin.toString() + ' &lt;= pressure &lt;= ' + event.pressureMax.toString(),\n      );\n    }\n\n    final double pressure = interpolation(event.pressureMin, event.pressureMax, event.pressure);\n    assert(\n      (pressure &gt;= 0.0 &amp;&amp; pressure &lt;= 1.0) || \/\/ Interpolated pressure must be between 1.0 and 0.0...\n      pressure.isNaN \/\/ and interpolation may return NaN for values it doesn't want to support...\n    );\n\n    _lastPosition = event.position;\n    _lastPressure = pressure;\n\n    if (_state == _ForceState.possible) {\n      if (pressure &gt; startPressure) {\n        _state = _ForceState.started;\n        resolve(GestureDisposition.accepted);\n      } else if (event.delta.distanceSquared &gt; kTouchSlop) {\n        resolve(GestureDisposition.rejected);\n      }\n    }\n    \/\/ In case this is the only gesture detector we still don't want to start\n    \/\/ the gesture until the pressure is greater than the startPressure.\n    if (pressure &gt; startPressure &amp;&amp; _state == _ForceState.accepted) {\n      _state = _ForceState.started;\n      if (onStart != null) {\n        invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: _lastPosition,\n        )));\n      }\n    }\n    if (onPeak != null &amp;&amp; pressure &gt; peakPressure &amp;&amp;\n       (_state == _ForceState.started)) {\n      _state = _ForceState.peaked;\n      if (onPeak != null) {\n        invokeCallback&lt;void&gt;('onPeak', () =&gt; onPeak(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: event.position,\n        )));\n      }\n    }\n    if (onUpdate != null &amp;&amp;  !pressure.isNaN &amp;&amp;\n       (_state == _ForceState.started || _state == _ForceState.peaked)) {\n      if (onUpdate != null) {\n        invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: event.position,\n        )));\n      }\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n  didStopTrackingLastPointer(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ForcePressGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'force press';<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pressure of the press required to peak a force press.<\/p>\n<p>A value of 0.0 is no pressure, and 1.0 is maximum pressure. This value\nmust be greater than <a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">startPressure<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double peakPressure\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/peakPressure.html",
                    "name": "peakPressure",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pressure of the press required to initiate a force press.<\/p>\n<p>A value of 0.0 is no pressure, and 1.0 is maximum pressure.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double startPressure\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ForcePressGestureRecognizer\/startPressure.html",
                    "name": "startPressure",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ForcePressGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interface to information to an arena.<\/p>\n<p>A given <a href=\"gestures\/GestureArenaMember-class.html\">GestureArenaMember<\/a> can have multiple entries in multiple arenas\nwith different pointer ids.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/GestureArenaEntry-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureArenaEntry",
            "shortname": "GestureArenaEntry",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Call this member to claim victory (with accepted) or admit defeat (with rejected).<\/p>\n<p>It's fine to attempt to resolve a gesture recognizer for an arena that is\nalready resolved.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void resolve(GestureDisposition disposition) {\n  _arena._resolve(_pointer, _member, disposition);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaEntry\/resolve.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaEntry",
                    "params": [
                        {
                            "name": "disposition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureDisposition"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The first member to accept or the last member to not reject wins.<\/p>\n<p>See <a href=\"https:\/\/flutter.io\/gestures\/#gesture-disambiguation\">flutter.io\/gestures\/#gesture-disambiguation<\/a> for more\ninformation about the role this class plays in the gesture system.<\/p>\n<p>To debug problems with gestures, consider using\n<a href=\"gestures\/debugPrintGestureArenaDiagnostics.html\">debugPrintGestureArenaDiagnostics<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/GestureArenaManager-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureArenaManager",
            "shortname": "GestureArenaManager",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/GestureArenaManager\/GestureArenaManager.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GestureArenaManager",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": []
                },
                {
                    "desc": "<p>Adds a new member (e.g., gesture recognizer) to the arena.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaEntry add(int pointer, GestureArenaMember member) {\n  final _GestureArena state = _arenas.putIfAbsent(pointer, () {\n    assert(_debugLogDiagnostic(pointer, '\u2605 Opening new gesture arena.'));\n    return _GestureArena();\n  });\n  state.add(member);\n  assert(_debugLogDiagnostic(pointer, 'Adding: $member'));\n  return GestureArenaEntry._(this, pointer, member);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaManager\/add.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureArenaEntry",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": [
                        {
                            "name": "member",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureArenaMember"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Prevents new members from entering the arena.<\/p>\n<p>Called after the framework has finished dispatching the pointer down event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isOpen = false;\n  assert(_debugLogDiagnostic(pointer, 'Closing', state));\n  _tryToResolveArena(pointer, state);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaManager\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Prevents the arena from being swept.<\/p>\n<p>Typically, a winner is chosen in an arena after all the other\n<a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> processing by <a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a>. If a recognizer wishes to delay\nresolving an arena past <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>, the recognizer can <a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a> the\narena open using this function. To release such a hold and let the arena\nresolve, call <a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a><\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hold(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isHeld = true;\n  assert(_debugLogDiagnostic(pointer, 'Holding', state));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaManager\/hold.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "hold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases a hold, allowing the arena to be swept.<\/p>\n<p>If a sweep was attempted on a held arena, the sweep will be done\non release.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a><\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void release(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isHeld = false;\n  assert(_debugLogDiagnostic(pointer, 'Releasing', state));\n  if (state.hasPendingSweep)\n    sweep(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaManager\/release.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "release",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Forces resolution of the arena, giving the win to the first member.<\/p>\n<p>Sweep is typically after all the other processing for a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>\nhave taken place. It ensures that multiple passive gestures do not cause a\nstalemate that prevents the user from interacting with the app.<\/p>\n<p>Recognizers that wish to delay resolving an arena past <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>\nshould call <a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a> to delay sweep until <a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a><\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sweep(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  assert(!state.isOpen);\n  if (state.isHeld) {\n    state.hasPendingSweep = true;\n    assert(_debugLogDiagnostic(pointer, 'Delaying sweep', state));\n    return; \/\/ This arena is being held for a long-lived member.\n  }\n  assert(_debugLogDiagnostic(pointer, 'Sweeping', state));\n  _arenas.remove(pointer);\n  if (state.members.isNotEmpty) {\n    \/\/ First member wins.\n    assert(_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}'));\n    state.members.first.acceptGesture(pointer);\n    \/\/ Give all the other members the bad news.\n    for (int i = 1; i &lt; state.members.length; i++)\n      state.members[i].rejectGesture(pointer);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaManager\/sweep.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sweep",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaManager",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Represents an object participating in an arena.<\/p>\n<p>Receives callbacks from the GestureArena to notify the object when it wins\nor loses a gesture negotiation. Exactly one of <a href=\"gestures\/GestureArenaMember\/acceptGesture.html\">acceptGesture<\/a> or\n<a href=\"gestures\/GestureArenaMember\/rejectGesture.html\">rejectGesture<\/a> will be called for each arena this member was added to,\nregardless of what caused the arena to be resolved. For example, if a\nmember resolves the arena itself, that member still receives an\n<a href=\"gestures\/GestureArenaMember\/acceptGesture.html\">acceptGesture<\/a> callback.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/GestureArenaMember-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureArenaMember",
            "shortname": "GestureArenaMember",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.DelayedMultiDragGestureRecognizer",
                "gestures.DoubleTapGestureRecognizer",
                "gestures.EagerGestureRecognizer",
                "gestures.ForcePressGestureRecognizer",
                "gestures.HorizontalDragGestureRecognizer",
                "gestures.HorizontalMultiDragGestureRecognizer",
                "gestures.ImmediateMultiDragGestureRecognizer",
                "gestures.LongPressGestureRecognizer",
                "gestures.MultiTapGestureRecognizer",
                "gestures.PanGestureRecognizer",
                "gestures.ScaleGestureRecognizer",
                "gestures.TapGestureRecognizer",
                "gestures.VerticalDragGestureRecognizer",
                "gestures.VerticalMultiDragGestureRecognizer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/GestureArenaMember\/GestureArenaMember.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GestureArenaMember",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.GestureArenaMember",
                    "params": []
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void acceptGesture(int pointer);<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaMember\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaMember",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void rejectGesture(int pointer);<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaMember\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaMember",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A group of <a href=\"gestures\/GestureArenaMember-class.html\">GestureArenaMember<\/a> objects that are competing as a unit in the\n<a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a>.<\/p>\n<p>Normally, a recognizer competes directly in the <a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> to\nrecognize a sequence of pointer events as a gesture. With a\n<a href=\"gestures\/GestureArenaTeam-class.html\">GestureArenaTeam<\/a>, recognizers can compete in the arena in a group with\nother recognizers. Arena teams may have a captain which wins the arena on\nbehalf of its team.<\/p>\n<p>When gesture recognizers are in a team together without a captain, then once\nthere are no other competing gestures in the arena, the first gesture to\nhave been added to the team automatically wins, instead of the gestures\ncontinuing to compete against each other.<\/p>\n<p>When gesture recognizers are in a team with a captain, then once one of the\nteam members claims victory or there are no other competing gestures in the\narena, the captain wins the arena, and all other team members lose.<\/p>\n<p>For example, <a href=\"material\/Slider-class.html\">Slider<\/a> uses a team without a captain to support both a\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a> and a <a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>, but without\nthe drag recognizer having to wait until the user has dragged outside the\nslop region of the tap gesture before triggering. Since they compete as a\nteam, as soon as any other recognizers are out of the arena, the drag\nrecognizer wins, even if the user has not actually dragged yet. On the other\nhand, if the tap can win outright, before the other recognizers are taken\nout of the arena (e.g. if the slider is in a vertical scrolling list and the\nuser places their finger on the touch surface then lifts it, so that neither\nthe horizontal nor vertical drag recognizers can claim victory) the tap\nrecognizer still actually wins, despite being in the team.<\/p>\n<p><a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a> uses a team with a captain to decide which gestures are\nforwarded to the native view. For example if we want to forward taps and\nvertical scrolls to a native Android view, <code>TapGestureRecognizers<\/code> and\n<a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a> are added to a team with a captain(the captain is set to be a\ngesture recognizer that never explicitly claims the gesture).\nThe captain allows <a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a> to know when any gestures in the team has been\nrecognized (or all other arena members are out), once the captain wins the\ngesture is forwarded to the Android view.<\/p>\n<p>To assign a gesture recognizer to a team, set\n<a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">OneSequenceGestureRecognizer.team<\/a> to an instance of <a href=\"gestures\/GestureArenaTeam-class.html\">GestureArenaTeam<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/GestureArenaTeam-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureArenaTeam",
            "shortname": "GestureArenaTeam",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/GestureArenaTeam\/GestureArenaTeam.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GestureArenaTeam",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.GestureArenaTeam",
                    "params": []
                },
                {
                    "desc": "<p>Adds a new member to the arena on behalf of this team.<\/p>\n<p>Used by <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> subclasses that wish to compete in the arena\nusing this team.<\/p>\n<p>To assign a gesture recognizer to a team, see\n<a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">OneSequenceGestureRecognizer.team<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaEntry add(int pointer, GestureArenaMember member) {\n  final _CombiningGestureArenaMember combiner = _combiners.putIfAbsent(\n      pointer, () =&gt; _CombiningGestureArenaMember(this, pointer));\n  return combiner._add(pointer, member);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureArenaTeam\/add.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureArenaEntry",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureArenaTeam",
                    "params": [
                        {
                            "name": "member",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureArenaMember"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>A member that wins on behalf of the entire team.<\/p>\n<p>If not null, when any one of the <a href=\"gestures\/GestureArenaTeam-class.html\">GestureArenaTeam<\/a> members claims victory\nthe captain accepts the gesture.\nIf null, the member that claims a victory accepts the gesture.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaMember captain\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/GestureArenaTeam\/captain.html",
                    "name": "captain",
                    "isDeprecated": false,
                    "type": "gestures.GestureArenaMember",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.GestureArenaTeam",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The base class that all gesture recognizers inherit from.<\/p>\n<p>Provides a basic API that can be used by classes that work with\ngesture recognizers but don't care about the specific details of\nthe gestures recognizers themselves.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the widget that is used to detect gestures.<\/li>\n<li>\n<a href=\"gestures\/debugPrintRecognizerCallbacksTrace.html\">debugPrintRecognizerCallbacksTrace<\/a>, a flag that can be set to help\ndebug issues with gesture recognizers.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/GestureRecognizer-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureRecognizer",
            "shortname": "GestureRecognizer",
            "extends": [
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.DelayedMultiDragGestureRecognizer",
                "gestures.DoubleTapGestureRecognizer",
                "gestures.EagerGestureRecognizer",
                "gestures.ForcePressGestureRecognizer",
                "gestures.HorizontalDragGestureRecognizer",
                "gestures.HorizontalMultiDragGestureRecognizer",
                "gestures.ImmediateMultiDragGestureRecognizer",
                "gestures.LongPressGestureRecognizer",
                "gestures.MultiTapGestureRecognizer",
                "gestures.PanGestureRecognizer",
                "gestures.ScaleGestureRecognizer",
                "gestures.TapGestureRecognizer",
                "gestures.VerticalDragGestureRecognizer",
                "gestures.VerticalMultiDragGestureRecognizer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Initializes the gesture recognizer.<\/p>\n<p>The argument is optional and is only used for debug purposes (e.g. in the\n<a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a> serialization).<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GestureRecognizer({ this.debugOwner, PointerDeviceKind kind }) : _kind = kind;<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/GestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/GestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid addAllowedPointer(PointerDownEvent event) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that might be relevant to this gesture\ndetector.<\/p>\n<p>The owner of this gesture recognizer calls addPointer() with the\nPointerDownEvent of each pointer that should be considered for\nthis gesture.<\/p>\n<p>It's the GestureRecognizer's responsibility to then add itself\nto the global pointer router (see <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>) to receive\nsubsequent events for this pointer, and to add the pointer to\nthe global gesture arena manager (see <a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a>) to track\nthat pointer.<\/p>\n<p>This method is called for each and all pointers being added. In\nmost cases, you want to override <a href=\"gestures\/GestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPointer(PointerDownEvent event) {\n  if (isPointerAllowed(event)) {\n    addAllowedPointer(event);\n  } else {\n    handleNonAllowedPointer(event);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/addPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/GestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Object&gt;('debugOwner', debugOwner, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() { }<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Handles a pointer being added that's not allowed by this recognizer.<\/p>\n<p>Subclasses can override this method and reject the gesture.<\/p>\n<p>See:<\/p>\n<ul><li>\n<a href=\"gestures\/GestureRecognizer\/handleNonAllowedPointer.html\">OneSequenceGestureRecognizer.handleNonAllowedPointer<\/a>.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handleNonAllowedPointer(PointerDownEvent event) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/handleNonAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleNonAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Invoke a callback provided by the application, catching and logging any\nexceptions.<\/p>\n<p>The <code>name<\/code> argument is ignored except when reporting exceptions.<\/p>\n<p>The <code>debugReport<\/code> argument is optional and is used when\n<a href=\"gestures\/debugPrintRecognizerCallbacksTrace.html\">debugPrintRecognizerCallbacksTrace<\/a> is true. If specified, it must be a\ncallback that returns a string describing useful debugging information,\ne.g. the arguments passed to the callback.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT invokeCallback&lt;T&gt;(String name, RecognizerCallback&lt;T&gt; callback, { String debugReport() }) {\n  assert(callback != null);\n  T result;\n  try {\n    assert(() {\n      if (debugPrintRecognizerCallbacksTrace) {\n        final String report = debugReport != null ? debugReport() : null;\n        \/\/ The 19 in the line below is the width of the prefix used by\n        \/\/ _debugLogDiagnostic in arena.dart.\n        final String prefix = debugPrintGestureArenaDiagnostics ? ' ' * 19 + '\u2759 ' : '';\n        debugPrint('$prefix$this calling $name callback.${ report?.isNotEmpty == true ? \" $report\" : \"\" }');\n      }\n      return true;\n    }());\n    result = callback();\n  } catch (exception, stack) {\n    FlutterError.reportError(FlutterErrorDetails(\n      exception: exception,\n      stack: stack,\n      library: 'gesture',\n      context: 'while handling a gesture',\n      informationCollector: (StringBuffer information) {\n        information.writeln('Handler: $name');\n        information.writeln('Recognizer:');\n        information.writeln('  $this');\n      },\n    ));\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/invokeCallback.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "invokeCallback",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "callback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.RecognizerCallback"
                        },
                        {
                            "name": "debugReport",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether or not a pointer is allowed to be tracked by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool isPointerAllowed(PointerDownEvent event) {\n  \/\/ Currently, it only checks for device kind. But in the future we could check\n  \/\/ for other things e.g. mouse button.\n  return _kind == null || _kind == event.kind;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/GestureRecognizer\/isPointerAllowed.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isPointerAllowed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get debugDescription;<\/code><\/pre>\n        ",
                    "href": "gestures\/GestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The recognizer's owner.<\/p>\n<p>This is used in the <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a> serialization to report the object for which\nthis gesture recognizer was created, to aid in debugging.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object debugOwner\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/GestureRecognizer\/debugOwner.html",
                    "name": "debugOwner",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.GestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An object that can dispatch events.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HitTestDispatcher-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HitTestDispatcher",
            "shortname": "HitTestDispatcher",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Override this method to dispatch events.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispatchEvent(PointerEvent event, HitTestResult result);<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestDispatcher\/dispatchEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispatchEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestDispatcher",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        },
                        {
                            "name": "result",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.HitTestResult"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Data collected during a hit test about a specific <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a>.<\/p>\n<p>Subclass this object to pass additional information from the hit test phase\nto the event propagation phase.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HitTestEntry-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HitTestEntry",
            "shortname": "HitTestEntry",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "rendering.BoxHitTestEntry",
                "rendering.SliverHitTestEntry"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a hit test entry.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HitTestEntry(this.target);<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestEntry\/HitTestEntry.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HitTestEntry",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.HitTestEntry",
                    "params": [
                        {
                            "name": "target",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.HitTestTarget"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$target';<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestEntry\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestEntry",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> encountered during the hit test.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestTarget target\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/HitTestEntry\/target.html",
                    "name": "target",
                    "isDeprecated": false,
                    "type": "gestures.HitTestTarget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.HitTestEntry",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The result of performing a hit test.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HitTestResult-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HitTestResult",
            "shortname": "HitTestResult",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a hit test result.<\/p>\n<p>If the <code>path<\/code> argument is null, the <code>path<\/code> field will be initialized with\nand empty list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HitTestResult({ List&lt;HitTestEntry&gt; path })\n  : _path = path ?? &lt;HitTestEntry&gt;[];<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestResult\/HitTestResult.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HitTestResult",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.HitTestResult",
                    "params": [
                        {
                            "name": "path",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<gestures.HitTestEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Add a <a href=\"gestures\/HitTestEntry-class.html\">HitTestEntry<\/a> to the path.<\/p>\n<p>The new entry is added at the end of the path, which means entries should\nbe added in order from most specific to least specific, typically during an\nupward walk of the tree being hit tested.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(HitTestEntry entry) {\n  _path.add(entry);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestResult\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestResult",
                    "params": [
                        {
                            "name": "entry",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.HitTestEntry"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'HitTestResult(${_path.isEmpty ? \"&lt;empty path&gt;\" : _path.join(\", \")})';<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestResult\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestResult",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>An unmodifiable list of <a href=\"gestures\/HitTestEntry-class.html\">HitTestEntry<\/a> objects recorded during the hit test.<\/p>\n<p>The first entry in the path is the most specific, typically the one at\nthe leaf of tree being hit tested. Event propagation starts with the most\nspecific (i.e., first) entry and proceeds in order through the path.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;HitTestEntry&gt; get path =&gt; _path;<\/code><\/pre>\n        ",
                    "href": "gestures\/HitTestResult\/path.html",
                    "name": "path",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<gestures.HitTestEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.HitTestResult",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An object that can handle events.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HitTestTarget-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HitTestTarget",
            "shortname": "HitTestTarget",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Override this method to receive events.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handleEvent(PointerEvent event, HitTestEntry entry);<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestTarget\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestTarget",
                    "params": [
                        {
                            "name": "entry",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.HitTestEntry"
                        },
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An object that can hit-test pointers.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HitTestable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HitTestable",
            "shortname": "HitTestable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Check whether the given position hits this object.<\/p>\n<p>If this given position hits this object, consider adding a <a href=\"gestures\/HitTestEntry-class.html\">HitTestEntry<\/a>\nto the given hit test result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hitTest(HitTestResult result, Offset position);<\/code><\/pre>\n    ",
                    "href": "gestures\/HitTestable\/hitTest.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "hitTest",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HitTestable",
                    "params": [
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "result",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.HitTestResult"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Recognizes movement in the horizontal direction.<\/p>\n<p>Used for horizontal scrolling.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>, for a similar recognizer but for\nvertical movement.<\/li>\n<li>\n<a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>, for a family of gesture recognizers that\ntrack each touch point independently.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HorizontalDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HorizontalDragGestureRecognizer",
            "shortname": "HorizontalDragGestureRecognizer",
            "extends": [
                "gestures.DragGestureRecognizer",
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for interactions in the horizontal axis.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HorizontalDragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/HorizontalDragGestureRecognizer\/HorizontalDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HorizontalDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.HorizontalDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'horizontal drag';<\/code><\/pre>\n        ",
                    "href": "gestures\/HorizontalDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.HorizontalDragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes movement in the horizontal direction on a per-pointer basis.<\/p>\n<p>In contrast to <a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a>,\n<a href=\"gestures\/HorizontalMultiDragGestureRecognizer-class.html\">HorizontalMultiDragGestureRecognizer<\/a> watches each pointer separately,\nwhich means multiple drags can be recognized concurrently if multiple\npointers are in contact with the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a>, a gesture recognizer that just\nlooks at horizontal movement.<\/li>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, a similar recognizer, but without\nthe limitation that the drag must start horizontally.<\/li>\n<li>\n<a href=\"gestures\/VerticalMultiDragGestureRecognizer-class.html\">VerticalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart vertically.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/HorizontalMultiDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.HorizontalMultiDragGestureRecognizer",
            "shortname": "HorizontalMultiDragGestureRecognizer",
            "extends": [
                "gestures.MultiDragGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for tracking multiple pointers at once\nbut only if they first move horizontally.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HorizontalMultiDragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/HorizontalMultiDragGestureRecognizer\/HorizontalMultiDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HorizontalMultiDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.HorizontalMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_HorizontalPointerState createNewPointerState(PointerDownEvent event) {\n  return _HorizontalPointerState(event.position);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/HorizontalMultiDragGestureRecognizer\/createNewPointerState.html",
                    "isDeprecated": false,
                    "type": "<_HorizontalPointerState>",
                    "name": "createNewPointerState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.HorizontalMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'horizontal multidrag';<\/code><\/pre>\n        ",
                    "href": "gestures\/HorizontalMultiDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.HorizontalMultiDragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes movement both horizontally and vertically on a per-pointer basis.<\/p>\n<p>In contrast to <a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, <a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>\nwatches each pointer separately, which means multiple drags can be\nrecognized concurrently if multiple pointers are in contact with the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, which recognizes only one drag gesture at a time,\nregardless of how many fingers are involved.<\/li>\n<li>\n<a href=\"gestures\/HorizontalMultiDragGestureRecognizer-class.html\">HorizontalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart horizontally.<\/li>\n<li>\n<a href=\"gestures\/VerticalMultiDragGestureRecognizer-class.html\">VerticalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart vertically.<\/li>\n<li>\n<a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart after a long-press gesture.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ImmediateMultiDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ImmediateMultiDragGestureRecognizer",
            "shortname": "ImmediateMultiDragGestureRecognizer",
            "extends": [
                "gestures.MultiDragGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for tracking multiple pointers at once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImmediateMultiDragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/ImmediateMultiDragGestureRecognizer\/ImmediateMultiDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ImmediateMultiDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ImmediateMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ImmediatePointerState createNewPointerState(PointerDownEvent event) {\n  return _ImmediatePointerState(event.position);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ImmediateMultiDragGestureRecognizer\/createNewPointerState.html",
                    "isDeprecated": false,
                    "type": "<_ImmediatePointerState>",
                    "name": "createNewPointerState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ImmediateMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'multidrag';<\/code><\/pre>\n        ",
                    "href": "gestures\/ImmediateMultiDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ImmediateMultiDragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Uses the least-squares algorithm to fit a polynomial to a set of data.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/LeastSquaresSolver-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.LeastSquaresSolver",
            "shortname": "LeastSquaresSolver",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a least-squares solver.<\/p>\n<p>The <code>x<\/code>, <code>y<\/code>, and <code>w<\/code> arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LeastSquaresSolver(this.x, this.y, this.w)\n  : assert(x.length == y.length),\n    assert(y.length == w.length);<\/code><\/pre>\n    ",
                    "href": "gestures\/LeastSquaresSolver\/LeastSquaresSolver.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LeastSquaresSolver",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.LeastSquaresSolver",
                    "params": [
                        {
                            "name": "w",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.double>"
                        },
                        {
                            "name": "x",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.double>"
                        },
                        {
                            "name": "y",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Fits a polynomial of the given degree to the data points.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PolynomialFit solve(int degree) {\n  if (degree &gt; x.length) \/\/ Not enough data to fit a curve.\n    return null;\n\n  final PolynomialFit result = PolynomialFit(degree);\n\n  \/\/ Shorthands for the purpose of notation equivalence to original C++ code.\n  final int m = x.length;\n  final int n = degree + 1;\n\n  \/\/ Expand the X vector to a matrix A, pre-multiplied by the weights.\n  final _Matrix a = _Matrix(n, m);\n  for (int h = 0; h &lt; m; h += 1) {\n    a.set(0, h, w[h]);\n    for (int i = 1; i &lt; n; i += 1)\n      a.set(i, h, a.get(i - 1, h) * x[h]);\n  }\n\n  \/\/ Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n  \/\/ Orthonormal basis, column-major ordVectorer.\n  final _Matrix q = _Matrix(n, m);\n  \/\/ Upper triangular matrix, row-major order.\n  final _Matrix r = _Matrix(n, n);\n  for (int j = 0; j &lt; n; j += 1) {\n    for (int h = 0; h &lt; m; h += 1)\n      q.set(j, h, a.get(j, h));\n    for (int i = 0; i &lt; j; i += 1) {\n      final double dot = q.getRow(j) * q.getRow(i);\n      for (int h = 0; h &lt; m; h += 1)\n        q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n    }\n\n    final double norm = q.getRow(j).norm();\n    if (norm &lt; 0.000001) {\n      \/\/ Vectors are linearly dependent or zero so no solution.\n      return null;\n    }\n\n    final double inverseNorm = 1.0 \/ norm;\n    for (int h = 0; h &lt; m; h += 1)\n      q.set(j, h, q.get(j, h) * inverseNorm);\n    for (int i = 0; i &lt; n; i += 1)\n      r.set(j, i, i &lt; j ? 0.0 : q.getRow(j) * a.getRow(i));\n  }\n\n  \/\/ Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n  \/\/ We just work from bottom-right to top-left calculating B's coefficients.\n  final _Vector wy = _Vector(m);\n  for (int h = 0; h &lt; m; h += 1)\n    wy[h] = y[h] * w[h];\n  for (int i = n - 1; i &gt;= 0; i -= 1) {\n    result.coefficients[i] = q.getRow(i) * wy;\n    for (int j = n - 1; j &gt; i; j -= 1)\n      result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n    result.coefficients[i] \/= r.get(i, i);\n  }\n\n  \/\/ Calculate the coefficient of determination (confidence) as:\n  \/\/   1 - (sumSquaredError \/ sumSquaredTotal)\n  \/\/ ...where sumSquaredError is the residual sum of squares (variance of the\n  \/\/ error), and sumSquaredTotal is the total sum of squares (variance of the\n  \/\/ data) where each has been weighted.\n  double yMean = 0.0;\n  for (int h = 0; h &lt; m; h += 1)\n    yMean += y[h];\n  yMean \/= m;\n\n  double sumSquaredError = 0.0;\n  double sumSquaredTotal = 0.0;\n  for (int h = 0; h &lt; m; h += 1) {\n    double term = 1.0;\n    double err = y[h] - result.coefficients[0];\n    for (int i = 1; i &lt; n; i += 1) {\n      term *= x[h];\n      err -= term * result.coefficients[i];\n    }\n    sumSquaredError += w[h] * w[h] * err * err;\n    final double v = y[h] - yMean;\n    sumSquaredTotal += w[h] * w[h] * v * v;\n  }\n\n  result.confidence = sumSquaredTotal &lt;= 0.000001 ? 1.0 :\n                        1.0 - (sumSquaredError \/ sumSquaredTotal);\n\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/LeastSquaresSolver\/solve.html",
                    "isDeprecated": false,
                    "type": "gestures.PolynomialFit",
                    "name": "solve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.LeastSquaresSolver",
                    "params": [
                        {
                            "name": "degree",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The weight to use for each data point.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; w\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LeastSquaresSolver\/w.html",
                    "name": "w",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LeastSquaresSolver",
                    "params": []
                },
                {
                    "desc": "<p>The x-coordinates of each data point.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; x\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LeastSquaresSolver\/x.html",
                    "name": "x",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LeastSquaresSolver",
                    "params": []
                },
                {
                    "desc": "<p>The y-coordinates of each data point.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; y\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LeastSquaresSolver\/y.html",
                    "name": "y",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LeastSquaresSolver",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for callbacks that use <a href=\"gestures\/GestureLongPressEndCallback.html\">GestureLongPressEndCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressEnd.html\">LongPressGestureRecognizer.onLongPressEnd<\/a>, which uses <a href=\"gestures\/GestureLongPressEndCallback.html\">GestureLongPressEndCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/LongPressMoveUpdateDetails-class.html\">LongPressMoveUpdateDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressMoveUpdateCallback.html\">GestureLongPressMoveUpdateCallback<\/a>\n<\/li>\n<li>\n<a href=\"gestures\/LongPressStartDetails-class.html\">LongPressStartDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressStartCallback.html\">GestureLongPressStartCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/LongPressEndDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.LongPressEndDetails",
            "shortname": "LongPressEndDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates the details for a <a href=\"gestures\/GestureLongPressEndCallback.html\">GestureLongPressEndCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LongPressEndDetails({ this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressEndDetails\/LongPressEndDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LongPressEndDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.LongPressEndDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer lifted from the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressEndDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LongPressEndDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes when the user has pressed down at the same location for a long\nperiod of time.<\/p>\n<p>The gesture must not deviate in position from its touch down point for 500ms\nuntil it's recognized. Once the gesture is accepted, the finger can be\nmoved, triggering <a href=\"gestures\/LongPressGestureRecognizer\/onLongPressMoveUpdate.html\">onLongPressMoveUpdate<\/a> callbacks, unless the\n<a href=\"gestures\/PrimaryPointerGestureRecognizer\/postAcceptSlopTolerance.html\">postAcceptSlopTolerance<\/a> constructor argument is specified.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/LongPressGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.LongPressGestureRecognizer",
            "shortname": "LongPressGestureRecognizer",
            "extends": [
                "gestures.PrimaryPointerGestureRecognizer",
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when a long press gesture has been recognized.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressStart.html\">onLongPressStart<\/a>, which has the same timing but has data for the\npress location.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureLongPressCallback onLongPress\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/onLongPress.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureLongPressCallback",
                    "name": "onLongPress",
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Callback for long press end with gesture location.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressUp.html\">onLongPressUp<\/a>, which has the same timing but without the location data.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureLongPressEndCallback onLongPressEnd\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/onLongPressEnd.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureLongPressEndCallback",
                    "name": "onLongPressEnd",
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Callback for moving the gesture after the lang press is recognized.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureLongPressMoveUpdateCallback onLongPressMoveUpdate\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/onLongPressMoveUpdate.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureLongPressMoveUpdateCallback",
                    "name": "onLongPressMoveUpdate",
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Callback for long press start with gesture location.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPress.html\">onLongPress<\/a>, which has the same timing but without the location data.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureLongPressStartCallback onLongPressStart\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/onLongPressStart.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureLongPressStartCallback",
                    "name": "onLongPressStart",
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when the pointer stops contacting the screen after the long-press.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressEnd.html\">onLongPressEnd<\/a>, which has the same timing but has data for the up\ngesture location.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureLongPressUpCallback onLongPressUp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/onLongPressUp.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureLongPressUpCallback",
                    "name": "onLongPressUp",
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a long-press gesture recognizer.<\/p>\n<p>Consider assigning the <a href=\"gestures\/LongPressGestureRecognizer\/onLongPressStart.html\">onLongPressStart<\/a> callback after creating this\nobject.<\/p>\n<p>The <code>postAcceptSlopTolerance<\/code> argument can be used to specify a maximum\nallowed distance for the gesture to deviate from the starting point once\nthe long press has triggered. If the gesture deviates past that point,\nsubsequent callbacks (<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressMoveUpdate.html\">onLongPressMoveUpdate<\/a>, <a href=\"gestures\/LongPressGestureRecognizer\/onLongPressUp.html\">onLongPressUp<\/a>,\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressEnd.html\">onLongPressEnd<\/a>) will stop. Defaults to null, which means the gesture\ncan be moved without limit once the long press is accepted.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LongPressGestureRecognizer({\n  double postAcceptSlopTolerance,\n  PointerDeviceKind kind,\n  Object debugOwner,\n}) : super(\n  deadline: kLongPressTimeout,\n  postAcceptSlopTolerance: postAcceptSlopTolerance,\n  kind: kind,\n  debugOwner: debugOwner,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressGestureRecognizer\/LongPressGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LongPressGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "postAcceptSlopTolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  \/\/ Winning the arena isn't important here since it may happen from a sweep.\n  \/\/ Explicitly exceeding the deadline puts the gesture in accepted state.\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Override to be notified when <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a> is exceeded.<\/p>\n<p>You must override this method if you supply a <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didExceedDeadline() {\n  resolve(GestureDisposition.accepted);\n  _longPressAccepted = true;\n  super.acceptGesture(primaryPointer);\n  if (onLongPress != null) {\n    invokeCallback&lt;void&gt;('onLongPress', onLongPress);\n  }\n  if (onLongPressStart != null) {\n    invokeCallback&lt;void&gt;('onLongPressStart', () {\n      onLongPressStart(LongPressStartDetails(\n        globalPosition: _longPressOrigin,\n      ));\n    });\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressGestureRecognizer\/didExceedDeadline.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didExceedDeadline",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Override to provide behavior for the primary pointer when the gesture is still possible.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handlePrimaryPointer(PointerEvent event) {\n  if (event is PointerUpEvent) {\n    if (_longPressAccepted == true) {\n      if (onLongPressUp != null) {\n        invokeCallback&lt;void&gt;('onLongPressUp', onLongPressUp);\n      }\n      if (onLongPressEnd != null) {\n        invokeCallback&lt;void&gt;('onLongPressEnd', () {\n          onLongPressEnd(LongPressEndDetails(\n            globalPosition: event.position,\n          ));\n        });\n      }\n      _longPressAccepted = false;\n    } else {\n      resolve(GestureDisposition.rejected);\n    }\n  } else if (event is PointerDownEvent || event is PointerCancelEvent) {\n    \/\/ The first touch.\n    _longPressAccepted = false;\n    _longPressOrigin = event.position;\n  } else if (event is PointerMoveEvent &amp;&amp; _longPressAccepted &amp;&amp; onLongPressMoveUpdate != null) {\n    invokeCallback&lt;void&gt;('onLongPressMoveUpdate', () {\n      onLongPressMoveUpdate(LongPressMoveUpdateDetails(\n        globalPosition: event.position,\n        offsetFromOrigin: event.position - _longPressOrigin,\n      ));\n    });\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressGestureRecognizer\/handlePrimaryPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handlePrimaryPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'long press';<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LongPressGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for callbacks that use <a href=\"gestures\/GestureLongPressMoveUpdateCallback.html\">GestureLongPressMoveUpdateCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressMoveUpdate.html\">LongPressGestureRecognizer.onLongPressMoveUpdate<\/a>, which uses <a href=\"gestures\/GestureLongPressMoveUpdateCallback.html\">GestureLongPressMoveUpdateCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/LongPressEndDetails-class.html\">LongPressEndDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressEndCallback.html\">GestureLongPressEndCallback<\/a>\n<\/li>\n<li>\n<a href=\"gestures\/LongPressStartDetails-class.html\">LongPressStartDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressStartCallback.html\">GestureLongPressStartCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/LongPressMoveUpdateDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.LongPressMoveUpdateDetails",
            "shortname": "LongPressMoveUpdateDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates the details for a <a href=\"gestures\/GestureLongPressMoveUpdateCallback.html\">GestureLongPressMoveUpdateCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> and <code>offsetFromOrigin<\/code> arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LongPressMoveUpdateDetails({\n  this.globalPosition = Offset.zero,\n  this.offsetFromOrigin = Offset.zero,\n}) : assert(globalPosition != null),\n     assert(offsetFromOrigin != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressMoveUpdateDetails\/LongPressMoveUpdateDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LongPressMoveUpdateDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.LongPressMoveUpdateDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "offsetFromOrigin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position of the pointer when it triggered this update.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressMoveUpdateDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LongPressMoveUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>A delta offset from the point where the long press drag initially contacted\nthe screen to the point where the pointer is currently located (the\npresent <a href=\"gestures\/LongPressMoveUpdateDetails\/globalPosition.html\">globalPosition<\/a>) when this callback is triggered.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset offsetFromOrigin\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressMoveUpdateDetails\/offsetFromOrigin.html",
                    "name": "offsetFromOrigin",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LongPressMoveUpdateDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for callbacks that use <a href=\"gestures\/GestureLongPressStartCallback.html\">GestureLongPressStartCallback<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/LongPressGestureRecognizer\/onLongPressStart.html\">LongPressGestureRecognizer.onLongPressStart<\/a>, which uses <a href=\"gestures\/GestureLongPressStartCallback.html\">GestureLongPressStartCallback<\/a>.<\/li>\n<li>\n<a href=\"gestures\/LongPressMoveUpdateDetails-class.html\">LongPressMoveUpdateDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressMoveUpdateCallback.html\">GestureLongPressMoveUpdateCallback<\/a>\n<\/li>\n<li>\n<a href=\"gestures\/LongPressEndDetails-class.html\">LongPressEndDetails<\/a>, the details for <a href=\"gestures\/GestureLongPressEndCallback.html\">GestureLongPressEndCallback<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/LongPressStartDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.LongPressStartDetails",
            "shortname": "LongPressStartDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates the details for a <a href=\"gestures\/GestureLongPressStartCallback.html\">GestureLongPressStartCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LongPressStartDetails({ this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/LongPressStartDetails\/LongPressStartDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LongPressStartDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.LongPressStartDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer contacted the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/LongPressStartDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.LongPressStartDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Keeps state about which objects are interested in tracking mouse positions\nand notifies them when a mouse pointer enters, moves, or leaves an annotated\nregion that they are interested in.<\/p>\n<p>Owned by the <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> class.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/MouseTracker-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.MouseTracker",
            "shortname": "MouseTracker",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Used to find annotations at a given logical coordinate.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MouseDetectorAnnotationFinder annotationFinder\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MouseTracker\/annotationFinder.html",
                    "isDeprecated": false,
                    "type": "gestures.MouseDetectorAnnotationFinder",
                    "name": "annotationFinder",
                    "memberOf": "gestures.MouseTracker",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a mouse tracker to keep track of mouse locations.<\/p>\n<p>All of the parameters must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MouseTracker(PointerRouter router, this.annotationFinder)\n    : assert(router != null),\n      assert(annotationFinder != null) {\n  router.addGlobalRoute(_handleEvent);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTracker\/MouseTracker.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MouseTracker",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": [
                        {
                            "name": "annotationFinder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.MouseDetectorAnnotationFinder"
                        },
                        {
                            "name": "router",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerRouter"
                        }
                    ]
                },
                {
                    "desc": "<p>Track an annotation so that if the mouse enters it, we send it events.<\/p>\n<p>This is typically called when the <a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a> containing this\nannotation has been added to the layer tree.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void attachAnnotation(MouseTrackerAnnotation annotation) {\n  _trackedAnnotations[annotation] = _TrackedAnnotation(annotation);\n  \/\/ Schedule a check so that we test this new annotation to see if the mouse\n  \/\/ is currently inside its region.\n  _scheduleMousePositionCheck();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTracker\/attachAnnotation.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "attachAnnotation",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": [
                        {
                            "name": "annotation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.MouseTrackerAnnotation"
                        }
                    ]
                },
                {
                    "desc": "<p>Tells interested objects that a mouse has entered, exited, or moved, given\na callback to fetch the <a href=\"gestures\/MouseTrackerAnnotation-class.html\">MouseTrackerAnnotation<\/a> associated with a global\noffset.<\/p>\n<p>This is called from a post-frame callback when the layer tree has been\nupdated, right after rendering the frame.<\/p>\n<p>This function is only public to allow for proper testing of the\nMouseTracker. Do not call in other contexts.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nvoid collectMousePositions() {\n  void exitAnnotation(_TrackedAnnotation trackedAnnotation, int deviceId) {\n    if (trackedAnnotation.annotation?.onExit != null &amp;&amp; trackedAnnotation.activeDevices.contains(deviceId)) {\n      trackedAnnotation.annotation.onExit(PointerExitEvent.fromHoverEvent(_lastMouseEvent[deviceId]));\n      trackedAnnotation.activeDevices.remove(deviceId);\n    }\n  }\n\n  void exitAllDevices(_TrackedAnnotation trackedAnnotation) {\n    if (trackedAnnotation.activeDevices.isNotEmpty) {\n      final Set&lt;int&gt; deviceIds = trackedAnnotation.activeDevices.toSet();\n      for (int deviceId in deviceIds) {\n        exitAnnotation(trackedAnnotation, deviceId);\n      }\n    }\n  }\n\n  \/\/ This indicates that all mouse pointers were removed, or none have been\n  \/\/ connected yet. If no mouse is connected, then we want to make sure that\n  \/\/ all active annotations are exited.\n  if (!mouseIsConnected) {\n    _trackedAnnotations.values.forEach(exitAllDevices);\n    return;\n  }\n\n  for (int deviceId in _lastMouseEvent.keys) {\n    final PointerEvent lastEvent = _lastMouseEvent[deviceId];\n    final MouseTrackerAnnotation hit = annotationFinder(lastEvent.position);\n\n    \/\/ No annotation was found at this position for this deviceId, so send an\n    \/\/ exit to all active tracked annotations, since none of them were hit.\n    if (hit == null) {\n      \/\/ Send an exit to all tracked animations tracking this deviceId.\n      for (_TrackedAnnotation trackedAnnotation in _trackedAnnotations.values) {\n        exitAnnotation(trackedAnnotation, deviceId);\n      }\n      return;\n    }\n\n    final _TrackedAnnotation hitAnnotation = _findAnnotation(hit);\n    if (!hitAnnotation.activeDevices.contains(deviceId)) {\n      \/\/ A tracked annotation that just became active and needs to have an enter\n      \/\/ event sent to it.\n      hitAnnotation.activeDevices.add(deviceId);\n      if (hitAnnotation.annotation?.onEnter != null) {\n        hitAnnotation.annotation.onEnter(PointerEnterEvent.fromHoverEvent(lastEvent));\n      }\n    }\n    if (hitAnnotation.annotation?.onHover != null) {\n      hitAnnotation.annotation.onHover(lastEvent);\n    }\n\n    \/\/ Tell any tracked annotations that weren't hit that they are no longer\n    \/\/ active.\n    for (_TrackedAnnotation trackedAnnotation in _trackedAnnotations.values) {\n      if (hitAnnotation == trackedAnnotation) {\n        continue;\n      }\n      if (trackedAnnotation.activeDevices.contains(deviceId)) {\n        if (trackedAnnotation.annotation?.onExit != null) {\n          trackedAnnotation.annotation.onExit(PointerExitEvent.fromHoverEvent(lastEvent));\n        }\n        trackedAnnotation.activeDevices.remove(deviceId);\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTracker\/collectMousePositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "collectMousePositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": []
                },
                {
                    "desc": "<p>Stops tracking an annotation, indicating that it has been removed from the\nlayer tree.<\/p>\n<p>If the associated layer is not removed, and receives a hit, then\n<a href=\"gestures\/MouseTracker\/collectMousePositions.html\">collectMousePositions<\/a> will assert the next time it is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void detachAnnotation(MouseTrackerAnnotation annotation) {\n  final _TrackedAnnotation trackedAnnotation = _findAnnotation(annotation);\n  assert(trackedAnnotation != null, \"Tried to detach an annotation that wasn't attached: $annotation\");\n  for (int deviceId in trackedAnnotation.activeDevices) {\n    annotation.onExit(PointerExitEvent.fromHoverEvent(_lastMouseEvent[deviceId]));\n  }\n  _trackedAnnotations.remove(annotation);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTracker\/detachAnnotation.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "detachAnnotation",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": [
                        {
                            "name": "annotation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.MouseTrackerAnnotation"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks if the given <a href=\"gestures\/MouseTrackerAnnotation-class.html\">MouseTrackerAnnotation<\/a> is attached to this\n<a href=\"gestures\/MouseTracker-class.html\">MouseTracker<\/a>.<\/p>\n<p>This function is only public to allow for proper testing of the\nMouseTracker. Do not call in other contexts.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nbool isAnnotationAttached(MouseTrackerAnnotation annotation) {\n  return _trackedAnnotations[annotation] != null;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTracker\/isAnnotationAttached.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isAnnotationAttached",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": [
                        {
                            "name": "annotation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.MouseTrackerAnnotation"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether or not a mouse is connected and has produced events.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get mouseIsConnected =&gt; _lastMouseEvent.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "gestures\/MouseTracker\/mouseIsConnected.html",
                    "name": "mouseIsConnected",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.MouseTracker",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The annotation object used to annotate layers that are interested in mouse\nmovements.<\/p>\n<p>This is added to a layer and managed by the <a href=\"widgets\/Listener-class.html\">Listener<\/a> widget.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/MouseTrackerAnnotation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.MouseTrackerAnnotation",
            "shortname": "MouseTrackerAnnotation",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Triggered when a pointer has entered the bounding box of the annotated\nlayer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerEnterEventListener onEnter\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MouseTrackerAnnotation\/onEnter.html",
                    "isDeprecated": false,
                    "type": "gestures.PointerEnterEventListener",
                    "name": "onEnter",
                    "memberOf": "gestures.MouseTrackerAnnotation",
                    "params": []
                },
                {
                    "desc": "<p>Triggered when a pointer has exited the bounding box of the annotated\nlayer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerExitEventListener onExit\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MouseTrackerAnnotation\/onExit.html",
                    "isDeprecated": false,
                    "type": "gestures.PointerExitEventListener",
                    "name": "onExit",
                    "memberOf": "gestures.MouseTrackerAnnotation",
                    "params": []
                },
                {
                    "desc": "<p>Triggered when a pointer has moved within the bounding box of the\nannotated layer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerHoverEventListener onHover\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MouseTrackerAnnotation\/onHover.html",
                    "isDeprecated": false,
                    "type": "gestures.PointerHoverEventListener",
                    "name": "onHover",
                    "memberOf": "gestures.MouseTrackerAnnotation",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an annotation that can be used to find layers interested in mouse\nmovements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MouseTrackerAnnotation({this.onEnter, this.onHover, this.onExit});<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTrackerAnnotation\/MouseTrackerAnnotation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MouseTrackerAnnotation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.MouseTrackerAnnotation",
                    "params": [
                        {
                            "name": "onEnter",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerEnterEventListener"
                        },
                        {
                            "name": "onExit",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerExitEventListener"
                        },
                        {
                            "name": "onHover",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.PointerHoverEventListener"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String none = (onEnter == null &amp;&amp; onExit == null &amp;&amp; onHover == null) ? ' &lt;none&gt;' : '';\n  return '[$runtimeType${hashCode.toRadixString(16)}$none'\n      '${onEnter == null ? '' : ' onEnter'}'\n      '${onHover == null ? '' : ' onHover'}'\n      '${onExit == null ? '' : ' onExit'}]';\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MouseTrackerAnnotation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MouseTrackerAnnotation",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Recognizes movement on a per-pointer basis.<\/p>\n<p>In contrast to <a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a>, <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> watches\neach pointer separately, which means multiple drags can be recognized\nconcurrently if multiple pointers are in contact with the screen.<\/p>\n<p><a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> is not intended to be used directly. Instead,\nconsider using one of its subclasses to recognize specific types for drag\ngestures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, the most straight-forward variant\nof multi-pointer drag gesture recognizer.<\/li>\n<li>\n<a href=\"gestures\/HorizontalMultiDragGestureRecognizer-class.html\">HorizontalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart horizontally.<\/li>\n<li>\n<a href=\"gestures\/VerticalMultiDragGestureRecognizer-class.html\">VerticalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart vertically.<\/li>\n<li>\n<a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart after a long-press gesture.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/MultiDragGestureRecognizer-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.MultiDragGestureRecognizer",
            "shortname": "MultiDragGestureRecognizer",
            "extends": [
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.DelayedMultiDragGestureRecognizer",
                "gestures.HorizontalMultiDragGestureRecognizer",
                "gestures.ImmediateMultiDragGestureRecognizer",
                "gestures.VerticalMultiDragGestureRecognizer"
            ],
            "events": [
                {
                    "desc": "<p>Called when this class recognizes the start of a drag gesture.<\/p>\n<p>The remaining notifications for this drag gesture are delivered to the\n<a href=\"gestures\/Drag-class.html\">Drag<\/a> object returned by this callback.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiDragStartCallback onStart\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiDragGestureRecognizer\/onStart.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiDragStartCallback",
                    "name": "onStart",
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Initialize the object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiDragGestureRecognizer({\n  @required Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/MultiDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MultiDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  assert(_pointers != null);\n  final T state = _pointers[pointer];\n  if (state == null)\n    return; \/\/ We might already have canceled this drag if the up comes before the accept.\n  state.accepted((Offset initialPosition) =&gt; _startDrag(initialPosition, pointer));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/MultiDragGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerDownEvent event) {\n  assert(_pointers != null);\n  assert(event.pointer != null);\n  assert(event.position != null);\n  assert(!_pointers.containsKey(event.pointer));\n  final T state = createNewPointerState(event);\n  _pointers[event.pointer] = state;\n  GestureBinding.instance.pointerRouter.addRoute(event.pointer, _handleEvent);\n  state._setArenaEntry(GestureBinding.instance.gestureArena.add(event.pointer, this));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT createNewPointerState(PointerDownEvent event);<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/createNewPointerState.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "createNewPointerState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _pointers.keys.toList().forEach(_removeState);\n  assert(_pointers.isEmpty);\n  _pointers = null;\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  assert(_pointers != null);\n  if (_pointers.containsKey(pointer)) {\n    final T state = _pointers[pointer];\n    assert(state != null);\n    state.rejected();\n    _removeState(pointer);\n  } \/\/ else we already preemptively forgot about it (e.g. we got an up event)\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Per-pointer state for a <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>.<\/p>\n<p>A <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> tracks each pointer separately. The state for\neach pointer is a subclass of <a href=\"gestures\/MultiDragPointerState-class.html\">MultiDragPointerState<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/MultiDragPointerState-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.MultiDragPointerState",
            "shortname": "MultiDragPointerState",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates per-pointer state for a <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>.<\/p>\n<p>The <code>initialPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiDragPointerState(this.initialPosition)\n  : assert(initialPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/MultiDragPointerState.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MultiDragPointerState",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": [
                        {
                            "name": "initialPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the gesture was accepted.<\/p>\n<p>Either immediately or at some future point before the gesture is disposed,\ncall starter(), passing it initialPosition, to start the drag.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid accepted(GestureMultiDragStartCallback starter);<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/accepted.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "accepted",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": [
                        {
                            "name": "starter",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureMultiDragStartCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Override this to call resolve() if the drag should be accepted or rejected.\nThis is called when a pointer movement is received, but only if the gesture\nhas not yet been resolved.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid checkForResolutionAfterMove() { }<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/checkForResolutionAfterMove.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "checkForResolutionAfterMove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": []
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid dispose() {\n  _arenaEntry?.resolve(GestureDisposition.rejected);\n  _arenaEntry = null;\n  assert(() { _pendingDelta = null; return true; }());\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": []
                },
                {
                    "desc": "<p>Called when the gesture was rejected.<\/p>\n<p>The <a href=\"gestures\/MultiDragPointerState\/dispose.html\">dispose<\/a> method will be called immediately following this.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid rejected() {\n  assert(_arenaEntry != null);\n  assert(_client == null);\n  assert(pendingDelta != null);\n  _pendingDelta = null;\n  _lastPendingEventTimestamp = null;\n  _arenaEntry = null;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/rejected.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejected",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": []
                },
                {
                    "desc": "<p>Resolve this pointer's entry in the <a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> with the given disposition.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid resolve(GestureDisposition disposition) {\n  _arenaEntry.resolve(disposition);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiDragPointerState\/resolve.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": [
                        {
                            "name": "disposition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureDisposition"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global coordinates of the pointer when the pointer contacted the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset initialPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiDragPointerState\/initialPosition.html",
                    "name": "initialPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": []
                },
                {
                    "desc": "<p>The offset of the pointer from the last position that was reported to the client.<\/p>\n<p>After the pointer contacts the screen, the pointer might move some\ndistance before this movement will be recognized as a drag. This field\naccumulates that movement so that we can report it to the client after\nthe drag starts.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get pendingDelta =&gt; _pendingDelta;<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiDragPointerState\/pendingDelta.html",
                    "name": "pendingDelta",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.MultiDragPointerState",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes taps on a per-pointer basis.<\/p>\n<p><a href=\"gestures\/MultiTapGestureRecognizer-class.html\">MultiTapGestureRecognizer<\/a> considers each sequence of pointer events that\ncould constitute a tap independently of other pointers: For example, down-1,\ndown-2, up-1, up-2 produces two taps, on up-1 and up-2.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a><\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/MultiTapGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.MultiTapGestureRecognizer",
            "shortname": "MultiTapGestureRecognizer",
            "extends": [
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>A pointer that might cause a tap is still in contact with the screen at a\nparticular location after <a href=\"gestures\/MultiTapGestureRecognizer\/longTapDelay.html\">longTapDelay<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiTapDownCallback onLongTapDown\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/onLongTapDown.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiTapDownCallback",
                    "name": "onLongTapDown",
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A tap has occurred.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiTapCallback onTap\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/onTap.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiTapCallback",
                    "name": "onTap",
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pointer that previously triggered <a href=\"gestures\/MultiTapGestureRecognizer\/onTapDown.html\">onTapDown<\/a> will not end up causing\na tap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiTapCancelCallback onTapCancel\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/onTapCancel.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiTapCancelCallback",
                    "name": "onTapCancel",
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that might cause a tap has contacted the screen at a particular\nlocation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/onTapDown.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiTapDownCallback",
                    "name": "onTapDown",
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that will trigger a tap has stopped contacting the screen at a\nparticular location.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiTapUpCallback onTapUp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/onTapUp.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureMultiTapUpCallback",
                    "name": "onTapUp",
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a multi-tap gesture recognizer.<\/p>\n<p>The <code>longTapDelay<\/code> defaults to <a href=\"dart-core\/Duration\/zero-constant.html\">Duration.zero<\/a>, which means\n<a href=\"gestures\/MultiTapGestureRecognizer\/onLongTapDown.html\">onLongTapDown<\/a> is called immediately after <a href=\"gestures\/MultiTapGestureRecognizer\/onTapDown.html\">onTapDown<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiTapGestureRecognizer({\n  this.longTapDelay = Duration.zero,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiTapGestureRecognizer\/MultiTapGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MultiTapGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "longTapDelay",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  assert(_gestureMap.containsKey(pointer));\n  _gestureMap[pointer].accept();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiTapGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/MultiTapGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  assert(!_gestureMap.containsKey(event.pointer));\n  _gestureMap[event.pointer] = _TapGesture(\n    gestureRecognizer: this,\n    event: event,\n    longTapDelay: longTapDelay,\n  );\n  if (onTapDown != null)\n    invokeCallback&lt;void&gt;('onTapDown', () =&gt; onTapDown(event.pointer, TapDownDetails(globalPosition: event.position)));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiTapGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  final List&lt;_TapGesture&gt; localGestures = List&lt;_TapGesture&gt;.from(_gestureMap.values);\n  for (_TapGesture gesture in localGestures)\n    gesture.cancel();\n  \/\/ Rejection of each gesture should cause it to be removed from our map\n  assert(_gestureMap.isEmpty);\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiTapGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  assert(_gestureMap.containsKey(pointer));\n  _gestureMap[pointer].reject();\n  assert(!_gestureMap.containsKey(pointer));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/MultiTapGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'multitap';<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The amount of time between <a href=\"gestures\/MultiTapGestureRecognizer\/onTapDown.html\">onTapDown<\/a> and <a href=\"gestures\/MultiTapGestureRecognizer\/onLongTapDown.html\">onLongTapDown<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration longTapDelay\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/MultiTapGestureRecognizer\/longTapDelay.html",
                    "name": "longTapDelay",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.MultiTapGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Base class for gesture recognizers that can only recognize one\ngesture at a time. For example, a single <a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>\ncan never recognize two taps happening simultaneously, even if\nmultiple pointers are placed on the same widget.<\/p>\n<p>This is in contrast to, for instance, <a href=\"gestures\/MultiTapGestureRecognizer-class.html\">MultiTapGestureRecognizer<\/a>,\nwhich manages each pointer independently and can consider multiple\nsimultaneous touches to each result in a separate tap.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/OneSequenceGestureRecognizer-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.OneSequenceGestureRecognizer",
            "shortname": "OneSequenceGestureRecognizer",
            "extends": [
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.EagerGestureRecognizer",
                "gestures.ForcePressGestureRecognizer",
                "gestures.HorizontalDragGestureRecognizer",
                "gestures.LongPressGestureRecognizer",
                "gestures.PanGestureRecognizer",
                "gestures.ScaleGestureRecognizer",
                "gestures.TapGestureRecognizer",
                "gestures.VerticalDragGestureRecognizer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Initialize the object.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OneSequenceGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/OneSequenceGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "OneSequenceGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didStopTrackingLastPointer(int pointer);<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  resolve(GestureDisposition.rejected);\n  for (int pointer in _trackedPointers)\n    GestureBinding.instance.pointerRouter.removeRoute(pointer, handleEvent);\n  _trackedPointers.clear();\n  assert(_entries.isEmpty);\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handleEvent(PointerEvent event);<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Handles a pointer being added that's not allowed by this recognizer.<\/p>\n<p>Subclasses can override this method and reject the gesture.<\/p>\n<p>See:<\/p>\n<ul><li>\n<a href=\"gestures\/OneSequenceGestureRecognizer\/handleNonAllowedPointer.html\">OneSequenceGestureRecognizer.handleNonAllowedPointer<\/a>.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleNonAllowedPointer(PointerDownEvent event) {\n  resolve(GestureDisposition.rejected);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/handleNonAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleNonAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) { }<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Resolves this recognizer's participation in each gesture arena with the\ngiven disposition.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid resolve(GestureDisposition disposition) {\n  final List&lt;GestureArenaEntry&gt; localEntries = List&lt;GestureArenaEntry&gt;.from(_entries.values);\n  _entries.clear();\n  for (GestureArenaEntry entry in localEntries)\n    entry.resolve(disposition);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/resolve.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "disposition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureDisposition"
                        }
                    ]
                },
                {
                    "desc": "<p>Causes events related to the given pointer ID to be routed to this recognizer.<\/p>\n<p>The pointer events are delivered to <a href=\"gestures\/OneSequenceGestureRecognizer\/handleEvent.html\">handleEvent<\/a>.<\/p>\n<p>Use <a href=\"gestures\/OneSequenceGestureRecognizer\/stopTrackingPointer.html\">stopTrackingPointer<\/a> to remove the route added by this function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid startTrackingPointer(int pointer) {\n  GestureBinding.instance.pointerRouter.addRoute(pointer, handleEvent);\n  _trackedPointers.add(pointer);\n  assert(!_entries.containsValue(pointer));\n  _entries[pointer] = _addPointerToArena(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/startTrackingPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "startTrackingPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops tracking the pointer associated with the given event if the event is\na <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> or a <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a> event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid stopTrackingIfPointerNoLongerDown(PointerEvent event) {\n  if (event is PointerUpEvent || event is PointerCancelEvent)\n    stopTrackingPointer(event.pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/stopTrackingIfPointerNoLongerDown.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "stopTrackingIfPointerNoLongerDown",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops events related to the given pointer ID from being routed to this recognizer.<\/p>\n<p>If this function reduces the number of tracked pointers to zero, it will\ncall <a href=\"gestures\/OneSequenceGestureRecognizer\/didStopTrackingLastPointer.html\">didStopTrackingLastPointer<\/a> synchronously.<\/p>\n<p>Use <a href=\"gestures\/OneSequenceGestureRecognizer\/startTrackingPointer.html\">startTrackingPointer<\/a> to add the routes in the first place.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid stopTrackingPointer(int pointer) {\n  if (_trackedPointers.contains(pointer)) {\n    GestureBinding.instance.pointerRouter.removeRoute(pointer, handleEvent);\n    _trackedPointers.remove(pointer);\n    if (_trackedPointers.isEmpty)\n      didStopTrackingLastPointer(pointer);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/stopTrackingPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "stopTrackingPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The team that this recognizer belongs to, if any.<\/p>\n<p>If <a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">team<\/a> is null, this recognizer competes directly in the\n<a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> to recognize a sequence of pointer events as a\ngesture. If <a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">team<\/a> is non-null, this recognizer competes in the arena in\na group with other recognizers on the same team.<\/p>\n<p>A recognizer can be assigned to a team only when it is not participating\nin the arena. For example, a common time to assign a recognizer to a team\nis shortly after creating the recognizer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaTeam get team =&gt; _team;<\/code><\/pre>\n        ",
                    "href": "gestures\/OneSequenceGestureRecognizer\/team.html",
                    "name": "team",
                    "isDeprecated": false,
                    "type": "gestures.GestureArenaTeam",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.OneSequenceGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes movement both horizontally and vertically.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, for a similar recognizer that\ntracks each touch point independently.<\/li>\n<li>\n<a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a>, for a similar recognizer that\ntracks each touch point independently, but that doesn't start until\nsome time has passed.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PanGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PanGestureRecognizer",
            "shortname": "PanGestureRecognizer",
            "extends": [
                "gestures.DragGestureRecognizer",
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for tracking movement on a plane.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PanGestureRecognizer({ Object debugOwner }) : super(debugOwner: debugOwner);<\/code><\/pre>\n    ",
                    "href": "gestures\/PanGestureRecognizer\/PanGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PanGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PanGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'pan';<\/code><\/pre>\n        ",
                    "href": "gestures\/PanGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PanGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The device has started tracking the pointer.<\/p>\n<p>For example, the pointer might be hovering above the device, having not yet\nmade contact with the surface of the device.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerAddedEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerAddedEvent",
            "shortname": "PointerAddedEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer added event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerAddedEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n}) : super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: position,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerAddedEvent\/PointerAddedEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerAddedEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerAddedEvent",
                    "params": [
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The input from the pointer is no longer directed towards this receiver.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerCancelEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerCancelEvent",
            "shortname": "PointerCancelEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer cancel event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerCancelEvent({\n  Duration timeStamp = Duration.zero,\n  int pointer = 0,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n}) : super(\n  timeStamp: timeStamp,\n  pointer: pointer,\n  kind: kind,\n  device: device,\n  position: position,\n  buttons: buttons,\n  down: false,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerCancelEvent\/PointerCancelEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerCancelEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerCancelEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has made contact with the device.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerDownEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerDownEvent",
            "shortname": "PointerDownEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer down event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerDownEvent({\n  Duration timeStamp = Duration.zero,\n  int pointer = 0,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 1.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n}) : super(\n  timeStamp: timeStamp,\n  pointer: pointer,\n  kind: kind,\n  device: device,\n  position: position,\n  buttons: buttons,\n  down: true,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: 0.0,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerDownEvent\/PointerDownEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerDownEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerDownEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has moved with respect to the device while the pointer is not\nin contact with the device, and it has entered a target object.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, which reports when the pointer has moved while\nwithin an object.<\/li>\n<li>\n<a href=\"gestures\/PointerExitEvent-class.html\">PointerExitEvent<\/a>, which reports when the pointer has left an object.<\/li>\n<li>\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, which reports movement while the pointer is in\ncontact with the device.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerEnterEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerEnterEvent",
            "shortname": "PointerEnterEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer enter event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerEnterEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  Offset delta = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n  bool synthesized = false,\n}) : super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: position,\n  delta: delta,\n  buttons: buttons,\n  down: false,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt,\n  synthesized: synthesized,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEnterEvent\/PointerEnterEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerEnterEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerEnterEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "synthesized",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Base class for touch, stylus, or mouse events.<\/p>\n<p>Pointer events operate in the coordinate space of the screen, scaled to\nlogical pixels. Logical pixels approximate a grid with about 38 pixels per\ncentimeter, or 96 pixels per inch.<\/p>\n<p>This allows gestures to be recognized independent of the precise hardware\ncharacteristics of the device. In particular, features such as touch slop\n(see <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a>) can be defined in terms of roughly physical lengths so\nthat the user can shift their finger by the same distance on a high-density\ndisplay as on a low-resolution device.<\/p>\n<p>For similar reasons, pointer events are not affected by any transforms in\nthe rendering layer. This means that deltas may need to be scaled before\nbeing applied to movement within the rendering. For example, if a scrolling\nlist is shown scaled by 2x, the pointer deltas will have to be scaled by the\ninverse amount if the list is to appear to scroll with the user's finger.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Window\/devicePixelRatio.html\">Window.devicePixelRatio<\/a>, which defines the device's current resolution.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerEvent-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerEvent",
            "shortname": "PointerEvent",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.PointerAddedEvent",
                "gestures.PointerCancelEvent",
                "gestures.PointerDownEvent",
                "gestures.PointerEnterEvent",
                "gestures.PointerExitEvent",
                "gestures.PointerHoverEvent",
                "gestures.PointerMoveEvent",
                "gestures.PointerRemovedEvent",
                "gestures.PointerScrollEvent",
                "gestures.PointerUpEvent"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerEvent({\n  this.timeStamp = Duration.zero,\n  this.pointer = 0,\n  this.kind = PointerDeviceKind.touch,\n  this.device = 0,\n  this.position = Offset.zero,\n  this.delta = Offset.zero,\n  this.buttons = 0,\n  this.down = false,\n  this.obscured = false,\n  this.pressure = 1.0,\n  this.pressureMin = 1.0,\n  this.pressureMax = 1.0,\n  this.distance = 0.0,\n  this.distanceMax = 0.0,\n  this.size = 0.0,\n  this.radiusMajor = 0.0,\n  this.radiusMinor = 0.0,\n  this.radiusMin = 0.0,\n  this.radiusMax = 0.0,\n  this.orientation = 0.0,\n  this.tilt = 0.0,\n  this.platformData = 0,\n  this.synthesized = false,\n});<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEvent\/PointerEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "down",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "platformData",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "synthesized",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/PointerEvent\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('position', position));\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('delta', delta, defaultValue: Offset.zero, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Duration&gt;('timeStamp', timeStamp, defaultValue: Duration.zero, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('pointer', pointer, level: DiagnosticLevel.debug));\n  properties.add(EnumProperty&lt;PointerDeviceKind&gt;('kind', kind, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('device', device, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('buttons', buttons, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('down', down, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressure', pressure, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressureMin', pressureMin, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressureMax', pressureMax, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distance', distance, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distanceMin', distanceMin, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distanceMax', distanceMax, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('size', size, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMajor', radiusMajor, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMinor', radiusMinor, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMin', radiusMin, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMax', radiusMax, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('orientation', orientation, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('tilt', tilt, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('platformData', platformData, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(FlagProperty('obscured', value: obscured, ifTrue: 'obscured', level: DiagnosticLevel.debug));\n  properties.add(FlagProperty('synthesized', value: synthesized, ifTrue: 'synthesized', level: DiagnosticLevel.debug));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEvent\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a complete textual description of this event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringFull() {\n  return toString(minLevel: DiagnosticLevel.fine);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEvent\/toStringFull.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringFull",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Bit field using the *Button constants such as <a href=\"gestures\/kPrimaryMouseButton-constant.html\">kPrimaryMouseButton<\/a>,\n<a href=\"gestures\/kSecondaryStylusButton-constant.html\">kSecondaryStylusButton<\/a>, etc.<\/p>\n<p>For example, if this has the value 6 and the\n<a href=\"gestures\/PointerEvent\/kind.html\">kind<\/a> is <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a>, then this indicates an\nupside-down stylus with both its primary and secondary buttons pressed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int buttons\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/buttons.html",
                    "name": "buttons",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Distance in logical pixels that the pointer moved since the last\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>.<\/p>\n<p>This value is always 0.0 for down, up, and cancel events.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset delta\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/delta.html",
                    "name": "delta",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Unique identifier for the pointing device, reused across interactions.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int device\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/device.html",
                    "name": "device",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The distance of the detected object from the input surface.<\/p>\n<p>For instance, this value could be the distance of a stylus or finger\nfrom a touch screen, in arbitrary units on an arbitrary (not necessarily\nlinear) scale. If the pointer is down, this is 0.0 by definition.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distance\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/distance.html",
                    "name": "distance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The maximum value that <a href=\"gestures\/PointerEvent\/distance.html\">distance<\/a> can return for this pointer.<\/p>\n<p>If this input device cannot detect \"hover touch\" input events,\nthen this will be 0.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distanceMax\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/distanceMax.html",
                    "name": "distanceMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that <a href=\"gestures\/PointerEvent\/distance.html\">distance<\/a> can return for this pointer.<\/p>\n<p>This value is always 0.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get distanceMin =&gt; 0.0;<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/distanceMin.html",
                    "name": "distanceMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Set if the pointer is currently down.<\/p>\n<p>For touch and stylus pointers, this means the object (finger, pen) is in\ncontact with the input surface. For mice, it means a button is pressed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool down\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/down.html",
                    "name": "down",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The kind of input device for which the event was generated.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerDeviceKind kind\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/kind.html",
                    "name": "kind",
                    "isDeprecated": false,
                    "type": "dart:ui.PointerDeviceKind",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Set if an application from a different security domain is in any way\nobscuring this application's window.<\/p>\n<p>This is not currently implemented.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscured\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/obscured.html",
                    "name": "obscured",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The orientation angle of the detected object, in radians.<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.touch<\/a> events:<\/p>\n<p>The angle of the contact ellipse, in radians in the range:<\/p>\n<p>   -pi\/2 &lt; orientation &lt;= pi\/2<\/p>\n<p>...giving the angle of the major axis of the ellipse with the y-axis\n(negative angles indicating an orientation along the top-left \/\nbottom-right diagonal, positive angles indicating an orientation along the\ntop-right \/ bottom-left diagonal, and zero indicating an orientation\nparallel with the y-axis).<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.stylus<\/a> and <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a> events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   -pi &lt; orientation &lt;= pi<\/p>\n<p>...giving the angle of the axis of the stylus projected onto the input\nsurface, relative to the positive y-axis of that surface (thus 0.0\nindicates the stylus, if projected onto that surface, would go from the\ncontact point vertically up in the positive y-axis direction, pi would\nindicate that the stylus would go down in the negative y-axis direction;\npi\/4 would indicate that the stylus goes up and to the right, -pi\/2 would\nindicate that the stylus goes to the left, etc).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double orientation\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/orientation.html",
                    "name": "orientation",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Opaque platform-specific data associated with the event.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int platformData\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/platformData.html",
                    "name": "platformData",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Unique identifier for the pointer, not reused. Changes for each new\npointer down event.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int pointer\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/pointer.html",
                    "name": "pointer",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Coordinate of the position of the pointer, in logical pixels in the global\ncoordinate space.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset position\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/position.html",
                    "name": "position",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The pressure of the touch.<\/p>\n<p>This value is a number ranging from 0.0, indicating a touch with no\ndiscernible pressure, to 1.0, indicating a touch with \"normal\" pressure,\nand possibly beyond, indicating a stronger touch. For devices that do not\ndetect pressure (e.g. mice), returns 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressure\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/pressure.html",
                    "name": "pressure",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The maximum value that <a href=\"gestures\/PointerEvent\/pressure.html\">pressure<\/a> can return for this pointer.<\/p>\n<p>For devices that do not detect pressure (e.g. mice), returns 1.0.\nThis will always be a greater than or equal to 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMax\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/pressureMax.html",
                    "name": "pressureMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that <a href=\"gestures\/PointerEvent\/pressure.html\">pressure<\/a> can return for this pointer.<\/p>\n<p>For devices that do not detect pressure (e.g. mice), returns 1.0.\nThis will always be a number less than or equal to 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMin\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/pressureMin.html",
                    "name": "pressureMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The radius of the contact ellipse along the major axis, in logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMajor\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/radiusMajor.html",
                    "name": "radiusMajor",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that could be reported for <a href=\"gestures\/PointerEvent\/radiusMajor.html\">radiusMajor<\/a> and <a href=\"gestures\/PointerEvent\/radiusMinor.html\">radiusMinor<\/a>\nfor this pointer, in logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMax\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/radiusMax.html",
                    "name": "radiusMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that could be reported for <a href=\"gestures\/PointerEvent\/radiusMajor.html\">radiusMajor<\/a> and <a href=\"gestures\/PointerEvent\/radiusMinor.html\">radiusMinor<\/a>\nfor this pointer, in logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMin\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/radiusMin.html",
                    "name": "radiusMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The radius of the contact ellipse along the minor axis, in logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMinor\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/radiusMinor.html",
                    "name": "radiusMinor",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The area of the screen being pressed.<\/p>\n<p>This value is scaled to a range between 0 and 1. It can be used to\ndetermine fat touch events. This value is only set on Android and is\na device specific approximation within the range of detectable values.\nSo, for example, the value of 0.1 could mean a touch with the tip of\nthe finger, 0.2 a touch with full finger, and 0.3 the full palm.<\/p>\n<p>Because this value uses device-specific range and is uncalibrated,\nit is of limited use and is primarily retained in order to be able\nto reconstruct original pointer events for <a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/size.html",
                    "name": "size",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Set if the event was synthesized by Flutter.<\/p>\n<p>We occasionally synthesize PointerEvents that aren't exact translations\nof <code>ui.PointerData<\/code> from the engine to cover small cross-OS discrepancies\nin pointer behaviors.<\/p>\n<p>For instance, on end events, Android always drops any location changes\nthat happened between its reporting intervals when emitting the end events.<\/p>\n<p>On iOS, minor incorrect location changes from the previous move events\ncan be reported on end events. We synthesize a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> to cover\nthe difference between the 2 events in that case.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool synthesized\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/synthesized.html",
                    "name": "synthesized",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>The tilt angle of the detected object, in radians.<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.stylus<\/a> and <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a> events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   0 &lt;= tilt &lt;= pi\/2<\/p>\n<p>...giving the angle of the axis of the stylus, relative to the axis\nperpendicular to the input surface (thus 0.0 indicates the stylus is\northogonal to the plane of the input surface, while pi\/2 indicates that\nthe stylus is flat on that surface).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double tilt\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/tilt.html",
                    "name": "tilt",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                },
                {
                    "desc": "<p>Time of event dispatch, relative to an arbitrary timeline.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration timeStamp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerEvent\/timeStamp.html",
                    "name": "timeStamp",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerEvent",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Converts from engine pointer data to framework pointer events.<\/p>\n<p>This takes <a href=\"dart-ui\/PointerDataPacket-class.html\">PointerDataPacket<\/a> objects, as received from the engine via\n<a href=\"dart-ui\/Window\/onPointerDataPacket.html\">dart:ui.Window.onPointerDataPacket<\/a>, and converts them to <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a>\nobjects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerEventConverter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerEventConverter",
            "shortname": "PointerEventConverter",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Clears internal state mapping platform pointer identifiers to\n<a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> pointer identifiers.<\/p>\n<p>Visible only so that tests can reset the global state contained in\n<a href=\"gestures\/PointerEventConverter-class.html\">PointerEventConverter<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nstatic void clearPointers() =&gt; _pointers.clear();<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEventConverter\/clearPointers.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clearPointers",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerEventConverter",
                    "params": []
                },
                {
                    "desc": "<p>Expand the given packet of pointer data into a sequence of framework\npointer events.<\/p>\n<p>The <code>devicePixelRatio<\/code> argument (usually given the value from\n<a href=\"dart-ui\/Window\/devicePixelRatio.html\">dart:ui.Window.devicePixelRatio<\/a>) is used to convert the incoming data\nfrom physical coordinates to logical pixels. See the discussion at\n<a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> for more details on the <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> coordinate space.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;PointerEvent&gt; expand(Iterable&lt;ui.PointerData&gt; data, double devicePixelRatio) sync* {\n  for (ui.PointerData datum in data) {\n    final Offset position = Offset(datum.physicalX, datum.physicalY) \/ devicePixelRatio;\n    final double radiusMinor = _toLogicalPixels(datum.radiusMinor, devicePixelRatio);\n    final double radiusMajor = _toLogicalPixels(datum.radiusMajor, devicePixelRatio);\n    final double radiusMin = _toLogicalPixels(datum.radiusMin, devicePixelRatio);\n    final double radiusMax = _toLogicalPixels(datum.radiusMax, devicePixelRatio);\n    final Duration timeStamp = datum.timeStamp;\n    final PointerDeviceKind kind = datum.kind;\n    assert(datum.change != null);\n    if (datum.signalKind == null || datum.signalKind == ui.PointerSignalKind.none) {\n      switch (datum.change) {\n        case ui.PointerChange.add:\n          assert(!_pointers.containsKey(datum.device));\n          final _PointerState state = _ensureStateForPointer(datum, position);\n          assert(state.lastPosition == position);\n          yield PointerAddedEvent(\n            timeStamp: timeStamp,\n            kind: kind,\n            device: datum.device,\n            position: position,\n            obscured: datum.obscured,\n            pressureMin: datum.pressureMin,\n            pressureMax: datum.pressureMax,\n            distance: datum.distance,\n            distanceMax: datum.distanceMax,\n            radiusMin: radiusMin,\n            radiusMax: radiusMax,\n            orientation: datum.orientation,\n            tilt: datum.tilt,\n          );\n          break;\n        case ui.PointerChange.hover:\n          final bool alreadyAdded = _pointers.containsKey(datum.device);\n          final _PointerState state = _ensureStateForPointer(datum, position);\n          assert(!state.down);\n          if (!alreadyAdded) {\n            assert(state.lastPosition == position);\n            yield PointerAddedEvent(\n              timeStamp: timeStamp,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              obscured: datum.obscured,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n            );\n          }\n          final Offset offset = position - state.lastPosition;\n          state.lastPosition = position;\n          yield PointerHoverEvent(\n            timeStamp: timeStamp,\n            kind: kind,\n            device: datum.device,\n            position: position,\n            delta: offset,\n            buttons: datum.buttons,\n            obscured: datum.obscured,\n            pressureMin: datum.pressureMin,\n            pressureMax: datum.pressureMax,\n            distance: datum.distance,\n            distanceMax: datum.distanceMax,\n            size: datum.size,\n            radiusMajor: radiusMajor,\n            radiusMinor: radiusMinor,\n            radiusMin: radiusMin,\n            radiusMax: radiusMax,\n            orientation: datum.orientation,\n            tilt: datum.tilt,\n          );\n          state.lastPosition = position;\n          break;\n        case ui.PointerChange.down:\n          final bool alreadyAdded = _pointers.containsKey(datum.device);\n          final _PointerState state = _ensureStateForPointer(datum, position);\n          assert(!state.down);\n          if (!alreadyAdded) {\n            assert(state.lastPosition == position);\n            yield PointerAddedEvent(\n              timeStamp: timeStamp,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              obscured: datum.obscured,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n            );\n          }\n          if (state.lastPosition != position) {\n            \/\/ Not all sources of pointer packets respect the invariant that\n            \/\/ they hover the pointer to the down location before sending the\n            \/\/ down event. We restore the invariant here for our clients.\n            final Offset offset = position - state.lastPosition;\n            state.lastPosition = position;\n            yield PointerHoverEvent(\n              timeStamp: timeStamp,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              delta: offset,\n              buttons: datum.buttons,\n              obscured: datum.obscured,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              size: datum.size,\n              radiusMajor: radiusMajor,\n              radiusMinor: radiusMinor,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n              synthesized: true,\n            );\n            state.lastPosition = position;\n          }\n          state.startNewPointer();\n          state.setDown();\n          yield PointerDownEvent(\n            timeStamp: timeStamp,\n            pointer: state.pointer,\n            kind: kind,\n            device: datum.device,\n            position: position,\n            buttons: datum.buttons,\n            obscured: datum.obscured,\n            pressure: datum.pressure,\n            pressureMin: datum.pressureMin,\n            pressureMax: datum.pressureMax,\n            distanceMax: datum.distanceMax,\n            size: datum.size,\n            radiusMajor: radiusMajor,\n            radiusMinor: radiusMinor,\n            radiusMin: radiusMin,\n            radiusMax: radiusMax,\n            orientation: datum.orientation,\n            tilt: datum.tilt,\n          );\n          break;\n        case ui.PointerChange.move:\n          \/\/ If the service starts supporting hover pointers, then it must also\n          \/\/ start sending us ADDED and REMOVED data points.\n          \/\/ See also: https:\/\/github.com\/flutter\/flutter\/issues\/720\n          assert(_pointers.containsKey(datum.device));\n          final _PointerState state = _pointers[datum.device];\n          assert(state.down);\n          final Offset offset = position - state.lastPosition;\n          state.lastPosition = position;\n          yield PointerMoveEvent(\n            timeStamp: timeStamp,\n            pointer: state.pointer,\n            kind: kind,\n            device: datum.device,\n            position: position,\n            delta: offset,\n            buttons: datum.buttons,\n            obscured: datum.obscured,\n            pressure: datum.pressure,\n            pressureMin: datum.pressureMin,\n            pressureMax: datum.pressureMax,\n            distanceMax: datum.distanceMax,\n            size: datum.size,\n            radiusMajor: radiusMajor,\n            radiusMinor: radiusMinor,\n            radiusMin: radiusMin,\n            radiusMax: radiusMax,\n            orientation: datum.orientation,\n            tilt: datum.tilt,\n            platformData: datum.platformData,\n          );\n          break;\n        case ui.PointerChange.up:\n        case ui.PointerChange.cancel:\n          assert(_pointers.containsKey(datum.device));\n          final _PointerState state = _pointers[datum.device];\n          assert(state.down);\n          if (position != state.lastPosition) {\n            \/\/ Not all sources of pointer packets respect the invariant that\n            \/\/ they move the pointer to the up location before sending the up\n            \/\/ event. For example, in the iOS simulator, of you drag outside the\n            \/\/ window, you'll get a stream of pointers that violates that\n            \/\/ invariant. We restore the invariant here for our clients.\n            final Offset offset = position - state.lastPosition;\n            state.lastPosition = position;\n            yield PointerMoveEvent(\n              timeStamp: timeStamp,\n              pointer: state.pointer,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              delta: offset,\n              buttons: datum.buttons,\n              obscured: datum.obscured,\n              pressure: datum.pressure,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distanceMax: datum.distanceMax,\n              size: datum.size,\n              radiusMajor: radiusMajor,\n              radiusMinor: radiusMinor,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n              synthesized: true,\n            );\n            state.lastPosition = position;\n          }\n          assert(position == state.lastPosition);\n          state.setUp();\n          if (datum.change == ui.PointerChange.up) {\n            yield PointerUpEvent(\n              timeStamp: timeStamp,\n              pointer: state.pointer,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              buttons: datum.buttons,\n              obscured: datum.obscured,\n              pressure: datum.pressure,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              size: datum.size,\n              radiusMajor: radiusMajor,\n              radiusMinor: radiusMinor,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n            );\n          } else {\n            yield PointerCancelEvent(\n              timeStamp: timeStamp,\n              pointer: state.pointer,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              buttons: datum.buttons,\n              obscured: datum.obscured,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              size: datum.size,\n              radiusMajor: radiusMajor,\n              radiusMinor: radiusMinor,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n            );\n          }\n          break;\n        case ui.PointerChange.remove:\n          assert(_pointers.containsKey(datum.device));\n          final _PointerState state = _pointers[datum.device];\n          if (state.down) {\n            yield PointerCancelEvent(\n              timeStamp: timeStamp,\n              pointer: state.pointer,\n              kind: kind,\n              device: datum.device,\n              position: position,\n              buttons: datum.buttons,\n              obscured: datum.obscured,\n              pressureMin: datum.pressureMin,\n              pressureMax: datum.pressureMax,\n              distance: datum.distance,\n              distanceMax: datum.distanceMax,\n              size: datum.size,\n              radiusMajor: radiusMajor,\n              radiusMinor: radiusMinor,\n              radiusMin: radiusMin,\n              radiusMax: radiusMax,\n              orientation: datum.orientation,\n              tilt: datum.tilt,\n            );\n          }\n          _pointers.remove(datum.device);\n          yield PointerRemovedEvent(\n            timeStamp: timeStamp,\n            kind: kind,\n            device: datum.device,\n            obscured: datum.obscured,\n            pressureMin: datum.pressureMin,\n            pressureMax: datum.pressureMax,\n            distanceMax: datum.distanceMax,\n            radiusMin: radiusMin,\n            radiusMax: radiusMax,\n          );\n          break;\n      }\n    } else {\n      switch (datum.signalKind) {\n        case ui.PointerSignalKind.scroll:\n          \/\/ Devices must be added before they send scroll events.\n          assert(_pointers.containsKey(datum.device));\n          final _PointerState state = _ensureStateForPointer(datum, position);\n          if (state.lastPosition != position) {\n            \/\/ Synthesize a hover\/move of the pointer to the scroll location\n            \/\/ before sending the scroll event, if necessary, so that clients\n            \/\/ don't have to worry about native ordering of hover and scroll\n            \/\/ events.\n            final Offset offset = position - state.lastPosition;\n            state.lastPosition = position;\n            if (state.down) {\n              yield PointerMoveEvent(\n                timeStamp: timeStamp,\n                pointer: state.pointer,\n                kind: kind,\n                device: datum.device,\n                position: position,\n                delta: offset,\n                buttons: datum.buttons,\n                obscured: datum.obscured,\n                pressureMin: datum.pressureMin,\n                pressureMax: datum.pressureMax,\n                distanceMax: datum.distanceMax,\n                size: datum.size,\n                radiusMajor: radiusMajor,\n                radiusMinor: radiusMinor,\n                radiusMin: radiusMin,\n                radiusMax: radiusMax,\n                orientation: datum.orientation,\n                tilt: datum.tilt,\n                synthesized: true,\n              );\n            } else {\n              yield PointerHoverEvent(\n                timeStamp: timeStamp,\n                kind: kind,\n                device: datum.device,\n                position: position,\n                delta: offset,\n                buttons: datum.buttons,\n                obscured: datum.obscured,\n                pressureMin: datum.pressureMin,\n                pressureMax: datum.pressureMax,\n                distance: datum.distance,\n                distanceMax: datum.distanceMax,\n                size: datum.size,\n                radiusMajor: radiusMajor,\n                radiusMinor: radiusMinor,\n                radiusMin: radiusMin,\n                radiusMax: radiusMax,\n                orientation: datum.orientation,\n                tilt: datum.tilt,\n                synthesized: true,\n              );\n            }\n          }\n          final Offset scrollDelta =\n              Offset(datum.scrollDeltaX, datum.scrollDeltaY) \/ devicePixelRatio;\n          yield PointerScrollEvent(\n            timeStamp: timeStamp,\n            kind: kind,\n            device: datum.device,\n            position: position,\n            scrollDelta: scrollDelta,\n          );\n          break;\n        case ui.PointerSignalKind.none:\n          assert(false); \/\/ This branch should already have 'none' filtered out.\n          break;\n        case ui.PointerSignalKind.unknown:\n          \/\/ Ignore unknown signals.\n          break;\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerEventConverter\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<gestures.PointerEvent>",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerEventConverter",
                    "params": [
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:ui.PointerData>"
                        },
                        {
                            "name": "devicePixelRatio",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has moved with respect to the device while the pointer is not\nin contact with the device, and entered a target object.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, which reports when the pointer has moved while\nwithin an object.<\/li>\n<li>\n<a href=\"gestures\/PointerEnterEvent-class.html\">PointerEnterEvent<\/a>, which reports when the pointer has entered an object.<\/li>\n<li>\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, which reports movement while the pointer is in\ncontact with the device.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerExitEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerExitEvent",
            "shortname": "PointerExitEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer exit event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerExitEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  Offset delta = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n  bool synthesized = false,\n}) : super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: position,\n  delta: delta,\n  buttons: buttons,\n  down: false,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt,\n  synthesized: synthesized,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerExitEvent\/PointerExitEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerExitEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerExitEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "synthesized",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has moved with respect to the device while the pointer is not\nin contact with the device.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/PointerEnterEvent-class.html\">PointerEnterEvent<\/a>, which reports when the pointer has entered an\nobject.<\/li>\n<li>\n<a href=\"gestures\/PointerExitEvent-class.html\">PointerExitEvent<\/a>, which reports when the pointer has left an object.<\/li>\n<li>\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, which reports movement while the pointer is in\ncontact with the device.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerHoverEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerHoverEvent",
            "shortname": "PointerHoverEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer hover event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerHoverEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  Offset delta = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n  bool synthesized = false,\n}) : super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: position,\n  delta: delta,\n  buttons: buttons,\n  down: false,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt,\n  synthesized: synthesized,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerHoverEvent\/PointerHoverEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerHoverEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerHoverEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "synthesized",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has moved with respect to the device while the pointer is in\ncontact with the device.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, which reports movement while the pointer is not in\ncontact with the device.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerMoveEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerMoveEvent",
            "shortname": "PointerMoveEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer move event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerMoveEvent({\n  Duration timeStamp = Duration.zero,\n  int pointer = 0,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  Offset delta = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 1.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n  int platformData = 0,\n  bool synthesized = false,\n}) : super(\n  timeStamp: timeStamp,\n  pointer: pointer,\n  kind: kind,\n  device: device,\n  position: position,\n  delta: delta,\n  buttons: buttons,\n  down: true,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: 0.0,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt,\n  platformData: platformData,\n  synthesized: synthesized,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerMoveEvent\/PointerMoveEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerMoveEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerMoveEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "delta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "platformData",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "synthesized",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The device is no longer tracking the pointer.<\/p>\n<p>For example, the pointer might have drifted out of the device's hover\ndetection range or might have been disconnected from the system entirely.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerRemovedEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerRemovedEvent",
            "shortname": "PointerRemovedEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer removed event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerRemovedEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distanceMax = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n}) : super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: null,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distanceMax: distanceMax,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRemovedEvent\/PointerRemovedEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerRemovedEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerRemovedEvent",
                    "params": [
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A routing table for <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> events.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerRouter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerRouter",
            "shortname": "PointerRouter",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/PointerRouter\/PointerRouter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerRouter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": []
                },
                {
                    "desc": "<p>Adds a route to the global entry in the routing table.<\/p>\n<p>Whenever this object routes a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a>, call route.<\/p>\n<p>Routes added reentrantly within <a href=\"gestures\/PointerRouter\/route.html\">PointerRouter.route<\/a> will take effect when\nrouting the next event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addGlobalRoute(PointerRoute route) {\n  assert(!_globalRoutes.contains(route));\n  _globalRoutes.add(route);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRouter\/addGlobalRoute.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addGlobalRoute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": [
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds a route to the routing table.<\/p>\n<p>Whenever this object routes a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> corresponding to\npointer, call route.<\/p>\n<p>Routes added reentrantly within <a href=\"gestures\/PointerRouter\/route.html\">PointerRouter.route<\/a> will take effect when\nrouting the next event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addRoute(int pointer, PointerRoute route) {\n  final LinkedHashSet&lt;PointerRoute&gt; routes = _routeMap.putIfAbsent(pointer, () =&gt; LinkedHashSet&lt;PointerRoute&gt;());\n  assert(!routes.contains(route));\n  routes.add(route);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRouter\/addRoute.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addRoute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes a route from the global entry in the routing table.<\/p>\n<p>No longer call route when routing a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a>. Requires that this\nroute was previously added via <a href=\"gestures\/PointerRouter\/addGlobalRoute.html\">addGlobalRoute<\/a>.<\/p>\n<p>Routes removed reentrantly within <a href=\"gestures\/PointerRouter\/route.html\">PointerRouter.route<\/a> will take effect\nimmediately.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeGlobalRoute(PointerRoute route) {\n  assert(_globalRoutes.contains(route));\n  _globalRoutes.remove(route);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRouter\/removeGlobalRoute.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeGlobalRoute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": [
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes a route from the routing table.<\/p>\n<p>No longer call route when routing a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> corresponding to\npointer. Requires that this route was previously added to the router.<\/p>\n<p>Routes removed reentrantly within <a href=\"gestures\/PointerRouter\/route.html\">PointerRouter.route<\/a> will take effect\nimmediately.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRoute(int pointer, PointerRoute route) {\n  assert(_routeMap.containsKey(pointer));\n  final LinkedHashSet&lt;PointerRoute&gt; routes = _routeMap[pointer];\n  assert(routes.contains(route));\n  routes.remove(route);\n  if (routes.isEmpty)\n    _routeMap.remove(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRouter\/removeRoute.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeRoute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>Calls the routes registered for this pointer event.<\/p>\n<p>Routes are called in the order in which they were added to the\nPointerRouter object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void route(PointerEvent event) {\n  final LinkedHashSet&lt;PointerRoute&gt; routes = _routeMap[event.pointer];\n  final List&lt;PointerRoute&gt; globalRoutes = List&lt;PointerRoute&gt;.from(_globalRoutes);\n  if (routes != null) {\n    for (PointerRoute route in List&lt;PointerRoute&gt;.from(routes)) {\n      if (routes.contains(route))\n        _dispatch(event, route);\n    }\n  }\n  for (PointerRoute route in globalRoutes) {\n    if (_globalRoutes.contains(route))\n      _dispatch(event, route);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerRouter\/route.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "route",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerRouter",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer issued a scroll event.<\/p>\n<p>Scrolling the scroll wheel on a mouse is an example of an event that\nwould create a <a href=\"gestures\/PointerScrollEvent-class.html\">PointerScrollEvent<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerScrollEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerScrollEvent",
            "shortname": "PointerScrollEvent",
            "extends": [
                "gestures.PointerSignalEvent",
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer scroll event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerScrollEvent({\n  Duration timeStamp = Duration.zero,\n  PointerDeviceKind kind = PointerDeviceKind.mouse,\n  int device = 0,\n  Offset position = Offset.zero,\n  this.scrollDelta = Offset.zero,\n}) : assert(timeStamp != null),\n     assert(kind != null),\n     assert(device != null),\n     assert(position != null),\n     assert(scrollDelta != null),\n     super(\n  timeStamp: timeStamp,\n  kind: kind,\n  device: device,\n  position: position,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerScrollEvent\/PointerScrollEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerScrollEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerScrollEvent",
                    "params": [
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "scrollDelta",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/PointerScrollEvent\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('scrollDelta', scrollDelta));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerScrollEvent\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerScrollEvent",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The amount to scroll, in logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset scrollDelta\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PointerScrollEvent\/scrollDelta.html",
                    "name": "scrollDelta",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PointerScrollEvent",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An event that corresponds to a discrete pointer signal.<\/p>\n<p>Pointer signals are events that originate from the pointer but don't change\nthe state of the pointer itself, and are discrete rather than needing to be\ninterpreted in the context of a series of events.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerSignalEvent-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerSignalEvent",
            "shortname": "PointerSignalEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.PointerScrollEvent"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerSignalEvent({\n  Duration timeStamp = Duration.zero,\n  int pointer = 0,\n  PointerDeviceKind kind = PointerDeviceKind.mouse,\n  int device = 0,\n  Offset position = Offset.zero,\n}) : super(\n  timeStamp: timeStamp,\n  pointer: pointer,\n  kind: kind,\n  device: device,\n  position: position,\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerSignalEvent\/PointerSignalEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerSignalEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerSignalEvent",
                    "params": [
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An resolver for pointer signal events.<\/p>\n<p>Objects interested in a <a href=\"gestures\/PointerSignalEvent-class.html\">PointerSignalEvent<\/a> should register a callback to\nbe called if they should handle the event. The resolver's purpose is to\nensure that the same pointer signal is not handled by multiple objects in\na hierarchy.<\/p>\n<p>Pointer signals are immediate, so unlike a gesture arena it always resolves\nat the end of event dispatch. The first callback registered will be the one\nthat is called.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerSignalResolver-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerSignalResolver",
            "shortname": "PointerSignalResolver",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/PointerSignalResolver\/PointerSignalResolver.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerSignalResolver",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerSignalResolver",
                    "params": []
                },
                {
                    "desc": "<p>Registers interest in handling <code>event<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void register(PointerSignalEvent event, PointerSignalResolvedCallback callback) {\n  assert(event != null);\n  assert(callback != null);\n  assert(_currentEvent == null || _currentEvent == event);\n  if (_firstRegisteredCallback != null) {\n    return;\n  }\n  _currentEvent = event;\n  _firstRegisteredCallback = callback;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerSignalResolver\/register.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "register",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerSignalResolver",
                    "params": [
                        {
                            "name": "callback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerSignalResolvedCallback"
                        },
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerSignalEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Resolves the event, calling the first registered callback if there was\none.<\/p>\n<p>Called after the framework has finished dispatching the pointer signal\nevent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void resolve(PointerSignalEvent event) {\n  if (_firstRegisteredCallback == null) {\n    assert(_currentEvent == null);\n    return;\n  }\n  assert(_currentEvent == event);\n  try {\n  _firstRegisteredCallback(event);\n  } catch (exception, stack) {\n    FlutterError.reportError(FlutterErrorDetails(\n      exception: exception,\n      stack: stack,\n      library: 'gesture library',\n      context: 'while resolving a PointerSignalEvent',\n      informationCollector: (StringBuffer information) {\n        information.writeln('Event:');\n        information.write('  $event');\n      },\n    ));\n  }\n  _firstRegisteredCallback = null;\n  _currentEvent = null;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerSignalResolver\/resolve.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PointerSignalResolver",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerSignalEvent"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The pointer has stopped making contact with the device.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PointerUpEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PointerUpEvent",
            "shortname": "PointerUpEvent",
            "extends": [
                "gestures.PointerEvent",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a pointer up event.<\/p>\n<p>All of the arguments must be non-null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerUpEvent({\n  Duration timeStamp = Duration.zero,\n  int pointer = 0,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n  int device = 0,\n  Offset position = Offset.zero,\n  int buttons = 0,\n  bool obscured = false,\n  double pressure = 0.0,\n  double pressureMin = 1.0,\n  double pressureMax = 1.0,\n  double distance = 0.0,\n  double distanceMax = 0.0,\n  double size = 0.0,\n  double radiusMajor = 0.0,\n  double radiusMinor = 0.0,\n  double radiusMin = 0.0,\n  double radiusMax = 0.0,\n  double orientation = 0.0,\n  double tilt = 0.0,\n}) : super(\n  timeStamp: timeStamp,\n  pointer: pointer,\n  kind: kind,\n  device: device,\n  position: position,\n  buttons: buttons,\n  down: false,\n  obscured: obscured,\n  pressure: pressure,\n  pressureMin: pressureMin,\n  pressureMax: pressureMax,\n  distance: distance,\n  distanceMax: distanceMax,\n  size: size,\n  radiusMajor: radiusMajor,\n  radiusMinor: radiusMinor,\n  radiusMin: radiusMin,\n  radiusMax: radiusMax,\n  orientation: orientation,\n  tilt: tilt\n);<\/code><\/pre>\n    ",
                    "href": "gestures\/PointerUpEvent\/PointerUpEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PointerUpEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PointerUpEvent",
                    "params": [
                        {
                            "name": "buttons",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "device",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distanceMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "orientation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pressure",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "pressureMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMajor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "radiusMinor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tilt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "timeStamp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An nth degree polynomial fit to a dataset.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PolynomialFit-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PolynomialFit",
            "shortname": "PolynomialFit",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a polynomial fit of the given degree.<\/p>\n<p>There are n + 1 coefficients in a fit of degree n.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PolynomialFit(int degree) : coefficients = Float64List(degree + 1);<\/code><\/pre>\n    ",
                    "href": "gestures\/PolynomialFit\/PolynomialFit.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PolynomialFit",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PolynomialFit",
                    "params": [
                        {
                            "name": "degree",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The polynomial coefficients of the fit.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; coefficients\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PolynomialFit\/coefficients.html",
                    "name": "coefficients",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.double>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PolynomialFit",
                    "params": []
                },
                {
                    "desc": "<p>An indicator of the quality of the fit.<\/p>\n<p>Larger values indicate greater quality.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double confidence\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PolynomialFit\/confidence.html",
                    "name": "confidence",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PolynomialFit",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A base class for gesture recognizers that track a single primary pointer.<\/p>\n<p>Gestures based on this class will stop tracking the gesture if the primary\npointer travels beyond <a href=\"gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html\">preAcceptSlopTolerance<\/a> or <a href=\"gestures\/PrimaryPointerGestureRecognizer\/postAcceptSlopTolerance.html\">postAcceptSlopTolerance<\/a>\npixels from the original contact point of the gesture.<\/p>\n<p>If the <a href=\"gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html\">preAcceptSlopTolerance<\/a> was breached before the gesture was accepted\nin the gesture arena, the gesture will be rejected.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/PrimaryPointerGestureRecognizer-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.PrimaryPointerGestureRecognizer",
            "shortname": "PrimaryPointerGestureRecognizer",
            "extends": [
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "gestures.LongPressGestureRecognizer",
                "gestures.TapGestureRecognizer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Initializes the <code>deadline<\/code> field during construction of subclasses.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PrimaryPointerGestureRecognizer({\n  this.deadline,\n  this.preAcceptSlopTolerance = kTouchSlop,\n  this.postAcceptSlopTolerance = kTouchSlop,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : assert(\n       preAcceptSlopTolerance == null || preAcceptSlopTolerance &gt;= 0,\n       'The preAcceptSlopTolerance must be positive or null',\n     ),\n     assert(\n       postAcceptSlopTolerance == null || postAcceptSlopTolerance &gt;= 0,\n       'The postAcceptSlopTolerance must be positive or null',\n     ),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/PrimaryPointerGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "PrimaryPointerGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "deadline",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        },
                        {
                            "name": "postAcceptSlopTolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "preAcceptSlopTolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  _gestureAccepted = true;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/PrimaryPointerGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerDownEvent event) {\n  startTrackingPointer(event.pointer);\n  if (state == GestureRecognizerState.ready) {\n    state = GestureRecognizerState.possible;\n    primaryPointer = event.pointer;\n    initialPosition = event.position;\n    if (deadline != null)\n      _timer = Timer(deadline, didExceedDeadline);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/PrimaryPointerGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;GestureRecognizerState&gt;('state', state));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Override to be notified when <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a> is exceeded.<\/p>\n<p>You must override this method if you supply a <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didExceedDeadline() {\n  assert(deadline == null);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/didExceedDeadline.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didExceedDeadline",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  assert(state != GestureRecognizerState.ready);\n  _stopTimer();\n  state = GestureRecognizerState.ready;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _stopTimer();\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(state != GestureRecognizerState.ready);\n  if (state == GestureRecognizerState.possible &amp;&amp; event.pointer == primaryPointer) {\n    final bool isPreAcceptSlopPastTolerance =\n        !_gestureAccepted &amp;&amp;\n        preAcceptSlopTolerance != null &amp;&amp;\n        _getDistance(event) &gt; preAcceptSlopTolerance;\n    final bool isPostAcceptSlopPastTolerance =\n        _gestureAccepted &amp;&amp;\n        postAcceptSlopTolerance != null &amp;&amp;\n        _getDistance(event) &gt; postAcceptSlopTolerance;\n\n    if (event is PointerMoveEvent &amp;&amp; (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {\n      resolve(GestureDisposition.rejected);\n      stopTrackingPointer(primaryPointer);\n    } else {\n      handlePrimaryPointer(event);\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Override to provide behavior for the primary pointer when the gesture is still possible.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handlePrimaryPointer(PointerEvent event);<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/handlePrimaryPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handlePrimaryPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  if (pointer == primaryPointer &amp;&amp; state == GestureRecognizerState.possible) {\n    _stopTimer();\n    state = GestureRecognizerState.defunct;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>If non-null, the recognizer will call <a href=\"gestures\/PrimaryPointerGestureRecognizer\/didExceedDeadline.html\">didExceedDeadline<\/a> after this\namount of time has elapsed since starting to track the primary pointer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration deadline\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/deadline.html",
                    "name": "deadline",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The global location at which the primary pointer contacted the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset initialPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/initialPosition.html",
                    "name": "initialPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The maximum distance in logical pixels the gesture is allowed to drift\nafter the gesture has been accepted.<\/p>\n<p>Drifting past the allowed slop amount causes the gesture to stop tracking\nand signaling subsequent callbacks.<\/p>\n<p>Can be null to indicate that the gesture can drift for any distance.\nDefaults to 18 logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double postAcceptSlopTolerance\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/postAcceptSlopTolerance.html",
                    "name": "postAcceptSlopTolerance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The maximum distance in logical pixels the gesture is allowed to drift\nfrom the initial touch down position before the gesture is accepted.<\/p>\n<p>Drifting past the allowed slop amount causes the gesture to be rejected.<\/p>\n<p>Can be null to indicate that the gesture can drift for any distance.\nDefaults to 18 logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double preAcceptSlopTolerance\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html",
                    "name": "preAcceptSlopTolerance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The ID of the primary pointer this recognizer is tracking.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int primaryPointer\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/primaryPointer.html",
                    "name": "primaryPointer",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The current state of the recognizer.<\/p>\n<p>See <a href=\"gestures\/GestureRecognizerState-class.html\">GestureRecognizerState<\/a> for a description of the states.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureRecognizerState state = GestureRecognizerState.ready\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/PrimaryPointerGestureRecognizer\/state.html",
                    "name": "state",
                    "isDeprecated": false,
                    "type": "gestures.GestureRecognizerState",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.PrimaryPointerGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for <a href=\"gestures\/GestureScaleEndCallback.html\">GestureScaleEndCallback<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ScaleEndDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ScaleEndDetails",
            "shortname": "ScaleEndDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for <a href=\"gestures\/GestureScaleEndCallback.html\">GestureScaleEndCallback<\/a>.<\/p>\n<p>The <code>velocity<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScaleEndDetails({ this.velocity = Velocity.zero })\n  : assert(velocity != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleEndDetails\/ScaleEndDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ScaleEndDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ScaleEndDetails",
                    "params": [
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.Velocity"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'ScaleEndDetails(velocity: $velocity)';<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleEndDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleEndDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The velocity of the last pointer to be lifted off of the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Velocity velocity\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleEndDetails\/velocity.html",
                    "name": "velocity",
                    "isDeprecated": false,
                    "type": "gestures.Velocity",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleEndDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes a scale gesture.<\/p>\n<p><a href=\"gestures\/ScaleGestureRecognizer-class.html\">ScaleGestureRecognizer<\/a> tracks the pointers in contact with the screen and\ncalculates their focal point, indicated scale, and rotation. When a focal\npointer is established, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onStart.html\">onStart<\/a>. As the focal point,\nscale, rotation change, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onUpdate.html\">onUpdate<\/a>. When the pointers\nare no longer in contact with the screen, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onEnd.html\">onEnd<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ScaleGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ScaleGestureRecognizer",
            "shortname": "ScaleGestureRecognizer",
            "extends": [
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The pointers are no longer in contact with the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleEndCallback onEnd\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleGestureRecognizer\/onEnd.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureScaleEndCallback",
                    "name": "onEnd",
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pointers in contact with the screen have established a focal point and\ninitial scale of 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleStartCallback onStart\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleGestureRecognizer\/onStart.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureScaleStartCallback",
                    "name": "onStart",
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pointers in contact with the screen have indicated a new focal point\nand\/or scale.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleGestureRecognizer\/onUpdate.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureScaleUpdateCallback",
                    "name": "onUpdate",
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for interactions intended for scaling content.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScaleGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/ScaleGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ScaleGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state == _ScaleState.possible) {\n    _state = _ScaleState.started;\n    _dispatchOnStartCallbackIfNeeded();\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/ScaleGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  startTrackingPointer(event.pointer);\n  _velocityTrackers[event.pointer] = VelocityTracker();\n  if (_state == _ScaleState.ready) {\n    _state = _ScaleState.possible;\n    _initialSpan = 0.0;\n    _currentSpan = 0.0;\n    _initialHorizontalSpan = 0.0;\n    _currentHorizontalSpan = 0.0;\n    _initialVerticalSpan = 0.0;\n    _currentVerticalSpan = 0.0;\n    _pointerLocations = &lt;int, Offset&gt;{};\n    _pointerQueue = &lt;int&gt;[];\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/addAllowedPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAllowedPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  switch (_state) {\n    case _ScaleState.possible:\n      resolve(GestureDisposition.rejected);\n      break;\n    case _ScaleState.ready:\n      assert(false); \/\/ We should have not seen a pointer yet\n      break;\n    case _ScaleState.accepted:\n      break;\n    case _ScaleState.started:\n      assert(false); \/\/ We should be in the accepted state when user is done\n      break;\n  }\n  _state = _ScaleState.ready;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/didStopTrackingLastPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didStopTrackingLastPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _velocityTrackers.clear();\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _ScaleState.ready);\n  bool didChangeConfiguration = false;\n  bool shouldStartIfAccepted = false;\n  if (event is PointerMoveEvent) {\n    final VelocityTracker tracker = _velocityTrackers[event.pointer];\n    assert(tracker != null);\n    if (!event.synthesized)\n      tracker.addPosition(event.timeStamp, event.position);\n    _pointerLocations[event.pointer] = event.position;\n    shouldStartIfAccepted = true;\n  } else if (event is PointerDownEvent) {\n    _pointerLocations[event.pointer] = event.position;\n    _pointerQueue.add(event.pointer);\n    didChangeConfiguration = true;\n    shouldStartIfAccepted = true;\n  } else if (event is PointerUpEvent || event is PointerCancelEvent) {\n    _pointerLocations.remove(event.pointer);\n    _pointerQueue.remove(event.pointer);\n    didChangeConfiguration = true;\n  }\n\n  _updateLines();\n  _update();\n\n  if (!didChangeConfiguration || _reconfigure(event.pointer))\n    _advanceStateMachine(shouldStartIfAccepted);\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/handleEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handleEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'scale';<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for <a href=\"gestures\/GestureScaleStartCallback.html\">GestureScaleStartCallback<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ScaleStartDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ScaleStartDetails",
            "shortname": "ScaleStartDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for <a href=\"gestures\/GestureScaleStartCallback.html\">GestureScaleStartCallback<\/a>.<\/p>\n<p>The <code>focalPoint<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScaleStartDetails({ this.focalPoint = Offset.zero })\n  : assert(focalPoint != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleStartDetails\/ScaleStartDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ScaleStartDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ScaleStartDetails",
                    "params": [
                        {
                            "name": "focalPoint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'ScaleStartDetails(focalPoint: $focalPoint)';<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleStartDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleStartDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The initial focal point of the pointers in contact with the screen.\nReported in global coordinates.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset focalPoint\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleStartDetails\/focalPoint.html",
                    "name": "focalPoint",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleStartDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for <a href=\"gestures\/GestureScaleUpdateCallback.html\">GestureScaleUpdateCallback<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/ScaleUpdateDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.ScaleUpdateDetails",
            "shortname": "ScaleUpdateDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for <a href=\"gestures\/GestureScaleUpdateCallback.html\">GestureScaleUpdateCallback<\/a>.<\/p>\n<p>The <code>focalPoint<\/code>, <code>scale<\/code>, <code>horizontalScale<\/code>, <code>verticalScale<\/code>, <code>rotation<\/code>\narguments must not be null. The <code>scale<\/code>, <code>horizontalScale<\/code>, and <code>verticalScale<\/code>\nargument must be greater than or equal to zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScaleUpdateDetails({\n  this.focalPoint = Offset.zero,\n  this.scale = 1.0,\n  this.horizontalScale = 1.0,\n  this.verticalScale = 1.0,\n  this.rotation = 0.0,\n}) : assert(focalPoint != null),\n     assert(scale != null &amp;&amp; scale &gt;= 0.0),\n     assert(horizontalScale != null &amp;&amp; horizontalScale &gt;= 0.0),\n     assert(verticalScale != null &amp;&amp; verticalScale &gt;= 0.0),\n     assert(rotation != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleUpdateDetails\/ScaleUpdateDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ScaleUpdateDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": [
                        {
                            "name": "focalPoint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "horizontalScale",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "rotation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "scale",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "verticalScale",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'ScaleUpdateDetails(focalPoint: $focalPoint, scale: $scale, horizontalScale: $horizontalScale, verticalScale: $verticalScale, rotation: $rotation)';<\/code><\/pre>\n    ",
                    "href": "gestures\/ScaleUpdateDetails\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The focal point of the pointers in contact with the screen.<\/p>\n<p>Reported in global coordinates.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset focalPoint\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleUpdateDetails\/focalPoint.html",
                    "name": "focalPoint",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The scale implied by the average distance along the horizontal axis\nbetween the pointers in contact with the screen.<\/p>\n<p>This value must be greater than or equal to zero.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/scale.html\">scale<\/a>, which is the general scale implied by the pointers.<\/li>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/verticalScale.html\">verticalScale<\/a>, which is the scale along the vertical axis.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double horizontalScale\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleUpdateDetails\/horizontalScale.html",
                    "name": "horizontalScale",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The angle implied by the first two pointers to enter in contact with\nthe screen.<\/p>\n<p>Expressed in radians.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double rotation\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleUpdateDetails\/rotation.html",
                    "name": "rotation",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The scale implied by the average distance between the pointers in contact\nwith the screen.<\/p>\n<p>This value must be greater than or equal to zero.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/horizontalScale.html\">horizontalScale<\/a>, which is the scale along the horizontal axis.<\/li>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/verticalScale.html\">verticalScale<\/a>, which is the scale along the vertical axis.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleUpdateDetails\/scale.html",
                    "name": "scale",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                },
                {
                    "desc": "<p>The scale implied by the average distance along the vertical axis\nbetween the pointers in contact with the screen.<\/p>\n<p>This value must be greater than or equal to zero.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/scale.html\">scale<\/a>, which is the general scale implied by the pointers.<\/li>\n<li>\n<a href=\"gestures\/ScaleUpdateDetails\/horizontalScale.html\">horizontalScale<\/a>, which is the scale along the horizontal axis.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double verticalScale\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/ScaleUpdateDetails\/verticalScale.html",
                    "name": "verticalScale",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.ScaleUpdateDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for <a href=\"gestures\/GestureTapDownCallback.html\">GestureTapDownCallback<\/a>, such as position.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GestureDetector\/onTapDown.html\">GestureDetector.onTapDown<\/a>, which receives this information.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>, which passes this information to one of its callbacks.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/TapDownDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.TapDownDetails",
            "shortname": "TapDownDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureTapDownCallback.html\">GestureTapDownCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TapDownDetails({ this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/TapDownDetails\/TapDownDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TapDownDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.TapDownDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer contacted the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapDownDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.TapDownDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes taps.<\/p>\n<p>Gesture recognizers take part in gesture arenas to enable potential gestures\nto be disambiguated from each other. This process is managed by a\n<a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> (q.v.).<\/p>\n<p><a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a> considers all the pointers involved in the pointer\nevent sequence as contributing to one gesture. For this reason, extra\npointer interactions during a tap sequence are not recognized as additional\ntaps. For example, down-1, down-2, up-1, up-2 produces only one tap on up-1.<\/p>\n<p>The lifecycle of events for a tap gesture is as follows:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">onTapDown<\/a>, which triggers after a short timeout (<a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>) even if the\ngesture has not won its arena yet.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a>, which trigger when the pointer is released if the\ngesture wins the arena.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a>, which triggers instead of <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a> in the case\nof the gesture not winning the arena.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">GestureDetector.onTap<\/a>, which uses this recognizer.<\/li>\n<li><a href=\"gestures\/MultiTapGestureRecognizer-class.html\">MultiTapGestureRecognizer<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/TapGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.TapGestureRecognizer",
            "shortname": "TapGestureRecognizer",
            "extends": [
                "gestures.PrimaryPointerGestureRecognizer",
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>A tap has occurred.<\/p>\n<p>This triggers once the gesture has won the arena, immediately after\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a>.<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">GestureDetector.onTap<\/a>, which exposes this callback.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapCallback onTap\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapGestureRecognizer\/onTap.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureTapCallback",
                    "name": "onTap",
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>The pointer that previously triggered <a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">onTapDown<\/a> will not end up causing\na tap.<\/p>\n<p>This triggers if the gesture loses the arena.<\/p>\n<p>If the gesture wins the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a> are called instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">GestureDetector.onTapCancel<\/a>, which exposes this callback.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapCancelCallback onTapCancel\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapGestureRecognizer\/onTapCancel.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureTapCancelCallback",
                    "name": "onTapCancel",
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that might cause a tap has contacted the screen at a particular\nlocation.<\/p>\n<p>This triggers before the gesture has won the arena, after a short timeout\n(<a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>).<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called next.\nOtherwise, <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> is called next.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">GestureDetector.onTapDown<\/a>, which exposes this callback.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapGestureRecognizer\/onTapDown.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureTapDownCallback",
                    "name": "onTapDown",
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>A pointer that will trigger a tap has stopped contacting the screen at a\nparticular location.<\/p>\n<p>This triggers once the gesture has won the arena, immediately before\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a>.<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">GestureDetector.onTapUp<\/a>, which exposes this callback.<\/li>\n<li>\n<a href=\"gestures\/TapUpDetails-class.html\">TapUpDetails<\/a>, which is passed as an argument to this callback.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapUpCallback onTapUp\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapGestureRecognizer\/onTapUp.html",
                    "isDeprecated": false,
                    "type": "gestures.GestureTapUpCallback",
                    "name": "onTapUp",
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a tap gesture recognizer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TapGestureRecognizer({ Object debugOwner }) : super(deadline: kPressTimeout, debugOwner: debugOwner);<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/TapGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TapGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  super.acceptGesture(pointer);\n  if (pointer == primaryPointer) {\n    _checkDown();\n    _wonArenaForPrimaryPointer = true;\n    _checkUp();\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/acceptGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "acceptGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/TapGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('wonArenaForPrimaryPointer', value: _wonArenaForPrimaryPointer, ifTrue: 'won arena'));\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('finalPosition', _finalPosition, defaultValue: null));\n  properties.add(FlagProperty('sentTapDown', value: _sentTapDown, ifTrue: 'sent tap down'));\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Override to be notified when <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a> is exceeded.<\/p>\n<p>You must override this method if you supply a <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didExceedDeadline() {\n  _checkDown();\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/didExceedDeadline.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didExceedDeadline",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                },
                {
                    "desc": "<p>Override to provide behavior for the primary pointer when the gesture is still possible.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handlePrimaryPointer(PointerEvent event) {\n  if (event is PointerUpEvent) {\n    _finalPosition = event.position;\n    _checkUp();\n  } else if (event is PointerCancelEvent) {\n    if (_sentTapDown &amp;&amp; onTapCancel != null) {\n      invokeCallback&lt;void&gt;('onTapCancel', onTapCancel);\n    }\n    _reset();\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/handlePrimaryPointer.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "handlePrimaryPointer",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  super.rejectGesture(pointer);\n  if (pointer == primaryPointer) {\n    \/\/ Another gesture won the arena.\n    assert(state != GestureRecognizerState.possible);\n    if (_sentTapDown &amp;&amp; onTapCancel != null)\n      invokeCallback&lt;void&gt;('forced onTapCancel', onTapCancel);\n    _reset();\n  }\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/rejectGesture.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "rejectGesture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "pointer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Resolves this recognizer's participation in each gesture arena with the\ngiven disposition.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid resolve(GestureDisposition disposition) {\n  if (_wonArenaForPrimaryPointer &amp;&amp; disposition == GestureDisposition.rejected) {\n    \/\/ This can happen if the superclass decides the primary pointer\n    \/\/ exceeded the touch slop, or if the recognizer is disposed.\n    assert(_sentTapDown);\n    if (onTapCancel != null)\n      invokeCallback&lt;void&gt;('spontaneous onTapCancel', onTapCancel);\n    _reset();\n  }\n  super.resolve(disposition);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/TapGestureRecognizer\/resolve.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": [
                        {
                            "name": "disposition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.GestureDisposition"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'tap';<\/code><\/pre>\n        ",
                    "href": "gestures\/TapGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.TapGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Details for <a href=\"gestures\/GestureTapUpCallback.html\">GestureTapUpCallback<\/a>, such as position.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GestureDetector\/onTapUp.html\">GestureDetector.onTapUp<\/a>, which receives this information.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>, which passes this information to one of its callbacks.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/TapUpDetails-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.TapUpDetails",
            "shortname": "TapUpDetails",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates details for a <a href=\"gestures\/GestureTapUpCallback.html\">GestureTapUpCallback<\/a>.<\/p>\n<p>The <code>globalPosition<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TapUpDetails({ this.globalPosition = Offset.zero })\n  : assert(globalPosition != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/TapUpDetails\/TapUpDetails.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TapUpDetails",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.TapUpDetails",
                    "params": [
                        {
                            "name": "globalPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The global position at which the pointer contacted the screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset globalPosition\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/TapUpDetails\/globalPosition.html",
                    "name": "globalPosition",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.TapUpDetails",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A velocity in two dimensions.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/Velocity-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.Velocity",
            "shortname": "Velocity",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a velocity.<\/p>\n<p>The <code>pixelsPerSecond<\/code> argument must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Velocity({\n  @required this.pixelsPerSecond,\n}) : assert(pixelsPerSecond != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/Velocity\/Velocity.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Velocity",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.Velocity",
                    "params": [
                        {
                            "name": "pixelsPerSecond",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Return a velocity whose magnitude has been clamped to <code>minValue<\/code>\nand <code>maxValue<\/code>.<\/p>\n<p>If the magnitude of this Velocity is less than minValue then return a new\nVelocity with the same direction and with magnitude <code>minValue<\/code>. Similarly,\nif the magnitude of this Velocity is greater than maxValue then return a\nnew Velocity with the same direction and magnitude <code>maxValue<\/code>.<\/p>\n<p>If the magnitude of this Velocity is within the specified bounds then\njust return this.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Velocity clampMagnitude(double minValue, double maxValue) {\n  assert(minValue != null &amp;&amp; minValue &gt;= 0.0);\n  assert(maxValue != null &amp;&amp; maxValue &gt;= 0.0 &amp;&amp; maxValue &gt;= minValue);\n  final double valueSquared = pixelsPerSecond.distanceSquared;\n  if (valueSquared &gt; maxValue * maxValue)\n    return Velocity(pixelsPerSecond: (pixelsPerSecond \/ pixelsPerSecond.distance) * maxValue);\n  if (valueSquared &lt; minValue * minValue)\n    return Velocity(pixelsPerSecond: (pixelsPerSecond \/ pixelsPerSecond.distance) * minValue);\n  return this;\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/Velocity\/clampMagnitude.html",
                    "isDeprecated": false,
                    "type": "gestures.Velocity",
                    "name": "clampMagnitude",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.Velocity",
                    "params": [
                        {
                            "name": "maxValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "minValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Velocity(${pixelsPerSecond.dx.toStringAsFixed(1)}, ${pixelsPerSecond.dy.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "href": "gestures\/Velocity\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.Velocity",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"gestures\/Velocity\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"gestures\/Velocity\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"gestures\/Velocity\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"gestures\/Velocity\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"gestures\/Velocity\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"gestures\/Velocity\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; pixelsPerSecond.hashCode;<\/code><\/pre>\n        ",
                    "href": "gestures\/Velocity\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.Velocity",
                    "params": []
                },
                {
                    "desc": "<p>The number of pixels per second of velocity in the x and y directions.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset pixelsPerSecond\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/Velocity\/pixelsPerSecond.html",
                    "name": "pixelsPerSecond",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.Velocity",
                    "params": []
                },
                {
                    "desc": "<p>A velocity that isn't moving at all.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Velocity zero = Velocity(pixelsPerSecond: Offset.zero)\n\n<\/code><\/pre>\n    ",
                    "href": "gestures\/Velocity\/zero-constant.html",
                    "name": "zero",
                    "isDeprecated": false,
                    "type": "gestures.Velocity",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.Velocity",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A two dimensional velocity estimate.<\/p>\n<p>VelocityEstimates are computed by <a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">VelocityTracker.getVelocityEstimate<\/a>. An\nestimate's <a href=\"gestures\/VelocityEstimate\/confidence.html\">confidence<\/a> measures how well the velocity tracker's position\ndata fit a straight line, <a href=\"gestures\/VelocityEstimate\/duration.html\">duration<\/a> is the time that elapsed between the\nfirst and last position sample used to compute the velocity, and <a href=\"gestures\/VelocityEstimate\/offset.html\">offset<\/a>\nis similarly the difference between the first and last positions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/VelocityTracker-class.html\">VelocityTracker<\/a>, which computes <a href=\"gestures\/VelocityEstimate-class.html\">VelocityEstimate<\/a>s.<\/li>\n<li>\n<a href=\"gestures\/Velocity-class.html\">Velocity<\/a>, which encapsulates (just) a velocity vector and provides some\nuseful velocity operations.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/VelocityEstimate-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.VelocityEstimate",
            "shortname": "VelocityEstimate",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a dimensional velocity estimate.<\/p>\n<p><code>pixelsPerSecond<\/code>, <code>confidence<\/code>, <code>duration<\/code>, and <code>offset<\/code> must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const VelocityEstimate({\n  @required this.pixelsPerSecond,\n  @required this.confidence,\n  @required this.duration,\n  @required this.offset,\n}) : assert(pixelsPerSecond != null),\n     assert(confidence != null),\n     assert(duration != null),\n     assert(offset != null);<\/code><\/pre>\n    ",
                    "href": "gestures\/VelocityEstimate\/VelocityEstimate.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "VelocityEstimate",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": [
                        {
                            "name": "confidence",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "pixelsPerSecond",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'VelocityEstimate(${pixelsPerSecond.dx.toStringAsFixed(1)}, ${pixelsPerSecond.dy.toStringAsFixed(1)}; offset: $offset, duration: $duration, confidence: ${confidence.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "href": "gestures\/VelocityEstimate\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>A value between 0.0 and 1.0 that indicates how well <a href=\"gestures\/VelocityTracker-class.html\">VelocityTracker<\/a>\nwas able to fit a straight line to its position data.<\/p>\n<p>The value of this property is 1.0 for a perfect fit, 0.0 for a poor fit.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double confidence\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/VelocityEstimate\/confidence.html",
                    "name": "confidence",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": []
                },
                {
                    "desc": "<p>The time that elapsed between the first and last position sample used\nto compute <a href=\"gestures\/VelocityEstimate\/pixelsPerSecond.html\">pixelsPerSecond<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/VelocityEstimate\/duration.html",
                    "name": "duration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": []
                },
                {
                    "desc": "<p>The difference between the first and last position sample used\nto compute <a href=\"gestures\/VelocityEstimate\/pixelsPerSecond.html\">pixelsPerSecond<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset offset\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/VelocityEstimate\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": []
                },
                {
                    "desc": "<p>The number of pixels per second of velocity in the x and y directions.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset pixelsPerSecond\n\n<\/code><\/pre>\n        ",
                    "href": "gestures\/VelocityEstimate\/pixelsPerSecond.html",
                    "name": "pixelsPerSecond",
                    "isDeprecated": false,
                    "type": "dart:ui.Offset",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VelocityEstimate",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Computes a pointer's velocity based on data from <a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>s.<\/p>\n<p>The input data is provided by calling <a href=\"gestures\/VelocityTracker\/addPosition.html\">addPosition<\/a>. Adding data is cheap.<\/p>\n<p>To obtain a velocity, call <a href=\"gestures\/VelocityTracker\/getVelocity.html\">getVelocity<\/a> or <a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">getVelocityEstimate<\/a>. This will\ncompute the velocity based on the data added so far. Only call these when\nyou need to use the velocity, as they are comparatively expensive.<\/p>\n<p>The quality of the velocity estimation will be better if more data points\nhave been received.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "gestures\/VelocityTracker-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.VelocityTracker",
            "shortname": "VelocityTracker",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "gestures\/VelocityTracker\/VelocityTracker.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "VelocityTracker",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.VelocityTracker",
                    "params": []
                },
                {
                    "desc": "<p>Adds a position as the given time to the tracker.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPosition(Duration time, Offset position) {\n  _index += 1;\n  if (_index == _historySize)\n    _index = 0;\n  _samples[_index] = _PointAtTime(position, time);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/VelocityTracker\/addPosition.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addPosition",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.VelocityTracker",
                    "params": [
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Offset"
                        },
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Computes the velocity of the pointer at the time of the last\nprovided data point.<\/p>\n<p>This can be expensive. Only call this when you need the velocity.<\/p>\n<p>Returns <a href=\"gestures\/Velocity\/zero-constant.html\">Velocity.zero<\/a> if there is no data from which to compute an\nestimate or if the estimated velocity is zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Velocity getVelocity() {\n  final VelocityEstimate estimate = getVelocityEstimate();\n  if (estimate == null || estimate.pixelsPerSecond == Offset.zero)\n    return Velocity.zero;\n  return Velocity(pixelsPerSecond: estimate.pixelsPerSecond);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/VelocityTracker\/getVelocity.html",
                    "isDeprecated": false,
                    "type": "gestures.Velocity",
                    "name": "getVelocity",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.VelocityTracker",
                    "params": []
                },
                {
                    "desc": "<p>Returns an estimate of the velocity of the object being tracked by the\ntracker given the current information available to the tracker.<\/p>\n<p>Information is added using <a href=\"gestures\/VelocityTracker\/addPosition.html\">addPosition<\/a>.<\/p>\n<p>Returns null if there is no data on which to base an estimate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VelocityEstimate getVelocityEstimate() {\n  final List&lt;double&gt; x = &lt;double&gt;[];\n  final List&lt;double&gt; y = &lt;double&gt;[];\n  final List&lt;double&gt; w = &lt;double&gt;[];\n  final List&lt;double&gt; time = &lt;double&gt;[];\n  int sampleCount = 0;\n  int index = _index;\n\n  final _PointAtTime newestSample = _samples[index];\n  if (newestSample == null)\n    return null;\n\n  _PointAtTime previousSample = newestSample;\n  _PointAtTime oldestSample = newestSample;\n\n  \/\/ Starting with the most recent PointAtTime sample, iterate backwards while\n  \/\/ the samples represent continuous motion.\n  do {\n    final _PointAtTime sample = _samples[index];\n    if (sample == null)\n      break;\n\n    final double age = (newestSample.time - sample.time).inMilliseconds.toDouble();\n    final double delta = (sample.time - previousSample.time).inMilliseconds.abs().toDouble();\n    previousSample = sample;\n    if (age &gt; _horizonMilliseconds || delta &gt; _assumePointerMoveStoppedMilliseconds)\n      break;\n\n    oldestSample = sample;\n    final Offset position = sample.point;\n    x.add(position.dx);\n    y.add(position.dy);\n    w.add(1.0);\n    time.add(-age);\n    index = (index == 0 ? _historySize : index) - 1;\n\n    sampleCount += 1;\n  } while (sampleCount &lt; _historySize);\n\n  if (sampleCount &gt;= _minSampleSize) {\n    final LeastSquaresSolver xSolver = LeastSquaresSolver(time, x, w);\n    final PolynomialFit xFit = xSolver.solve(2);\n    if (xFit != null) {\n      final LeastSquaresSolver ySolver = LeastSquaresSolver(time, y, w);\n      final PolynomialFit yFit = ySolver.solve(2);\n      if (yFit != null) {\n        return VelocityEstimate( \/\/ convert from pixels\/ms to pixels\/s\n          pixelsPerSecond: Offset(xFit.coefficients[1] * 1000, yFit.coefficients[1] * 1000),\n          confidence: xFit.confidence * yFit.confidence,\n          duration: newestSample.time - oldestSample.time,\n          offset: newestSample.point - oldestSample.point,\n        );\n      }\n    }\n  }\n\n  \/\/ We're unable to make a velocity estimate but we did have at least one\n  \/\/ valid pointer position.\n  return VelocityEstimate(\n    pixelsPerSecond: Offset.zero,\n    confidence: 1.0,\n    duration: newestSample.time - oldestSample.time,\n    offset: newestSample.point - oldestSample.point,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/VelocityTracker\/getVelocityEstimate.html",
                    "isDeprecated": false,
                    "type": "gestures.VelocityEstimate",
                    "name": "getVelocityEstimate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.VelocityTracker",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Recognizes movement in the vertical direction.<\/p>\n<p>Used for vertical scrolling.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a>, for a similar recognizer but for\nhorizontal movement.<\/li>\n<li>\n<a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>, for a family of gesture recognizers that\ntrack each touch point independently.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/VerticalDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.VerticalDragGestureRecognizer",
            "shortname": "VerticalDragGestureRecognizer",
            "extends": [
                "gestures.DragGestureRecognizer",
                "gestures.OneSequenceGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for interactions in the vertical axis.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VerticalDragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/VerticalDragGestureRecognizer\/VerticalDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "VerticalDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.VerticalDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'vertical drag';<\/code><\/pre>\n        ",
                    "href": "gestures\/VerticalDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VerticalDragGestureRecognizer",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Recognizes movement in the vertical direction on a per-pointer basis.<\/p>\n<p>In contrast to <a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>,\n<a href=\"gestures\/VerticalMultiDragGestureRecognizer-class.html\">VerticalMultiDragGestureRecognizer<\/a> watches each pointer separately,\nwhich means multiple drags can be recognized concurrently if multiple\npointers are in contact with the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>, a gesture recognizer that just\nlooks at vertical movement.<\/li>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, a similar recognizer, but without\nthe limitation that the drag must start vertically.<\/li>\n<li>\n<a href=\"gestures\/HorizontalMultiDragGestureRecognizer-class.html\">HorizontalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart horizontally.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "gestures\/VerticalMultiDragGestureRecognizer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.VerticalMultiDragGestureRecognizer",
            "shortname": "VerticalMultiDragGestureRecognizer",
            "extends": [
                "gestures.MultiDragGestureRecognizer",
                "gestures.GestureRecognizer",
                "gestures.GestureArenaMember",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a gesture recognizer for tracking multiple pointers at once\nbut only if they first move vertically.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VerticalMultiDragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
                    "href": "gestures\/VerticalMultiDragGestureRecognizer\/VerticalMultiDragGestureRecognizer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "VerticalMultiDragGestureRecognizer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "gestures.VerticalMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "debugOwner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "kind",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.PointerDeviceKind"
                        }
                    ]
                },
                {
                    "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_VerticalPointerState createNewPointerState(PointerDownEvent event) {\n  return _VerticalPointerState(event.position);\n}<\/code><\/pre>\n    ",
                    "href": "gestures\/VerticalMultiDragGestureRecognizer\/createNewPointerState.html",
                    "isDeprecated": false,
                    "type": "<_VerticalPointerState>",
                    "name": "createNewPointerState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "gestures.VerticalMultiDragGestureRecognizer",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "gestures.PointerDownEvent"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'vertical multidrag';<\/code><\/pre>\n        ",
                    "href": "gestures\/VerticalMultiDragGestureRecognizer\/debugDescription.html",
                    "name": "debugDescription",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "gestures.VerticalMultiDragGestureRecognizer",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [
        {
            "desc": "<p>A binding for the gesture subsystem.<\/p>\n<h2 id=\"lifecycle-of-pointer-events-and-the-gesture-arena\">Lifecycle of pointer events and the gesture arena<\/h2>\n<h3 id=\"pointerdownevent\"><a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a><\/h3>\n<p>When a <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a> is received by the <a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a> (from\n<a href=\"dart-ui\/Window\/onPointerDataPacket.html\">Window.onPointerDataPacket<\/a>, as interpreted by the\n<a href=\"gestures\/PointerEventConverter-class.html\">PointerEventConverter<\/a>), a <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> is performed to determine which\n<a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes are affected. (Other bindings are expected to\nimplement <a href=\"gestures\/GestureBinding\/hitTest.html\">hitTest<\/a> to defer to <a href=\"gestures\/HitTestable-class.html\">HitTestable<\/a> objects. For example, the\nrendering layer defers to the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> and the rest of the render object\nhierarchy.)<\/p>\n<p>The affected nodes then are given the event to handle (<a href=\"gestures\/GestureBinding\/dispatchEvent.html\">dispatchEvent<\/a> calls\n<a href=\"gestures\/GestureBinding\/handleEvent.html\">HitTestTarget.handleEvent<\/a> for each affected node). If any have relevant\n<a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a>s, they provide the event to them using\n<a href=\"gestures\/GestureRecognizer\/addPointer.html\">GestureRecognizer.addPointer<\/a>. This typically causes the recognizer to\nregister with the <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a> to receive notifications regarding the\npointer in question.<\/p>\n<p>Once the hit test and dispatching logic is complete, the event is then\npassed to the aforementioned <a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>, which passes it to any objects\nthat have registered interest in that event.<\/p>\n<p>Finally, the <a href=\"gestures\/GestureBinding\/gestureArena.html\">gestureArena<\/a> is closed for the given pointer\n(<a href=\"gestures\/GestureArenaManager\/close.html\">GestureArenaManager.close<\/a>), which begins the process of selecting a\ngesture to win that pointer.<\/p>\n<h3 id=\"other-events\">Other events<\/h3>\n<p>A pointer that is <a href=\"gestures\/PointerEvent\/down.html\">PointerEvent.down<\/a> may send further events, such as\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>, <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>, or <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a>. These are\nsent to the same <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> nodes as were found when the down event was\nreceived (even if they have since been disposed; it is the responsibility of\nthose objects to be aware of that possibility).<\/p>\n<p>Then, the events are routed to any still-registered entrants in the\n<a href=\"gestures\/PointerRouter-class.html\">PointerRouter<\/a>'s table for that pointer.<\/p>\n<p>When a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> is received, the <a href=\"gestures\/GestureArenaManager\/sweep.html\">GestureArenaManager.sweep<\/a> method\nis invoked to force the gesture arena logic to terminate if necessary.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "gestures\/GestureBinding-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureBinding",
            "shortname": "GestureBinding",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        }
    ],
    "enum": [
        {
            "desc": "<p>Configuration of offset passed to <a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a>.<\/p>\n<p>The settings determines when a drag formally starts when the user\ninitiates a drag.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "dtype": "enum",
            "example": "",
            "href": "gestures\/DragStartBehavior-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.DragStartBehavior",
            "shortname": "DragStartBehavior",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Set the initial offset, at the position where the first down event was\ndetected.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DragStartBehavior(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "down",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.DragStartBehavior",
                    "params": []
                },
                {
                    "desc": "\n          <p>Set the initial position at the position where the drag start event was\ndetected.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DragStartBehavior(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.DragStartBehavior",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">DragStartBehavior<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.DragStartBehavior",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Whether the gesture was accepted or rejected.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "gestures\/GestureDisposition-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureDisposition",
            "shortname": "GestureDisposition",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>This gesture was accepted as the interpretation of the user's input.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const GestureDisposition(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "accepted",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureDisposition",
                    "params": []
                },
                {
                    "desc": "\n          <p>This gesture was rejected as the interpretation of the user's input.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const GestureDisposition(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "rejected",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureDisposition",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">GestureDisposition<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureDisposition",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The possible states of a <a href=\"gestures\/PrimaryPointerGestureRecognizer-class.html\">PrimaryPointerGestureRecognizer<\/a>.<\/p>\n<p>The recognizer advances from <a href=\"gestures\/GestureRecognizerState-class.html\">ready<\/a> to <a href=\"gestures\/GestureRecognizerState-class.html\">possible<\/a> when it starts tracking a\nprimary pointer. When the primary pointer is resolved in the gesture\narena (either accepted or rejected), the recognizers advances to <a href=\"gestures\/GestureRecognizerState-class.html\">defunct<\/a>.\nOnce the recognizer has stopped tracking any remaining pointers, the\nrecognizer returns to <a href=\"gestures\/GestureRecognizerState-class.html\">ready<\/a>.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "gestures\/GestureRecognizerState-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "gestures",
            "name": "gestures.GestureRecognizerState",
            "shortname": "GestureRecognizerState",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Further pointer events cannot cause this recognizer to recognize the\ngesture until the recognizer returns to the <a href=\"gestures\/GestureRecognizerState-class.html\">ready<\/a> state (typically when\nall the pointers the recognizer is tracking are removed from the screen).<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const GestureRecognizerState(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "defunct",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureRecognizerState",
                    "params": []
                },
                {
                    "desc": "\n          <p>The sequence of pointer events seen thus far is consistent with the\ngesture the recognizer is attempting to recognize but the gesture has not\nbeen accepted definitively.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const GestureRecognizerState(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "possible",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureRecognizerState",
                    "params": []
                },
                {
                    "desc": "\n          <p>The recognizer is ready to start recognizing a gesture.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const GestureRecognizerState(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "ready",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureRecognizerState",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">GestureRecognizerState<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "gestures.GestureRecognizerState",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}