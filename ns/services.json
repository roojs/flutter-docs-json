{
    "name": "services",
    "href": "services\/services-library.html",
    "cn": [
        {
            "name": "services.AndroidMotionEvent",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "AndroidMotionEvent",
                    "type": "",
                    "desc": "<p>Creates an AndroidMotionEvent.<\/p>\n<p>All parameters must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidMotionEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "downTime",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "eventTime",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "action",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointerCount",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pointerProperties",
                            "type": "dart:core.List<services.AndroidPointerProperties>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "services.AndroidPointerProperties"
                            ]
                        },
                        {
                            "name": "pointerCoords",
                            "type": "dart:core.List<services.AndroidPointerCoords>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "services.AndroidPointerCoords"
                            ]
                        },
                        {
                            "name": "metaState",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "buttonState",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "xPrecision",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "yPrecision",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "deviceId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "edgeFlags",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "source",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flags",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/AndroidMotionEvent\/AndroidMotionEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AndroidMotionEvent({\n  @required this.downTime,\n  @required this.eventTime,\n  @required this.action,\n  @required this.pointerCount,\n  @required this.pointerProperties,\n  @required this.pointerCoords,\n  @required this.metaState,\n  @required this.buttonState,\n  @required this.xPrecision,\n  @required this.yPrecision,\n  @required this.deviceId,\n  @required this.edgeFlags,\n  @required this.source,\n  @required this.flags,\n}) : assert(downTime != null),\n     assert(eventTime != null),\n     assert(action != null),\n     assert(pointerCount != null),\n     assert(pointerProperties != null),\n     assert(pointerCoords != null),\n     assert(metaState != null),\n     assert(buttonState != null),\n     assert(xPrecision != null),\n     assert(yPrecision != null),\n     assert(deviceId != null),\n     assert(edgeFlags != null),\n     assert(source != null),\n     assert(flags != null),\n     assert(pointerProperties.length == pointerCount),\n     assert(pointerCoords.length == pointerCount);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidMotionEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/AndroidMotionEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'AndroidPointerEvent(downTime: $downTime, eventTime: $eventTime, action: $action, pointerCount: $pointerCount, pointerProperties: $pointerProperties, pointerCoords: $pointerCoords, metaState: $metaState, buttonState: $buttonState, xPrecision: $xPrecision, yPrecision: $yPrecision, deviceId: $deviceId, edgeFlags: $edgeFlags, source: $source, flags: $flags)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "action",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>A value representing the kind of action being performed.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getAction()\">MotionEvent#getAction<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/action.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int action\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "buttonState",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The state of all buttons that are pressed such as a mouse or stylus button.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getButtonState()\">MotionEvent#getButtonState<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/buttonState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int buttonState\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "deviceId",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getDeviceId()\">MotionEvent#getDeviceId<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/deviceId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int deviceId\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "downTime",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The time (in ms) when the user originally pressed down to start a stream of position events,\nrelative to an arbitrary timeline.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getDownTime()\">MotionEvent#getDownTime<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/downTime.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int downTime\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "edgeFlags",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>A bit field indicating which edges, if any, were touched by this MotionEvent.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getEdgeFlags()\">MotionEvent#getEdgeFlags<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/edgeFlags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int edgeFlags\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "eventTime",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The time this event occurred, relative to an arbitrary timeline.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getEventTime()\">MotionEvent#getEventTime<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/eventTime.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int eventTime\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flags",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getFlags()\">MotionEvent#getFlags<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/flags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flags\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "metaState",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The state of any meta \/ modifier keys that were in effect when the event was generated.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getMetaState()\">MotionEvent#getMetaState<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/metaState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int metaState\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pointerCoords",
                    "type": "dart:core.List<services.AndroidPointerCoords>",
                    "types": [
                        "dart:core.List",
                        "services.AndroidPointerCoords"
                    ],
                    "desc": "<p>List of <a href=\"services\/AndroidPointerCoords-class.html\">AndroidPointerCoords<\/a> for each pointer that is part of this event.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/pointerCoords.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;AndroidPointerCoords&gt; pointerCoords\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pointerCount",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of pointers that are part of this event.\nThis must be equivalent to the length of <code>pointerProperties<\/code> and <code>pointerCoords<\/code>.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getPointerCount()\">MotionEvent#getPointerCount<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/pointerCount.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int pointerCount\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pointerProperties",
                    "type": "dart:core.List<services.AndroidPointerProperties>",
                    "types": [
                        "dart:core.List",
                        "services.AndroidPointerProperties"
                    ],
                    "desc": "<p>List of <a href=\"services\/AndroidPointerProperties-class.html\">AndroidPointerProperties<\/a> for each pointer that is part of this event.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/pointerProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;AndroidPointerProperties&gt; pointerProperties\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The source of this event (e.g a touchpad or stylus).<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getSource()\">MotionEvent#getSource<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/source.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int source\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "xPrecision",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The precision of the X coordinates being reported, in physical pixels.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getXPrecision()\">MotionEvent#getXPrecision<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/xPrecision.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double xPrecision\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "yPrecision",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The precision of the Y coordinates being reported, in physical pixels.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#getYPrecision()\">MotionEvent#getYPrecision<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidMotionEvent",
                    "isConstant": false,
                    "href": "services\/AndroidMotionEvent\/yPrecision.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double yPrecision\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/AndroidMotionEvent-class.html",
            "desc": "<p>A Dart version of Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent\">MotionEvent<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AndroidMotionEvent"
        },
        {
            "name": "services.AndroidPointerCoords",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "AndroidPointerCoords",
                    "type": "",
                    "desc": "<p>Creates an AndroidPointerCoords.<\/p>\n<p>All parameters must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidPointerCoords",
                    "sig": "",
                    "params": [
                        {
                            "name": "orientation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "pressure",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "size",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "toolMajor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "toolMinor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchMajor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "touchMinor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "x",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/AndroidPointerCoords\/AndroidPointerCoords.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AndroidPointerCoords({\n  @required this.orientation,\n  @required this.pressure,\n  @required this.size,\n  @required this.toolMajor,\n  @required this.toolMinor,\n  @required this.touchMajor,\n  @required this.touchMinor,\n  @required this.x,\n  @required this.y,\n}) : assert(orientation != null),\n     assert(pressure != null),\n     assert(size != null),\n     assert(toolMajor != null),\n     assert(toolMinor != null),\n     assert(touchMajor != null),\n     assert(touchMinor != null),\n     assert(x != null),\n     assert(y != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidPointerCoords",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/AndroidPointerCoords\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'AndroidPointerCoords(orientation: $orientation, pressure: $pressure, size: $size, toolMajor: $toolMajor, toolMinor: $toolMinor, touchMajor: $touchMajor, touchMinor: $touchMinor, x: $x, y: $y)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "orientation",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The orientation of the touch area and tool area in radians clockwise from vertical.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#orientation\">MotionEvent.PointerCoords#orientation<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/orientation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double orientation\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pressure",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>A normalized value that describes the pressure applied to the device by a finger or other tool.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#pressure\">MotionEvent.PointerCoords#pressure<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/pressure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressure\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>A normalized value that describes the approximate size of the pointer touch area in relation to the maximum detectable size of the device.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#size\">MotionEvent.PointerCoords#size<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "toolMajor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#toolMajor\">MotionEvent.PointerCoords#toolMajor<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/toolMajor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double toolMajor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "toolMinor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#toolMinor\">MotionEvent.PointerCoords#toolMinor<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/toolMinor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double toolMinor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "touchMajor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#touchMajor\">MotionEvent.PointerCoords#touchMajor<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/touchMajor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double touchMajor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "touchMinor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#touchMinor\">MotionEvent.PointerCoords#touchMinor<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/touchMinor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double touchMinor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "x",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The X component of the pointer movement.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#x\">MotionEvent.PointerCoords#x<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/x.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "y",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The Y component of the pointer movement.<\/p>\n<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords.html#y\">MotionEvent.PointerCoords#y<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerCoords",
                    "isConstant": false,
                    "href": "services\/AndroidPointerCoords\/y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/AndroidPointerCoords-class.html",
            "desc": "<p>Position information for an Android pointer.<\/p>\n<p>A Dart version of Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerCoords\">MotionEvent.PointerCoords<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AndroidPointerCoords"
        },
        {
            "name": "services.AndroidPointerProperties",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "AndroidPointerProperties",
                    "type": "",
                    "desc": "<p>Creates an AndroidPointerProperties.<\/p>\n<p>All parameters must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidPointerProperties",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "toolType",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/AndroidPointerProperties\/AndroidPointerProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AndroidPointerProperties({\n  @required this.id,\n  @required this.toolType,\n}) : assert(id != null),\n     assert(toolType != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidPointerProperties",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/AndroidPointerProperties\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'AndroidPointerProperties(id: $id, toolType: $toolType)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>See Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerProperties.html#id\">MotionEvent.PointerProperties#id<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerProperties",
                    "isConstant": false,
                    "href": "services\/AndroidPointerProperties\/id.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/AndroidPointerProperties\/kToolTypeEraser-constant.html",
                    "desc": "<p>Value for <code>toolType<\/code> when the tool type is an eraser.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kToolTypeEraser = 4\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kToolTypeEraser",
                    "memberOf": "services.AndroidPointerProperties"
                },
                {
                    "type": "",
                    "href": "services\/AndroidPointerProperties\/kToolTypeFinger-constant.html",
                    "desc": "<p>Value for <code>toolType<\/code> when the tool type is a finger.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kToolTypeFinger = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kToolTypeFinger",
                    "memberOf": "services.AndroidPointerProperties"
                },
                {
                    "type": "",
                    "href": "services\/AndroidPointerProperties\/kToolTypeMouse-constant.html",
                    "desc": "<p>Value for <code>toolType<\/code> when the tool type is a mouse.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kToolTypeMouse = 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kToolTypeMouse",
                    "memberOf": "services.AndroidPointerProperties"
                },
                {
                    "type": "",
                    "href": "services\/AndroidPointerProperties\/kToolTypeStylus-constant.html",
                    "desc": "<p>Value for <code>toolType<\/code> when the tool type is a stylus.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kToolTypeStylus = 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kToolTypeStylus",
                    "memberOf": "services.AndroidPointerProperties"
                },
                {
                    "type": "",
                    "href": "services\/AndroidPointerProperties\/kToolTypeUnknown-constant.html",
                    "desc": "<p>Value for <code>toolType<\/code> when the tool type is unknown.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kToolTypeUnknown = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kToolTypeUnknown",
                    "memberOf": "services.AndroidPointerProperties"
                },
                {
                    "name": "toolType",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The type of tool used to make contact such as a finger or stylus, if known.\nSee Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerProperties.html#toolType\">MotionEvent.PointerProperties#toolType<\/a>.<\/p>\n        ",
                    "memberOf": "services.AndroidPointerProperties",
                    "isConstant": false,
                    "href": "services\/AndroidPointerProperties\/toolType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int toolType\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/AndroidPointerProperties-class.html",
            "desc": "<p>Properties of an Android pointer.<\/p>\n<p>A Dart version of Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.PointerProperties\">MotionEvent.PointerProperties<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AndroidPointerProperties"
        },
        {
            "name": "services.AndroidViewController",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "addOnPlatformViewCreatedListener",
                    "type": "",
                    "desc": "<p>Adds a callback that will get invoke after the platform view has been\ncreated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "services.PlatformViewCreatedCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/addOnPlatformViewCreatedListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addOnPlatformViewCreatedListener(PlatformViewCreatedCallback listener) {\n  assert(listener != null);\n  assert(_state != _AndroidViewState.disposed);\n  _platformViewCreatedCallbacks.add(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "dispose",
                    "type": "dart:async.Future",
                    "desc": "<p>Disposes the Android view.<\/p>\n<p>The <a href=\"services\/AndroidViewController-class.html\">AndroidViewController<\/a> object is unusable after calling this.\nThe identifier of the platform view cannot be reused after the view is\ndisposed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; dispose() async {\n  if (_state == _AndroidViewState.creating || _state == _AndroidViewState.created)\n    await SystemChannels.platform_views.invokeMethod&lt;void&gt;('dispose', id);\n  _platformViewCreatedCallbacks.clear();\n  _state = _AndroidViewState.disposed;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pointerAction",
                    "type": "dart:core.int",
                    "desc": "<p>Creates a masked Android MotionEvent action value for an indexed pointer.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "pointerId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "action",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/pointerAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int pointerAction(int pointerId, int action) {\n  return ((pointerId &lt;&lt; 8) &amp; 0xff00) | (action &amp; 0xff);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeOnPlatformViewCreatedListener",
                    "type": "",
                    "desc": "<p>Removes a callback added with <a href=\"services\/AndroidViewController\/addOnPlatformViewCreatedListener.html\">addOnPlatformViewCreatedListener<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "services.PlatformViewCreatedCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/removeOnPlatformViewCreatedListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeOnPlatformViewCreatedListener(PlatformViewCreatedCallback listener) {\n  assert(_state != _AndroidViewState.disposed);\n  _platformViewCreatedCallbacks.remove(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sendMotionEvent",
                    "type": "dart:async.Future",
                    "desc": "<p>Sends an Android <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent\">MotionEvent<\/a>\nto the view.<\/p>\n<p>The Android MotionEvent object is created with <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#obtain(long,%20long,%20int,%20float,%20float,%20float,%20float,%20int,%20float,%20float,%20int,%20int)\">MotionEvent.obtain<\/a>.\nSee documentation of <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent.html#obtain(long,%20long,%20int,%20float,%20float,%20float,%20float,%20int,%20float,%20float,%20int,%20int)\">MotionEvent.obtain<\/a>\nfor description of the parameters.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "services.AndroidMotionEvent",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/sendMotionEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; sendMotionEvent(AndroidMotionEvent event) async {\n  await SystemChannels.platform_views.invokeMethod&lt;dynamic&gt;(\n      'touch',\n      event._asList(id),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLayoutDirection",
                    "type": "dart:async.Future",
                    "desc": "<p>Sets the layout direction for the Android view.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "layoutDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/setLayoutDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLayoutDirection(TextDirection layoutDirection) async {\n  assert(_state != _AndroidViewState.disposed,'trying to set a layout direction for a disposed UIView. View id: $id');\n\n  if (layoutDirection == _layoutDirection)\n    return;\n\n  assert(layoutDirection != null);\n  _layoutDirection = layoutDirection;\n\n  \/\/ If the view was not yet created we just update _layoutDirection and return, as the new\n  \/\/ direction will be used in _create.\n  if (_state == _AndroidViewState.waitingForSize)\n    return;\n\n  await SystemChannels.platform_views.invokeMethod&lt;void&gt;('setDirection', &lt;String, dynamic&gt;{\n    'id': id,\n    'direction': _getAndroidDirection(layoutDirection),\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setSize",
                    "type": "dart:async.Future",
                    "desc": "<p>Sizes the Android View.<\/p>\n<p><code>size<\/code> is the view's new size in logical pixel, it must not be null and must\nbe bigger than zero.<\/p>\n<p>The first time a size is set triggers the creation of the Android view.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AndroidViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AndroidViewController\/setSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setSize(Size size) async {\n  assert(_state != _AndroidViewState.disposed, 'trying to size a disposed Android View. View id: $id');\n\n  assert(size != null);\n  assert(!size.isEmpty);\n\n  if (_state == _AndroidViewState.waitingForSize)\n    return _create(size);\n\n  await SystemChannels.platform_views.invokeMethod&lt;void&gt;('resize', &lt;String, dynamic&gt;{\n    'id': id,\n    'width': size.width,\n    'height': size.height,\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The unique identifier of the Android view controlled by this controller.<\/p>\n        ",
                    "memberOf": "services.AndroidViewController",
                    "isConstant": false,
                    "href": "services\/AndroidViewController\/id.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isCreated",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the platform view has already been created.<\/p>\n        ",
                    "memberOf": "services.AndroidViewController",
                    "isConstant": false,
                    "href": "services\/AndroidViewController\/isCreated.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCreated =&gt; _state == _AndroidViewState.created;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionCancel-constant.html",
                    "desc": "<p>Action code for when a motion event has been cancelled.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_CANCEL\">MotionEvent.ACTION_CANCEL<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionCancel = 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionCancel",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionDown-constant.html",
                    "desc": "<p>Action code for when a primary pointer touched the screen.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_DOWN\">MotionEvent.ACTION_DOWN<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionDown =  0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionDown",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionMove-constant.html",
                    "desc": "<p>Action code for when the event only includes information about pointer movement.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_MOVE\">MotionEvent.ACTION_MOVE<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionMove = 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionMove",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionPointerDown-constant.html",
                    "desc": "<p>Action code for when a secondary pointer touched the screen.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_POINTER_DOWN\">MotionEvent.ACTION_POINTER_DOWN<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionPointerDown =  5\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionPointerDown",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionPointerUp-constant.html",
                    "desc": "<p>Action code for when a secondary pointer stopped touching the screen.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_POINTER_UP\">MotionEvent.ACTION_POINTER_UP<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionPointerUp =  6\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionPointerUp",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kActionUp-constant.html",
                    "desc": "<p>Action code for when a primary pointer stopped touching the screen.<\/p>\n<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/MotionEvent#ACTION_UP\">MotionEvent.ACTION_UP<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kActionUp =  1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kActionUp",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kAndroidLayoutDirectionLtr-constant.html",
                    "desc": "<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/View.html#LAYOUT_DIRECTION_LTR\">View.LAYOUT_DIRECTION_LTR<\/a> value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kAndroidLayoutDirectionLtr = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kAndroidLayoutDirectionLtr",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "type": "",
                    "href": "services\/AndroidViewController\/kAndroidLayoutDirectionRtl-constant.html",
                    "desc": "<p>Android's <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/View.html#LAYOUT_DIRECTION_RTL\">View.LAYOUT_DIRECTION_RTL<\/a> value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int kAndroidLayoutDirectionRtl = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kAndroidLayoutDirectionRtl",
                    "memberOf": "services.AndroidViewController"
                },
                {
                    "name": "textureId",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the texture entry id that the Android view is rendering into.<\/p>\n<p>Returns null if the Android view has not been successfully created, or if it has been\ndisposed.<\/p>\n        ",
                    "memberOf": "services.AndroidViewController",
                    "isConstant": false,
                    "href": "services\/AndroidViewController\/textureId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get textureId =&gt; _textureId;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/AndroidViewController-class.html",
            "desc": "<p>Controls an Android view.<\/p>\n<p>Typically created with <a href=\"services\/PlatformViewsService\/initAndroidView.html\">PlatformViewsService.initAndroidView<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AndroidViewController"
        },
        {
            "name": "services.ApplicationSwitcherDescription",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "ApplicationSwitcherDescription",
                    "type": "",
                    "desc": "<p>Creates an ApplicationSwitcherDescription.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ApplicationSwitcherDescription",
                    "sig": "",
                    "params": [
                        {
                            "name": "label",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "primaryColor",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/ApplicationSwitcherDescription\/ApplicationSwitcherDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ApplicationSwitcherDescription({ this.label, this.primaryColor });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A label and description of the current state of the application.<\/p>\n        ",
                    "memberOf": "services.ApplicationSwitcherDescription",
                    "isConstant": false,
                    "href": "services\/ApplicationSwitcherDescription\/label.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "primaryColor",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The application's primary color.<\/p>\n<p>This may influence the color that the operating system uses to represent\nthe application.<\/p>\n        ",
                    "memberOf": "services.ApplicationSwitcherDescription",
                    "isConstant": false,
                    "href": "services\/ApplicationSwitcherDescription\/primaryColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int primaryColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/ApplicationSwitcherDescription-class.html",
            "desc": "<p>Specifies a description of the application that is pertinent to the\nembedder's application switcher (also known as \"recent tasks\") user\ninterface.<\/p>\n<p>Used by <a href=\"services\/SystemChrome\/setApplicationSwitcherDescription.html\">SystemChrome.setApplicationSwitcherDescription<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ApplicationSwitcherDescription"
        },
        {
            "name": "services.AssetBundle",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "AssetBundle",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/AssetBundle\/AssetBundle.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "evict",
                    "type": "",
                    "desc": "<p>If this is a caching asset bundle, and the given key describes a cached\nasset, then evict the asset from the cache so that the next time it is\nloaded, the cache will be reread from the asset bundle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AssetBundle\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void evict(String key) { }<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "load",
                    "type": "dart:async.Future<dart:typed_data.ByteData>",
                    "desc": "<p>Retrieve a binary resource from the asset bundle as a data stream.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AssetBundle\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ByteData&gt; load(String key);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:typed_data.ByteData"
                    ]
                },
                {
                    "name": "loadString",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Retrieve a string from the asset bundle.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n<p>If the <code>cache<\/code> argument is set to false, then the data will not be\ncached, and reading the data may bypass the cache. This is useful if the\ncaller is going to be doing its own caching. (It might not be cached if\nit's set to true either, that depends on the asset bundle\nimplementation.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cache",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AssetBundle\/loadString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; loadString(String key, { bool cache = true }) async {\n  final ByteData data = await load(key);\n  if (data == null)\n    throw FlutterError('Unable to load asset: $key');\n  if (data.lengthInBytes &lt; 10 * 1024) {\n    \/\/ 10KB takes about 3ms to parse on a Pixel 2 XL.\n    \/\/ See: https:\/\/github.com\/dart-lang\/sdk\/issues\/31954\n    return utf8.decode(data.buffer.asUint8List());\n  }\n  return compute(_utf8decode, data, debugLabel: 'UTF8 decode for \"$key\"');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "loadStructuredData",
                    "type": "dart:async.Future",
                    "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>Implementations may cache the result, so a particular key should only be\nused with one parser for the lifetime of the asset bundle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/AssetBundle\/loadStructuredData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.AssetBundle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/AssetBundle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}()';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "services.CachingAssetBundle",
                "services.NetworkAssetBundle",
                "services.PlatformAssetBundle"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "services\/AssetBundle-class.html",
            "desc": "<p>A collection of resources used by the application.<\/p>\n<p>Asset bundles contain resources, such as images and strings, that can be\nused by an application. Access to these resources is asynchronous so that\nthey can be transparently loaded over a network (e.g., from a\n<a href=\"services\/NetworkAssetBundle-class.html\">NetworkAssetBundle<\/a>) or from the local file system without blocking the\napplication's user interface.<\/p>\n<p>Applications have a <a href=\"services\/rootBundle.html\">rootBundle<\/a>, which contains the resources that were\npackaged with the application when it was built. To add resources to the\n<a href=\"services\/rootBundle.html\">rootBundle<\/a> for your application, add them to the <code>assets<\/code> subsection of\nthe <code>flutter<\/code> section of your application's <code>pubspec.yaml<\/code> manifest.<\/p>\n<p>For example:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">name: my_awesome_application\nflutter:\n  assets:\n   - images\/hamilton.jpeg\n   - images\/lafayette.jpeg\n<\/code><\/pre>\n<p>Rather than accessing the <a href=\"services\/rootBundle.html\">rootBundle<\/a> global static directly, consider\nobtaining the <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> for the current <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> using\n<a href=\"widgets\/DefaultAssetBundle\/of.html\">DefaultAssetBundle.of<\/a>. This layer of indirection lets ancestor widgets\nsubstitute a different <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> (e.g., for testing or localization) at\nruntime rather than directly replying upon the <a href=\"services\/rootBundle.html\">rootBundle<\/a> created at build\ntime. For convenience, the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> or <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> widget at the top\nof the widget hierarchy configures the <a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a> to be the\n<a href=\"services\/rootBundle.html\">rootBundle<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a><\/li>\n<li><a href=\"services\/NetworkAssetBundle-class.html\">NetworkAssetBundle<\/a><\/li>\n<li><a href=\"services\/rootBundle.html\">rootBundle<\/a><\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AssetBundle"
        },
        {
            "name": "services.BasicMessageChannel",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "BasicMessageChannel",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> with the specified <code>name<\/code> and <code>codec<\/code>.<\/p>\n<p>Neither <code>name<\/code> nor <code>codec<\/code> may be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BasicMessageChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codec",
                            "type": "services.MessageCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/BasicMessageChannel\/BasicMessageChannel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BasicMessageChannel(this.name, this.codec);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "send",
                    "type": "dart:async.Future",
                    "desc": "<p>Sends the specified <code>message<\/code> to the platform plugins on this channel.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which completes to the received response, which may\nbe null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BasicMessageChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BasicMessageChannel\/send.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; send(T message) async {\n  return codec.decodeMessage(await BinaryMessages.send(name, codec.encodeMessage(message)));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setMessageHandler",
                    "type": "",
                    "desc": "<p>Sets a callback for receiving messages from the platform plugins on this\nchannel. Messages may be null.<\/p>\n<p>The given callback will replace the currently registered callback for this\nchannel, if any. To remove the handler, pass null as the <code>handler<\/code>\nargument.<\/p>\n<p>The handler's return value is sent back to the platform plugins as a\nmessage reply. It may be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BasicMessageChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BasicMessageChannel\/setMessageHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMessageHandler(Future&lt;T&gt; handler(T message)) {\n  if (handler == null) {\n    BinaryMessages.setMessageHandler(name, null);\n  } else {\n    BinaryMessages.setMessageHandler(name, (ByteData message) async {\n      return codec.encodeMessage(await handler(codec.decodeMessage(message)));\n    });\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setMockMessageHandler",
                    "type": "",
                    "desc": "<p>Sets a mock callback for intercepting messages sent on this channel.\nMessages may be null.<\/p>\n<p>The given callback will replace the currently registered mock callback for\nthis channel, if any. To remove the mock handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>The handler's return value is used as a message reply. It may be null.<\/p>\n<p>This is intended for testing. Messages intercepted in this manner are not\nsent to platform plugins.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BasicMessageChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BasicMessageChannel\/setMockMessageHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMockMessageHandler(Future&lt;T&gt; handler(T message)) {\n  if (handler == null) {\n    BinaryMessages.setMockMessageHandler(name, null);\n  } else {\n    BinaryMessages.setMockMessageHandler(name, (ByteData message) async {\n      return codec.encodeMessage(await handler(codec.decodeMessage(message)));\n    });\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "codec",
                    "type": "services.MessageCodec",
                    "types": [],
                    "desc": "<p>The message codec used by this channel, not null.<\/p>\n        ",
                    "memberOf": "services.BasicMessageChannel",
                    "isConstant": false,
                    "href": "services\/BasicMessageChannel\/codec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MessageCodec&lt;T&gt; codec\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The logical channel on which communication happens, not null.<\/p>\n        ",
                    "memberOf": "services.BasicMessageChannel",
                    "isConstant": false,
                    "href": "services\/BasicMessageChannel\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/BasicMessageChannel-class.html",
            "desc": "<p>A named channel for communicating with platform plugins using asynchronous\nmessage passing.<\/p>\n<p>Messages are encoded into binary before being sent, and binary messages\nreceived are decoded into Dart values. The <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> used must be\ncompatible with the one used by the platform plugin. This can be achieved\nby creating a basic message channel counterpart of this channel on the\nplatform side. The Dart type of messages sent and received is <code>T<\/code>,\nbut only the values supported by the specified <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> can be used.\nThe use of unsupported values should be considered programming errors, and\nwill result in exceptions being thrown. The null message is supported\nfor all codecs.<\/p>\n<p>The logical identity of the channel is given by its name. Identically named\nchannels will interfere with each other's communication.<\/p>\n<p>See: <a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BasicMessageChannel"
        },
        {
            "name": "services.BinaryCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "BinaryCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with unencoded binary messages represented using\n<a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/BinaryCodec\/BinaryCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BinaryCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryCodec\/decodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData decodeMessage(ByteData message) =&gt; message;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryCodec\/encodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMessage(ByteData message) =&gt; message;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/BinaryCodec-class.html",
            "desc": "<p><a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with unencoded binary messages represented using <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a>.<\/p>\n<p>On Android, messages will be represented using <code>java.nio.ByteBuffer<\/code>.\nOn iOS, messages will be represented using <code>NSData<\/code>.<\/p>\n<p>When sending outgoing messages from Android, be sure to use direct <code>ByteBuffer<\/code>\nas opposed to indirect. The <code>wrap()<\/code> API provides indirect buffers by default\nand you will get empty <code>ByteData<\/code> objects in Dart.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BinaryCodec"
        },
        {
            "name": "services.BinaryMessages",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "handlePlatformMessage",
                    "type": "dart:async.Future",
                    "desc": "<p>Calls the handler registered for the given channel.<\/p>\n<p>Typically called by <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> to handle platform messages received\nfrom <a href=\"dart-ui\/Window\/onPlatformMessage.html\">Window.onPlatformMessage<\/a>.<\/p>\n<p>To register a handler for a given message channel, see <a href=\"services\/BinaryMessages\/setMessageHandler.html\">setMessageHandler<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryMessages",
                    "sig": "",
                    "params": [
                        {
                            "name": "channel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "data",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "callback",
                            "type": "dart:ui.PlatformMessageResponseCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryMessages\/handlePlatformMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; handlePlatformMessage(\n  String channel,\n  ByteData data,\n  ui.PlatformMessageResponseCallback callback,\n) async {\n  ByteData response;\n  try {\n    final _MessageHandler handler = _handlers[channel];\n    if (handler != null)\n      response = await handler(data);\n  } catch (exception, stack) {\n    FlutterError.reportError(FlutterErrorDetails(\n      exception: exception,\n      stack: stack,\n      library: 'services library',\n      context: 'during a platform message callback',\n    ));\n  } finally {\n    callback(response);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "send",
                    "type": "dart:async.Future<dart:typed_data.ByteData>",
                    "desc": "<p>Send a binary message to the platform plugins on the given channel.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which completes to the received response, undecoded, in\nbinary form.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryMessages",
                    "sig": "",
                    "params": [
                        {
                            "name": "channel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryMessages\/send.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ByteData&gt; send(String channel, ByteData message) {\n  final _MessageHandler handler = _mockHandlers[channel];\n  if (handler != null)\n    return handler(message);\n  return _sendPlatformMessage(channel, message);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:typed_data.ByteData"
                    ]
                },
                {
                    "name": "setMessageHandler",
                    "type": "",
                    "desc": "<p>Set a callback for receiving messages from the platform plugins on the\ngiven channel, without decoding them.<\/p>\n<p>The given callback will replace the currently registered callback for that\nchannel, if any. To remove the handler, pass null as the <code>handler<\/code>\nargument.<\/p>\n<p>The handler's return value, if non-null, is sent as a response, unencoded.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryMessages",
                    "sig": "",
                    "params": [
                        {
                            "name": "channel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:typed_data.ByteData"
                            ]
                        },
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryMessages\/setMessageHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void setMessageHandler(String channel, Future&lt;ByteData&gt; handler(ByteData message)) {\n  if (handler == null)\n    _handlers.remove(channel);\n  else\n    _handlers[channel] = handler;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setMockMessageHandler",
                    "type": "",
                    "desc": "<p>Set a mock callback for intercepting messages from the <code>send*<\/code> methods on\nthis class, on the given channel, without decoding them.<\/p>\n<p>The given callback will replace the currently registered mock callback for\nthat channel, if any. To remove the mock handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>The handler's return value, if non-null, is used as a response, unencoded.<\/p>\n<p>This is intended for testing. Messages intercepted in this manner are not\nsent to platform plugins.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BinaryMessages",
                    "sig": "",
                    "params": [
                        {
                            "name": "channel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:typed_data.ByteData"
                            ]
                        },
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BinaryMessages\/setMockMessageHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void setMockMessageHandler(String channel, Future&lt;ByteData&gt; handler(ByteData message)) {\n  if (handler == null)\n    _mockHandlers.remove(channel);\n  else\n    _mockHandlers[channel] = handler;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/BinaryMessages-class.html",
            "desc": "<p>Sends binary messages to and receives binary messages from platform plugins.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a>, which provides basic messaging services similar to\n<code>BinaryMessages<\/code>, but with pluggable message codecs in support of sending\nstrings or semi-structured messages.<\/li>\n<li>\n<a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a>, which provides platform communication using asynchronous\nmethod calls.<\/li>\n<li>\n<a href=\"services\/EventChannel-class.html\">EventChannel<\/a>, which provides platform communication using event streams.<\/li>\n<li><a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BinaryMessages"
        },
        {
            "name": "services.BlacklistingTextInputFormatter",
            "extends": [
                "services.TextInputFormatter",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "BlacklistingTextInputFormatter",
                    "type": "",
                    "desc": "<p>Creates a formatter that prevents the insertion of blacklisted characters patterns.<\/p>\n<p>The <code>blacklistedPattern<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BlacklistingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "blacklistedPattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "replacementString",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/BlacklistingTextInputFormatter\/BlacklistingTextInputFormatter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BlacklistingTextInputFormatter(\n  this.blacklistedPattern, {\n  this.replacementString = '',\n}) : assert(blacklistedPattern != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "formatEditUpdate",
                    "type": "services.TextEditingValue",
                    "desc": "<p>Called when text is being typed or cut\/copy\/pasted in the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>.<\/p>\n<p>You can override the resulting text based on the previous text value and\nthe incoming new text value.<\/p>\n<p>When formatters are chained, <code>oldValue<\/code> reflects the initial value of\n<a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> at the beginning of the chain.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.BlacklistingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "oldValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/BlacklistingTextInputFormatter\/formatEditUpdate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTextEditingValue formatEditUpdate(\n  TextEditingValue oldValue, \/\/ unused.\n  TextEditingValue newValue,\n) {\n  return _selectionAwareTextManipulation(\n    newValue,\n    (String substring) {\n      return substring.replaceAll(blacklistedPattern, replacementString);\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "blacklistedPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "<p>A <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a> to match and replace incoming <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a>s.<\/p>\n        ",
                    "memberOf": "services.BlacklistingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/BlacklistingTextInputFormatter\/blacklistedPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Pattern blacklistedPattern\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "replacementString",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>String used to replace found patterns.<\/p>\n        ",
                    "memberOf": "services.BlacklistingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/BlacklistingTextInputFormatter\/replacementString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String replacementString\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "singleLineFormatter",
                    "type": "services.BlacklistingTextInputFormatter",
                    "types": [],
                    "desc": "<p>A <a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a> that forces input to be a single line.<\/p>\n        ",
                    "memberOf": "services.BlacklistingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/BlacklistingTextInputFormatter\/singleLineFormatter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final BlacklistingTextInputFormatter singleLineFormatter\n    = BlacklistingTextInputFormatter(RegExp(r'\\n'))\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/BlacklistingTextInputFormatter-class.html",
            "desc": "<p>A <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> that prevents the insertion of blacklisted\ncharacters patterns.<\/p>\n<p>Instances of blacklisted characters found in the new <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a>s\nwill be replaced with the <a href=\"services\/BlacklistingTextInputFormatter\/replacementString.html\">replacementString<\/a> which defaults to the empty\nstring.<\/p>\n<p>Since this formatter only removes characters from the text, it attempts to\npreserve the existing <a href=\"services\/TextEditingValue\/selection.html\">TextEditingValue.selection<\/a> to values it would now\nfall at with the removed characters.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a>, which uses a whitelist instead of a\nblacklist.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BlacklistingTextInputFormatter"
        },
        {
            "name": "services.CachingAssetBundle",
            "extends": [
                "services.AssetBundle",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "CachingAssetBundle",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.CachingAssetBundle",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/CachingAssetBundle\/CachingAssetBundle.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "evict",
                    "type": "",
                    "desc": "<p>If this is a caching asset bundle, and the given key describes a cached\nasset, then evict the asset from the cache so that the next time it is\nloaded, the cache will be reread from the asset bundle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.CachingAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/CachingAssetBundle\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid evict(String key) {\n  _stringCache.remove(key);\n  _structuredDataCache.remove(key);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "loadString",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Retrieve a string from the asset bundle.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n<p>If the <code>cache<\/code> argument is set to false, then the data will not be\ncached, and reading the data may bypass the cache. This is useful if the\ncaller is going to be doing its own caching. (It might not be cached if\nit's set to true either, that depends on the asset bundle\nimplementation.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.CachingAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "cache",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/CachingAssetBundle\/loadString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; loadString(String key, { bool cache = true }) {\n  if (cache)\n    return _stringCache.putIfAbsent(key, () =&gt; super.loadString(key));\n  return super.loadString(key);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "loadStructuredData",
                    "type": "dart:async.Future",
                    "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>The result of parsing the string is cached (the string itself is not,\nunless you also fetch it with <a href=\"services\/CachingAssetBundle\/loadString.html\">loadString<\/a>). For any given <code>key<\/code>, the\n<code>parser<\/code> is only run the first time.<\/p>\n<p>Once the value has been parsed, the future returned by this function for\nsubsequent calls will be a <a href=\"foundation\/SynchronousFuture-class.html\">SynchronousFuture<\/a>, which resolves its\ncallback synchronously.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.CachingAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/CachingAssetBundle\/loadStructuredData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value)) {\n  assert(key != null);\n  assert(parser != null);\n  if (_structuredDataCache.containsKey(key))\n    return _structuredDataCache[key];\n  Completer&lt;T&gt; completer;\n  Future&lt;T&gt; result;\n  loadString(key, cache: false).then&lt;T&gt;(parser).then&lt;void&gt;((T value) {\n    result = SynchronousFuture&lt;T&gt;(value);\n    _structuredDataCache[key] = result;\n    if (completer != null) {\n      \/\/ We already returned from the loadStructuredData function, which means\n      \/\/ we are in the asynchronous mode. Pass the value to the completer. The\n      \/\/ completer's future is what we returned.\n      completer.complete(value);\n    }\n  });\n  if (result != null) {\n    \/\/ The code above ran synchronously, and came up with an answer.\n    \/\/ Return the SynchronousFuture that we created above.\n    return result;\n  }\n  \/\/ The code above hasn't yet run its \"then\" handler yet. Let's prepare a\n  \/\/ completer for it to use when it does run.\n  completer = Completer&lt;T&gt;();\n  _structuredDataCache[key] = completer.future;\n  return completer.future;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "services.PlatformAssetBundle"
            ],
            "realImplementors": [
                "services.PlatformAssetBundle"
            ],
            "cn": [],
            "href": "services\/CachingAssetBundle-class.html",
            "desc": "<p>An <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> that permanently caches string and structured resources\nthat have been fetched.<\/p>\n<p>Strings (for <a href=\"services\/CachingAssetBundle\/loadString.html\">loadString<\/a> and <a href=\"services\/CachingAssetBundle\/loadStructuredData.html\">loadStructuredData<\/a>) are decoded as UTF-8.\nData that is cached is cached for the lifetime of the asset bundle\n(typically the lifetime of the application).<\/p>\n<p>Binary resources (from <a href=\"services\/AssetBundle\/load.html\">load<\/a>) are not cached.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CachingAssetBundle"
        },
        {
            "name": "services.Clipboard",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "getData",
                    "type": "dart:async.Future<services.ClipboardData>",
                    "desc": "<p>Retrieves data from the clipboard that matches the given format.<\/p>\n<p>The <code>format<\/code> argument specifies the media type, such as <code>text\/plain<\/code>, of\nthe data to obtain.<\/p>\n<p>Returns a future which completes to null if the data could not be\nobtained, and to a <a href=\"services\/ClipboardData-class.html\">ClipboardData<\/a> object if it could.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.Clipboard",
                    "sig": "",
                    "params": [
                        {
                            "name": "format",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/Clipboard\/getData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ClipboardData&gt; getData(String format) async {\n  final Map&lt;String, dynamic&gt; result = await SystemChannels.platform.invokeMethod(\n    'Clipboard.getData',\n    format,\n  );\n  if (result == null)\n    return null;\n  return ClipboardData(text: result['text']);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "services.ClipboardData"
                    ]
                },
                {
                    "name": "setData",
                    "type": "dart:async.Future",
                    "desc": "<p>Stores the given clipboard data on the clipboard.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.Clipboard",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "services.ClipboardData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/Clipboard\/setData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setData(ClipboardData data) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'Clipboard.setData',\n    &lt;String, dynamic&gt;{\n      'text': data.text,\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/Clipboard\/kTextPlain-constant.html",
                    "desc": "<p>Plain text data format string.<\/p>\n<p>Used with <a href=\"services\/Clipboard\/getData.html\">getData<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String kTextPlain = 'text\/plain'\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kTextPlain",
                    "memberOf": "services.Clipboard"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/Clipboard-class.html",
            "desc": "<p>Utility methods for interacting with the system's clipboard.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Clipboard"
        },
        {
            "name": "services.ClipboardData",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "ClipboardData",
                    "type": "",
                    "desc": "<p>Creates data for the system clipboard.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ClipboardData",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/ClipboardData\/ClipboardData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ClipboardData({ this.text });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Plain text variant of this clipboard data.<\/p>\n        ",
                    "memberOf": "services.ClipboardData",
                    "isConstant": false,
                    "href": "services\/ClipboardData\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/ClipboardData-class.html",
            "desc": "<p>Data stored on the system clipboard.<\/p>\n<p>The system clipboard can contain data of various media types. This data\nstructure currently supports only plain text data, in the <a href=\"services\/ClipboardData\/text.html\">text<\/a> property.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ClipboardData"
        },
        {
            "type": "",
            "name": "services.DeviceOrientation",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.DeviceOrientation",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/DeviceOrientation\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/DeviceOrientation-class.html",
            "desc": "<p>Specifies a particular device orientation.<\/p>\n<p>To determine which values correspond to which orientations, first position\nthe device in its default orientation (this is the orientation that the\nsystem first uses for its boot logo, or the orientation in which the\nhardware logos or markings are upright, or the orientation in which the\ncameras are at the top). If this is a portrait orientation, then this is\n<a href=\"services\/DeviceOrientation-class.html\">portraitUp<\/a>. Otherwise, it's <a href=\"services\/DeviceOrientation-class.html\">landscapeLeft<\/a>. As you rotate the device by\n90 degrees in a counter-clockwise direction around the axis that pierces the\nscreen, you step through each value in this enum in the order given.<\/p>\n<p>For a device with a landscape default orientation, the orientation obtained\nby rotating the device 90 degrees clockwise from its default orientation is\n<a href=\"services\/DeviceOrientation-class.html\">portraitUp<\/a>.<\/p>\n<p>Used by <a href=\"services\/SystemChrome\/setPreferredOrientations.html\">SystemChrome.setPreferredOrientations<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "DeviceOrientation"
        },
        {
            "name": "services.EventChannel",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "EventChannel",
                    "type": "",
                    "desc": "<p>Creates an <a href=\"services\/EventChannel-class.html\">EventChannel<\/a> with the specified <code>name<\/code>.<\/p>\n<p>The <code>codec<\/code> used will be <a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>, unless otherwise\nspecified.<\/p>\n<p>Neither <code>name<\/code> nor <code>codec<\/code> may be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.EventChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codec",
                            "type": "services.MethodCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/EventChannel\/EventChannel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EventChannel(this.name, [this.codec = const StandardMethodCodec()]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "receiveBroadcastStream",
                    "type": "dart:async.Stream",
                    "desc": "<p>Sets up a broadcast stream for receiving events on this channel.<\/p>\n<p>Returns a broadcast <a href=\"dart-async\/Stream-class.html\">Stream<\/a> which emits events to listeners as follows:<\/p>\n<ul>\n<li>a decoded data event (possibly null) for each successful event\nreceived from the platform plugin;<\/li>\n<li>an error event containing a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a> for each error event\nreceived from the platform plugin.<\/li>\n<\/ul>\n<p>Errors occurring during stream activation or deactivation are reported\nthrough the <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a> facility. Stream activation happens only when\nstream listener count changes from 0 to 1. Stream deactivation happens\nonly when stream listener count changes from 1 to 0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.EventChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/EventChannel\/receiveBroadcastStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;dynamic&gt; receiveBroadcastStream([ dynamic arguments ]) {\n  final MethodChannel methodChannel = MethodChannel(name, codec);\n  StreamController&lt;dynamic&gt; controller;\n  controller = StreamController&lt;dynamic&gt;.broadcast(onListen: () async {\n    BinaryMessages.setMessageHandler(name, (ByteData reply) async {\n      if (reply == null) {\n        controller.close();\n      } else {\n        try {\n          controller.add(codec.decodeEnvelope(reply));\n        } on PlatformException catch (e) {\n          controller.addError(e);\n        }\n      }\n      return null;\n    });\n    try {\n      await methodChannel.invokeMethod&lt;void&gt;('listen', arguments);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'services library',\n        context: 'while activating platform stream on channel $name',\n      ));\n    }\n  }, onCancel: () async {\n    BinaryMessages.setMessageHandler(name, null);\n    try {\n      await methodChannel.invokeMethod&lt;void&gt;('cancel', arguments);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'services library',\n        context: 'while de-activating platform stream on channel $name',\n      ));\n    }\n  });\n  return controller.stream;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "codec",
                    "type": "services.MethodCodec",
                    "types": [],
                    "desc": "<p>The message codec used by this channel, not null.<\/p>\n        ",
                    "memberOf": "services.EventChannel",
                    "isConstant": false,
                    "href": "services\/EventChannel\/codec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MethodCodec codec\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The logical channel on which communication happens, not null.<\/p>\n        ",
                    "memberOf": "services.EventChannel",
                    "isConstant": false,
                    "href": "services\/EventChannel\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/EventChannel-class.html",
            "desc": "<p>A named channel for communicating with platform plugins using event streams.<\/p>\n<p>Stream setup requests are encoded into binary before being sent,\nand binary events and errors received are decoded into Dart values.\nThe <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> used must be compatible with the one used by the platform\nplugin. This can be achieved by creating an <code>EventChannel<\/code> counterpart of\nthis channel on the platform side. The Dart type of events sent and received\nis <code>dynamic<\/code>, but only values supported by the specified <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> can\nbe used.<\/p>\n<p>The logical identity of the channel is given by its name. Identically named\nchannels will interfere with each other's communication.<\/p>\n<p>See: <a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EventChannel"
        },
        {
            "type": "",
            "name": "services.FloatingCursorDragState",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.FloatingCursorDragState",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/FloatingCursorDragState\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/FloatingCursorDragState-class.html",
            "desc": "<p>A floating cursor state the user has induced by force pressing an iOS\nkeyboard.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "FloatingCursorDragState"
        },
        {
            "name": "services.FontLoader",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "FontLoader",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"services\/FontLoader-class.html\">FontLoader<\/a> that will load font assets for the specified\n<code>family<\/code>.<\/p>\n<p>The font family will not be available for use until <a href=\"services\/FontLoader\/load.html\">load<\/a> has been\ncalled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.FontLoader",
                    "sig": "",
                    "params": [
                        {
                            "name": "family",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/FontLoader\/FontLoader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FontLoader(this.family)\n  : _loaded = false,\n    _fontFutures = &lt;Future&lt;Uint8List&gt;&gt;[];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addFont",
                    "type": "",
                    "desc": "<p>Registers a font asset to be loaded by this font loader.<\/p>\n<p>The <code>bytes<\/code> argument specifies the actual font asset bytes. Currently,\nonly TrueType (TTF) fonts are supported.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.FontLoader",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:async.Future<dart:typed_data.ByteData>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:typed_data.ByteData"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/FontLoader\/addFont.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFont(Future&lt;ByteData&gt; bytes) {\n  if (_loaded)\n    throw StateError('FontLoader is already loaded');\n\n  _fontFutures.add(bytes.then(\n      (ByteData data) =&gt; Uint8List.view(data.buffer, data.offsetInBytes, data.lengthInBytes)\n  ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "load",
                    "type": "dart:async.Future",
                    "desc": "<p>Loads this font loader's font <a href=\"services\/FontLoader\/family.html\">family<\/a> and all of its associated assets\ninto the Flutter engine, making the font available to the current\napplication.<\/p>\n<p>This method should only be called once per font loader. Attempts to\nload fonts from the same loader more than once will cause a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>\nto be thrown.<\/p>\n<p>The returned future will complete with an error if any of the font asset\nfutures yield an error.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.FontLoader",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/FontLoader\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; load() async {\n  if (_loaded)\n    throw StateError('FontLoader is already loaded');\n  _loaded = true;\n\n  final Iterable&lt;Future&lt;void&gt;&gt; loadFutures = _fontFutures.map(\n      (Future&lt;Uint8List&gt; f) =&gt; f.then&lt;void&gt;(\n          (Uint8List list) =&gt; loadFont(list, family)\n      )\n  );\n  return Future.wait(loadFutures.toList());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "loadFont",
                    "type": "dart:async.Future",
                    "desc": "<p>Hook called to load a font asset into the engine.<\/p>\n<p>Subclasses may override this to replace the default loading logic with\ncustom logic (for example, to mock the underlying engine API in tests).<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.FontLoader",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "family",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/FontLoader\/loadFont.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@visibleForTesting\nFuture&lt;void&gt; loadFont(Uint8List list, String family) {\n  return loadFontFromList(list, fontFamily: family);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "family",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The font family being loaded.<\/p>\n<p>The family groups a series of related font assets, each of which defines\nhow to render a specific <a href=\"dart-ui\/FontWeight-class.html\">FontWeight<\/a> and <a href=\"dart-ui\/FontStyle-class.html\">FontStyle<\/a> within the family.<\/p>\n        ",
                    "memberOf": "services.FontLoader",
                    "isConstant": false,
                    "href": "services\/FontLoader\/family.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String family\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/FontLoader-class.html",
            "desc": "<p>A class that enables the dynamic loading of fonts at runtime.<\/p>\n<p>The <a href=\"services\/FontLoader-class.html\">FontLoader<\/a> class provides a builder pattern, where the caller builds\nup the assets that make up a font family, then calls <a href=\"services\/FontLoader\/load.html\">load<\/a> to load the\nentire font family into a running Flutter application.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FontLoader"
        },
        {
            "name": "services.HapticFeedback",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "heavyImpact",
                    "type": "dart:async.Future",
                    "desc": "<p>Provides a haptic feedback corresponding a collision impact with a heavy mass.<\/p>\n<p>On iOS versions 10 and above, this uses a <code>UIImpactFeedbackGenerator<\/code> with\n<code>UIImpactFeedbackStyleHeavy<\/code>. This call has no effects on iOS versions\nbelow 10.<\/p>\n<p>On Android, this uses <code>HapticFeedbackConstants.CONTEXT_CLICK<\/code> on API levels\n23 and above. This call has no effects on Android API levels below 23.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.HapticFeedback",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/HapticFeedback\/heavyImpact.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; heavyImpact() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'HapticFeedback.vibrate',\n    'HapticFeedbackType.heavyImpact',\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lightImpact",
                    "type": "dart:async.Future",
                    "desc": "<p>Provides a haptic feedback corresponding a collision impact with a light mass.<\/p>\n<p>On iOS versions 10 and above, this uses a <code>UIImpactFeedbackGenerator<\/code> with\n<code>UIImpactFeedbackStyleLight<\/code>. This call has no effects on iOS versions\nbelow 10.<\/p>\n<p>On Android, this uses <code>HapticFeedbackConstants.VIRTUAL_KEY<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.HapticFeedback",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/HapticFeedback\/lightImpact.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; lightImpact() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'HapticFeedback.vibrate',\n    'HapticFeedbackType.lightImpact',\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "mediumImpact",
                    "type": "dart:async.Future",
                    "desc": "<p>Provides a haptic feedback corresponding a collision impact with a medium mass.<\/p>\n<p>On iOS versions 10 and above, this uses a <code>UIImpactFeedbackGenerator<\/code> with\n<code>UIImpactFeedbackStyleMedium<\/code>. This call has no effects on iOS versions\nbelow 10.<\/p>\n<p>On Android, this uses <code>HapticFeedbackConstants.KEYBOARD_TAP<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.HapticFeedback",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/HapticFeedback\/mediumImpact.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; mediumImpact() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'HapticFeedback.vibrate',\n    'HapticFeedbackType.mediumImpact',\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "selectionClick",
                    "type": "dart:async.Future",
                    "desc": "<p>Provides a haptic feedback indication selection changing through discrete values.<\/p>\n<p>On iOS versions 10 and above, this uses a <code>UISelectionFeedbackGenerator<\/code>.\nThis call has no effects on iOS versions below 10.<\/p>\n<p>On Android, this uses <code>HapticFeedbackConstants.CLOCK_TICK<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.HapticFeedback",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/HapticFeedback\/selectionClick.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; selectionClick() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'HapticFeedback.vibrate',\n    'HapticFeedbackType.selectionClick',\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "vibrate",
                    "type": "dart:async.Future",
                    "desc": "<p>Provides vibration haptic feedback to the user for a short duration.<\/p>\n<p>On iOS devices that support haptic feedback, this uses the default system\nvibration value (<code>kSystemSoundID_Vibrate<\/code>).<\/p>\n<p>On Android, this uses the platform haptic feedback API to simulate a\nresponse to a long press (<code>HapticFeedbackConstants.LONG_PRESS<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.HapticFeedback",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/HapticFeedback\/vibrate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; vibrate() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;('HapticFeedback.vibrate');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/HapticFeedback-class.html",
            "desc": "<p>Allows access to the haptic feedback interface on the device.<\/p>\n<p>This API is intentionally terse since it calls default platform behavior. It\nis not suitable for precise control of the system's haptic feedback module.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HapticFeedback"
        },
        {
            "name": "services.JSONMessageCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "JSONMessageCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with UTF-8 encoded JSON messages.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMessageCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/JSONMessageCodec\/JSONMessageCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JSONMessageCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeMessage",
                    "type": "",
                    "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMessageCodec\/decodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndynamic decodeMessage(ByteData message) {\n  if (message == null)\n    return message;\n  return json.decode(const StringCodec().decodeMessage(message));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "encodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMessageCodec\/encodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMessage(dynamic message) {\n  if (message == null)\n    return null;\n  return const StringCodec().encodeMessage(json.encode(message));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/JSONMessageCodec-class.html",
            "desc": "<p><a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with UTF-8 encoded JSON messages.<\/p>\n<p>Supported messages are acyclic values of these forms:<\/p>\n<ul>\n<li>null<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/num-class.html\">num<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>s of supported values<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>s from strings to supported values<\/li>\n<\/ul>\n<p>On Android, messages are decoded using the <code>org.json<\/code> library.\nOn iOS, messages are decoded using the <code>NSJSONSerialization<\/code> library.\nIn both cases, the use of top-level simple messages (null, <a href=\"dart-core\/bool-class.html\">bool<\/a>, <a href=\"dart-core\/num-class.html\">num<\/a>,\nand <a href=\"dart-core\/String-class.html\">String<\/a>) is supported (by the Flutter SDK). The decoded value will be\nnull\/nil for null, and identical to what would result from decoding a\nsingleton JSON array with a Boolean, number, or string value, and then\nextracting its single element.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "JSONMessageCodec"
        },
        {
            "name": "services.JSONMethodCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "JSONMethodCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> with UTF-8 encoded JSON method calls and result\nenvelopes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/JSONMethodCodec\/JSONMethodCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JSONMethodCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeEnvelope",
                    "type": "",
                    "desc": "<p>Decodes the specified result <code>envelope<\/code> from binary.<\/p>\n<p>Throws <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if <code>envelope<\/code> represents an error, otherwise\nreturns the enveloped result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "envelope",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMethodCodec\/decodeEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndynamic decodeEnvelope(ByteData envelope) {\n  final dynamic decoded = const JSONMessageCodec().decodeMessage(envelope);\n  if (decoded is! List)\n    throw FormatException('Expected envelope List, got $decoded');\n  if (decoded.length == 1)\n    return decoded[0];\n  if (decoded.length == 3\n      &amp;&amp; decoded[0] is String\n      &amp;&amp; (decoded[1] == null || decoded[1] is String))\n    throw PlatformException(\n      code: decoded[0],\n      message: decoded[1],\n      details: decoded[2],\n    );\n  throw FormatException('Invalid envelope: $decoded');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "decodeMethodCall",
                    "type": "services.MethodCall",
                    "desc": "<p>Decodes the specified <code>methodCall<\/code> from binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "methodCall",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMethodCodec\/decodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMethodCall decodeMethodCall(ByteData methodCall) {\n  final dynamic decoded = const JSONMessageCodec().decodeMessage(methodCall);\n  if (decoded is! Map)\n    throw FormatException('Expected method call Map, got $decoded');\n  final dynamic method = decoded['method'];\n  final dynamic arguments = decoded['args'];\n  if (method is String)\n    return MethodCall(method, arguments);\n  throw FormatException('Invalid method call: $decoded');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeErrorEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes an error result into a binary envelope.<\/p>\n<p>The specified error <code>code<\/code>, human-readable error <code>message<\/code>, and error\n<code>details<\/code> correspond to the fields of <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "code",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "details",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMethodCodec\/encodeErrorEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeErrorEnvelope({ @required String code, String message, dynamic details }) {\n  assert(code != null);\n  return const JSONMessageCodec().encodeMessage(&lt;dynamic&gt;[code, message, details]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeMethodCall",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>methodCall<\/code> into binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMethodCodec\/encodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMethodCall(MethodCall call) {\n  return const JSONMessageCodec().encodeMessage(&lt;String, dynamic&gt;{\n    'method': call.method,\n    'args': call.arguments,\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeSuccessEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes a successful <code>result<\/code> into a binary envelope.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.JSONMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "result",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/JSONMethodCodec\/encodeSuccessEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeSuccessEnvelope(dynamic result) {\n  return const JSONMessageCodec().encodeMessage(&lt;dynamic&gt;[result]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/JSONMethodCodec-class.html",
            "desc": "<p><a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> with UTF-8 encoded JSON method calls and result envelopes.<\/p>\n<p>Values supported as method arguments and result payloads are those supported\nby <a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "JSONMethodCodec"
        },
        {
            "type": "",
            "name": "services.KeyboardSide",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.KeyboardSide",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/KeyboardSide\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/KeyboardSide-class.html",
            "desc": "<p>An enum describing the side of the keyboard that a key is on, to allow\ndiscrimination between which key is pressed (e.g. the left or right SHIFT\nkey).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyEventData\/isModifierPressed.html\">RawKeyEventData.isModifierPressed<\/a>, which accepts this enum as an\nargument.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "KeyboardSide"
        },
        {
            "name": "services.LengthLimitingTextInputFormatter",
            "extends": [
                "services.TextInputFormatter",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "LengthLimitingTextInputFormatter",
                    "type": "",
                    "desc": "<p>Creates a formatter that prevents the insertion of more characters than a\nlimit.<\/p>\n<p>The <code>maxLength<\/code> must be null, -1 or greater than zero. If it is null or -1\nthen no limit is enforced.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LengthLimitingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "maxLength",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/LengthLimitingTextInputFormatter\/LengthLimitingTextInputFormatter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LengthLimitingTextInputFormatter(this.maxLength)\n  : assert(maxLength == null || maxLength == -1 || maxLength &gt; 0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "formatEditUpdate",
                    "type": "services.TextEditingValue",
                    "desc": "<p>Called when text is being typed or cut\/copy\/pasted in the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>.<\/p>\n<p>You can override the resulting text based on the previous text value and\nthe incoming new text value.<\/p>\n<p>When formatters are chained, <code>oldValue<\/code> reflects the initial value of\n<a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> at the beginning of the chain.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LengthLimitingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "oldValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/LengthLimitingTextInputFormatter\/formatEditUpdate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTextEditingValue formatEditUpdate(\n  TextEditingValue oldValue, \/\/ unused.\n  TextEditingValue newValue,\n) {\n  if (maxLength != null &amp;&amp; maxLength &gt; 0 &amp;&amp; newValue.text.runes.length &gt; maxLength) {\n    final TextSelection newSelection = newValue.selection.copyWith(\n        baseOffset: math.min(newValue.selection.start, maxLength),\n        extentOffset: math.min(newValue.selection.end, maxLength),\n    );\n    \/\/ This does not count grapheme clusters (i.e. characters visible to the user),\n    \/\/ it counts Unicode runes, which leaves out a number of useful possible\n    \/\/ characters (like many emoji), so this will be inaccurate in the\n    \/\/ presence of those characters. The Dart lang bug\n    \/\/ https:\/\/github.com\/dart-lang\/sdk\/issues\/28404 has been filed to\n    \/\/ address this in Dart.\n    \/\/ TODO(gspencer): convert this to count actual characters when Dart\n    \/\/ supports that.\n    final RuneIterator iterator = RuneIterator(newValue.text);\n    if (iterator.moveNext())\n      for (int count = 0; count &lt; maxLength; ++count)\n        if (!iterator.moveNext())\n          break;\n    final String truncated = newValue.text.substring(0, iterator.rawIndex);\n    return TextEditingValue(\n      text: truncated,\n      selection: newSelection,\n      composing: TextRange.empty,\n    );\n  }\n  return newValue;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "maxLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The limit on the number of characters (i.e. Unicode scalar values) this formatter\nwill allow.<\/p>\n<p>The value must be null or greater than zero. If it is null, then no limit\nis enforced.<\/p>\n<p>This formatter does not currently count Unicode grapheme clusters (i.e.\ncharacters visible to the user), it counts Unicode scalar values, which leaves\nout a number of useful possible characters (like many emoji and composed\ncharacters), so this will be inaccurate in the presence of those\ncharacters. If you expect to encounter these kinds of characters, be\ngenerous in the maxLength used.<\/p>\n<p>For instance, the character \"\u00f6\" can be represented as '\\u{006F}\\u{0308}',\nwhich is the letter \"o\" followed by a composed diaeresis \"\u00a8\", or it can\nbe represented as '\\u{00F6}', which is the Unicode scalar value \"LATIN\nSMALL LETTER O WITH DIAERESIS\". In the first case, the text field will\ncount two characters, and the second case will be counted as one\ncharacter, even though the user can see no difference in the input.<\/p>\n<p>Similarly, some emoji are represented by multiple scalar values. The\nUnicode \"THUMBS UP SIGN + MEDIUM SKIN TONE MODIFIER\", \"\ud83d\udc4d\ud83c\udffd\", should be\ncounted as a single character, but because it is a combination of two\nUnicode scalar values, '\\u{1F44D}\\u{1F3FD}', it is counted as two\ncharacters.<\/p>\n        ",
                    "memberOf": "services.LengthLimitingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/LengthLimitingTextInputFormatter\/maxLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLength\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/LengthLimitingTextInputFormatter-class.html",
            "desc": "<p>A <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> that prevents the insertion of more characters\n(currently defined as Unicode scalar values) than allowed.<\/p>\n<p>Since this formatter only prevents new characters from being added to the\ntext, it preserves the existing <a href=\"services\/TextEditingValue\/selection.html\">TextEditingValue.selection<\/a>.<\/p>\n<ul><li>\n<a href=\"services\/LengthLimitingTextInputFormatter\/maxLength.html\">maxLength<\/a>, which discusses the precise meaning of \"number of\ncharacters\" and how it may differ from the intuitive meaning.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LengthLimitingTextInputFormatter"
        },
        {
            "name": "services.LogicalKeyboardKey",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/LogicalKeyboardKey\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LogicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/LogicalKeyboardKey\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType) {\n    return false;\n  }\n  final LogicalKeyboardKey typedOther = other;\n  return keyId == typedOther.keyId;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LogicalKeyboardKey",
                    "type": "",
                    "desc": "<p>Creates a LogicalKeyboardKey object with an optional key label and debug\nname.<\/p>\n<p><code>keyId<\/code> must not be null.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo save executable size, it is recommended that the <code>debugName<\/code> be null in\nrelease mode. You can do this by using the <a href=\"foundation\/kReleaseMode-constant.html\">kReleaseMode<\/a> constant.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const LogicalKeyboardKey(0x0010000000a, debugName: kReleaseMode ? null : 'Special Key')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "services.LogicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "keyId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugName",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "keyLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/LogicalKeyboardKey\/LogicalKeyboardKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LogicalKeyboardKey(this.keyId, {this.debugName, this.keyLabel})\n    : assert(keyId != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"services\/LogicalKeyboardKey\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LogicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/LogicalKeyboardKey\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(StringProperty('keyId', '0x${keyId.toRadixString(16).padLeft(8, '0')}', showName: true));\n  properties.add(StringProperty('keyLabel', keyLabel, showName: true));\n  properties.add(StringProperty('debugName', debugName, showName: true, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "findKeyByKeyId",
                    "type": "services.LogicalKeyboardKey",
                    "desc": "<p>Returns the <a href=\"services\/LogicalKeyboardKey-class.html\">LogicalKeyboardKey<\/a> constant that matches the given ID, or\nnull, if not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LogicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "keyId",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/LogicalKeyboardKey\/findKeyByKeyId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static LogicalKeyboardKey findKeyByKeyId(int keyId) =&gt; _knownLogicalKeys[keyId];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isControlCharacter",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given label represents a Unicode control character.<\/p>\n<p>Examples of control characters are characters like \"U+000A LINE FEED (LF)\"\nor \"U+001B ESCAPE (ESC)\".<\/p>\n<p>See <a href=\"https:\/\/en.wikipedia.org\/wiki\/Unicode_control_characters\">en.wikipedia.org\/wiki\/Unicode_control_characters<\/a> for more\ninformation.<\/p>\n<p>Used by <a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a> subclasses to help construct IDs.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.LogicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "label",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/LogicalKeyboardKey\/isControlCharacter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isControlCharacter(String label) {\n  if (label.length &gt; 1) {\n    return false;\n  }\n  final int codeUnit = label.codeUnitAt(0);\n  return (codeUnit &lt;= 0x1f &amp;&amp; codeUnit &gt;= 0x00) || (codeUnit &gt;= 0x7f &amp;&amp; codeUnit &lt;= 0x9f);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/abort-constant.html",
                    "desc": "<p>Represents the logical \"Abort\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey abort = LogicalKeyboardKey(0x0010007009b, debugName: kReleaseMode ? null : 'Abort')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "abort",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/again-constant.html",
                    "desc": "<p>Represents the logical \"Again\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey again = LogicalKeyboardKey(0x00100070079, debugName: kReleaseMode ? null : 'Again')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "again",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/altLeft-constant.html",
                    "desc": "<p>Represents the logical \"Alt Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey altLeft = LogicalKeyboardKey(0x001000700e2, debugName: kReleaseMode ? null : 'Alt Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "altLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/altRight-constant.html",
                    "desc": "<p>Represents the logical \"Alt Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey altRight = LogicalKeyboardKey(0x001000700e6, debugName: kReleaseMode ? null : 'Alt Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "altRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/arrowDown-constant.html",
                    "desc": "<p>Represents the logical \"Arrow Down\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey arrowDown = LogicalKeyboardKey(0x00100070051, debugName: kReleaseMode ? null : 'Arrow Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowDown",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/arrowLeft-constant.html",
                    "desc": "<p>Represents the logical \"Arrow Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey arrowLeft = LogicalKeyboardKey(0x00100070050, debugName: kReleaseMode ? null : 'Arrow Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/arrowRight-constant.html",
                    "desc": "<p>Represents the logical \"Arrow Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey arrowRight = LogicalKeyboardKey(0x0010007004f, debugName: kReleaseMode ? null : 'Arrow Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/arrowUp-constant.html",
                    "desc": "<p>Represents the logical \"Arrow Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey arrowUp = LogicalKeyboardKey(0x00100070052, debugName: kReleaseMode ? null : 'Arrow Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/audioVolumeDown-constant.html",
                    "desc": "<p>Represents the logical \"Audio Volume Down\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey audioVolumeDown = LogicalKeyboardKey(0x00100070081, debugName: kReleaseMode ? null : 'Audio Volume Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeDown",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/audioVolumeMute-constant.html",
                    "desc": "<p>Represents the logical \"Audio Volume Mute\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey audioVolumeMute = LogicalKeyboardKey(0x0010007007f, debugName: kReleaseMode ? null : 'Audio Volume Mute')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeMute",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/audioVolumeUp-constant.html",
                    "desc": "<p>Represents the logical \"Audio Volume Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey audioVolumeUp = LogicalKeyboardKey(0x00100070080, debugName: kReleaseMode ? null : 'Audio Volume Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/autogeneratedMask-constant.html",
                    "desc": "<p>Mask for the auto-generated bit portion of the key code.<\/p>\n<p>This is used by platform-specific code to generate new Flutter key codes\nfor keys which are not recognized.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int autogeneratedMask = 0x10000000000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "autogeneratedMask",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/backquote-constant.html",
                    "desc": "<p>Represents the logical \"Backquote\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey backquote = LogicalKeyboardKey(0x00000000060, keyLabel: r'`', debugName: kReleaseMode ? null : 'Backquote')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backquote",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/backslash-constant.html",
                    "desc": "<p>Represents the logical \"Backslash\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey backslash = LogicalKeyboardKey(0x0000000005c, keyLabel: r'\\', debugName: kReleaseMode ? null : 'Backslash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backslash",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/backspace-constant.html",
                    "desc": "<p>Represents the logical \"Backspace\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey backspace = LogicalKeyboardKey(0x0010007002a, debugName: kReleaseMode ? null : 'Backspace')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backspace",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/bassBoost-constant.html",
                    "desc": "<p>Represents the logical \"Bass Boost\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey bassBoost = LogicalKeyboardKey(0x001000c00e5, debugName: kReleaseMode ? null : 'Bass Boost')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bassBoost",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/bracketLeft-constant.html",
                    "desc": "<p>Represents the logical \"Bracket Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey bracketLeft = LogicalKeyboardKey(0x0000000005b, keyLabel: r'[', debugName: kReleaseMode ? null : 'Bracket Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bracketLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/bracketRight-constant.html",
                    "desc": "<p>Represents the logical \"Bracket Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey bracketRight = LogicalKeyboardKey(0x0000000005d, keyLabel: r']', debugName: kReleaseMode ? null : 'Bracket Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bracketRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessAuto-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Auto\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessAuto = LogicalKeyboardKey(0x001000c0075, debugName: kReleaseMode ? null : 'Brightness Auto')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessAuto",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessDown-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Down\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessDown = LogicalKeyboardKey(0x001000c0070, debugName: kReleaseMode ? null : 'Brightness Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessDown",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessMaximum-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Maximum\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessMaximum = LogicalKeyboardKey(0x001000c0074, debugName: kReleaseMode ? null : 'Brightness Maximum')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessMaximum",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessMinimum-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Minimum\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessMinimum = LogicalKeyboardKey(0x001000c0073, debugName: kReleaseMode ? null : 'Brightness Minimum')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessMinimum",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessToggle-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Toggle\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessToggle = LogicalKeyboardKey(0x001000c0072, debugName: kReleaseMode ? null : 'Brightness Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessToggle",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/brightnessUp-constant.html",
                    "desc": "<p>Represents the logical \"Brightness Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey brightnessUp = LogicalKeyboardKey(0x001000c006f, debugName: kReleaseMode ? null : 'Brightness Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserBack-constant.html",
                    "desc": "<p>Represents the logical \"Browser Back\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserBack = LogicalKeyboardKey(0x001000c0224, debugName: kReleaseMode ? null : 'Browser Back')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserBack",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserFavorites-constant.html",
                    "desc": "<p>Represents the logical \"Browser Favorites\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserFavorites = LogicalKeyboardKey(0x001000c022a, debugName: kReleaseMode ? null : 'Browser Favorites')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserFavorites",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserForward-constant.html",
                    "desc": "<p>Represents the logical \"Browser Forward\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserForward = LogicalKeyboardKey(0x001000c0225, debugName: kReleaseMode ? null : 'Browser Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserForward",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserHome-constant.html",
                    "desc": "<p>Represents the logical \"Browser Home\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserHome = LogicalKeyboardKey(0x001000c0223, debugName: kReleaseMode ? null : 'Browser Home')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserHome",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserRefresh-constant.html",
                    "desc": "<p>Represents the logical \"Browser Refresh\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserRefresh = LogicalKeyboardKey(0x001000c0227, debugName: kReleaseMode ? null : 'Browser Refresh')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserRefresh",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserSearch-constant.html",
                    "desc": "<p>Represents the logical \"Browser Search\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserSearch = LogicalKeyboardKey(0x001000c0221, debugName: kReleaseMode ? null : 'Browser Search')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserSearch",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/browserStop-constant.html",
                    "desc": "<p>Represents the logical \"Browser Stop\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey browserStop = LogicalKeyboardKey(0x001000c0226, debugName: kReleaseMode ? null : 'Browser Stop')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserStop",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/capsLock-constant.html",
                    "desc": "<p>Represents the logical \"Caps Lock\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey capsLock = LogicalKeyboardKey(0x00100070039, debugName: kReleaseMode ? null : 'Caps Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "capsLock",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/channelDown-constant.html",
                    "desc": "<p>Represents the logical \"Channel Down\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey channelDown = LogicalKeyboardKey(0x001000c009d, debugName: kReleaseMode ? null : 'Channel Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "channelDown",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/channelUp-constant.html",
                    "desc": "<p>Represents the logical \"Channel Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey channelUp = LogicalKeyboardKey(0x001000c009c, debugName: kReleaseMode ? null : 'Channel Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "channelUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/close-constant.html",
                    "desc": "<p>Represents the logical \"Close\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey close = LogicalKeyboardKey(0x001000c0203, debugName: kReleaseMode ? null : 'Close')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "close",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/closedCaptionToggle-constant.html",
                    "desc": "<p>Represents the logical \"Closed Caption Toggle\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey closedCaptionToggle = LogicalKeyboardKey(0x001000c0061, debugName: kReleaseMode ? null : 'Closed Caption Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "closedCaptionToggle",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/comma-constant.html",
                    "desc": "<p>Represents the logical \"Comma\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey comma = LogicalKeyboardKey(0x0000000002c, keyLabel: r',', debugName: kReleaseMode ? null : 'Comma')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "comma",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/contextMenu-constant.html",
                    "desc": "<p>Represents the logical \"Context Menu\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey contextMenu = LogicalKeyboardKey(0x00100070065, debugName: kReleaseMode ? null : 'Context Menu')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contextMenu",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/controlLeft-constant.html",
                    "desc": "<p>Represents the logical \"Control Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey controlLeft = LogicalKeyboardKey(0x001000700e0, debugName: kReleaseMode ? null : 'Control Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "controlLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/controlRight-constant.html",
                    "desc": "<p>Represents the logical \"Control Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey controlRight = LogicalKeyboardKey(0x001000700e4, debugName: kReleaseMode ? null : 'Control Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "controlRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/convert-constant.html",
                    "desc": "<p>Represents the logical \"Convert\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey convert = LogicalKeyboardKey(0x0010007008a, debugName: kReleaseMode ? null : 'Convert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "convert",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/copy-constant.html",
                    "desc": "<p>Represents the logical \"Copy\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey copy = LogicalKeyboardKey(0x0010007007c, debugName: kReleaseMode ? null : 'Copy')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "copy",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/cut-constant.html",
                    "desc": "<p>Represents the logical \"Cut\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey cut = LogicalKeyboardKey(0x0010007007b, debugName: kReleaseMode ? null : 'Cut')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "cut",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "name": "debugName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The debug string to print for this keyboard key, which will be null in\nrelease mode.<\/p>\n        ",
                    "memberOf": "services.LogicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/LogicalKeyboardKey\/debugName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/delete-constant.html",
                    "desc": "<p>Represents the logical \"Delete\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey delete = LogicalKeyboardKey(0x0010007004c, debugName: kReleaseMode ? null : 'Delete')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "delete",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit0-constant.html",
                    "desc": "<p>Represents the logical \"Digit 0\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit0 = LogicalKeyboardKey(0x00000000030, keyLabel: r'0', debugName: kReleaseMode ? null : 'Digit 0')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit0",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit1-constant.html",
                    "desc": "<p>Represents the logical \"Digit 1\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit1 = LogicalKeyboardKey(0x00000000031, keyLabel: r'1', debugName: kReleaseMode ? null : 'Digit 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit1",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit2-constant.html",
                    "desc": "<p>Represents the logical \"Digit 2\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit2 = LogicalKeyboardKey(0x00000000032, keyLabel: r'2', debugName: kReleaseMode ? null : 'Digit 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit2",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit3-constant.html",
                    "desc": "<p>Represents the logical \"Digit 3\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit3 = LogicalKeyboardKey(0x00000000033, keyLabel: r'3', debugName: kReleaseMode ? null : 'Digit 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit3",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit4-constant.html",
                    "desc": "<p>Represents the logical \"Digit 4\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit4 = LogicalKeyboardKey(0x00000000034, keyLabel: r'4', debugName: kReleaseMode ? null : 'Digit 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit4",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit5-constant.html",
                    "desc": "<p>Represents the logical \"Digit 5\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit5 = LogicalKeyboardKey(0x00000000035, keyLabel: r'5', debugName: kReleaseMode ? null : 'Digit 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit5",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit6-constant.html",
                    "desc": "<p>Represents the logical \"Digit 6\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit6 = LogicalKeyboardKey(0x00000000036, keyLabel: r'6', debugName: kReleaseMode ? null : 'Digit 6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit6",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit7-constant.html",
                    "desc": "<p>Represents the logical \"Digit 7\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit7 = LogicalKeyboardKey(0x00000000037, keyLabel: r'7', debugName: kReleaseMode ? null : 'Digit 7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit7",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit8-constant.html",
                    "desc": "<p>Represents the logical \"Digit 8\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit8 = LogicalKeyboardKey(0x00000000038, keyLabel: r'8', debugName: kReleaseMode ? null : 'Digit 8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit8",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/digit9-constant.html",
                    "desc": "<p>Represents the logical \"Digit 9\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey digit9 = LogicalKeyboardKey(0x00000000039, keyLabel: r'9', debugName: kReleaseMode ? null : 'Digit 9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit9",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/eject-constant.html",
                    "desc": "<p>Represents the logical \"Eject\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey eject = LogicalKeyboardKey(0x001000c00b8, debugName: kReleaseMode ? null : 'Eject')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "eject",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/end-constant.html",
                    "desc": "<p>Represents the logical \"End\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey end = LogicalKeyboardKey(0x0010007004d, debugName: kReleaseMode ? null : 'End')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "end",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/enter-constant.html",
                    "desc": "<p>Represents the logical \"Enter\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey enter = LogicalKeyboardKey(0x00100070028, debugName: kReleaseMode ? null : 'Enter')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "enter",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/equal-constant.html",
                    "desc": "<p>Represents the logical \"Equal\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey equal = LogicalKeyboardKey(0x0000000003d, keyLabel: r'=', debugName: kReleaseMode ? null : 'Equal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "equal",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/escape-constant.html",
                    "desc": "<p>Represents the logical \"Escape\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey escape = LogicalKeyboardKey(0x00100070029, debugName: kReleaseMode ? null : 'Escape')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "escape",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/exit-constant.html",
                    "desc": "<p>Represents the logical \"Exit\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey exit = LogicalKeyboardKey(0x001000c0094, debugName: kReleaseMode ? null : 'Exit')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "exit",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f1-constant.html",
                    "desc": "<p>Represents the logical \"F1\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f1 = LogicalKeyboardKey(0x0010007003a, debugName: kReleaseMode ? null : 'F1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f1",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f2-constant.html",
                    "desc": "<p>Represents the logical \"F2\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f2 = LogicalKeyboardKey(0x0010007003b, debugName: kReleaseMode ? null : 'F2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f2",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f3-constant.html",
                    "desc": "<p>Represents the logical \"F3\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f3 = LogicalKeyboardKey(0x0010007003c, debugName: kReleaseMode ? null : 'F3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f3",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f4-constant.html",
                    "desc": "<p>Represents the logical \"F4\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f4 = LogicalKeyboardKey(0x0010007003d, debugName: kReleaseMode ? null : 'F4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f4",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f5-constant.html",
                    "desc": "<p>Represents the logical \"F5\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f5 = LogicalKeyboardKey(0x0010007003e, debugName: kReleaseMode ? null : 'F5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f5",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f6-constant.html",
                    "desc": "<p>Represents the logical \"F6\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f6 = LogicalKeyboardKey(0x0010007003f, debugName: kReleaseMode ? null : 'F6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f6",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f7-constant.html",
                    "desc": "<p>Represents the logical \"F7\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f7 = LogicalKeyboardKey(0x00100070040, debugName: kReleaseMode ? null : 'F7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f7",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f8-constant.html",
                    "desc": "<p>Represents the logical \"F8\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f8 = LogicalKeyboardKey(0x00100070041, debugName: kReleaseMode ? null : 'F8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f8",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f9-constant.html",
                    "desc": "<p>Represents the logical \"F9\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f9 = LogicalKeyboardKey(0x00100070042, debugName: kReleaseMode ? null : 'F9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f9",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f10-constant.html",
                    "desc": "<p>Represents the logical \"F10\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f10 = LogicalKeyboardKey(0x00100070043, debugName: kReleaseMode ? null : 'F10')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f10",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f11-constant.html",
                    "desc": "<p>Represents the logical \"F11\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f11 = LogicalKeyboardKey(0x00100070044, debugName: kReleaseMode ? null : 'F11')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f11",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f12-constant.html",
                    "desc": "<p>Represents the logical \"F12\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f12 = LogicalKeyboardKey(0x00100070045, debugName: kReleaseMode ? null : 'F12')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f12",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f13-constant.html",
                    "desc": "<p>Represents the logical \"F13\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f13 = LogicalKeyboardKey(0x00100070068, debugName: kReleaseMode ? null : 'F13')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f13",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f14-constant.html",
                    "desc": "<p>Represents the logical \"F14\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f14 = LogicalKeyboardKey(0x00100070069, debugName: kReleaseMode ? null : 'F14')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f14",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f15-constant.html",
                    "desc": "<p>Represents the logical \"F15\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f15 = LogicalKeyboardKey(0x0010007006a, debugName: kReleaseMode ? null : 'F15')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f15",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f16-constant.html",
                    "desc": "<p>Represents the logical \"F16\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f16 = LogicalKeyboardKey(0x0010007006b, debugName: kReleaseMode ? null : 'F16')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f16",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f17-constant.html",
                    "desc": "<p>Represents the logical \"F17\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f17 = LogicalKeyboardKey(0x0010007006c, debugName: kReleaseMode ? null : 'F17')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f17",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f18-constant.html",
                    "desc": "<p>Represents the logical \"F18\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f18 = LogicalKeyboardKey(0x0010007006d, debugName: kReleaseMode ? null : 'F18')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f18",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f19-constant.html",
                    "desc": "<p>Represents the logical \"F19\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f19 = LogicalKeyboardKey(0x0010007006e, debugName: kReleaseMode ? null : 'F19')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f19",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f20-constant.html",
                    "desc": "<p>Represents the logical \"F20\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f20 = LogicalKeyboardKey(0x0010007006f, debugName: kReleaseMode ? null : 'F20')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f20",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f21-constant.html",
                    "desc": "<p>Represents the logical \"F21\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f21 = LogicalKeyboardKey(0x00100070070, debugName: kReleaseMode ? null : 'F21')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f21",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f22-constant.html",
                    "desc": "<p>Represents the logical \"F22\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f22 = LogicalKeyboardKey(0x00100070071, debugName: kReleaseMode ? null : 'F22')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f22",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f23-constant.html",
                    "desc": "<p>Represents the logical \"F23\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f23 = LogicalKeyboardKey(0x00100070072, debugName: kReleaseMode ? null : 'F23')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f23",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/f24-constant.html",
                    "desc": "<p>Represents the logical \"F24\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey f24 = LogicalKeyboardKey(0x00100070073, debugName: kReleaseMode ? null : 'F24')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f24",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/find-constant.html",
                    "desc": "<p>Represents the logical \"Find\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey find = LogicalKeyboardKey(0x0010007007e, debugName: kReleaseMode ? null : 'Find')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "find",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/fn-constant.html",
                    "desc": "<p>Represents the logical \"Fn\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey fn = LogicalKeyboardKey(0x00100000012, debugName: kReleaseMode ? null : 'Fn')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "fn",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/fnLock-constant.html",
                    "desc": "<p>Represents the logical \"Fn Lock\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey fnLock = LogicalKeyboardKey(0x00100000013, debugName: kReleaseMode ? null : 'Fn Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "fnLock",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/LogicalKeyboardKey\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/LogicalKeyboardKey\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/LogicalKeyboardKey\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/LogicalKeyboardKey\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/LogicalKeyboardKey\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/LogicalKeyboardKey\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.LogicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/LogicalKeyboardKey\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; keyId.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/help-constant.html",
                    "desc": "<p>Represents the logical \"Help\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey help = LogicalKeyboardKey(0x00100070075, debugName: kReleaseMode ? null : 'Help')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "help",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/hidPlane-constant.html",
                    "desc": "<p>The code prefix for keys which do not have a Unicode representation.<\/p>\n<p>This is used by platform-specific code to generate Flutter key codes using\nHID Usage codes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int hidPlane = 0x00100000000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hidPlane",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/home-constant.html",
                    "desc": "<p>Represents the logical \"Home\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey home = LogicalKeyboardKey(0x0010007004a, debugName: kReleaseMode ? null : 'Home')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "home",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/hyper-constant.html",
                    "desc": "<p>Represents the logical \"Hyper\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey hyper = LogicalKeyboardKey(0x00100000010, debugName: kReleaseMode ? null : 'Hyper')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hyper",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/info-constant.html",
                    "desc": "<p>Represents the logical \"Info\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey info = LogicalKeyboardKey(0x001000c0060, debugName: kReleaseMode ? null : 'Info')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "info",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/insert-constant.html",
                    "desc": "<p>Represents the logical \"Insert\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey insert = LogicalKeyboardKey(0x00100070049, debugName: kReleaseMode ? null : 'Insert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "insert",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/intlBackslash-constant.html",
                    "desc": "<p>Represents the logical \"Intl Backslash\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey intlBackslash = LogicalKeyboardKey(0x00100070064, debugName: kReleaseMode ? null : 'Intl Backslash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlBackslash",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/intlRo-constant.html",
                    "desc": "<p>Represents the logical \"Intl Ro\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey intlRo = LogicalKeyboardKey(0x00100070087, debugName: kReleaseMode ? null : 'Intl Ro')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlRo",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/intlYen-constant.html",
                    "desc": "<p>Represents the logical \"Intl Yen\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey intlYen = LogicalKeyboardKey(0x00100070089, debugName: kReleaseMode ? null : 'Intl Yen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlYen",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "name": "isAutogenerated",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if the <a href=\"services\/LogicalKeyboardKey\/keyId.html\">keyId<\/a> of this object is one that is auto-generated by\nFlutter.<\/p>\n<p>Auto-generated key IDs are generated in response to platform key codes\nwhich Flutter doesn't recognize, and their IDs shouldn't be used in a\npersistent way.<\/p>\n<p>Auto-generated IDs should be a rare occurrence: Flutter supports most keys.<\/p>\n<p>Keys that generate Unicode characters (even if unknown to Flutter) will\nnot return true for <code>isAutogenerated<\/code>, since they will be assigned a\nUnicode-based code that will remain stable.<\/p>\n<p>If Flutter adds support for a previously unsupported key code, the ID it\nreports will change, but the ID will remain stable on the platform it is\nproduced on until Flutter adds support for recognizing it.<\/p>\n<p>So, hypothetically, if Android added a new key code of 0xffff,\nrepresenting a new \"do what I mean\" key, then the auto-generated code\nwould be 0x1020000ffff, but once Flutter added the \"doWhatIMean\" key to\nthe definitions below, the new code would be 0x0020000ffff for all\nplatforms that had a \"do what I mean\" key from then on.<\/p>\n        ",
                    "memberOf": "services.LogicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/LogicalKeyboardKey\/isAutogenerated.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAutogenerated =&gt; (keyId &amp; autogeneratedMask) != 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/kanaMode-constant.html",
                    "desc": "<p>Represents the logical \"Kana Mode\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey kanaMode = LogicalKeyboardKey(0x00100070088, debugName: kReleaseMode ? null : 'Kana Mode')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kanaMode",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyA-constant.html",
                    "desc": "<p>Represents the logical \"Key A\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyA = LogicalKeyboardKey(0x00000000061, keyLabel: r'a', debugName: kReleaseMode ? null : 'Key A')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyA",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyB-constant.html",
                    "desc": "<p>Represents the logical \"Key B\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyB = LogicalKeyboardKey(0x00000000062, keyLabel: r'b', debugName: kReleaseMode ? null : 'Key B')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyB",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyC-constant.html",
                    "desc": "<p>Represents the logical \"Key C\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyC = LogicalKeyboardKey(0x00000000063, keyLabel: r'c', debugName: kReleaseMode ? null : 'Key C')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyC",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyD-constant.html",
                    "desc": "<p>Represents the logical \"Key D\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyD = LogicalKeyboardKey(0x00000000064, keyLabel: r'd', debugName: kReleaseMode ? null : 'Key D')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyD",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyE-constant.html",
                    "desc": "<p>Represents the logical \"Key E\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyE = LogicalKeyboardKey(0x00000000065, keyLabel: r'e', debugName: kReleaseMode ? null : 'Key E')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyE",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyF-constant.html",
                    "desc": "<p>Represents the logical \"Key F\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyF = LogicalKeyboardKey(0x00000000066, keyLabel: r'f', debugName: kReleaseMode ? null : 'Key F')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyF",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyG-constant.html",
                    "desc": "<p>Represents the logical \"Key G\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyG = LogicalKeyboardKey(0x00000000067, keyLabel: r'g', debugName: kReleaseMode ? null : 'Key G')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyG",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyH-constant.html",
                    "desc": "<p>Represents the logical \"Key H\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyH = LogicalKeyboardKey(0x00000000068, keyLabel: r'h', debugName: kReleaseMode ? null : 'Key H')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyH",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyI-constant.html",
                    "desc": "<p>Represents the logical \"Key I\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyI = LogicalKeyboardKey(0x00000000069, keyLabel: r'i', debugName: kReleaseMode ? null : 'Key I')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyI",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "name": "keyId",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>A unique code representing this key.<\/p>\n<p>This is an opaque code. It should not be unpacked to derive information\nfrom it, as the representation of the code could change at any time.<\/p>\n        ",
                    "memberOf": "services.LogicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/LogicalKeyboardKey\/keyId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int keyId\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyJ-constant.html",
                    "desc": "<p>Represents the logical \"Key J\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyJ = LogicalKeyboardKey(0x0000000006a, keyLabel: r'j', debugName: kReleaseMode ? null : 'Key J')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyJ",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyK-constant.html",
                    "desc": "<p>Represents the logical \"Key K\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyK = LogicalKeyboardKey(0x0000000006b, keyLabel: r'k', debugName: kReleaseMode ? null : 'Key K')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyK",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyL-constant.html",
                    "desc": "<p>Represents the logical \"Key L\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyL = LogicalKeyboardKey(0x0000000006c, keyLabel: r'l', debugName: kReleaseMode ? null : 'Key L')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyL",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "name": "keyLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The Unicode string representing the character produced by a <a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a>.<\/p>\n<p>This value is useful for describing or matching mnemonic keyboard\nshortcuts.<\/p>\n<p>On most platforms this is a single code point, but it could contain any\nUnicode string. The <code>keyLabel<\/code> differs from <a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a>\nbecause <code>keyLabel<\/code> only takes into account the key being pressed, not any\ncombining keys pressed before it, so, for example, an \u201co\u201d that follows a\ncombining dieresis (\u201c\u00a8\u201d, COMBINING DIAERESIS (U+0308)) would just return\n\u201co\u201d for <a href=\"services\/LogicalKeyboardKey\/keyLabel.html\">keyLabel<\/a>, but would return \u201c\u00f6\u201d for <a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a>.<\/p>\n<p>Do not use the <a href=\"services\/LogicalKeyboardKey\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.LogicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/LogicalKeyboardKey\/keyLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String keyLabel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyM-constant.html",
                    "desc": "<p>Represents the logical \"Key M\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyM = LogicalKeyboardKey(0x0000000006d, keyLabel: r'm', debugName: kReleaseMode ? null : 'Key M')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyM",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyN-constant.html",
                    "desc": "<p>Represents the logical \"Key N\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyN = LogicalKeyboardKey(0x0000000006e, keyLabel: r'n', debugName: kReleaseMode ? null : 'Key N')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyN",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyO-constant.html",
                    "desc": "<p>Represents the logical \"Key O\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyO = LogicalKeyboardKey(0x0000000006f, keyLabel: r'o', debugName: kReleaseMode ? null : 'Key O')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyO",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyP-constant.html",
                    "desc": "<p>Represents the logical \"Key P\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyP = LogicalKeyboardKey(0x00000000070, keyLabel: r'p', debugName: kReleaseMode ? null : 'Key P')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyP",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyQ-constant.html",
                    "desc": "<p>Represents the logical \"Key Q\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyQ = LogicalKeyboardKey(0x00000000071, keyLabel: r'q', debugName: kReleaseMode ? null : 'Key Q')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyQ",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyR-constant.html",
                    "desc": "<p>Represents the logical \"Key R\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyR = LogicalKeyboardKey(0x00000000072, keyLabel: r'r', debugName: kReleaseMode ? null : 'Key R')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyR",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyS-constant.html",
                    "desc": "<p>Represents the logical \"Key S\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyS = LogicalKeyboardKey(0x00000000073, keyLabel: r's', debugName: kReleaseMode ? null : 'Key S')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyS",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyT-constant.html",
                    "desc": "<p>Represents the logical \"Key T\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyT = LogicalKeyboardKey(0x00000000074, keyLabel: r't', debugName: kReleaseMode ? null : 'Key T')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyT",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyU-constant.html",
                    "desc": "<p>Represents the logical \"Key U\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyU = LogicalKeyboardKey(0x00000000075, keyLabel: r'u', debugName: kReleaseMode ? null : 'Key U')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyU",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyV-constant.html",
                    "desc": "<p>Represents the logical \"Key V\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyV = LogicalKeyboardKey(0x00000000076, keyLabel: r'v', debugName: kReleaseMode ? null : 'Key V')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyV",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyW-constant.html",
                    "desc": "<p>Represents the logical \"Key W\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyW = LogicalKeyboardKey(0x00000000077, keyLabel: r'w', debugName: kReleaseMode ? null : 'Key W')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyW",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyX-constant.html",
                    "desc": "<p>Represents the logical \"Key X\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyX = LogicalKeyboardKey(0x00000000078, keyLabel: r'x', debugName: kReleaseMode ? null : 'Key X')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyX",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyY-constant.html",
                    "desc": "<p>Represents the logical \"Key Y\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyY = LogicalKeyboardKey(0x00000000079, keyLabel: r'y', debugName: kReleaseMode ? null : 'Key Y')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyY",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/keyZ-constant.html",
                    "desc": "<p>Represents the logical \"Key Z\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey keyZ = LogicalKeyboardKey(0x0000000007a, keyLabel: r'z', debugName: kReleaseMode ? null : 'Key Z')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyZ",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lang1-constant.html",
                    "desc": "<p>Represents the logical \"Lang 1\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lang1 = LogicalKeyboardKey(0x00100070090, debugName: kReleaseMode ? null : 'Lang 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang1",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lang2-constant.html",
                    "desc": "<p>Represents the logical \"Lang 2\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lang2 = LogicalKeyboardKey(0x00100070091, debugName: kReleaseMode ? null : 'Lang 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang2",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lang3-constant.html",
                    "desc": "<p>Represents the logical \"Lang 3\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lang3 = LogicalKeyboardKey(0x00100070092, debugName: kReleaseMode ? null : 'Lang 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang3",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lang4-constant.html",
                    "desc": "<p>Represents the logical \"Lang 4\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lang4 = LogicalKeyboardKey(0x00100070093, debugName: kReleaseMode ? null : 'Lang 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang4",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lang5-constant.html",
                    "desc": "<p>Represents the logical \"Lang 5\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lang5 = LogicalKeyboardKey(0x00100070094, debugName: kReleaseMode ? null : 'Lang 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang5",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchApp1-constant.html",
                    "desc": "<p>Represents the logical \"Launch App1\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchApp1 = LogicalKeyboardKey(0x001000c0194, debugName: kReleaseMode ? null : 'Launch App1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchApp1",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchApp2-constant.html",
                    "desc": "<p>Represents the logical \"Launch App2\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchApp2 = LogicalKeyboardKey(0x001000c0192, debugName: kReleaseMode ? null : 'Launch App2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchApp2",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchAssistant-constant.html",
                    "desc": "<p>Represents the logical \"Launch Assistant\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchAssistant = LogicalKeyboardKey(0x00100000017, debugName: kReleaseMode ? null : 'Launch Assistant')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchAssistant",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchAudioBrowser-constant.html",
                    "desc": "<p>Represents the logical \"Launch Audio Browser\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchAudioBrowser = LogicalKeyboardKey(0x001000c01b7, debugName: kReleaseMode ? null : 'Launch Audio Browser')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchAudioBrowser",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchCalendar-constant.html",
                    "desc": "<p>Represents the logical \"Launch Calendar\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchCalendar = LogicalKeyboardKey(0x001000c018e, debugName: kReleaseMode ? null : 'Launch Calendar')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchCalendar",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchContacts-constant.html",
                    "desc": "<p>Represents the logical \"Launch Contacts\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchContacts = LogicalKeyboardKey(0x001000c018d, debugName: kReleaseMode ? null : 'Launch Contacts')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchContacts",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchControlPanel-constant.html",
                    "desc": "<p>Represents the logical \"Launch Control Panel\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchControlPanel = LogicalKeyboardKey(0x001000c019f, debugName: kReleaseMode ? null : 'Launch Control Panel')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchControlPanel",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchDocuments-constant.html",
                    "desc": "<p>Represents the logical \"Launch Documents\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchDocuments = LogicalKeyboardKey(0x001000c01a7, debugName: kReleaseMode ? null : 'Launch Documents')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchDocuments",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchInternetBrowser-constant.html",
                    "desc": "<p>Represents the logical \"Launch Internet Browser\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchInternetBrowser = LogicalKeyboardKey(0x001000c0196, debugName: kReleaseMode ? null : 'Launch Internet Browser')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchInternetBrowser",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchKeyboardLayout-constant.html",
                    "desc": "<p>Represents the logical \"Launch Keyboard Layout\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchKeyboardLayout = LogicalKeyboardKey(0x001000c01ae, debugName: kReleaseMode ? null : 'Launch Keyboard Layout')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchKeyboardLayout",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchMail-constant.html",
                    "desc": "<p>Represents the logical \"Launch Mail\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchMail = LogicalKeyboardKey(0x001000c018a, debugName: kReleaseMode ? null : 'Launch Mail')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchMail",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchPhone-constant.html",
                    "desc": "<p>Represents the logical \"Launch Phone\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchPhone = LogicalKeyboardKey(0x001000c008c, debugName: kReleaseMode ? null : 'Launch Phone')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchPhone",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchScreenSaver-constant.html",
                    "desc": "<p>Represents the logical \"Launch Screen Saver\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchScreenSaver = LogicalKeyboardKey(0x001000c01b1, debugName: kReleaseMode ? null : 'Launch Screen Saver')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchScreenSaver",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchSpreadsheet-constant.html",
                    "desc": "<p>Represents the logical \"Launch Spreadsheet\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchSpreadsheet = LogicalKeyboardKey(0x001000c0186, debugName: kReleaseMode ? null : 'Launch Spreadsheet')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchSpreadsheet",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/launchWordProcessor-constant.html",
                    "desc": "<p>Represents the logical \"Launch Word Processor\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey launchWordProcessor = LogicalKeyboardKey(0x001000c0184, debugName: kReleaseMode ? null : 'Launch Word Processor')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchWordProcessor",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/lockScreen-constant.html",
                    "desc": "<p>Represents the logical \"Lock Screen\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey lockScreen = LogicalKeyboardKey(0x001000c019e, debugName: kReleaseMode ? null : 'Lock Screen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lockScreen",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/logOff-constant.html",
                    "desc": "<p>Represents the logical \"Log Off\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey logOff = LogicalKeyboardKey(0x001000c019c, debugName: kReleaseMode ? null : 'Log Off')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "logOff",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mailForward-constant.html",
                    "desc": "<p>Represents the logical \"Mail Forward\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mailForward = LogicalKeyboardKey(0x001000c028b, debugName: kReleaseMode ? null : 'Mail Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailForward",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mailReply-constant.html",
                    "desc": "<p>Represents the logical \"Mail Reply\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mailReply = LogicalKeyboardKey(0x001000c0289, debugName: kReleaseMode ? null : 'Mail Reply')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailReply",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mailSend-constant.html",
                    "desc": "<p>Represents the logical \"Mail Send\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mailSend = LogicalKeyboardKey(0x001000c028c, debugName: kReleaseMode ? null : 'Mail Send')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailSend",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaFastForward-constant.html",
                    "desc": "<p>Represents the logical \"Media Fast Forward\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaFastForward = LogicalKeyboardKey(0x001000c00b3, debugName: kReleaseMode ? null : 'Media Fast Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaFastForward",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaLast-constant.html",
                    "desc": "<p>Represents the logical \"Media Last\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaLast = LogicalKeyboardKey(0x001000c0083, debugName: kReleaseMode ? null : 'Media Last')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaLast",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaPlay-constant.html",
                    "desc": "<p>Represents the logical \"Media Play\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaPlay = LogicalKeyboardKey(0x001000c00b0, debugName: kReleaseMode ? null : 'Media Play')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaPlay",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaPlayPause-constant.html",
                    "desc": "<p>Represents the logical \"Media Play Pause\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaPlayPause = LogicalKeyboardKey(0x001000c00cd, debugName: kReleaseMode ? null : 'Media Play Pause')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaPlayPause",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaRecord-constant.html",
                    "desc": "<p>Represents the logical \"Media Record\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaRecord = LogicalKeyboardKey(0x001000c00b2, debugName: kReleaseMode ? null : 'Media Record')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaRecord",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaRewind-constant.html",
                    "desc": "<p>Represents the logical \"Media Rewind\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaRewind = LogicalKeyboardKey(0x001000c00b4, debugName: kReleaseMode ? null : 'Media Rewind')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaRewind",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaSelect-constant.html",
                    "desc": "<p>Represents the logical \"Media Select\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaSelect = LogicalKeyboardKey(0x001000c0183, debugName: kReleaseMode ? null : 'Media Select')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaSelect",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaStop-constant.html",
                    "desc": "<p>Represents the logical \"Media Stop\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaStop = LogicalKeyboardKey(0x001000c00b7, debugName: kReleaseMode ? null : 'Media Stop')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaStop",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaTrackNext-constant.html",
                    "desc": "<p>Represents the logical \"Media Track Next\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaTrackNext = LogicalKeyboardKey(0x001000c00b5, debugName: kReleaseMode ? null : 'Media Track Next')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaTrackNext",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/mediaTrackPrevious-constant.html",
                    "desc": "<p>Represents the logical \"Media Track Previous\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey mediaTrackPrevious = LogicalKeyboardKey(0x001000c00b6, debugName: kReleaseMode ? null : 'Media Track Previous')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaTrackPrevious",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/metaLeft-constant.html",
                    "desc": "<p>Represents the logical \"Meta Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey metaLeft = LogicalKeyboardKey(0x001000700e3, debugName: kReleaseMode ? null : 'Meta Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "metaLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/metaRight-constant.html",
                    "desc": "<p>Represents the logical \"Meta Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey metaRight = LogicalKeyboardKey(0x001000700e7, debugName: kReleaseMode ? null : 'Meta Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "metaRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/minus-constant.html",
                    "desc": "<p>Represents the logical \"Minus\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey minus = LogicalKeyboardKey(0x0000000002d, keyLabel: r'-', debugName: kReleaseMode ? null : 'Minus')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "minus",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/newKey-constant.html",
                    "desc": "<p>Represents the logical \"New Key\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey newKey = LogicalKeyboardKey(0x001000c0201, debugName: kReleaseMode ? null : 'New Key')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "newKey",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/nonConvert-constant.html",
                    "desc": "<p>Represents the logical \"Non Convert\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey nonConvert = LogicalKeyboardKey(0x0010007008b, debugName: kReleaseMode ? null : 'Non Convert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "nonConvert",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/none-constant.html",
                    "desc": "<p>Represents the logical \"None\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey none = LogicalKeyboardKey(0x00100000000, debugName: kReleaseMode ? null : 'None')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "none",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numLock-constant.html",
                    "desc": "<p>Represents the logical \"Num Lock\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numLock = LogicalKeyboardKey(0x00100070053, debugName: kReleaseMode ? null : 'Num Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numLock",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad0-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 0\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad0 = LogicalKeyboardKey(0x00100070062, keyLabel: r'0', debugName: kReleaseMode ? null : 'Numpad 0')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad0",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad1-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 1\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad1 = LogicalKeyboardKey(0x00100070059, keyLabel: r'1', debugName: kReleaseMode ? null : 'Numpad 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad1",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad2-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 2\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad2 = LogicalKeyboardKey(0x0010007005a, keyLabel: r'2', debugName: kReleaseMode ? null : 'Numpad 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad2",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad3-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 3\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad3 = LogicalKeyboardKey(0x0010007005b, keyLabel: r'3', debugName: kReleaseMode ? null : 'Numpad 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad3",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad4-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 4\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad4 = LogicalKeyboardKey(0x0010007005c, keyLabel: r'4', debugName: kReleaseMode ? null : 'Numpad 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad4",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad5-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 5\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad5 = LogicalKeyboardKey(0x0010007005d, keyLabel: r'5', debugName: kReleaseMode ? null : 'Numpad 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad5",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad6-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 6\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad6 = LogicalKeyboardKey(0x0010007005e, keyLabel: r'6', debugName: kReleaseMode ? null : 'Numpad 6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad6",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad7-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 7\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad7 = LogicalKeyboardKey(0x0010007005f, keyLabel: r'7', debugName: kReleaseMode ? null : 'Numpad 7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad7",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad8-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 8\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad8 = LogicalKeyboardKey(0x00100070060, keyLabel: r'8', debugName: kReleaseMode ? null : 'Numpad 8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad8",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpad9-constant.html",
                    "desc": "<p>Represents the logical \"Numpad 9\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpad9 = LogicalKeyboardKey(0x00100070061, keyLabel: r'9', debugName: kReleaseMode ? null : 'Numpad 9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad9",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadAdd-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Add\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadAdd = LogicalKeyboardKey(0x00100070057, keyLabel: r'+', debugName: kReleaseMode ? null : 'Numpad Add')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadAdd",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadBackspace-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Backspace\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadBackspace = LogicalKeyboardKey(0x001000700bb, debugName: kReleaseMode ? null : 'Numpad Backspace')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadBackspace",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadClear-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Clear\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadClear = LogicalKeyboardKey(0x001000700d8, debugName: kReleaseMode ? null : 'Numpad Clear')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadClear",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadClearEntry-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Clear Entry\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadClearEntry = LogicalKeyboardKey(0x001000700d9, debugName: kReleaseMode ? null : 'Numpad Clear Entry')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadClearEntry",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadComma-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Comma\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadComma = LogicalKeyboardKey(0x00100070085, keyLabel: r',', debugName: kReleaseMode ? null : 'Numpad Comma')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadComma",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadDecimal-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Decimal\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadDecimal = LogicalKeyboardKey(0x00100070063, keyLabel: r'.', debugName: kReleaseMode ? null : 'Numpad Decimal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadDecimal",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadDivide-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Divide\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadDivide = LogicalKeyboardKey(0x00100070054, keyLabel: r'\/', debugName: kReleaseMode ? null : 'Numpad Divide')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadDivide",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadEnter-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Enter\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadEnter = LogicalKeyboardKey(0x00100070058, debugName: kReleaseMode ? null : 'Numpad Enter')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadEnter",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadEqual-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Equal\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadEqual = LogicalKeyboardKey(0x00100070067, keyLabel: r'=', debugName: kReleaseMode ? null : 'Numpad Equal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadEqual",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMemoryAdd-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Memory Add\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMemoryAdd = LogicalKeyboardKey(0x001000700d3, debugName: kReleaseMode ? null : 'Numpad Memory Add')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryAdd",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMemoryClear-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Memory Clear\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMemoryClear = LogicalKeyboardKey(0x001000700d2, debugName: kReleaseMode ? null : 'Numpad Memory Clear')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryClear",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMemoryRecall-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Memory Recall\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMemoryRecall = LogicalKeyboardKey(0x001000700d1, debugName: kReleaseMode ? null : 'Numpad Memory Recall')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryRecall",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMemoryStore-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Memory Store\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMemoryStore = LogicalKeyboardKey(0x001000700d0, debugName: kReleaseMode ? null : 'Numpad Memory Store')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryStore",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMemorySubtract-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Memory Subtract\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMemorySubtract = LogicalKeyboardKey(0x001000700d4, debugName: kReleaseMode ? null : 'Numpad Memory Subtract')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemorySubtract",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadMultiply-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Multiply\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadMultiply = LogicalKeyboardKey(0x00100070055, keyLabel: r'*', debugName: kReleaseMode ? null : 'Numpad Multiply')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMultiply",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadParenLeft-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Paren Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadParenLeft = LogicalKeyboardKey(0x001000700b6, keyLabel: r'(', debugName: kReleaseMode ? null : 'Numpad Paren Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadParenLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadParenRight-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Paren Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadParenRight = LogicalKeyboardKey(0x001000700b7, keyLabel: r')', debugName: kReleaseMode ? null : 'Numpad Paren Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadParenRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadSignChange-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Sign Change\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadSignChange = LogicalKeyboardKey(0x001000700d7, debugName: kReleaseMode ? null : 'Numpad Sign Change')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadSignChange",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/numpadSubtract-constant.html",
                    "desc": "<p>Represents the logical \"Numpad Subtract\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey numpadSubtract = LogicalKeyboardKey(0x00100070056, keyLabel: r'-', debugName: kReleaseMode ? null : 'Numpad Subtract')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadSubtract",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/open-constant.html",
                    "desc": "<p>Represents the logical \"Open\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey open = LogicalKeyboardKey(0x00100070074, debugName: kReleaseMode ? null : 'Open')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "open",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/pageDown-constant.html",
                    "desc": "<p>Represents the logical \"Page Down\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey pageDown = LogicalKeyboardKey(0x0010007004e, debugName: kReleaseMode ? null : 'Page Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pageDown",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/pageUp-constant.html",
                    "desc": "<p>Represents the logical \"Page Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey pageUp = LogicalKeyboardKey(0x0010007004b, debugName: kReleaseMode ? null : 'Page Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pageUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/paste-constant.html",
                    "desc": "<p>Represents the logical \"Paste\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey paste = LogicalKeyboardKey(0x0010007007d, debugName: kReleaseMode ? null : 'Paste')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "paste",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/pause-constant.html",
                    "desc": "<p>Represents the logical \"Pause\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey pause = LogicalKeyboardKey(0x00100070048, debugName: kReleaseMode ? null : 'Pause')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pause",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/period-constant.html",
                    "desc": "<p>Represents the logical \"Period\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey period = LogicalKeyboardKey(0x0000000002e, keyLabel: r'.', debugName: kReleaseMode ? null : 'Period')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "period",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/platformMask-constant.html",
                    "desc": "<p>Mask for the platform prefix portion of the key code.<\/p>\n<p>This is used by platform-specific code to generate Flutter key codes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int platformMask = 0x0FF00000000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "platformMask",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/power-constant.html",
                    "desc": "<p>Represents the logical \"Power\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey power = LogicalKeyboardKey(0x00100070066, debugName: kReleaseMode ? null : 'Power')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "power",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/print-constant.html",
                    "desc": "<p>Represents the logical \"Print\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey print = LogicalKeyboardKey(0x001000c0208, debugName: kReleaseMode ? null : 'Print')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "print",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/printScreen-constant.html",
                    "desc": "<p>Represents the logical \"Print Screen\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey printScreen = LogicalKeyboardKey(0x00100070046, debugName: kReleaseMode ? null : 'Print Screen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "printScreen",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/programGuide-constant.html",
                    "desc": "<p>Represents the logical \"Program Guide\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey programGuide = LogicalKeyboardKey(0x001000c008d, debugName: kReleaseMode ? null : 'Program Guide')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "programGuide",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/props-constant.html",
                    "desc": "<p>Represents the logical \"Props\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey props = LogicalKeyboardKey(0x001000700a3, debugName: kReleaseMode ? null : 'Props')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "props",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/quote-constant.html",
                    "desc": "<p>Represents the logical \"Quote\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey quote = LogicalKeyboardKey(0x00000000027, keyLabel: r\"'\", debugName: kReleaseMode ? null : 'Quote')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "quote",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/redo-constant.html",
                    "desc": "<p>Represents the logical \"Redo\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey redo = LogicalKeyboardKey(0x001000c0279, debugName: kReleaseMode ? null : 'Redo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "redo",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/resume-constant.html",
                    "desc": "<p>Represents the logical \"Resume\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey resume = LogicalKeyboardKey(0x00100000015, debugName: kReleaseMode ? null : 'Resume')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "resume",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/save-constant.html",
                    "desc": "<p>Represents the logical \"Save\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey save = LogicalKeyboardKey(0x001000c0207, debugName: kReleaseMode ? null : 'Save')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "save",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/scrollLock-constant.html",
                    "desc": "<p>Represents the logical \"Scroll Lock\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey scrollLock = LogicalKeyboardKey(0x00100070047, debugName: kReleaseMode ? null : 'Scroll Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollLock",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/select-constant.html",
                    "desc": "<p>Represents the logical \"Select\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey select = LogicalKeyboardKey(0x00100070077, debugName: kReleaseMode ? null : 'Select')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "select",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/selectTask-constant.html",
                    "desc": "<p>Represents the logical \"Select Task\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey selectTask = LogicalKeyboardKey(0x001000c01a2, debugName: kReleaseMode ? null : 'Select Task')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "selectTask",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/semicolon-constant.html",
                    "desc": "<p>Represents the logical \"Semicolon\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey semicolon = LogicalKeyboardKey(0x0000000003b, keyLabel: r';', debugName: kReleaseMode ? null : 'Semicolon')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "semicolon",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/shiftLeft-constant.html",
                    "desc": "<p>Represents the logical \"Shift Left\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey shiftLeft = LogicalKeyboardKey(0x001000700e1, debugName: kReleaseMode ? null : 'Shift Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "shiftLeft",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/shiftRight-constant.html",
                    "desc": "<p>Represents the logical \"Shift Right\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey shiftRight = LogicalKeyboardKey(0x001000700e5, debugName: kReleaseMode ? null : 'Shift Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "shiftRight",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/slash-constant.html",
                    "desc": "<p>Represents the logical \"Slash\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey slash = LogicalKeyboardKey(0x0000000002f, keyLabel: r'\/', debugName: kReleaseMode ? null : 'Slash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "slash",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/sleep-constant.html",
                    "desc": "<p>Represents the logical \"Sleep\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey sleep = LogicalKeyboardKey(0x00100010082, debugName: kReleaseMode ? null : 'Sleep')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sleep",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/space-constant.html",
                    "desc": "<p>Represents the logical \"Space\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey space = LogicalKeyboardKey(0x00000000020, keyLabel: r' ', debugName: kReleaseMode ? null : 'Space')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "space",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/speechInputToggle-constant.html",
                    "desc": "<p>Represents the logical \"Speech Input Toggle\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey speechInputToggle = LogicalKeyboardKey(0x001000c00cf, debugName: kReleaseMode ? null : 'Speech Input Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "speechInputToggle",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/spellCheck-constant.html",
                    "desc": "<p>Represents the logical \"Spell Check\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey spellCheck = LogicalKeyboardKey(0x001000c01ab, debugName: kReleaseMode ? null : 'Spell Check')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "spellCheck",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/superKey-constant.html",
                    "desc": "<p>Represents the logical \"Super Key\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey superKey = LogicalKeyboardKey(0x00100000011, debugName: kReleaseMode ? null : 'Super Key')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "superKey",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/suspend-constant.html",
                    "desc": "<p>Represents the logical \"Suspend\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey suspend = LogicalKeyboardKey(0x00100000014, debugName: kReleaseMode ? null : 'Suspend')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "suspend",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/tab-constant.html",
                    "desc": "<p>Represents the logical \"Tab\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey tab = LogicalKeyboardKey(0x0010007002b, debugName: kReleaseMode ? null : 'Tab')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "tab",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/turbo-constant.html",
                    "desc": "<p>Represents the logical \"Turbo\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey turbo = LogicalKeyboardKey(0x00100000016, debugName: kReleaseMode ? null : 'Turbo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "turbo",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/undo-constant.html",
                    "desc": "<p>Represents the logical \"Undo\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey undo = LogicalKeyboardKey(0x0010007007a, debugName: kReleaseMode ? null : 'Undo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "undo",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/unicodePlane-constant.html",
                    "desc": "<p>The code prefix for keys which have a Unicode representation.<\/p>\n<p>This is used by platform-specific code to generate Flutter key codes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unicodePlane = 0x00000000000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unicodePlane",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/usbErrorRollOver-constant.html",
                    "desc": "<p>Represents the logical \"Usb Error Roll Over\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey usbErrorRollOver = LogicalKeyboardKey(0x00100070001, debugName: kReleaseMode ? null : 'Usb Error Roll Over')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbErrorRollOver",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/usbErrorUndefined-constant.html",
                    "desc": "<p>Represents the logical \"Usb Error Undefined\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey usbErrorUndefined = LogicalKeyboardKey(0x00100070003, debugName: kReleaseMode ? null : 'Usb Error Undefined')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbErrorUndefined",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/usbPostFail-constant.html",
                    "desc": "<p>Represents the logical \"Usb Post Fail\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey usbPostFail = LogicalKeyboardKey(0x00100070002, debugName: kReleaseMode ? null : 'Usb Post Fail')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbPostFail",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/usbReserved-constant.html",
                    "desc": "<p>Represents the logical \"Usb Reserved\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey usbReserved = LogicalKeyboardKey(0x00100070000, debugName: kReleaseMode ? null : 'Usb Reserved')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbReserved",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/valueMask-constant.html",
                    "desc": "<p>Mask for the 32-bit value portion of the key code.<\/p>\n<p>This is used by\nplatform-specific code to generate Flutter key codes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int valueMask = 0x000FFFFFFFF\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "valueMask",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/wakeUp-constant.html",
                    "desc": "<p>Represents the logical \"Wake Up\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey wakeUp = LogicalKeyboardKey(0x00100010083, debugName: kReleaseMode ? null : 'Wake Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "wakeUp",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/zoomIn-constant.html",
                    "desc": "<p>Represents the logical \"Zoom In\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey zoomIn = LogicalKeyboardKey(0x001000c022d, debugName: kReleaseMode ? null : 'Zoom In')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomIn",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/zoomOut-constant.html",
                    "desc": "<p>Represents the logical \"Zoom Out\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey zoomOut = LogicalKeyboardKey(0x001000c022e, debugName: kReleaseMode ? null : 'Zoom Out')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomOut",
                    "memberOf": "services.LogicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/LogicalKeyboardKey\/zoomToggle-constant.html",
                    "desc": "<p>Represents the logical \"Zoom Toggle\" key on the keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LogicalKeyboardKey zoomToggle = LogicalKeyboardKey(0x001000c0232, debugName: kReleaseMode ? null : 'Zoom Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomToggle",
                    "memberOf": "services.LogicalKeyboardKey"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/LogicalKeyboardKey-class.html",
            "desc": "<p>A class with static values that describe the keys that are returned from\n<a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>.<\/p>\n<p>These represent <em>logical<\/em> keys, which are keys which are interpreted in the\ncontext of any modifiers, modes, or keyboard layouts which may be in effect.<\/p>\n<p>This is contrast to <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>, which represents a physical key\nin a particular location on the keyboard, without regard for the modifier\nstate, mode, or keyboard layout.<\/p>\n<p>As an example, if you wanted to implement an app where the \"Q\" key \"quit\"\nsomething, you'd want to look at the logical key to detect this, since you\nwould like to have it match the key with \"Q\" on it, instead of always\nlooking for \"the key next next to the TAB key\", since on a French keyboard,\nthe key next to the TAB key has an \"A\" on it.<\/p>\n<p>Conversely, if you wanted a game where the key next to the CAPS LOCK (the\n\"A\" key on a QWERTY keyboard) moved the player to the left, you'd want to\nlook at the physical key to make sure that regardless of the character the\nkey produces, you got the key that is in that location on the keyboard.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example shows how to detect if the user has selected the logical \"Q\"\nkey.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/foundation.dart';\nimport 'package:flutter\/services.dart';\n\n\/\/ ...\n\n\/\/ The node used to request the keyboard focus.\nfinal FocusNode _focusNode = FocusNode();\n\/\/ The message to display.\nString _message;\n\n\/\/ Focus nodes need to be disposed.\n@override\nvoid dispose() {\n  _focusNode.dispose();\n  super.dispose();\n}\n\n\/\/ Handles the key events from the RawKeyboardListener and update the\n\/\/ _message.\nvoid _handleKeyEvent(RawKeyEvent event) {\n  setState(() {\n    if (event.logicalKey == LogicalKeyboardKey.keyQ) {\n      _message = 'Pressed the \"Q\" key!';\n    } else {\n      if (kReleaseMode) {\n        _message = 'Not a Q: Key label is \"${event.logicalKey.keyLabel ?? '&lt;none&gt;'}\"';\n      } else {\n        \/\/ This will only print useful information in debug mode.\n        _message = 'Not a Q: Pressed ${event.logicalKey.debugName}';\n      }\n    }\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  final TextTheme textTheme = Theme.of(context).textTheme;\n  return Container(\n    color: Colors.white,\n    alignment: Alignment.center,\n    child: DefaultTextStyle(\n      style: textTheme.display1,\n      child: RawKeyboardListener(\n        focusNode: _focusNode,\n        onKey: _handleKeyEvent,\n        child: AnimatedBuilder(\n          animation: _focusNode,\n          builder: (BuildContext context, Widget child) {\n            if (!_focusNode.hasFocus) {\n              return GestureDetector(\n                onTap: () {\n                  FocusScope.of(context).requestFocus(_focusNode);\n                },\n                child: Text('Tap to focus'),\n              );\n            }\n            return Text(_message ?? 'Press a key');\n          },\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=services.LogicalKeyboardKey.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for services.LogicalKeyboardKey.1\n\n\/\/ This example shows how to detect if the user has selected the logical \"Q\"\n\/\/ key.\n\nimport 'package:flutter\/material.dart';\n\nimport 'package:flutter\/foundation.dart';\nimport 'package:flutter\/services.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  \/\/ The node used to request the keyboard focus.\n  final FocusNode _focusNode = FocusNode();\n\/\/ The message to display.\n  String _message;\n\n\/\/ Focus nodes need to be disposed.\n  @override\n  void dispose() {\n    _focusNode.dispose();\n    super.dispose();\n  }\n\n\/\/ Handles the key events from the RawKeyboardListener and update the\n\/\/ _message.\n  void _handleKeyEvent(RawKeyEvent event) {\n    setState(() {\n      if (event.logicalKey == LogicalKeyboardKey.keyQ) {\n        _message = 'Pressed the \"Q\" key!';\n      } else {\n        if (kReleaseMode) {\n          _message =\n              'Not a Q: Key label is \"${event.logicalKey.keyLabel ?? '&lt;none&gt;'}\"';\n        } else {\n          \/\/ This will only print useful information in debug mode.\n          _message = 'Not a Q: Pressed ${event.logicalKey.debugName}';\n        }\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final TextTheme textTheme = Theme.of(context).textTheme;\n    return Container(\n      color: Colors.white,\n      alignment: Alignment.center,\n      child: DefaultTextStyle(\n        style: textTheme.display1,\n        child: RawKeyboardListener(\n          focusNode: _focusNode,\n          onKey: _handleKeyEvent,\n          child: AnimatedBuilder(\n            animation: _focusNode,\n            builder: (BuildContext context, Widget child) {\n              if (!_focusNode.hasFocus) {\n                return GestureDetector(\n                  onTap: () {\n                    FocusScope.of(context).requestFocus(_focusNode);\n                  },\n                  child: Text('Tap to focus'),\n                );\n              }\n              return Text(_message ?? 'Press a key');\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\nSee also:<ul>\n<li>\n<a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a>, the keyboard event object received by widgets that listen\nto keyboard events.<\/li>\n<li>\n<a href=\"widgets\/RawKeyboardListener-class.html\">RawKeyboardListener<\/a>, a widget used to listen to and supply handlers for\nkeyboard events.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LogicalKeyboardKey"
        },
        {
            "name": "services.MessageCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "MessageCodec",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.MessageCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/MessageCodec\/MessageCodec.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodeMessage",
                    "type": "",
                    "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MessageCodec\/decodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T decodeMessage(ByteData message);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "encodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MessageCodec\/encodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteData encodeMessage(T message);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/MessageCodec-class.html",
            "desc": "<p>A message encoding\/decoding mechanism.<\/p>\n<p>Both operations throw an exception, if conversion fails. Such situations\nshould be treated as programming errors.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a>, which use <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a>s for communication\nbetween Flutter and platform plugins.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MessageCodec"
        },
        {
            "name": "services.MethodCall",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "MethodCall",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MethodCall-class.html\">MethodCall<\/a> representing the invocation of <code>method<\/code> with the\nspecified <code>arguments<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCall",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/MethodCall\/MethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MethodCall(this.method, [this.arguments])\n  : assert(method != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCall",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/MethodCall\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($method, $arguments)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "arguments",
                    "type": "",
                    "types": [],
                    "desc": "<p>The arguments for the method.<\/p>\n<p>Must be a valid value for the <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> used.<\/p>\n        ",
                    "memberOf": "services.MethodCall",
                    "isConstant": false,
                    "href": "services\/MethodCall\/arguments.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final dynamic arguments\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the method to be called.<\/p>\n        ",
                    "memberOf": "services.MethodCall",
                    "isConstant": false,
                    "href": "services\/MethodCall\/method.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String method\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/MethodCall-class.html",
            "desc": "<p>An command object representing the invocation of a named method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MethodCall"
        },
        {
            "name": "services.MethodChannel",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "MethodChannel",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> with the specified <code>name<\/code>.<\/p>\n<p>The <code>codec<\/code> used will be <a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>, unless otherwise\nspecified.<\/p>\n<p>Neither <code>name<\/code> nor <code>codec<\/code> may be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codec",
                            "type": "services.MethodCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/MethodChannel\/MethodChannel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MethodChannel(this.name, [this.codec = const StandardMethodCodec()]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "invokeListMethod",
                    "type": "dart:async.Future<dart:core.List>",
                    "desc": "<p>An implementation of <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed lists.<\/p>\n<p>Dart generics are reified, meaning that an untyped List<dynamic>\ncannot masquerade as a List<t>. Since invokeMethod can only return\ndynamic maps, we instead create a new typed list using <a href=\"dart-core\/List\/cast.html\">List.cast<\/a>.<\/t><\/dynamic><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodChannel\/invokeListMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;T&gt;&gt; invokeListMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  final List&lt;dynamic&gt; result = await invokeMethod&lt;List&lt;dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;T&gt;();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List"
                    ]
                },
                {
                    "name": "invokeMapMethod",
                    "type": "dart:async.Future<dart:core.Map>",
                    "desc": "<p>An implementation of <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed maps.<\/p>\n<p>Dart generics are reified, meaning that an untyped Map&lt;dynamic, dynamic&gt;\ncannot masquerade as a Map&lt;K, V&gt;. Since invokeMethod can only return\ndynamic maps, we instead create a new typed map using <a href=\"dart-core\/Map\/cast.html\">Map.cast<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodChannel\/invokeMapMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Map&lt;K, V&gt;&gt; invokeMapMethod&lt;K, V&gt;(String method, [ dynamic arguments ]) async {\n  final Map&lt;dynamic, dynamic&gt; result = await invokeMethod&lt;Map&lt;dynamic, dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;K, V&gt;();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.Map"
                    ]
                },
                {
                    "name": "invokeMethod",
                    "type": "dart:async.Future",
                    "desc": "<p>Invokes a <code>method<\/code> on this channel with the specified <code>arguments<\/code>.<\/p>\n<p>The static type of <code>arguments<\/code> is <code>dynamic<\/code>, but only values supported by\nthe <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this channel can be used. The same applies to the returned\nresult. The values supported by the default codec and their platform-specific\ncounterparts are documented with <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>.<\/p>\n<p>The generic argument <code>T<\/code> of the method can be inferred by the surrounding\ncontext, or provided explicitly. If it does not match the returned type of\nthe channel, a <a href=\"dart-core\/TypeError-class.html\">TypeError<\/a> will be thrown at runtime. <code>T<\/code> cannot be a class\nwith generics other than <code>dynamic<\/code>. For example, <code>Map&lt;String, String&gt;<\/code>\nis not supported but <code>Map&lt;dynamic, dynamic&gt;<\/code> or <code>Map<\/code> is.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which completes to one of the following:<\/p>\n<ul>\n<li>a result (possibly null), on successful invocation;<\/li>\n<li>a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if the invocation failed in the platform plugin;<\/li>\n<li>a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, if the method has not been implemented by a\nplatform plugin.<\/li>\n<\/ul>\n<p>The following code snippets demonstrate how to invoke platform methods\nin Dart using a MethodChannel and how to implement those methods in Java\n(for Android) and Objective-C (for iOS).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe code might be packaged up as a musical plugin, see\n<a href=\"https:\/\/flutter.io\/developing-packages\/\">flutter.io\/developing-packages\/<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Music {\n  static const MethodChannel _channel = MethodChannel('music');\n\n  static Future&lt;bool&gt; isLicensed() async {\n    \/\/ invokeMethod returns a Future&lt;T&gt; which can be inferred as bool\n    \/\/ in this context.\n    return _channel.invokeMethod('isLicensed');\n  }\n\n  static Future&lt;List&lt;Song&gt;&gt; songs() async {\n    \/\/ invokeMethod here returns a Future&lt;dynamic&gt; that completes to a\n    \/\/ List&lt;dynamic&gt; with Map&lt;dynamic, dynamic&gt; entries. Post-processing\n    \/\/ code thus cannot assume e.g. List&lt;Map&lt;String, String&gt;&gt; even though\n    \/\/ the actual values involved would support such a typed container.\n    \/\/ The correct type cannot be inferred with any value of `T`.\n    final List&lt;dynamic&gt; songs = await _channel.invokeMethod('getSongs');\n    return songs.map(Song.fromJson).toList();\n  }\n\n  static Future&lt;void&gt; play(Song song, double volume) async {\n    \/\/ Errors occurring on the platform side cause invokeMethod to throw\n    \/\/ PlatformExceptions.\n    try {\n      return _channel.invokeMethod('play', &lt;String, dynamic&gt;{\n        'song': song.id,\n        'volume': volume,\n      });\n    } on PlatformException catch (e) {\n      throw 'Unable to play ${song.title}: ${e.message}';\n    }\n  }\n}\n\nclass Song {\n  Song(this.id, this.title, this.artist);\n\n  final String id;\n  final String title;\n  final String artist;\n\n  static Song fromJson(dynamic json) {\n    return Song(json['id'], json['title'], json['artist']);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nJava (for Android):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-java\" id=\"sample-code\"><code class=\"language-java\">\/\/ Assumes existence of an Android MusicApi.\npublic class MusicPlugin implements MethodCallHandler {\n  @Override\n  public void onMethodCall(MethodCall call, Result result) {\n    switch (call.method) {\n      case \"isLicensed\":\n        result.success(MusicApi.checkLicense());\n        break;\n      case \"getSongs\":\n        final List&lt;MusicApi.Track&gt; tracks = MusicApi.getTracks();\n        final List&lt;Object&gt; json = ArrayList&lt;&gt;(tracks.size());\n        for (MusicApi.Track track : tracks) {\n          json.add(track.toJson()); \/\/ Map&lt;String, Object&gt; entries\n        }\n        result.success(json);\n        break;\n      case \"play\":\n        final String song = call.argument(\"song\");\n        final double volume = call.argument(\"volume\");\n        try {\n          MusicApi.playSongAtVolume(song, volume);\n          result.success(null);\n        } catch (MusicalException e) {\n          result.error(\"playError\", e.getMessage(), null);\n        }\n        break;\n      default:\n        result.notImplemented();\n    }\n  }\n  \/\/ Other methods elided.\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nObjective-C (for iOS):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-objectivec\" id=\"sample-code\"><code class=\"language-objectivec\">@interface MusicPlugin : NSObject&lt;FlutterPlugin&gt;\n@end\n\n\/\/ Assumes existence of an iOS Broadway Play Api.\n@implementation MusicPlugin\n- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result {\n  if ([@\"isLicensed\" isEqualToString:call.method]) {\n    result([NSNumber numberWithBool:[BWPlayApi isLicensed]]);\n  } else if ([@\"getSongs\" isEqualToString:call.method]) {\n    NSArray* items = [BWPlayApi items];\n    NSMutableArray* json = [NSMutableArray arrayWithCapacity:items.count];\n    for (BWPlayItem* item in items) {\n      [json addObject:@{@\"id\":item.itemId, @\"title\":item.name, @\"artist\":item.artist}];\n    }\n    result(json);\n  } else if ([@\"play\" isEqualToString:call.method]) {\n    NSString* itemId = call.arguments[@\"song\"];\n    NSNumber* volume = call.arguments[@\"volume\"];\n    NSError* error = nil;\n    BOOL success = [BWPlayApi playItem:itemId volume:volume.doubleValue error:&amp;error];\n    if (success) {\n      result(nil);\n    } else {\n      result([FlutterError errorWithCode:[NSString stringWithFormat:@\"Error %ld\", error.code]\n                                 message:error.domain\n                                 details:error.localizedDescription]);\n    }\n  } else {\n    result(FlutterMethodNotImplemented);\n  }\n}\n\/\/ Other methods elided.\n@end<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/MethodChannel\/invokeListMethod.html\">invokeListMethod<\/a>, for automatically returning typed lists.<\/li>\n<li>\n<a href=\"services\/MethodChannel\/invokeMapMethod.html\">invokeMapMethod<\/a>, for automatically returning typed maps.<\/li>\n<li>\n<a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/JSONMethodCodec-class.html\">JSONMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"https:\/\/docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html\">docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html<\/a>\nfor how to access method call arguments on Android.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodChannel\/invokeMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@optionalTypeArgs\nFuture&lt;T&gt; invokeMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  assert(method != null);\n  final ByteData result = await BinaryMessages.send(\n    name,\n    codec.encodeMethodCall(MethodCall(method, arguments)),\n  );\n  if (result == null) {\n    throw MissingPluginException('No implementation found for method $method on channel $name');\n  }\n  final T typedResult = codec.decodeEnvelope(result);\n  return typedResult;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setMethodCallHandler",
                    "type": "",
                    "desc": "<p>Sets a callback for receiving method calls on this channel.<\/p>\n<p>The given callback will replace the currently registered callback for this\nchannel, if any. To remove the handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>If the future returned by the handler completes with a result, that value\nis sent back to the platform plugin caller wrapped in a success envelope\nas defined by the <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this channel. If the future completes with\na <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, the fields of that exception will be used to\npopulate an error envelope which is sent back instead. If the future\ncompletes with a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, an empty reply is sent\nsimilarly to what happens if no method call handler has been set.\nAny other exception results in an error envelope being sent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodChannel\/setMethodCallHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMethodCallHandler(Future&lt;dynamic&gt; handler(MethodCall call)) {\n  BinaryMessages.setMessageHandler(\n    name,\n    handler == null ? null : (ByteData message) =&gt; _handleAsMethodCall(message, handler),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setMockMethodCallHandler",
                    "type": "",
                    "desc": "<p>Sets a mock callback for intercepting method invocations on this channel.<\/p>\n<p>The given callback will replace the currently registered mock callback for\nthis channel, if any. To remove the mock handler, pass null as the\n<code>handler<\/code> argument.<\/p>\n<p>Later calls to <a href=\"services\/MethodChannel\/invokeMethod.html\">invokeMethod<\/a> will result in a successful result,\na <a href=\"services\/PlatformException-class.html\">PlatformException<\/a> or a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, determined by how\nthe future returned by the mock callback completes. The <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this\nchannel is used to encode and decode values and errors.<\/p>\n<p>This is intended for testing. Method calls intercepted in this manner are\nnot sent to platform plugins.<\/p>\n<p>The provided <code>handler<\/code> must return a <code>Future<\/code> that completes with the\nreturn value of the call. The value will be encoded using\n<a href=\"services\/MethodCodec\/encodeSuccessEnvelope.html\">MethodCodec.encodeSuccessEnvelope<\/a>, to act as if platform plugin had\nreturned that value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodChannel\/setMockMethodCallHandler.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setMockMethodCallHandler(Future&lt;dynamic&gt; handler(MethodCall call)) {\n  BinaryMessages.setMockMessageHandler(\n    name,\n    handler == null ? null : (ByteData message) =&gt; _handleAsMethodCall(message, handler),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "codec",
                    "type": "services.MethodCodec",
                    "types": [],
                    "desc": "<p>The message codec used by this channel, not null.<\/p>\n        ",
                    "memberOf": "services.MethodChannel",
                    "isConstant": false,
                    "href": "services\/MethodChannel\/codec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MethodCodec codec\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The logical channel on which communication happens, not null.<\/p>\n        ",
                    "memberOf": "services.MethodChannel",
                    "isConstant": false,
                    "href": "services\/MethodChannel\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "services.OptionalMethodChannel"
            ],
            "realImplementors": [
                "services.OptionalMethodChannel"
            ],
            "cn": [],
            "href": "services\/MethodChannel-class.html",
            "desc": "<p>A named channel for communicating with platform plugins using asynchronous\nmethod calls.<\/p>\n<p>Method calls are encoded into binary before being sent, and binary results\nreceived are decoded into Dart values. The <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> used must be\ncompatible with the one used by the platform plugin. This can be achieved\nby creating a method channel counterpart of this channel on the\nplatform side. The Dart type of arguments and results is <code>dynamic<\/code>,\nbut only values supported by the specified <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> can be used.\nThe use of unsupported values should be considered programming errors, and\nwill result in exceptions being thrown. The null value is supported\nfor all codecs.<\/p>\n<p>The logical identity of the channel is given by its name. Identically named\nchannels will interfere with each other's communication.<\/p>\n<p>See: <a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MethodChannel"
        },
        {
            "name": "services.MethodCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "MethodCodec",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/MethodCodec\/MethodCodec.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decodeEnvelope",
                    "type": "",
                    "desc": "<p>Decodes the specified result <code>envelope<\/code> from binary.<\/p>\n<p>Throws <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if <code>envelope<\/code> represents an error, otherwise\nreturns the enveloped result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "envelope",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodCodec\/decodeEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic decodeEnvelope(ByteData envelope);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "decodeMethodCall",
                    "type": "services.MethodCall",
                    "desc": "<p>Decodes the specified <code>methodCall<\/code> from binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "methodCall",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodCodec\/decodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MethodCall decodeMethodCall(ByteData methodCall);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeErrorEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes an error result into a binary envelope.<\/p>\n<p>The specified error <code>code<\/code>, human-readable error <code>message<\/code>, and error\n<code>details<\/code> correspond to the fields of <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "code",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "details",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodCodec\/encodeErrorEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteData encodeErrorEnvelope({ @required String code, String message, dynamic details });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeMethodCall",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>methodCall<\/code> into binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "methodCall",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodCodec\/encodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteData encodeMethodCall(MethodCall methodCall);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeSuccessEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes a successful <code>result<\/code> into a binary envelope.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "result",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/MethodCodec\/encodeSuccessEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteData encodeSuccessEnvelope(dynamic result);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/MethodCodec-class.html",
            "desc": "<p>A codec for method calls and enveloped results.<\/p>\n<p>All operations throw an exception, if conversion fails.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a>, which use <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a>s for communication\nbetween Flutter and platform plugins.<\/li>\n<li>\n<a href=\"services\/EventChannel-class.html\">EventChannel<\/a>, which use <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a>s for communication\nbetween Flutter and platform plugins.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MethodCodec"
        },
        {
            "name": "services.MissingPluginException",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "MissingPluginException",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a> with an optional human-readable\nerror message.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MissingPluginException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/MissingPluginException\/MissingPluginException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MissingPluginException([this.message]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.MissingPluginException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/MissingPluginException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'MissingPluginException($message)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable error message, possibly null.<\/p>\n        ",
                    "memberOf": "services.MissingPluginException",
                    "isConstant": false,
                    "href": "services\/MissingPluginException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/MissingPluginException-class.html",
            "desc": "<p>Thrown to indicate that a platform interaction failed to find a handling\nplugin.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">MethodChannel.invokeMethod<\/a>, which completes the returned future\nwith a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, if no plugin handler for the method call\nwas found.<\/li>\n<li>\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>, which completes the returned future\nwith null, if no plugin handler for the method call was found.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MissingPluginException"
        },
        {
            "type": "",
            "name": "services.ModifierKey",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ModifierKey",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/ModifierKey\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/ModifierKey-class.html",
            "desc": "<p>An enum describing the type of modifier key that is being pressed.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyEventData\/isModifierPressed.html\">RawKeyEventData.isModifierPressed<\/a>, which accepts this enum as an\nargument.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "ModifierKey"
        },
        {
            "name": "services.NetworkAssetBundle",
            "extends": [
                "services.AssetBundle",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "NetworkAssetBundle",
                    "type": "",
                    "desc": "<p>Creates an network asset bundle that resolves asset keys as URLs relative\nto the given base URL.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.NetworkAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "baseUrl",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/NetworkAssetBundle\/NetworkAssetBundle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NetworkAssetBundle(Uri baseUrl)\n  : _baseUrl = baseUrl,\n    _httpClient = HttpClient();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "dart:async.Future<dart:typed_data.ByteData>",
                    "desc": "<p>Retrieve a binary resource from the asset bundle as a data stream.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.NetworkAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/NetworkAssetBundle\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;ByteData&gt; load(String key) async {\n  final HttpClientRequest request = await _httpClient.getUrl(_urlFromKey(key));\n  final HttpClientResponse response = await request.close();\n  if (response.statusCode != HttpStatus.ok)\n    throw FlutterError(\n      'Unable to load asset: $key\\n'\n      'HTTP status code: ${response.statusCode}'\n    );\n  final Uint8List bytes = await consolidateHttpClientResponseBytes(response);\n  return bytes.buffer.asByteData();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:typed_data.ByteData"
                    ]
                },
                {
                    "name": "loadStructuredData",
                    "type": "dart:async.Future",
                    "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>The result is not cached. The parser is run each time the resource is\nfetched.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.NetworkAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/NetworkAssetBundle\/loadStructuredData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value)) async {\n  assert(key != null);\n  assert(parser != null);\n  return parser(await loadString(key));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.NetworkAssetBundle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/NetworkAssetBundle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}($_baseUrl)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/NetworkAssetBundle-class.html",
            "desc": "<p>An <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> that loads resources over the network.<\/p>\n<p>This asset bundle does not cache any resources, though the underlying\nnetwork stack may implement some level of caching itself.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "NetworkAssetBundle"
        },
        {
            "name": "services.OptionalMethodChannel",
            "extends": [
                "services.MethodChannel",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "OptionalMethodChannel",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> that ignores missing platform plugins.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.OptionalMethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codec",
                            "type": "services.MethodCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/OptionalMethodChannel\/OptionalMethodChannel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OptionalMethodChannel(String name, [MethodCodec codec = const StandardMethodCodec()])\n  : super(name, codec);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "invokeListMethod",
                    "type": "dart:async.Future<dart:core.List>",
                    "desc": "<p>An implementation of <a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed lists.<\/p>\n<p>Dart generics are reified, meaning that an untyped List<dynamic>\ncannot masquerade as a List<t>. Since invokeMethod can only return\ndynamic maps, we instead create a new typed list using <a href=\"dart-core\/List\/cast.html\">List.cast<\/a>.<\/t><\/dynamic><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.OptionalMethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/OptionalMethodChannel\/invokeListMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;List&lt;T&gt;&gt; invokeListMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  final List&lt;dynamic&gt; result = await invokeMethod&lt;List&lt;dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;T&gt;();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List"
                    ]
                },
                {
                    "name": "invokeMapMethod",
                    "type": "dart:async.Future<dart:core.Map>",
                    "desc": "<p>An implementation of <a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">invokeMethod<\/a> that can return typed maps.<\/p>\n<p>Dart generics are reified, meaning that an untyped Map&lt;dynamic, dynamic&gt;\ncannot masquerade as a Map&lt;K, V&gt;. Since invokeMethod can only return\ndynamic maps, we instead create a new typed map using <a href=\"dart-core\/Map\/cast.html\">Map.cast<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">invokeMethod<\/a>, which this call delegates to.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.OptionalMethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/OptionalMethodChannel\/invokeMapMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Map&lt;K, V&gt;&gt; invokeMapMethod&lt;K, V&gt;(String method, [ dynamic arguments ]) async {\n  final Map&lt;dynamic, dynamic&gt; result = await invokeMethod&lt;Map&lt;dynamic, dynamic&gt;&gt;(method, arguments);\n  return result.cast&lt;K, V&gt;();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.Map"
                    ]
                },
                {
                    "name": "invokeMethod",
                    "type": "dart:async.Future",
                    "desc": "<p>Invokes a <code>method<\/code> on this channel with the specified <code>arguments<\/code>.<\/p>\n<p>The static type of <code>arguments<\/code> is <code>dynamic<\/code>, but only values supported by\nthe <a href=\"services\/MethodChannel\/codec.html\">codec<\/a> of this channel can be used. The same applies to the returned\nresult. The values supported by the default codec and their platform-specific\ncounterparts are documented with <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>.<\/p>\n<p>The generic argument <code>T<\/code> of the method can be inferred by the surrounding\ncontext, or provided explicitly. If it does not match the returned type of\nthe channel, a <a href=\"dart-core\/TypeError-class.html\">TypeError<\/a> will be thrown at runtime. <code>T<\/code> cannot be a class\nwith generics other than <code>dynamic<\/code>. For example, <code>Map&lt;String, String&gt;<\/code>\nis not supported but <code>Map&lt;dynamic, dynamic&gt;<\/code> or <code>Map<\/code> is.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which completes to one of the following:<\/p>\n<ul>\n<li>a result (possibly null), on successful invocation;<\/li>\n<li>a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if the invocation failed in the platform plugin;<\/li>\n<li>a <a href=\"services\/MissingPluginException-class.html\">MissingPluginException<\/a>, if the method has not been implemented by a\nplatform plugin.<\/li>\n<\/ul>\n<p>The following code snippets demonstrate how to invoke platform methods\nin Dart using a MethodChannel and how to implement those methods in Java\n(for Android) and Objective-C (for iOS).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe code might be packaged up as a musical plugin, see\n<a href=\"https:\/\/flutter.io\/developing-packages\/\">flutter.io\/developing-packages\/<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Music {\n  static const MethodChannel _channel = MethodChannel('music');\n\n  static Future&lt;bool&gt; isLicensed() async {\n    \/\/ invokeMethod returns a Future&lt;T&gt; which can be inferred as bool\n    \/\/ in this context.\n    return _channel.invokeMethod('isLicensed');\n  }\n\n  static Future&lt;List&lt;Song&gt;&gt; songs() async {\n    \/\/ invokeMethod here returns a Future&lt;dynamic&gt; that completes to a\n    \/\/ List&lt;dynamic&gt; with Map&lt;dynamic, dynamic&gt; entries. Post-processing\n    \/\/ code thus cannot assume e.g. List&lt;Map&lt;String, String&gt;&gt; even though\n    \/\/ the actual values involved would support such a typed container.\n    \/\/ The correct type cannot be inferred with any value of `T`.\n    final List&lt;dynamic&gt; songs = await _channel.invokeMethod('getSongs');\n    return songs.map(Song.fromJson).toList();\n  }\n\n  static Future&lt;void&gt; play(Song song, double volume) async {\n    \/\/ Errors occurring on the platform side cause invokeMethod to throw\n    \/\/ PlatformExceptions.\n    try {\n      return _channel.invokeMethod('play', &lt;String, dynamic&gt;{\n        'song': song.id,\n        'volume': volume,\n      });\n    } on PlatformException catch (e) {\n      throw 'Unable to play ${song.title}: ${e.message}';\n    }\n  }\n}\n\nclass Song {\n  Song(this.id, this.title, this.artist);\n\n  final String id;\n  final String title;\n  final String artist;\n\n  static Song fromJson(dynamic json) {\n    return Song(json['id'], json['title'], json['artist']);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nJava (for Android):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-java\" id=\"sample-code\"><code class=\"language-java\">\/\/ Assumes existence of an Android MusicApi.\npublic class MusicPlugin implements MethodCallHandler {\n  @Override\n  public void onMethodCall(MethodCall call, Result result) {\n    switch (call.method) {\n      case \"isLicensed\":\n        result.success(MusicApi.checkLicense());\n        break;\n      case \"getSongs\":\n        final List&lt;MusicApi.Track&gt; tracks = MusicApi.getTracks();\n        final List&lt;Object&gt; json = ArrayList&lt;&gt;(tracks.size());\n        for (MusicApi.Track track : tracks) {\n          json.add(track.toJson()); \/\/ Map&lt;String, Object&gt; entries\n        }\n        result.success(json);\n        break;\n      case \"play\":\n        final String song = call.argument(\"song\");\n        final double volume = call.argument(\"volume\");\n        try {\n          MusicApi.playSongAtVolume(song, volume);\n          result.success(null);\n        } catch (MusicalException e) {\n          result.error(\"playError\", e.getMessage(), null);\n        }\n        break;\n      default:\n        result.notImplemented();\n    }\n  }\n  \/\/ Other methods elided.\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nObjective-C (for iOS):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-objectivec\" id=\"sample-code\"><code class=\"language-objectivec\">@interface MusicPlugin : NSObject&lt;FlutterPlugin&gt;\n@end\n\n\/\/ Assumes existence of an iOS Broadway Play Api.\n@implementation MusicPlugin\n- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result {\n  if ([@\"isLicensed\" isEqualToString:call.method]) {\n    result([NSNumber numberWithBool:[BWPlayApi isLicensed]]);\n  } else if ([@\"getSongs\" isEqualToString:call.method]) {\n    NSArray* items = [BWPlayApi items];\n    NSMutableArray* json = [NSMutableArray arrayWithCapacity:items.count];\n    for (BWPlayItem* item in items) {\n      [json addObject:@{@\"id\":item.itemId, @\"title\":item.name, @\"artist\":item.artist}];\n    }\n    result(json);\n  } else if ([@\"play\" isEqualToString:call.method]) {\n    NSString* itemId = call.arguments[@\"song\"];\n    NSNumber* volume = call.arguments[@\"volume\"];\n    NSError* error = nil;\n    BOOL success = [BWPlayApi playItem:itemId volume:volume.doubleValue error:&amp;error];\n    if (success) {\n      result(nil);\n    } else {\n      result([FlutterError errorWithCode:[NSString stringWithFormat:@\"Error %ld\", error.code]\n                                 message:error.domain\n                                 details:error.localizedDescription]);\n    }\n  } else {\n    result(FlutterMethodNotImplemented);\n  }\n}\n\/\/ Other methods elided.\n@end<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/OptionalMethodChannel\/invokeListMethod.html\">invokeListMethod<\/a>, for automatically returning typed lists.<\/li>\n<li>\n<a href=\"services\/OptionalMethodChannel\/invokeMapMethod.html\">invokeMapMethod<\/a>, for automatically returning typed maps.<\/li>\n<li>\n<a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a> which defines the payload values supported by\n<a href=\"services\/JSONMethodCodec-class.html\">JSONMethodCodec<\/a>.<\/li>\n<li>\n<a href=\"https:\/\/docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html\">docs.flutter.io\/javadoc\/io\/flutter\/plugin\/common\/MethodCall.html<\/a>\nfor how to access method call arguments on Android.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "services.OptionalMethodChannel",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/OptionalMethodChannel\/invokeMethod.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; invokeMethod&lt;T&gt;(String method, [ dynamic arguments ]) async {\n  try {\n    final T result = await super.invokeMethod&lt;T&gt;(method, arguments);\n    return result;\n  } on MissingPluginException {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/OptionalMethodChannel-class.html",
            "desc": "<p>A <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> that ignores missing platform plugins.<\/p>\n<p>When <a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">invokeMethod<\/a> fails to find the platform plugin, it returns null\ninstead of throwing an exception.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "OptionalMethodChannel"
        },
        {
            "name": "services.PhysicalKeyboardKey",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/PhysicalKeyboardKey\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PhysicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PhysicalKeyboardKey\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType) {\n    return false;\n  }\n  final PhysicalKeyboardKey typedOther = other;\n  return usbHidUsage == typedOther.usbHidUsage;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "PhysicalKeyboardKey",
                    "type": "",
                    "desc": "<p>Creates a PhysicalKeyboardKey object with an optional debug name.<\/p>\n<p>The <code>usbHidUsage<\/code> must not be null.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo save executable size, it is recommended that the <code>debugName<\/code> be null in\nrelease mode. You can do this using the <a href=\"foundation\/kReleaseMode-constant.html\">kReleaseMode<\/a> constant.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const PhysicalKeyboardKey(0x0000ffff, debugName: kReleaseMode ? null : 'Special Key')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "services.PhysicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "usbHidUsage",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugName",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/PhysicalKeyboardKey\/PhysicalKeyboardKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PhysicalKeyboardKey(this.usbHidUsage, {this.debugName})\n    : assert(usbHidUsage != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"services\/PhysicalKeyboardKey\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PhysicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PhysicalKeyboardKey\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(StringProperty('usbHidUsage', '0x${usbHidUsage.toRadixString(16).padLeft(8, '0')}', showName: true));\n  properties.add(StringProperty('debugName', debugName, showName: true, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "findKeyByCode",
                    "type": "services.PhysicalKeyboardKey",
                    "desc": "<p>Finds a known <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> that matches the given USB HID usage\ncode.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PhysicalKeyboardKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "usageCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PhysicalKeyboardKey\/findKeyByCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static PhysicalKeyboardKey findKeyByCode(int usageCode) =&gt; _knownPhysicalKeys[usageCode];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/abort-constant.html",
                    "desc": "<p>Represents the location of the \"Abort\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey abort = PhysicalKeyboardKey(0x0007009b, debugName: kReleaseMode ? null : 'Abort')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "abort",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/again-constant.html",
                    "desc": "<p>Represents the location of the \"Again\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey again = PhysicalKeyboardKey(0x00070079, debugName: kReleaseMode ? null : 'Again')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "again",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/altLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Alt Left\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey altLeft = PhysicalKeyboardKey(0x000700e2, debugName: kReleaseMode ? null : 'Alt Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "altLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/altRight-constant.html",
                    "desc": "<p>Represents the location of the \"Alt Right\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey altRight = PhysicalKeyboardKey(0x000700e6, debugName: kReleaseMode ? null : 'Alt Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "altRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/arrowDown-constant.html",
                    "desc": "<p>Represents the location of the \"Arrow Down\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey arrowDown = PhysicalKeyboardKey(0x00070051, debugName: kReleaseMode ? null : 'Arrow Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowDown",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/arrowLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Arrow Left\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey arrowLeft = PhysicalKeyboardKey(0x00070050, debugName: kReleaseMode ? null : 'Arrow Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/arrowRight-constant.html",
                    "desc": "<p>Represents the location of the \"Arrow Right\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey arrowRight = PhysicalKeyboardKey(0x0007004f, debugName: kReleaseMode ? null : 'Arrow Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/arrowUp-constant.html",
                    "desc": "<p>Represents the location of the \"Arrow Up\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey arrowUp = PhysicalKeyboardKey(0x00070052, debugName: kReleaseMode ? null : 'Arrow Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "arrowUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/audioVolumeDown-constant.html",
                    "desc": "<p>Represents the location of the \"Audio Volume Down\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey audioVolumeDown = PhysicalKeyboardKey(0x00070081, debugName: kReleaseMode ? null : 'Audio Volume Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeDown",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/audioVolumeMute-constant.html",
                    "desc": "<p>Represents the location of the \"Audio Volume Mute\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey audioVolumeMute = PhysicalKeyboardKey(0x0007007f, debugName: kReleaseMode ? null : 'Audio Volume Mute')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeMute",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/audioVolumeUp-constant.html",
                    "desc": "<p>Represents the location of the \"Audio Volume Up\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey audioVolumeUp = PhysicalKeyboardKey(0x00070080, debugName: kReleaseMode ? null : 'Audio Volume Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "audioVolumeUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/backquote-constant.html",
                    "desc": "<p>Represents the location of the \"Backquote\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey backquote = PhysicalKeyboardKey(0x00070035, debugName: kReleaseMode ? null : 'Backquote')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backquote",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/backslash-constant.html",
                    "desc": "<p>Represents the location of the \"Backslash\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey backslash = PhysicalKeyboardKey(0x00070031, debugName: kReleaseMode ? null : 'Backslash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backslash",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/backspace-constant.html",
                    "desc": "<p>Represents the location of the \"Backspace\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey backspace = PhysicalKeyboardKey(0x0007002a, debugName: kReleaseMode ? null : 'Backspace')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "backspace",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/bassBoost-constant.html",
                    "desc": "<p>Represents the location of the \"Bass Boost\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey bassBoost = PhysicalKeyboardKey(0x000c00e5, debugName: kReleaseMode ? null : 'Bass Boost')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bassBoost",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/bracketLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Bracket Left\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey bracketLeft = PhysicalKeyboardKey(0x0007002f, debugName: kReleaseMode ? null : 'Bracket Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bracketLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/bracketRight-constant.html",
                    "desc": "<p>Represents the location of the \"Bracket Right\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey bracketRight = PhysicalKeyboardKey(0x00070030, debugName: kReleaseMode ? null : 'Bracket Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bracketRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessAuto-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Auto\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessAuto = PhysicalKeyboardKey(0x000c0075, debugName: kReleaseMode ? null : 'Brightness Auto')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessAuto",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessDown-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Down\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessDown = PhysicalKeyboardKey(0x000c0070, debugName: kReleaseMode ? null : 'Brightness Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessDown",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessMaximum-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Maximum\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessMaximum = PhysicalKeyboardKey(0x000c0074, debugName: kReleaseMode ? null : 'Brightness Maximum')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessMaximum",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessMinimum-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Minimum\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessMinimum = PhysicalKeyboardKey(0x000c0073, debugName: kReleaseMode ? null : 'Brightness Minimum')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessMinimum",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessToggle-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Toggle\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessToggle = PhysicalKeyboardKey(0x000c0072, debugName: kReleaseMode ? null : 'Brightness Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessToggle",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/brightnessUp-constant.html",
                    "desc": "<p>Represents the location of the \"Brightness Up\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey brightnessUp = PhysicalKeyboardKey(0x000c006f, debugName: kReleaseMode ? null : 'Brightness Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "brightnessUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserBack-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Back\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserBack = PhysicalKeyboardKey(0x000c0224, debugName: kReleaseMode ? null : 'Browser Back')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserBack",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserFavorites-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Favorites\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserFavorites = PhysicalKeyboardKey(0x000c022a, debugName: kReleaseMode ? null : 'Browser Favorites')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserFavorites",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserForward-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Forward\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserForward = PhysicalKeyboardKey(0x000c0225, debugName: kReleaseMode ? null : 'Browser Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserForward",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserHome-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Home\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserHome = PhysicalKeyboardKey(0x000c0223, debugName: kReleaseMode ? null : 'Browser Home')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserHome",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserRefresh-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Refresh\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserRefresh = PhysicalKeyboardKey(0x000c0227, debugName: kReleaseMode ? null : 'Browser Refresh')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserRefresh",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserSearch-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Search\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserSearch = PhysicalKeyboardKey(0x000c0221, debugName: kReleaseMode ? null : 'Browser Search')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserSearch",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/browserStop-constant.html",
                    "desc": "<p>Represents the location of the \"Browser Stop\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey browserStop = PhysicalKeyboardKey(0x000c0226, debugName: kReleaseMode ? null : 'Browser Stop')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "browserStop",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/capsLock-constant.html",
                    "desc": "<p>Represents the location of the \"Caps Lock\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey capsLock = PhysicalKeyboardKey(0x00070039, debugName: kReleaseMode ? null : 'Caps Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "capsLock",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/channelDown-constant.html",
                    "desc": "<p>Represents the location of the \"Channel Down\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey channelDown = PhysicalKeyboardKey(0x000c009d, debugName: kReleaseMode ? null : 'Channel Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "channelDown",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/channelUp-constant.html",
                    "desc": "<p>Represents the location of the \"Channel Up\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey channelUp = PhysicalKeyboardKey(0x000c009c, debugName: kReleaseMode ? null : 'Channel Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "channelUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/close-constant.html",
                    "desc": "<p>Represents the location of the \"Close\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey close = PhysicalKeyboardKey(0x000c0203, debugName: kReleaseMode ? null : 'Close')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "close",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/closedCaptionToggle-constant.html",
                    "desc": "<p>Represents the location of the \"Closed Caption Toggle\" key on a\ngeneralized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey closedCaptionToggle = PhysicalKeyboardKey(0x000c0061, debugName: kReleaseMode ? null : 'Closed Caption Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "closedCaptionToggle",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/comma-constant.html",
                    "desc": "<p>Represents the location of the \"Comma\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey comma = PhysicalKeyboardKey(0x00070036, debugName: kReleaseMode ? null : 'Comma')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "comma",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/contextMenu-constant.html",
                    "desc": "<p>Represents the location of the \"Context Menu\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey contextMenu = PhysicalKeyboardKey(0x00070065, debugName: kReleaseMode ? null : 'Context Menu')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contextMenu",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/controlLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Control Left\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey controlLeft = PhysicalKeyboardKey(0x000700e0, debugName: kReleaseMode ? null : 'Control Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "controlLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/controlRight-constant.html",
                    "desc": "<p>Represents the location of the \"Control Right\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey controlRight = PhysicalKeyboardKey(0x000700e4, debugName: kReleaseMode ? null : 'Control Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "controlRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/convert-constant.html",
                    "desc": "<p>Represents the location of the \"Convert\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey convert = PhysicalKeyboardKey(0x0007008a, debugName: kReleaseMode ? null : 'Convert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "convert",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/copy-constant.html",
                    "desc": "<p>Represents the location of the \"Copy\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey copy = PhysicalKeyboardKey(0x0007007c, debugName: kReleaseMode ? null : 'Copy')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "copy",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/cut-constant.html",
                    "desc": "<p>Represents the location of the \"Cut\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey cut = PhysicalKeyboardKey(0x0007007b, debugName: kReleaseMode ? null : 'Cut')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "cut",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "name": "debugName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The debug string to print for this keyboard key, which will be null in\nrelease mode.<\/p>\n        ",
                    "memberOf": "services.PhysicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/PhysicalKeyboardKey\/debugName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/delete-constant.html",
                    "desc": "<p>Represents the location of the \"Delete\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey delete = PhysicalKeyboardKey(0x0007004c, debugName: kReleaseMode ? null : 'Delete')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "delete",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit0-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 0\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit0 = PhysicalKeyboardKey(0x00070027, debugName: kReleaseMode ? null : 'Digit 0')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit0",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit1-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 1\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit1 = PhysicalKeyboardKey(0x0007001e, debugName: kReleaseMode ? null : 'Digit 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit1",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit2-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 2\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit2 = PhysicalKeyboardKey(0x0007001f, debugName: kReleaseMode ? null : 'Digit 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit2",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit3-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 3\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit3 = PhysicalKeyboardKey(0x00070020, debugName: kReleaseMode ? null : 'Digit 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit3",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit4-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 4\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit4 = PhysicalKeyboardKey(0x00070021, debugName: kReleaseMode ? null : 'Digit 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit4",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit5-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 5\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit5 = PhysicalKeyboardKey(0x00070022, debugName: kReleaseMode ? null : 'Digit 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit5",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit6-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 6\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit6 = PhysicalKeyboardKey(0x00070023, debugName: kReleaseMode ? null : 'Digit 6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit6",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit7-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 7\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit7 = PhysicalKeyboardKey(0x00070024, debugName: kReleaseMode ? null : 'Digit 7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit7",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit8-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 8\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit8 = PhysicalKeyboardKey(0x00070025, debugName: kReleaseMode ? null : 'Digit 8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit8",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/digit9-constant.html",
                    "desc": "<p>Represents the location of the \"Digit 9\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey digit9 = PhysicalKeyboardKey(0x00070026, debugName: kReleaseMode ? null : 'Digit 9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "digit9",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/eject-constant.html",
                    "desc": "<p>Represents the location of the \"Eject\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey eject = PhysicalKeyboardKey(0x000c00b8, debugName: kReleaseMode ? null : 'Eject')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "eject",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/end-constant.html",
                    "desc": "<p>Represents the location of the \"End\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey end = PhysicalKeyboardKey(0x0007004d, debugName: kReleaseMode ? null : 'End')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "end",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/enter-constant.html",
                    "desc": "<p>Represents the location of the \"Enter\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey enter = PhysicalKeyboardKey(0x00070028, debugName: kReleaseMode ? null : 'Enter')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "enter",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/equal-constant.html",
                    "desc": "<p>Represents the location of the \"Equal\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey equal = PhysicalKeyboardKey(0x0007002e, debugName: kReleaseMode ? null : 'Equal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "equal",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/escape-constant.html",
                    "desc": "<p>Represents the location of the \"Escape\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey escape = PhysicalKeyboardKey(0x00070029, debugName: kReleaseMode ? null : 'Escape')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "escape",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/exit-constant.html",
                    "desc": "<p>Represents the location of the \"Exit\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey exit = PhysicalKeyboardKey(0x000c0094, debugName: kReleaseMode ? null : 'Exit')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "exit",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f1-constant.html",
                    "desc": "<p>Represents the location of the \"F1\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f1 = PhysicalKeyboardKey(0x0007003a, debugName: kReleaseMode ? null : 'F1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f1",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f2-constant.html",
                    "desc": "<p>Represents the location of the \"F2\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f2 = PhysicalKeyboardKey(0x0007003b, debugName: kReleaseMode ? null : 'F2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f2",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f3-constant.html",
                    "desc": "<p>Represents the location of the \"F3\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f3 = PhysicalKeyboardKey(0x0007003c, debugName: kReleaseMode ? null : 'F3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f3",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f4-constant.html",
                    "desc": "<p>Represents the location of the \"F4\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f4 = PhysicalKeyboardKey(0x0007003d, debugName: kReleaseMode ? null : 'F4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f4",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f5-constant.html",
                    "desc": "<p>Represents the location of the \"F5\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f5 = PhysicalKeyboardKey(0x0007003e, debugName: kReleaseMode ? null : 'F5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f5",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f6-constant.html",
                    "desc": "<p>Represents the location of the \"F6\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f6 = PhysicalKeyboardKey(0x0007003f, debugName: kReleaseMode ? null : 'F6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f6",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f7-constant.html",
                    "desc": "<p>Represents the location of the \"F7\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f7 = PhysicalKeyboardKey(0x00070040, debugName: kReleaseMode ? null : 'F7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f7",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f8-constant.html",
                    "desc": "<p>Represents the location of the \"F8\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f8 = PhysicalKeyboardKey(0x00070041, debugName: kReleaseMode ? null : 'F8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f8",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f9-constant.html",
                    "desc": "<p>Represents the location of the \"F9\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f9 = PhysicalKeyboardKey(0x00070042, debugName: kReleaseMode ? null : 'F9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f9",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f10-constant.html",
                    "desc": "<p>Represents the location of the \"F10\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f10 = PhysicalKeyboardKey(0x00070043, debugName: kReleaseMode ? null : 'F10')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f10",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f11-constant.html",
                    "desc": "<p>Represents the location of the \"F11\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f11 = PhysicalKeyboardKey(0x00070044, debugName: kReleaseMode ? null : 'F11')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f11",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f12-constant.html",
                    "desc": "<p>Represents the location of the \"F12\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f12 = PhysicalKeyboardKey(0x00070045, debugName: kReleaseMode ? null : 'F12')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f12",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f13-constant.html",
                    "desc": "<p>Represents the location of the \"F13\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f13 = PhysicalKeyboardKey(0x00070068, debugName: kReleaseMode ? null : 'F13')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f13",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f14-constant.html",
                    "desc": "<p>Represents the location of the \"F14\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f14 = PhysicalKeyboardKey(0x00070069, debugName: kReleaseMode ? null : 'F14')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f14",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f15-constant.html",
                    "desc": "<p>Represents the location of the \"F15\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f15 = PhysicalKeyboardKey(0x0007006a, debugName: kReleaseMode ? null : 'F15')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f15",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f16-constant.html",
                    "desc": "<p>Represents the location of the \"F16\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f16 = PhysicalKeyboardKey(0x0007006b, debugName: kReleaseMode ? null : 'F16')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f16",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f17-constant.html",
                    "desc": "<p>Represents the location of the \"F17\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f17 = PhysicalKeyboardKey(0x0007006c, debugName: kReleaseMode ? null : 'F17')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f17",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f18-constant.html",
                    "desc": "<p>Represents the location of the \"F18\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f18 = PhysicalKeyboardKey(0x0007006d, debugName: kReleaseMode ? null : 'F18')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f18",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f19-constant.html",
                    "desc": "<p>Represents the location of the \"F19\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f19 = PhysicalKeyboardKey(0x0007006e, debugName: kReleaseMode ? null : 'F19')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f19",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f20-constant.html",
                    "desc": "<p>Represents the location of the \"F20\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f20 = PhysicalKeyboardKey(0x0007006f, debugName: kReleaseMode ? null : 'F20')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f20",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f21-constant.html",
                    "desc": "<p>Represents the location of the \"F21\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f21 = PhysicalKeyboardKey(0x00070070, debugName: kReleaseMode ? null : 'F21')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f21",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f22-constant.html",
                    "desc": "<p>Represents the location of the \"F22\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f22 = PhysicalKeyboardKey(0x00070071, debugName: kReleaseMode ? null : 'F22')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f22",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f23-constant.html",
                    "desc": "<p>Represents the location of the \"F23\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f23 = PhysicalKeyboardKey(0x00070072, debugName: kReleaseMode ? null : 'F23')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f23",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/f24-constant.html",
                    "desc": "<p>Represents the location of the \"F24\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey f24 = PhysicalKeyboardKey(0x00070073, debugName: kReleaseMode ? null : 'F24')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "f24",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/find-constant.html",
                    "desc": "<p>Represents the location of the \"Find\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey find = PhysicalKeyboardKey(0x0007007e, debugName: kReleaseMode ? null : 'Find')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "find",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/fn-constant.html",
                    "desc": "<p>Represents the location of the \"Fn\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey fn = PhysicalKeyboardKey(0x00000012, debugName: kReleaseMode ? null : 'Fn')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "fn",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/fnLock-constant.html",
                    "desc": "<p>Represents the location of the \"Fn Lock\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey fnLock = PhysicalKeyboardKey(0x00000013, debugName: kReleaseMode ? null : 'Fn Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "fnLock",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/PhysicalKeyboardKey\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/PhysicalKeyboardKey\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/PhysicalKeyboardKey\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/PhysicalKeyboardKey\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/PhysicalKeyboardKey\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/PhysicalKeyboardKey\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.PhysicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/PhysicalKeyboardKey\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; usbHidUsage.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/help-constant.html",
                    "desc": "<p>Represents the location of the \"Help\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey help = PhysicalKeyboardKey(0x00070075, debugName: kReleaseMode ? null : 'Help')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "help",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/home-constant.html",
                    "desc": "<p>Represents the location of the \"Home\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey home = PhysicalKeyboardKey(0x0007004a, debugName: kReleaseMode ? null : 'Home')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "home",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/hyper-constant.html",
                    "desc": "<p>Represents the location of the \"Hyper\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey hyper = PhysicalKeyboardKey(0x00000010, debugName: kReleaseMode ? null : 'Hyper')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hyper",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/info-constant.html",
                    "desc": "<p>Represents the location of the \"Info\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey info = PhysicalKeyboardKey(0x000c0060, debugName: kReleaseMode ? null : 'Info')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "info",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/insert-constant.html",
                    "desc": "<p>Represents the location of the \"Insert\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey insert = PhysicalKeyboardKey(0x00070049, debugName: kReleaseMode ? null : 'Insert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "insert",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/intlBackslash-constant.html",
                    "desc": "<p>Represents the location of the \"Intl Backslash\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey intlBackslash = PhysicalKeyboardKey(0x00070064, debugName: kReleaseMode ? null : 'Intl Backslash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlBackslash",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/intlRo-constant.html",
                    "desc": "<p>Represents the location of the \"Intl Ro\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey intlRo = PhysicalKeyboardKey(0x00070087, debugName: kReleaseMode ? null : 'Intl Ro')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlRo",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/intlYen-constant.html",
                    "desc": "<p>Represents the location of the \"Intl Yen\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey intlYen = PhysicalKeyboardKey(0x00070089, debugName: kReleaseMode ? null : 'Intl Yen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "intlYen",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/kanaMode-constant.html",
                    "desc": "<p>Represents the location of the \"Kana Mode\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey kanaMode = PhysicalKeyboardKey(0x00070088, debugName: kReleaseMode ? null : 'Kana Mode')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "kanaMode",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyA-constant.html",
                    "desc": "<p>Represents the location of the \"Key A\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyA = PhysicalKeyboardKey(0x00070004, debugName: kReleaseMode ? null : 'Key A')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyA",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyB-constant.html",
                    "desc": "<p>Represents the location of the \"Key B\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyB = PhysicalKeyboardKey(0x00070005, debugName: kReleaseMode ? null : 'Key B')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyB",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyC-constant.html",
                    "desc": "<p>Represents the location of the \"Key C\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyC = PhysicalKeyboardKey(0x00070006, debugName: kReleaseMode ? null : 'Key C')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyC",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyD-constant.html",
                    "desc": "<p>Represents the location of the \"Key D\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyD = PhysicalKeyboardKey(0x00070007, debugName: kReleaseMode ? null : 'Key D')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyD",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyE-constant.html",
                    "desc": "<p>Represents the location of the \"Key E\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyE = PhysicalKeyboardKey(0x00070008, debugName: kReleaseMode ? null : 'Key E')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyE",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyF-constant.html",
                    "desc": "<p>Represents the location of the \"Key F\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyF = PhysicalKeyboardKey(0x00070009, debugName: kReleaseMode ? null : 'Key F')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyF",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyG-constant.html",
                    "desc": "<p>Represents the location of the \"Key G\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyG = PhysicalKeyboardKey(0x0007000a, debugName: kReleaseMode ? null : 'Key G')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyG",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyH-constant.html",
                    "desc": "<p>Represents the location of the \"Key H\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyH = PhysicalKeyboardKey(0x0007000b, debugName: kReleaseMode ? null : 'Key H')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyH",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyI-constant.html",
                    "desc": "<p>Represents the location of the \"Key I\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyI = PhysicalKeyboardKey(0x0007000c, debugName: kReleaseMode ? null : 'Key I')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyI",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyJ-constant.html",
                    "desc": "<p>Represents the location of the \"Key J\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyJ = PhysicalKeyboardKey(0x0007000d, debugName: kReleaseMode ? null : 'Key J')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyJ",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyK-constant.html",
                    "desc": "<p>Represents the location of the \"Key K\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyK = PhysicalKeyboardKey(0x0007000e, debugName: kReleaseMode ? null : 'Key K')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyK",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyL-constant.html",
                    "desc": "<p>Represents the location of the \"Key L\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyL = PhysicalKeyboardKey(0x0007000f, debugName: kReleaseMode ? null : 'Key L')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyL",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyM-constant.html",
                    "desc": "<p>Represents the location of the \"Key M\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyM = PhysicalKeyboardKey(0x00070010, debugName: kReleaseMode ? null : 'Key M')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyM",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyN-constant.html",
                    "desc": "<p>Represents the location of the \"Key N\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyN = PhysicalKeyboardKey(0x00070011, debugName: kReleaseMode ? null : 'Key N')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyN",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyO-constant.html",
                    "desc": "<p>Represents the location of the \"Key O\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyO = PhysicalKeyboardKey(0x00070012, debugName: kReleaseMode ? null : 'Key O')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyO",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyP-constant.html",
                    "desc": "<p>Represents the location of the \"Key P\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyP = PhysicalKeyboardKey(0x00070013, debugName: kReleaseMode ? null : 'Key P')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyP",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyQ-constant.html",
                    "desc": "<p>Represents the location of the \"Key Q\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyQ = PhysicalKeyboardKey(0x00070014, debugName: kReleaseMode ? null : 'Key Q')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyQ",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyR-constant.html",
                    "desc": "<p>Represents the location of the \"Key R\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyR = PhysicalKeyboardKey(0x00070015, debugName: kReleaseMode ? null : 'Key R')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyR",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyS-constant.html",
                    "desc": "<p>Represents the location of the \"Key S\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyS = PhysicalKeyboardKey(0x00070016, debugName: kReleaseMode ? null : 'Key S')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyS",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyT-constant.html",
                    "desc": "<p>Represents the location of the \"Key T\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyT = PhysicalKeyboardKey(0x00070017, debugName: kReleaseMode ? null : 'Key T')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyT",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyU-constant.html",
                    "desc": "<p>Represents the location of the \"Key U\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyU = PhysicalKeyboardKey(0x00070018, debugName: kReleaseMode ? null : 'Key U')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyU",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyV-constant.html",
                    "desc": "<p>Represents the location of the \"Key V\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyV = PhysicalKeyboardKey(0x00070019, debugName: kReleaseMode ? null : 'Key V')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyV",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyW-constant.html",
                    "desc": "<p>Represents the location of the \"Key W\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyW = PhysicalKeyboardKey(0x0007001a, debugName: kReleaseMode ? null : 'Key W')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyW",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyX-constant.html",
                    "desc": "<p>Represents the location of the \"Key X\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyX = PhysicalKeyboardKey(0x0007001b, debugName: kReleaseMode ? null : 'Key X')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyX",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyY-constant.html",
                    "desc": "<p>Represents the location of the \"Key Y\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyY = PhysicalKeyboardKey(0x0007001c, debugName: kReleaseMode ? null : 'Key Y')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyY",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/keyZ-constant.html",
                    "desc": "<p>Represents the location of the \"Key Z\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey keyZ = PhysicalKeyboardKey(0x0007001d, debugName: kReleaseMode ? null : 'Key Z')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyZ",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lang1-constant.html",
                    "desc": "<p>Represents the location of the \"Lang 1\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lang1 = PhysicalKeyboardKey(0x00070090, debugName: kReleaseMode ? null : 'Lang 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang1",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lang2-constant.html",
                    "desc": "<p>Represents the location of the \"Lang 2\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lang2 = PhysicalKeyboardKey(0x00070091, debugName: kReleaseMode ? null : 'Lang 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang2",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lang3-constant.html",
                    "desc": "<p>Represents the location of the \"Lang 3\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lang3 = PhysicalKeyboardKey(0x00070092, debugName: kReleaseMode ? null : 'Lang 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang3",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lang4-constant.html",
                    "desc": "<p>Represents the location of the \"Lang 4\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lang4 = PhysicalKeyboardKey(0x00070093, debugName: kReleaseMode ? null : 'Lang 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang4",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lang5-constant.html",
                    "desc": "<p>Represents the location of the \"Lang 5\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lang5 = PhysicalKeyboardKey(0x00070094, debugName: kReleaseMode ? null : 'Lang 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lang5",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchApp1-constant.html",
                    "desc": "<p>Represents the location of the \"Launch App1\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchApp1 = PhysicalKeyboardKey(0x000c0194, debugName: kReleaseMode ? null : 'Launch App1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchApp1",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchApp2-constant.html",
                    "desc": "<p>Represents the location of the \"Launch App2\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchApp2 = PhysicalKeyboardKey(0x000c0192, debugName: kReleaseMode ? null : 'Launch App2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchApp2",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchAssistant-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Assistant\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchAssistant = PhysicalKeyboardKey(0x00000017, debugName: kReleaseMode ? null : 'Launch Assistant')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchAssistant",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchAudioBrowser-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Audio Browser\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchAudioBrowser = PhysicalKeyboardKey(0x000c01b7, debugName: kReleaseMode ? null : 'Launch Audio Browser')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchAudioBrowser",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchCalendar-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Calendar\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchCalendar = PhysicalKeyboardKey(0x000c018e, debugName: kReleaseMode ? null : 'Launch Calendar')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchCalendar",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchContacts-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Contacts\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchContacts = PhysicalKeyboardKey(0x000c018d, debugName: kReleaseMode ? null : 'Launch Contacts')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchContacts",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchControlPanel-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Control Panel\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchControlPanel = PhysicalKeyboardKey(0x000c019f, debugName: kReleaseMode ? null : 'Launch Control Panel')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchControlPanel",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchDocuments-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Documents\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchDocuments = PhysicalKeyboardKey(0x000c01a7, debugName: kReleaseMode ? null : 'Launch Documents')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchDocuments",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchInternetBrowser-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Internet Browser\" key on a\ngeneralized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchInternetBrowser = PhysicalKeyboardKey(0x000c0196, debugName: kReleaseMode ? null : 'Launch Internet Browser')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchInternetBrowser",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchKeyboardLayout-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Keyboard Layout\" key on a\ngeneralized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchKeyboardLayout = PhysicalKeyboardKey(0x000c01ae, debugName: kReleaseMode ? null : 'Launch Keyboard Layout')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchKeyboardLayout",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchMail-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Mail\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchMail = PhysicalKeyboardKey(0x000c018a, debugName: kReleaseMode ? null : 'Launch Mail')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchMail",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchPhone-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Phone\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchPhone = PhysicalKeyboardKey(0x000c008c, debugName: kReleaseMode ? null : 'Launch Phone')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchPhone",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchScreenSaver-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Screen Saver\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchScreenSaver = PhysicalKeyboardKey(0x000c01b1, debugName: kReleaseMode ? null : 'Launch Screen Saver')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchScreenSaver",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchSpreadsheet-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Spreadsheet\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchSpreadsheet = PhysicalKeyboardKey(0x000c0186, debugName: kReleaseMode ? null : 'Launch Spreadsheet')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchSpreadsheet",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/launchWordProcessor-constant.html",
                    "desc": "<p>Represents the location of the \"Launch Word Processor\" key on a\ngeneralized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey launchWordProcessor = PhysicalKeyboardKey(0x000c0184, debugName: kReleaseMode ? null : 'Launch Word Processor')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "launchWordProcessor",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/lockScreen-constant.html",
                    "desc": "<p>Represents the location of the \"Lock Screen\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey lockScreen = PhysicalKeyboardKey(0x000c019e, debugName: kReleaseMode ? null : 'Lock Screen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lockScreen",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/logOff-constant.html",
                    "desc": "<p>Represents the location of the \"Log Off\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey logOff = PhysicalKeyboardKey(0x000c019c, debugName: kReleaseMode ? null : 'Log Off')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "logOff",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mailForward-constant.html",
                    "desc": "<p>Represents the location of the \"Mail Forward\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mailForward = PhysicalKeyboardKey(0x000c028b, debugName: kReleaseMode ? null : 'Mail Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailForward",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mailReply-constant.html",
                    "desc": "<p>Represents the location of the \"Mail Reply\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mailReply = PhysicalKeyboardKey(0x000c0289, debugName: kReleaseMode ? null : 'Mail Reply')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailReply",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mailSend-constant.html",
                    "desc": "<p>Represents the location of the \"Mail Send\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mailSend = PhysicalKeyboardKey(0x000c028c, debugName: kReleaseMode ? null : 'Mail Send')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mailSend",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaFastForward-constant.html",
                    "desc": "<p>Represents the location of the \"Media Fast Forward\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaFastForward = PhysicalKeyboardKey(0x000c00b3, debugName: kReleaseMode ? null : 'Media Fast Forward')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaFastForward",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaLast-constant.html",
                    "desc": "<p>Represents the location of the \"Media Last\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaLast = PhysicalKeyboardKey(0x000c0083, debugName: kReleaseMode ? null : 'Media Last')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaLast",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaPlay-constant.html",
                    "desc": "<p>Represents the location of the \"Media Play\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaPlay = PhysicalKeyboardKey(0x000c00b0, debugName: kReleaseMode ? null : 'Media Play')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaPlay",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaPlayPause-constant.html",
                    "desc": "<p>Represents the location of the \"Media Play Pause\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaPlayPause = PhysicalKeyboardKey(0x000c00cd, debugName: kReleaseMode ? null : 'Media Play Pause')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaPlayPause",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaRecord-constant.html",
                    "desc": "<p>Represents the location of the \"Media Record\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaRecord = PhysicalKeyboardKey(0x000c00b2, debugName: kReleaseMode ? null : 'Media Record')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaRecord",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaRewind-constant.html",
                    "desc": "<p>Represents the location of the \"Media Rewind\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaRewind = PhysicalKeyboardKey(0x000c00b4, debugName: kReleaseMode ? null : 'Media Rewind')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaRewind",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaSelect-constant.html",
                    "desc": "<p>Represents the location of the \"Media Select\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaSelect = PhysicalKeyboardKey(0x000c0183, debugName: kReleaseMode ? null : 'Media Select')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaSelect",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaStop-constant.html",
                    "desc": "<p>Represents the location of the \"Media Stop\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaStop = PhysicalKeyboardKey(0x000c00b7, debugName: kReleaseMode ? null : 'Media Stop')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaStop",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaTrackNext-constant.html",
                    "desc": "<p>Represents the location of the \"Media Track Next\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaTrackNext = PhysicalKeyboardKey(0x000c00b5, debugName: kReleaseMode ? null : 'Media Track Next')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaTrackNext",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/mediaTrackPrevious-constant.html",
                    "desc": "<p>Represents the location of the \"Media Track Previous\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey mediaTrackPrevious = PhysicalKeyboardKey(0x000c00b6, debugName: kReleaseMode ? null : 'Media Track Previous')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "mediaTrackPrevious",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/metaLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Meta Left\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey metaLeft = PhysicalKeyboardKey(0x000700e3, debugName: kReleaseMode ? null : 'Meta Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "metaLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/metaRight-constant.html",
                    "desc": "<p>Represents the location of the \"Meta Right\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey metaRight = PhysicalKeyboardKey(0x000700e7, debugName: kReleaseMode ? null : 'Meta Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "metaRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/minus-constant.html",
                    "desc": "<p>Represents the location of the \"Minus\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey minus = PhysicalKeyboardKey(0x0007002d, debugName: kReleaseMode ? null : 'Minus')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "minus",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/newKey-constant.html",
                    "desc": "<p>Represents the location of the \"New Key\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey newKey = PhysicalKeyboardKey(0x000c0201, debugName: kReleaseMode ? null : 'New Key')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "newKey",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/nonConvert-constant.html",
                    "desc": "<p>Represents the location of the \"Non Convert\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey nonConvert = PhysicalKeyboardKey(0x0007008b, debugName: kReleaseMode ? null : 'Non Convert')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "nonConvert",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/none-constant.html",
                    "desc": "<p>Represents the location of the \"None\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey none = PhysicalKeyboardKey(0x00000000, debugName: kReleaseMode ? null : 'None')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "none",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numLock-constant.html",
                    "desc": "<p>Represents the location of the \"Num Lock\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numLock = PhysicalKeyboardKey(0x00070053, debugName: kReleaseMode ? null : 'Num Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numLock",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad0-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 0\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad0 = PhysicalKeyboardKey(0x00070062, debugName: kReleaseMode ? null : 'Numpad 0')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad0",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad1-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 1\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad1 = PhysicalKeyboardKey(0x00070059, debugName: kReleaseMode ? null : 'Numpad 1')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad1",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad2-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 2\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad2 = PhysicalKeyboardKey(0x0007005a, debugName: kReleaseMode ? null : 'Numpad 2')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad2",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad3-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 3\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad3 = PhysicalKeyboardKey(0x0007005b, debugName: kReleaseMode ? null : 'Numpad 3')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad3",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad4-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 4\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad4 = PhysicalKeyboardKey(0x0007005c, debugName: kReleaseMode ? null : 'Numpad 4')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad4",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad5-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 5\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad5 = PhysicalKeyboardKey(0x0007005d, debugName: kReleaseMode ? null : 'Numpad 5')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad5",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad6-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 6\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad6 = PhysicalKeyboardKey(0x0007005e, debugName: kReleaseMode ? null : 'Numpad 6')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad6",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad7-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 7\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad7 = PhysicalKeyboardKey(0x0007005f, debugName: kReleaseMode ? null : 'Numpad 7')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad7",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad8-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 8\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad8 = PhysicalKeyboardKey(0x00070060, debugName: kReleaseMode ? null : 'Numpad 8')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad8",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpad9-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad 9\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpad9 = PhysicalKeyboardKey(0x00070061, debugName: kReleaseMode ? null : 'Numpad 9')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpad9",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadAdd-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Add\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadAdd = PhysicalKeyboardKey(0x00070057, debugName: kReleaseMode ? null : 'Numpad Add')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadAdd",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadBackspace-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Backspace\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadBackspace = PhysicalKeyboardKey(0x000700bb, debugName: kReleaseMode ? null : 'Numpad Backspace')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadBackspace",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadClear-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Clear\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadClear = PhysicalKeyboardKey(0x000700d8, debugName: kReleaseMode ? null : 'Numpad Clear')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadClear",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadClearEntry-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Clear Entry\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadClearEntry = PhysicalKeyboardKey(0x000700d9, debugName: kReleaseMode ? null : 'Numpad Clear Entry')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadClearEntry",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadComma-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Comma\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadComma = PhysicalKeyboardKey(0x00070085, debugName: kReleaseMode ? null : 'Numpad Comma')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadComma",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadDecimal-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Decimal\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadDecimal = PhysicalKeyboardKey(0x00070063, debugName: kReleaseMode ? null : 'Numpad Decimal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadDecimal",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadDivide-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Divide\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadDivide = PhysicalKeyboardKey(0x00070054, debugName: kReleaseMode ? null : 'Numpad Divide')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadDivide",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadEnter-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Enter\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadEnter = PhysicalKeyboardKey(0x00070058, debugName: kReleaseMode ? null : 'Numpad Enter')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadEnter",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadEqual-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Equal\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadEqual = PhysicalKeyboardKey(0x00070067, debugName: kReleaseMode ? null : 'Numpad Equal')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadEqual",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMemoryAdd-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Memory Add\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMemoryAdd = PhysicalKeyboardKey(0x000700d3, debugName: kReleaseMode ? null : 'Numpad Memory Add')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryAdd",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMemoryClear-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Memory Clear\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMemoryClear = PhysicalKeyboardKey(0x000700d2, debugName: kReleaseMode ? null : 'Numpad Memory Clear')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryClear",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMemoryRecall-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Memory Recall\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMemoryRecall = PhysicalKeyboardKey(0x000700d1, debugName: kReleaseMode ? null : 'Numpad Memory Recall')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryRecall",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMemoryStore-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Memory Store\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMemoryStore = PhysicalKeyboardKey(0x000700d0, debugName: kReleaseMode ? null : 'Numpad Memory Store')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemoryStore",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMemorySubtract-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Memory Subtract\" key on a\ngeneralized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMemorySubtract = PhysicalKeyboardKey(0x000700d4, debugName: kReleaseMode ? null : 'Numpad Memory Subtract')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMemorySubtract",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadMultiply-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Multiply\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadMultiply = PhysicalKeyboardKey(0x00070055, debugName: kReleaseMode ? null : 'Numpad Multiply')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadMultiply",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadParenLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Paren Left\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadParenLeft = PhysicalKeyboardKey(0x000700b6, debugName: kReleaseMode ? null : 'Numpad Paren Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadParenLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadParenRight-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Paren Right\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadParenRight = PhysicalKeyboardKey(0x000700b7, debugName: kReleaseMode ? null : 'Numpad Paren Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadParenRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadSignChange-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Sign Change\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadSignChange = PhysicalKeyboardKey(0x000700d7, debugName: kReleaseMode ? null : 'Numpad Sign Change')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadSignChange",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/numpadSubtract-constant.html",
                    "desc": "<p>Represents the location of the \"Numpad Subtract\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey numpadSubtract = PhysicalKeyboardKey(0x00070056, debugName: kReleaseMode ? null : 'Numpad Subtract')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "numpadSubtract",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/open-constant.html",
                    "desc": "<p>Represents the location of the \"Open\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey open = PhysicalKeyboardKey(0x00070074, debugName: kReleaseMode ? null : 'Open')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "open",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/pageDown-constant.html",
                    "desc": "<p>Represents the location of the \"Page Down\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey pageDown = PhysicalKeyboardKey(0x0007004e, debugName: kReleaseMode ? null : 'Page Down')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pageDown",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/pageUp-constant.html",
                    "desc": "<p>Represents the location of the \"Page Up\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey pageUp = PhysicalKeyboardKey(0x0007004b, debugName: kReleaseMode ? null : 'Page Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pageUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/paste-constant.html",
                    "desc": "<p>Represents the location of the \"Paste\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey paste = PhysicalKeyboardKey(0x0007007d, debugName: kReleaseMode ? null : 'Paste')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "paste",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/pause-constant.html",
                    "desc": "<p>Represents the location of the \"Pause\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey pause = PhysicalKeyboardKey(0x00070048, debugName: kReleaseMode ? null : 'Pause')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pause",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/period-constant.html",
                    "desc": "<p>Represents the location of the \"Period\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey period = PhysicalKeyboardKey(0x00070037, debugName: kReleaseMode ? null : 'Period')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "period",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/power-constant.html",
                    "desc": "<p>Represents the location of the \"Power\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey power = PhysicalKeyboardKey(0x00070066, debugName: kReleaseMode ? null : 'Power')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "power",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/print-constant.html",
                    "desc": "<p>Represents the location of the \"Print\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey print = PhysicalKeyboardKey(0x000c0208, debugName: kReleaseMode ? null : 'Print')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "print",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/printScreen-constant.html",
                    "desc": "<p>Represents the location of the \"Print Screen\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey printScreen = PhysicalKeyboardKey(0x00070046, debugName: kReleaseMode ? null : 'Print Screen')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "printScreen",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/programGuide-constant.html",
                    "desc": "<p>Represents the location of the \"Program Guide\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey programGuide = PhysicalKeyboardKey(0x000c008d, debugName: kReleaseMode ? null : 'Program Guide')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "programGuide",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/props-constant.html",
                    "desc": "<p>Represents the location of the \"Props\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey props = PhysicalKeyboardKey(0x000700a3, debugName: kReleaseMode ? null : 'Props')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "props",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/quote-constant.html",
                    "desc": "<p>Represents the location of the \"Quote\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey quote = PhysicalKeyboardKey(0x00070034, debugName: kReleaseMode ? null : 'Quote')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "quote",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/redo-constant.html",
                    "desc": "<p>Represents the location of the \"Redo\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey redo = PhysicalKeyboardKey(0x000c0279, debugName: kReleaseMode ? null : 'Redo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "redo",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/resume-constant.html",
                    "desc": "<p>Represents the location of the \"Resume\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey resume = PhysicalKeyboardKey(0x00000015, debugName: kReleaseMode ? null : 'Resume')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "resume",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/save-constant.html",
                    "desc": "<p>Represents the location of the \"Save\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey save = PhysicalKeyboardKey(0x000c0207, debugName: kReleaseMode ? null : 'Save')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "save",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/scrollLock-constant.html",
                    "desc": "<p>Represents the location of the \"Scroll Lock\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey scrollLock = PhysicalKeyboardKey(0x00070047, debugName: kReleaseMode ? null : 'Scroll Lock')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "scrollLock",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/select-constant.html",
                    "desc": "<p>Represents the location of the \"Select\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey select = PhysicalKeyboardKey(0x00070077, debugName: kReleaseMode ? null : 'Select')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "select",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/selectTask-constant.html",
                    "desc": "<p>Represents the location of the \"Select Task\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey selectTask = PhysicalKeyboardKey(0x000c01a2, debugName: kReleaseMode ? null : 'Select Task')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "selectTask",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/semicolon-constant.html",
                    "desc": "<p>Represents the location of the \"Semicolon\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey semicolon = PhysicalKeyboardKey(0x00070033, debugName: kReleaseMode ? null : 'Semicolon')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "semicolon",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/shiftLeft-constant.html",
                    "desc": "<p>Represents the location of the \"Shift Left\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey shiftLeft = PhysicalKeyboardKey(0x000700e1, debugName: kReleaseMode ? null : 'Shift Left')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "shiftLeft",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/shiftRight-constant.html",
                    "desc": "<p>Represents the location of the \"Shift Right\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey shiftRight = PhysicalKeyboardKey(0x000700e5, debugName: kReleaseMode ? null : 'Shift Right')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "shiftRight",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/slash-constant.html",
                    "desc": "<p>Represents the location of the \"Slash\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey slash = PhysicalKeyboardKey(0x00070038, debugName: kReleaseMode ? null : 'Slash')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "slash",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/sleep-constant.html",
                    "desc": "<p>Represents the location of the \"Sleep\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey sleep = PhysicalKeyboardKey(0x00010082, debugName: kReleaseMode ? null : 'Sleep')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sleep",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/space-constant.html",
                    "desc": "<p>Represents the location of the \"Space\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey space = PhysicalKeyboardKey(0x0007002c, debugName: kReleaseMode ? null : 'Space')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "space",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/speechInputToggle-constant.html",
                    "desc": "<p>Represents the location of the \"Speech Input Toggle\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey speechInputToggle = PhysicalKeyboardKey(0x000c00cf, debugName: kReleaseMode ? null : 'Speech Input Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "speechInputToggle",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/spellCheck-constant.html",
                    "desc": "<p>Represents the location of the \"Spell Check\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey spellCheck = PhysicalKeyboardKey(0x000c01ab, debugName: kReleaseMode ? null : 'Spell Check')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "spellCheck",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/superKey-constant.html",
                    "desc": "<p>Represents the location of the \"Super Key\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey superKey = PhysicalKeyboardKey(0x00000011, debugName: kReleaseMode ? null : 'Super Key')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "superKey",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/suspend-constant.html",
                    "desc": "<p>Represents the location of the \"Suspend\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey suspend = PhysicalKeyboardKey(0x00000014, debugName: kReleaseMode ? null : 'Suspend')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "suspend",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/tab-constant.html",
                    "desc": "<p>Represents the location of the \"Tab\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey tab = PhysicalKeyboardKey(0x0007002b, debugName: kReleaseMode ? null : 'Tab')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "tab",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/turbo-constant.html",
                    "desc": "<p>Represents the location of the \"Turbo\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey turbo = PhysicalKeyboardKey(0x00000016, debugName: kReleaseMode ? null : 'Turbo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "turbo",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/undo-constant.html",
                    "desc": "<p>Represents the location of the \"Undo\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey undo = PhysicalKeyboardKey(0x0007007a, debugName: kReleaseMode ? null : 'Undo')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "undo",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/usbErrorRollOver-constant.html",
                    "desc": "<p>Represents the location of the \"Usb Error Roll Over\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey usbErrorRollOver = PhysicalKeyboardKey(0x00070001, debugName: kReleaseMode ? null : 'Usb Error Roll Over')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbErrorRollOver",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/usbErrorUndefined-constant.html",
                    "desc": "<p>Represents the location of the \"Usb Error Undefined\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey usbErrorUndefined = PhysicalKeyboardKey(0x00070003, debugName: kReleaseMode ? null : 'Usb Error Undefined')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbErrorUndefined",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "name": "usbHidUsage",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The unique USB HID usage ID of this physical key on the keyboard.<\/p>\n<p>Due to the variations in platform APIs, this may not be the actual HID\nusage code from the hardware, but a value derived from available\ninformation on the platform.<\/p>\n<p>See <a href=\"https:\/\/www.usb.org\/sites\/default\/files\/documents\/hut1_12v2.pdf\">www.usb.org\/sites\/default\/files\/documents\/hut1_12v2.pdf<\/a>\nfor the HID usage values and their meanings.<\/p>\n        ",
                    "memberOf": "services.PhysicalKeyboardKey",
                    "isConstant": false,
                    "href": "services\/PhysicalKeyboardKey\/usbHidUsage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int usbHidUsage\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/usbPostFail-constant.html",
                    "desc": "<p>Represents the location of the \"Usb Post Fail\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey usbPostFail = PhysicalKeyboardKey(0x00070002, debugName: kReleaseMode ? null : 'Usb Post Fail')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbPostFail",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/usbReserved-constant.html",
                    "desc": "<p>Represents the location of the \"Usb Reserved\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey usbReserved = PhysicalKeyboardKey(0x00070000, debugName: kReleaseMode ? null : 'Usb Reserved')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "usbReserved",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/wakeUp-constant.html",
                    "desc": "<p>Represents the location of the \"Wake Up\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey wakeUp = PhysicalKeyboardKey(0x00010083, debugName: kReleaseMode ? null : 'Wake Up')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "wakeUp",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/zoomIn-constant.html",
                    "desc": "<p>Represents the location of the \"Zoom In\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey zoomIn = PhysicalKeyboardKey(0x000c022d, debugName: kReleaseMode ? null : 'Zoom In')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomIn",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/zoomOut-constant.html",
                    "desc": "<p>Represents the location of the \"Zoom Out\" key on a generalized keyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey zoomOut = PhysicalKeyboardKey(0x000c022e, debugName: kReleaseMode ? null : 'Zoom Out')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomOut",
                    "memberOf": "services.PhysicalKeyboardKey"
                },
                {
                    "type": "",
                    "href": "services\/PhysicalKeyboardKey\/zoomToggle-constant.html",
                    "desc": "<p>Represents the location of the \"Zoom Toggle\" key on a generalized\nkeyboard.<\/p>\n<p>See the function <a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a> for more information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PhysicalKeyboardKey zoomToggle = PhysicalKeyboardKey(0x000c0232, debugName: kReleaseMode ? null : 'Zoom Toggle')\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zoomToggle",
                    "memberOf": "services.PhysicalKeyboardKey"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/PhysicalKeyboardKey-class.html",
            "desc": "<p>A class with static values that describe the keys that are returned from\n<a href=\"services\/RawKeyEvent\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>.<\/p>\n<p>These represent <em>physical<\/em> keys, which are keys which represent a particular\nkey location on a QWERTY keyboard. It ignores any modifiers, modes, or\nkeyboard layouts which may be in effect. This is contrast to\n<a href=\"services\/LogicalKeyboardKey-class.html\">LogicalKeyboardKey<\/a>, which represents a logical key interpreted in the\ncontext of modifiers, modes, and\/or keyboard layouts.<\/p>\n<p>As an example, if you wanted a game where the key next to the CAPS LOCK (the\n\"A\" key on a QWERTY keyboard) moved the player to the left, you'd want to\nlook at the physical key to make sure that regardless of the character the\nkey produces, you got the key that is in that location on the keyboard.<\/p>\n<p>Conversely, if you wanted to implement an app where the \"Q\" key \"quit\"\nsomething, you'd want to look at the logical key to detect this, since you\nwould like to have it match the key with \"Q\" on it, instead of always\nlooking for \"the key next next to the TAB key\", since on a French keyboard,\nthe key next to the TAB key has an \"A\" on it.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example shows how to detect if the user has selected the physical key\nto the right of the CAPS LOCK key.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/services.dart';\n\n\/\/ ...\n\n\/\/ The node used to request the keyboard focus.\nfinal FocusNode _focusNode = FocusNode();\n\/\/ The message to display.\nString _message;\n\n\/\/ Focus nodes need to be disposed.\n@override\nvoid dispose() {\n  _focusNode.dispose();\n  super.dispose();\n}\n\n\/\/ Handles the key events from the RawKeyboardListener and update the\n\/\/ _message.\nvoid _handleKeyEvent(RawKeyEvent event) {\n  setState(() {\n    if (event.physicalKey == PhysicalKeyboardKey.keyA) {\n      _message = 'Pressed the key next to CAPS LOCK!';\n    } else {\n      _message = 'Wrong key.';\n    }\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  final TextTheme textTheme = Theme.of(context).textTheme;\n  return Container(\n    color: Colors.white,\n    alignment: Alignment.center,\n    child: DefaultTextStyle(\n      style: textTheme.display1,\n      child: RawKeyboardListener(\n        focusNode: _focusNode,\n        onKey: _handleKeyEvent,\n        child: AnimatedBuilder(\n          animation: _focusNode,\n          builder: (BuildContext context, Widget child) {\n            if (!_focusNode.hasFocus) {\n              return GestureDetector(\n                onTap: () {\n                  FocusScope.of(context).requestFocus(_focusNode);\n                },\n                child: Text('Tap to focus'),\n              );\n            }\n            return Text(_message ?? 'Press a key');\n          },\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=services.PhysicalKeyboardKey.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for services.PhysicalKeyboardKey.1\n\n\/\/ This example shows how to detect if the user has selected the physical key\n\/\/ to the right of the CAPS LOCK key.\n\nimport 'package:flutter\/material.dart';\n\nimport 'package:flutter\/services.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  \/\/ The node used to request the keyboard focus.\n  final FocusNode _focusNode = FocusNode();\n\/\/ The message to display.\n  String _message;\n\n\/\/ Focus nodes need to be disposed.\n  @override\n  void dispose() {\n    _focusNode.dispose();\n    super.dispose();\n  }\n\n\/\/ Handles the key events from the RawKeyboardListener and update the\n\/\/ _message.\n  void _handleKeyEvent(RawKeyEvent event) {\n    setState(() {\n      if (event.physicalKey == PhysicalKeyboardKey.keyA) {\n        _message = 'Pressed the key next to CAPS LOCK!';\n      } else {\n        _message = 'Wrong key.';\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final TextTheme textTheme = Theme.of(context).textTheme;\n    return Container(\n      color: Colors.white,\n      alignment: Alignment.center,\n      child: DefaultTextStyle(\n        style: textTheme.display1,\n        child: RawKeyboardListener(\n          focusNode: _focusNode,\n          onKey: _handleKeyEvent,\n          child: AnimatedBuilder(\n            animation: _focusNode,\n            builder: (BuildContext context, Widget child) {\n              if (!_focusNode.hasFocus) {\n                return GestureDetector(\n                  onTap: () {\n                    FocusScope.of(context).requestFocus(_focusNode);\n                  },\n                  child: Text('Tap to focus'),\n                );\n              }\n              return Text(_message ?? 'Press a key');\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a>, the keyboard event object received by widgets that listen\nto keyboard events.<\/li>\n<li>\n<a href=\"widgets\/RawKeyboardListener-class.html\">RawKeyboardListener<\/a>, a widget used to listen to and supply handlers for\nkeyboard events.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PhysicalKeyboardKey"
        },
        {
            "name": "services.PlatformAssetBundle",
            "extends": [
                "services.CachingAssetBundle",
                "services.AssetBundle",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "PlatformAssetBundle",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.PlatformAssetBundle",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/PlatformAssetBundle\/PlatformAssetBundle.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "dart:async.Future<dart:typed_data.ByteData>",
                    "desc": "<p>Retrieve a binary resource from the asset bundle as a data stream.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformAssetBundle",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PlatformAssetBundle\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;ByteData&gt; load(String key) async {\n  final Uint8List encoded = utf8.encoder.convert(Uri(path: Uri.encodeFull(key)).path);\n  final ByteData asset =\n      await BinaryMessages.send('flutter\/assets', encoded.buffer.asByteData());\n  if (asset == null)\n    throw FlutterError('Unable to load asset: $key');\n  return asset;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:typed_data.ByteData"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/PlatformAssetBundle-class.html",
            "desc": "<p>An <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> that loads resources using platform messages.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PlatformAssetBundle"
        },
        {
            "name": "services.PlatformException",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "PlatformException",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a> with the specified error <code>code<\/code> and optional\n<code>message<\/code>, and with the optional error <code>details<\/code> which must be a valid\nvalue for the <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> involved in the interaction.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformException",
                    "sig": "",
                    "params": [
                        {
                            "name": "code",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "details",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/PlatformException\/PlatformException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PlatformException({\n  @required this.code,\n  this.message,\n  this.details,\n}) : assert(code != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/PlatformException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'PlatformException($code, $message, $details)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "code",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>An error code.<\/p>\n        ",
                    "memberOf": "services.PlatformException",
                    "isConstant": false,
                    "href": "services\/PlatformException\/code.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String code\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "details",
                    "type": "",
                    "types": [],
                    "desc": "<p>Error details, possibly null.<\/p>\n        ",
                    "memberOf": "services.PlatformException",
                    "isConstant": false,
                    "href": "services\/PlatformException\/details.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final dynamic details\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable error message, possibly null.<\/p>\n        ",
                    "memberOf": "services.PlatformException",
                    "isConstant": false,
                    "href": "services\/PlatformException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/PlatformException-class.html",
            "desc": "<p>Thrown to indicate that a platform interaction failed in the platform\nplugin.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a>, which throws a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if a received result\nenvelope represents an error.<\/li>\n<li>\n<a href=\"services\/MethodChannel\/invokeMethod.html\">MethodChannel.invokeMethod<\/a>, which completes the returned future\nwith a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if invoking the platform plugin method\nresults in an error envelope.<\/li>\n<li>\n<a href=\"services\/EventChannel\/receiveBroadcastStream.html\">EventChannel.receiveBroadcastStream<\/a>, which emits\n<a href=\"services\/PlatformException-class.html\">PlatformException<\/a>s as error events, whenever an event received from the\nplatform plugin is wrapped in an error envelope.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PlatformException"
        },
        {
            "name": "services.PlatformViewCreatedCallback",
            "type": "",
            "desc": "<p>Callback signature for when a platform view was created.<\/p>\n<p><code>id<\/code> is the platform view's unique identifier.<\/p>\n    ",
            "static": false,
            "memberOf": "services",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/PlatformViewCreatedCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef PlatformViewCreatedCallback = void Function(int id);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "services.PlatformViewsRegistry",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "getNextPlatformViewId",
                    "type": "dart:core.int",
                    "desc": "<p>Allocates a unique identifier for a platform view.<\/p>\n<p>A platform view identifier can refer to a platform view that was never created,\na platform view that was disposed, or a platform view that is alive.<\/p>\n<p>Typically a platform view identifier is passed to a <code>PlatformView<\/code> widget\nwhich creates the platform view and manages its lifecycle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformViewsRegistry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/PlatformViewsRegistry\/getNextPlatformViewId.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getNextPlatformViewId() =&gt; _nextPlatformViewId++;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/PlatformViewsRegistry-class.html",
            "desc": "<p>A registry responsible for generating unique identifier for platform views.<\/p>\n<p>A Flutter application has a single <a href=\"services\/PlatformViewsRegistry-class.html\">PlatformViewsRegistry<\/a> which can be accesses\nthrough the <a href=\"services\/platformViewsRegistry.html\">platformViewsRegistry<\/a> getter.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>PlatformView<\/code>, a widget that shows a platform view.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PlatformViewsRegistry"
        },
        {
            "name": "services.PlatformViewsService",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "initAndroidView",
                    "type": "services.AndroidViewController",
                    "desc": "<p>Creates a controller for a new Android view.<\/p>\n<p><code>id<\/code> is an unused unique identifier generated with <a href=\"services\/platformViewsRegistry.html\">platformViewsRegistry<\/a>.<\/p>\n<p><code>viewType<\/code> is the identifier of the Android view type to be created, a\nfactory for this view type must have been registered on the platform side.\nPlatform view factories are typically registered by plugin code.\nPlugins can register a platform view factory with\n<a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewRegistry.html#registerViewFactory-java.lang.String-io.flutter.plugin.platform.PlatformViewFactory-\">PlatformViewRegistry#registerViewFactory<\/a>.<\/p>\n<p><code>creationParams<\/code> will be passed as the args argument of <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewFactory.html#create-android.content.Context-int-java.lang.Object-\">PlatformViewFactory#create<\/a><\/p>\n<p><code>creationParamsCodec<\/code> is the codec used to encode <code>creationParams<\/code> before sending it to the\nplatform side. It should match the codec passed to the constructor of <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewFactory.html#PlatformViewFactory-io.flutter.plugin.common.MessageCodec-\">PlatformViewFactory<\/a>.\nThis is typically one of: <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>, <a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a>, <a href=\"services\/StringCodec-class.html\">StringCodec<\/a>, or <a href=\"services\/BinaryCodec-class.html\">BinaryCodec<\/a>.<\/p>\n<p>The Android view will only be created after <a href=\"services\/AndroidViewController\/setSize.html\">AndroidViewController.setSize<\/a> is called for the\nfirst time.<\/p>\n<p>The <code>id,<\/code>viewType, and <code>layoutDirection<\/code> parameters must not be null.\nIf <code>creationParams<\/code> is non null then <code>cretaionParamsCodec<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformViewsService",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "viewType",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "layoutDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "creationParams",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "creationParamsCodec",
                            "type": "services.MessageCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PlatformViewsService\/initAndroidView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AndroidViewController initAndroidView({\n  @required int id,\n  @required String viewType,\n  @required TextDirection layoutDirection,\n  dynamic creationParams,\n  MessageCodec&lt;dynamic&gt; creationParamsCodec,\n}) {\n  assert(id != null);\n  assert(viewType != null);\n  assert(layoutDirection != null);\n  assert(creationParams == null || creationParamsCodec != null);\n  return AndroidViewController._(\n    id,\n    viewType,\n    creationParams,\n    creationParamsCodec,\n    layoutDirection,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "initUiKitView",
                    "type": "dart:async.Future<services.UiKitViewController>",
                    "desc": "<p>This is work in progress, not yet ready to be used, and requires a custom engine build. Creates a controller for a new iOS UIView.<\/p>\n<p><code>id<\/code> is an unused unique identifier generated with <a href=\"services\/platformViewsRegistry.html\">platformViewsRegistry<\/a>.<\/p>\n<p><code>viewType<\/code> is the identifier of the iOS view type to be created, a\nfactory for this view type must have been registered on the platform side.\nPlatform view factories are typically registered by plugin code.<\/p>\n<p>The <code>id,<\/code>viewType, and <code>layoutDirection<\/code> parameters must not be null.\nIf <code>creationParams<\/code> is non null then <code>cretaionParamsCodec<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.PlatformViewsService",
                    "sig": "",
                    "params": [
                        {
                            "name": "id",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "viewType",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "layoutDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "creationParams",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "creationParamsCodec",
                            "type": "services.MessageCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/PlatformViewsService\/initUiKitView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;UiKitViewController&gt; initUiKitView({\n  @required int id,\n  @required String viewType,\n  @required TextDirection layoutDirection,\n  dynamic creationParams,\n  MessageCodec&lt;dynamic&gt; creationParamsCodec,\n}) async {\n  assert(id != null);\n  assert(viewType != null);\n  assert(layoutDirection != null);\n  assert(creationParams == null || creationParamsCodec != null);\n\n  \/\/ TODO(amirh): pass layoutDirection once the system channel supports it.\n  final Map&lt;String, dynamic&gt; args = &lt;String, dynamic&gt;{\n    'id': id,\n    'viewType': viewType,\n  };\n  if (creationParams != null) {\n    final ByteData paramsByteData = creationParamsCodec.encodeMessage(creationParams);\n    args['params'] = Uint8List.view(\n      paramsByteData.buffer,\n      0,\n      paramsByteData.lengthInBytes,\n    );\n  }\n  await SystemChannels.platform_views.invokeMethod&lt;void&gt;('create', args);\n  return UiKitViewController._(id, layoutDirection);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "services.UiKitViewController"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/PlatformViewsService-class.html",
            "desc": "<p>Provides access to the platform views service.<\/p>\n<p>This service allows creating and controlling Android views.<\/p>\n<p>See also: <code>PlatformView<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PlatformViewsService"
        },
        {
            "name": "services.RawFloatingCursorPoint",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawFloatingCursorPoint",
                    "type": "",
                    "desc": "<p>Creates information for setting the position and state of a floating\ncursor.<\/p>\n<p><code>state<\/code> must not be null and <code>offset<\/code> must not be null if the state is\n<a href=\"services\/FloatingCursorDragState-class.html\">FloatingCursorDragState.Update<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawFloatingCursorPoint",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "state",
                            "type": "services.FloatingCursorDragState",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawFloatingCursorPoint\/RawFloatingCursorPoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RawFloatingCursorPoint({\n  this.offset,\n  @required this.state,\n}) : assert(state != null),\n     assert(state == FloatingCursorDragState.Update ? offset != null : true);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>The raw position of the floating cursor as determined by the iOS sdk.<\/p>\n        ",
                    "memberOf": "services.RawFloatingCursorPoint",
                    "isConstant": false,
                    "href": "services\/RawFloatingCursorPoint\/offset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset offset\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "state",
                    "type": "services.FloatingCursorDragState",
                    "types": [],
                    "desc": "<p>The state of the floating cursor.<\/p>\n        ",
                    "memberOf": "services.RawFloatingCursorPoint",
                    "isConstant": false,
                    "href": "services\/RawFloatingCursorPoint\/state.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FloatingCursorDragState state\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawFloatingCursorPoint-class.html",
            "desc": "<p>The current state and position of the floating cursor.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawFloatingCursorPoint"
        },
        {
            "name": "services.RawKeyDownEvent",
            "extends": [
                "services.RawKeyEvent",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyDownEvent",
                    "type": "",
                    "desc": "<p>Creates a key event that represents the user pressing a key.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyDownEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "services.RawKeyEventData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "character",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyDownEvent\/RawKeyDownEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyDownEvent({\n  @required RawKeyEventData data,\n  String character,\n}) : super(data: data, character: character);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyDownEvent-class.html",
            "desc": "<p>The user has pressed a key on the keyboard.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyDownEvent"
        },
        {
            "name": "services.RawKeyEvent",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyEvent",
                    "type": "",
                    "desc": "<p>Initializes fields for subclasses, and provides a const constructor for\nconst subclasses.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "services.RawKeyEventData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "character",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyEvent\/RawKeyEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEvent({\n  @required this.data,\n  this.character,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RawKeyEvent.fromMessage",
                    "type": "",
                    "desc": "<p>Creates a concrete <a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a> class from a message in the form received\non the <a href=\"services\/SystemChannels\/keyEvent-constant.html\">SystemChannels.keyEvent<\/a> channel.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyEvent\/RawKeyEvent.fromMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RawKeyEvent.fromMessage(Map&lt;String, dynamic&gt; message) {\n  RawKeyEventData data;\n\n  final String keymap = message['keymap'];\n  switch (keymap) {\n    case 'android':\n      data = RawKeyEventDataAndroid(\n        flags: message['flags'] ?? 0,\n        codePoint: message['codePoint'] ?? 0,\n        keyCode: message['keyCode'] ?? 0,\n        plainCodePoint: message['plainCodePoint'] ?? 0,\n        scanCode: message['scanCode'] ?? 0,\n        metaState: message['metaState'] ?? 0,\n      );\n      break;\n    case 'fuchsia':\n      data = RawKeyEventDataFuchsia(\n        hidUsage: message['hidUsage'] ?? 0,\n        codePoint: message['codePoint'] ?? 0,\n        modifiers: message['modifiers'] ?? 0,\n      );\n      break;\n    case 'macos':\n      data = RawKeyEventDataMacOs(\n          characters: message['characters'] ?? '',\n          charactersIgnoringModifiers:\n              message['charactersIgnoringModifiers'] ?? '',\n          keyCode: message['keyCode'] ?? 0,\n          modifiers: message['modifiers'] ?? 0);\n      break;\n    default:\n      \/\/ We don't yet implement raw key events on iOS or other platforms, but\n      \/\/ we don't hit this exception because the engine never sends us these\n      \/\/ messages.\n      throw FlutterError('Unknown keymap for key events: $keymap');\n  }\n\n  final String type = message['type'];\n  switch (type) {\n    case 'keydown':\n      return RawKeyDownEvent(data: data, character: message['character']);\n    case 'keyup':\n      return RawKeyUpEvent(data: data);\n    default:\n      throw FlutterError('Unknown key event type: $type');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isKeyPressed",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given <code>KeyboardKey<\/code> is pressed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.LogicalKeyboardKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEvent\/isKeyPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isKeyPressed(LogicalKeyboardKey key) =&gt; RawKeyboard.instance.keysPressed.contains(key);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "character",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the Unicode character (grapheme cluster) completed by this\nkeystroke, if any.<\/p>\n<p>This will only return a character if this keystroke, combined with any\npreceding keystroke(s), generated a character, and only on a \"key down\"\nevent. It will return null if no character has been generated by the\nkeystroke (e.g. a \"dead\" or \"combining\" key), or if the corresponding key\nis a key without a visual representation, such as a modifier key or a\ncontrol key.<\/p>\n<p>This can return multiple Unicode code points, since some characters (more\naccurately referred to as grapheme clusters) are made up of more than one\ncode point.<\/p>\n<p>The <code>character<\/code> doesn't take into account edits by an input method editor\n(IME), or manage the visibility of the soft keyboard on touch devices. For\ncomposing text, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or <a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since\nthose automatically handle many of the complexities of managing keyboard\ninput.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/character.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String character\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "data",
                    "type": "services.RawKeyEventData",
                    "types": [],
                    "desc": "<p>Platform-specific information about the key event.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/data.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RawKeyEventData data\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAltPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a ALT modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Note that the ALTGR key that appears on some keyboards is considered to be\nthe same as <a href=\"services\/LogicalKeyboardKey\/altRight-constant.html\">LogicalKeyboardKey.altRight<\/a> on some platforms (notably\nAndroid). On platforms that can distinguish between <code>altRight<\/code> and\n<code>altGr<\/code>, a press of <code>altGr<\/code> will not return true here, and will need to be\ntested for separately.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which alt key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/isAltPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAltPressed {\n  return isKeyPressed(LogicalKeyboardKey.altLeft) || isKeyPressed(LogicalKeyboardKey.altRight);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isControlPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a CTRL modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which control key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/isControlPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isControlPressed {\n  return isKeyPressed(LogicalKeyboardKey.controlLeft) || isKeyPressed(LogicalKeyboardKey.controlRight);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isMetaPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a META modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which meta key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/isMetaPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMetaPressed {\n  return isKeyPressed(LogicalKeyboardKey.metaLeft) || isKeyPressed(LogicalKeyboardKey.metaRight);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isShiftPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a SHIFT modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which shift key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/isShiftPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isShiftPressed {\n  return isKeyPressed(LogicalKeyboardKey.shiftLeft) || isKeyPressed(LogicalKeyboardKey.shiftRight);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "logicalKey",
                    "type": "services.LogicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/logicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LogicalKeyboardKey get logicalKey =&gt; data.logicalKey;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalKey",
                    "type": "services.PhysicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the physical location of this key.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEvent\/logicalKey.html\">logicalKey<\/a> for the non-location specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEvent\/character.html\">character<\/a> for the character generated by this keypress (if any).<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEvent",
                    "isConstant": false,
                    "href": "services\/RawKeyEvent\/physicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PhysicalKeyboardKey get physicalKey =&gt; data.physicalKey;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "services.RawKeyDownEvent",
                "services.RawKeyUpEvent"
            ],
            "realImplementors": [
                "services.RawKeyDownEvent",
                "services.RawKeyUpEvent"
            ],
            "cn": [],
            "href": "services\/RawKeyEvent-class.html",
            "desc": "<p>Defines the interface for raw key events.<\/p>\n<p>Raw key events pass through as much information as possible from the\nunderlying platform's key events, which allows them to provide a high level\nof fidelity but a low level of portability.<\/p>\n<p>The event also provides an abstraction for the <a href=\"services\/RawKeyEvent\/physicalKey.html\">physicalKey<\/a> and the\n<a href=\"services\/RawKeyEvent\/logicalKey.html\">logicalKey<\/a>, describing the physical location of the key, and the logical\nmeaning of the key, respectively. These are more portable representations of\nthe key events, and should produce the same results regardless of platform.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/LogicalKeyboardKey-class.html\">LogicalKeyboardKey<\/a>, an object that describes the logical meaning of a\nkey.<\/li>\n<li>\n<a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>, an object that describes the physical location of\na key.<\/li>\n<li>\n<a href=\"services\/RawKeyDownEvent-class.html\">RawKeyDownEvent<\/a>, a specialization for events representing the user\npressing a key.<\/li>\n<li>\n<a href=\"services\/RawKeyUpEvent-class.html\">RawKeyUpEvent<\/a>, a specialization for events representing the user\nreleasing a key.<\/li>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li>\n<li>\n<a href=\"widgets\/RawKeyboardListener-class.html\">RawKeyboardListener<\/a>, a widget that listens for raw key events.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyEvent"
        },
        {
            "name": "services.RawKeyEventData",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyEventData",
                    "type": "",
                    "desc": "<p>Abstract const constructor.<\/p>\n<p>This constructor enables subclasses to provide const constructors so that\nthey can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventData",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/RawKeyEventData\/RawKeyEventData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventData();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getModifierSide",
                    "type": "services.KeyboardSide",
                    "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventData",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventData\/getModifierSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">KeyboardSide getModifierSide(ModifierKey key);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isModifierPressed",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventData",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "side",
                            "type": "services.KeyboardSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventData\/isModifierPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isAltPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a ALT modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which alt key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/isAltPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAltPressed =&gt; isModifierPressed(ModifierKey.altModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isControlPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a CTRL modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which control key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/isControlPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isControlPressed =&gt; isModifierPressed(ModifierKey.controlModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isMetaPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a META modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which meta key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/isMetaPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMetaPressed =&gt; isModifierPressed(ModifierKey.metaModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isShiftPressed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if a SHIFT modifier key was pressed at the time of this\nevent, regardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which shift key was pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/isShiftPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isShiftPressed =&gt; isModifierPressed(ModifierKey.shiftModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventData\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/keyLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get keyLabel;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "logicalKey",
                    "type": "services.LogicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/logicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LogicalKeyboardKey get logicalKey;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "modifiersPressed",
                    "type": "dart:core.Map<services.ModifierKey<services.KeyboardSide>>",
                    "types": [
                        "dart:core.Map",
                        "services.ModifierKey",
                        "services.KeyboardSide"
                    ],
                    "desc": "<p>Returns a map of modifier keys that were pressed at the time of this\nevent, and the keyboard side or sides that the key was on.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/modifiersPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;ModifierKey, KeyboardSide&gt; get modifiersPressed {\n  final Map&lt;ModifierKey, KeyboardSide&gt; result = &lt;ModifierKey, KeyboardSide&gt;{};\n  for (ModifierKey key in ModifierKey.values) {\n    if (isModifierPressed(key)) {\n      result[key] = getModifierSide(key);\n    }\n  }\n  return result;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalKey",
                    "type": "services.PhysicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventData\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventData",
                    "isConstant": false,
                    "href": "services\/RawKeyEventData\/physicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PhysicalKeyboardKey get physicalKey;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "services.RawKeyEventDataAndroid",
                "services.RawKeyEventDataFuchsia",
                "services.RawKeyEventDataMacOs"
            ],
            "realImplementors": [
                "services.RawKeyEventDataAndroid",
                "services.RawKeyEventDataFuchsia",
                "services.RawKeyEventDataMacOs"
            ],
            "cn": [],
            "href": "services\/RawKeyEventData-class.html",
            "desc": "<p>Base class for platform-specific key event data.<\/p>\n<p>This base class exists to have a common type to use for each of the\ntarget platform's key event data structures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid-class.html\">RawKeyEventDataAndroid<\/a>, a specialization for Android.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia-class.html\">RawKeyEventDataFuchsia<\/a>, a specialization for Fuchsia.<\/li>\n<li>\n<a href=\"services\/RawKeyDownEvent-class.html\">RawKeyDownEvent<\/a> and <a href=\"services\/RawKeyUpEvent-class.html\">RawKeyUpEvent<\/a>, the classes that hold the\nreference to <a href=\"services\/RawKeyEventData-class.html\">RawKeyEventData<\/a> subclasses.<\/li>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses these interfaces to expose key data.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyEventData"
        },
        {
            "name": "services.RawKeyEventDataAndroid",
            "extends": [
                "services.RawKeyEventData",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyEventDataAndroid",
                    "type": "",
                    "desc": "<p>Creates a key event data structure specific for Android.<\/p>\n<p>The <code>flags<\/code>, <code>codePoint<\/code>, <code>keyCode<\/code>, <code>scanCode<\/code>, and <code>metaState<\/code> arguments\nmust not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "sig": "",
                    "params": [
                        {
                            "name": "flags",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codePoint",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "plainCodePoint",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "keyCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scanCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "metaState",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyEventDataAndroid\/RawKeyEventDataAndroid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventDataAndroid({\n  this.flags = 0,\n  this.codePoint = 0,\n  this.plainCodePoint = 0,\n  this.keyCode = 0,\n  this.scanCode = 0,\n  this.metaState = 0,\n}) : assert(flags != null),\n     assert(codePoint != null),\n     assert(keyCode != null),\n     assert(scanCode != null),\n     assert(metaState != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getModifierSide",
                    "type": "services.KeyboardSide",
                    "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataAndroid\/getModifierSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nKeyboardSide getModifierSide(ModifierKey key) {\n  KeyboardSide findSide(int leftMask, int rightMask) {\n    final int combinedMask = leftMask | rightMask;\n    final int combined = metaState &amp; combinedMask;\n    if (combined == leftMask) {\n      return KeyboardSide.left;\n    } else if (combined == rightMask) {\n      return KeyboardSide.right;\n    } else if (combined == combinedMask) {\n      return KeyboardSide.all;\n    }\n    return null;\n  }\n\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return findSide(modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return findSide(modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return findSide(modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return findSide(modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      return KeyboardSide.all;\n  }\n\n  assert(false, 'Not handling $key type properly.');\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isModifierPressed",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "side",
                            "type": "services.KeyboardSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataAndroid\/isModifierPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any }) {\n  assert(side != null);\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return _isLeftRightModifierPressed(side, modifierControl, modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return _isLeftRightModifierPressed(side, modifierShift, modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return _isLeftRightModifierPressed(side, modifierAlt, modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return _isLeftRightModifierPressed(side, modifierMeta, modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n      return metaState &amp; modifierCapsLock != 0;\n    case ModifierKey.numLockModifier:\n      return metaState &amp; modifierNumLock != 0;\n    case ModifierKey.scrollLockModifier:\n      return metaState &amp; modifierScrollLock != 0;\n    case ModifierKey.functionModifier:\n      return metaState &amp; modifierFunction != 0;\n    case ModifierKey.symbolModifier:\n      return metaState &amp; modifierSym != 0;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataAndroid\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(keyLabel: $keyLabel flags: $flags, codePoint: $codePoint, '\n    'keyCode: $keyCode, scanCode: $scanCode, metaState: $metaState, '\n    'modifiers down: $modifiersPressed)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "codePoint",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The Unicode code point represented by the key event, if any.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar()<\/a>\nfor more information.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/codePoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int codePoint\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flags",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current set of additional flags for this event.<\/p>\n<p>Flags indicate things like repeat state, etc.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getFlags()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getFlags()<\/a>\nfor more information.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/flags.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flags\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hardware key code corresponding to this key event.<\/p>\n<p>This is the physical key that was pressed, not the Unicode character.\nSee <a href=\"services\/RawKeyEventDataAndroid\/codePoint.html\">codePoint<\/a> for the Unicode character.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getKeyCode()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getKeyCode()<\/a>\nfor more information.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/keyCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int keyCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventDataAndroid\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/keyLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get keyLabel =&gt; plainCodePoint == 0 ? null : String.fromCharCode(plainCodePoint &amp; _kCombiningCharacterMask);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "logicalKey",
                    "type": "services.LogicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/logicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLogicalKeyboardKey get logicalKey {\n  \/\/ Look to see if the keyCode is a printable number pad key, so that a\n  \/\/ difference between regular keys (e.g. \"=\") and the number pad version\n  \/\/ (e.g. the \"=\" on the number pad) can be determined.\n  final LogicalKeyboardKey numPadKey = kAndroidNumPadMap[keyCode];\n  if (numPadKey != null) {\n    return numPadKey;\n  }\n\n  \/\/ If it has a non-control-character label, then either return the existing\n  \/\/ constant, or construct a new Unicode-based key from it. Don't mark it as\n  \/\/ autogenerated, since the label uniquely identifies an ID from the Unicode\n  \/\/ plane.\n  if (keyLabel != null &amp;&amp; keyLabel.isNotEmpty &amp;&amp; !LogicalKeyboardKey.isControlCharacter(keyLabel)) {\n    final int combinedCodePoint = plainCodePoint &amp; _kCombiningCharacterMask;\n    final int keyId = LogicalKeyboardKey.unicodePlane | (combinedCodePoint &amp; LogicalKeyboardKey.valueMask);\n    return LogicalKeyboardKey.findKeyByKeyId(keyId) ?? LogicalKeyboardKey(\n      keyId,\n      keyLabel: keyLabel,\n      debugName: kReleaseMode ? null : 'Key ${keyLabel.toUpperCase()}',\n    );\n  }\n\n  \/\/ Look to see if the keyCode is one we know about and have a mapping for.\n  LogicalKeyboardKey newKey = kAndroidToLogicalKey[keyCode];\n  if (newKey != null) {\n    return newKey;\n  }\n\n  \/\/ This is a non-printable key that we don't know about, so we mint a new\n  \/\/ code with the autogenerated bit set.\n  const int androidKeyIdPlane = 0x00200000000;\n  newKey ??= LogicalKeyboardKey(\n    androidKeyIdPlane | keyCode | LogicalKeyboardKey.autogeneratedMask,\n    debugName: kReleaseMode ? null : 'Unknown Android key code $keyCode',\n  );\n  return newKey;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "metaState",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The modifiers that were present when the key event occurred.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getMetaState()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getMetaState()<\/a>\nfor the numerical values of the <code>metaState<\/code>. Many of these constants are\nalso replicated as static constants in this class.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/modifiersPressed.html\">modifiersPressed<\/a>, which returns a Map of currently pressed modifiers\nand their keyboard side.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a>, to see if a specific modifier is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isControlPressed.html\">isControlPressed<\/a>, to see if a CTRL key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isShiftPressed.html\">isShiftPressed<\/a>, to see if a SHIFT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isAltPressed.html\">isAltPressed<\/a>, to see if an ALT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isMetaPressed.html\">isMetaPressed<\/a>, to see if a META key is pressed.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/metaState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int metaState\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether one of\nthe ALT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierAlt = 0x02\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierAlt",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierCapsLock-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the CAPS\nLOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierCapsLock = 0x100000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierCapsLock",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether one of\nthe CTRL modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierControl = 0x1000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierControl",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierFunction-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the\nFunction modifier key (Fn) is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierFunction = 0x08\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierFunction",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierLeftAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the left\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftAlt = 0x10\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftAlt",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierLeftControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the left\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftControl = 0x2000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftControl",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierLeftMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the left\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftMeta = 0x20000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftMeta",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierLeftShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the left\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftShift = 0x40\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftShift",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether one of\nthe META modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierMeta = 0x10000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierMeta",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierNone-constant.html",
                    "desc": "<p>No modifier keys are pressed in the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierNone = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierNone",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierNumLock-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the NUM\nLOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierNumLock = 0x200000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierNumLock",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierRightAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the right\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightAlt = 0x20\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightAlt",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierRightControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the right\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightControl = 0x4000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightControl",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierRightMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the right\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightMeta = 0x40000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightMeta",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierRightShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the right\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightShift = 0x80\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightShift",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierScrollLock-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the\nSCROLL LOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierScrollLock = 0x400000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierScrollLock",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether one of\nthe SHIFT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierShift = 0x01\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierShift",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataAndroid\/modifierSym-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field to test whether the SYM\nmodifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataAndroid\/metaState.html\">metaState<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierSym = 0x04\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierSym",
                    "memberOf": "services.RawKeyEventDataAndroid"
                },
                {
                    "name": "physicalKey",
                    "type": "services.PhysicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/physicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPhysicalKeyboardKey get physicalKey =&gt; kAndroidToPhysicalKey[scanCode] ?? PhysicalKeyboardKey.none;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "plainCodePoint",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The Unicode code point represented by the key event, if any, without\nregard to any modifier keys which are currently pressed.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n<p>This is the result of calling KeyEvent.getUnicodeChar(0) on Android.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar(int)\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar(int)<\/a>\nfor more information.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/plainCodePoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int plainCodePoint\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scanCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hardware scan code id corresponding to this key event.<\/p>\n<p>These values are not reliable and vary from device to device, so this\ninformation is mainly useful for debugging.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getScanCode()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getScanCode()<\/a>\nfor more information.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataAndroid",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataAndroid\/scanCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scanCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyEventDataAndroid-class.html",
            "desc": "<p>Platform-specific key event data for Android.<\/p>\n<p>This object contains information about key events obtained from Android's\n<code>KeyEvent<\/code> interface.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyEventDataAndroid"
        },
        {
            "name": "services.RawKeyEventDataFuchsia",
            "extends": [
                "services.RawKeyEventData",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyEventDataFuchsia",
                    "type": "",
                    "desc": "<p>Creates a key event data structure specific for Fuchsia.<\/p>\n<p>The <code>hidUsage<\/code>, <code>codePoint<\/code>, and <code>modifiers<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "sig": "",
                    "params": [
                        {
                            "name": "hidUsage",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "codePoint",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "modifiers",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyEventDataFuchsia\/RawKeyEventDataFuchsia.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventDataFuchsia({\n  this.hidUsage = 0,\n  this.codePoint = 0,\n  this.modifiers = 0,\n}) : assert(hidUsage != null),\n     assert(codePoint != null),\n     assert(modifiers != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getModifierSide",
                    "type": "services.KeyboardSide",
                    "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataFuchsia\/getModifierSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nKeyboardSide getModifierSide(ModifierKey key) {\n  KeyboardSide findSide(int leftMask, int rightMask, int combinedMask) {\n    final int combined = modifiers &amp; combinedMask;\n    if (combined == leftMask) {\n      return KeyboardSide.left;\n    } else if (combined == rightMask) {\n      return KeyboardSide.right;\n    } else if (combined == combinedMask) {\n      return KeyboardSide.all;\n    }\n    return null;\n  }\n\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return findSide(modifierLeftControl, modifierRightControl, modifierControl);\n    case ModifierKey.shiftModifier:\n      return findSide(modifierLeftShift, modifierRightShift, modifierShift);\n    case ModifierKey.altModifier:\n      return findSide(modifierLeftAlt, modifierRightAlt, modifierAlt);\n    case ModifierKey.metaModifier:\n      return findSide(modifierLeftMeta, modifierRightMeta, modifierMeta);\n    case ModifierKey.capsLockModifier:\n      return (modifiers &amp; modifierCapsLock == 0) ? null : KeyboardSide.all;\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      \/\/ Fuchsia doesn't support these modifiers, so they can't be pressed.\n      return null;\n  }\n\n  assert(false, 'Not handling $key type properly.');\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isModifierPressed",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "side",
                            "type": "services.KeyboardSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataFuchsia\/isModifierPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any }) {\n  assert(side != null);\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return _isLeftRightModifierPressed(side, modifierControl, modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return _isLeftRightModifierPressed(side, modifierShift, modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return _isLeftRightModifierPressed(side, modifierAlt, modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return _isLeftRightModifierPressed(side, modifierMeta, modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n      return modifiers &amp; modifierCapsLock != 0;\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      \/\/ Fuchsia doesn't have masks for these keys (yet).\n      return false;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataFuchsia\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(hidUsage: $hidUsage, codePoint: $codePoint, modifiers: $modifiers, '\n      'modifiers down: $modifiersPressed)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "codePoint",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The Unicode code point represented by the key event, if any.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/codePoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int codePoint\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hidUsage",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The USB HID usage.<\/p>\n<p>See <a href=\"http:\/\/www.usb.org\/developers\/hidpage\/Hut1_12v2.pdf\">www.usb.org\/developers\/hidpage\/Hut1_12v2.pdf<\/a> for more\ninformation.<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/hidUsage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int hidUsage\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventDataFuchsia\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/keyLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get keyLabel =&gt; codePoint == 0 ? null : String.fromCharCode(codePoint);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "logicalKey",
                    "type": "services.LogicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/logicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLogicalKeyboardKey get logicalKey {\n  \/\/ If the key has a printable representation, then make a logical key based\n  \/\/ on that.\n  if (codePoint != 0) {\n    return LogicalKeyboardKey(\n      LogicalKeyboardKey.unicodePlane | codePoint &amp; LogicalKeyboardKey.valueMask,\n      keyLabel: keyLabel,\n      debugName: kReleaseMode ? null : 'Key $keyLabel',\n    );\n  }\n\n  \/\/ Look to see if the hidUsage is one we know about and have a mapping for.\n  LogicalKeyboardKey newKey = kFuchsiaToLogicalKey[hidUsage | LogicalKeyboardKey.hidPlane];\n  if (newKey != null) {\n    return newKey;\n  }\n\n  \/\/ This is a non-printable key that we don't know about, so we mint a new\n  \/\/ code with the autogenerated bit set.\n  const int fuchsiaKeyIdPlane = 0x00300000000;\n  newKey ??= LogicalKeyboardKey(\n    fuchsiaKeyIdPlane | hidUsage | LogicalKeyboardKey.autogeneratedMask,\n    debugName: kReleaseMode ? null : 'Ephemeral Fuchsia key code $hidUsage',\n  );\n  return newKey;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe ALT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierAlt = modifierLeftAlt | modifierRightAlt\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierAlt",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierCapsLock-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the CAPS\nLOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierCapsLock = 0x1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierCapsLock",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe CTRL modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierControl = modifierLeftControl | modifierRightControl\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierControl",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierLeftAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftAlt = 0x20\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftAlt",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierLeftControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftControl = 0x8\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftControl",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierLeftMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftMeta = 0x80\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftMeta",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierLeftShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftShift = 0x2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftShift",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe META modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierMeta = modifierLeftMeta | modifierRightMeta\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierMeta",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierNone-constant.html",
                    "desc": "<p>The <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field indicates that no modifier keys are pressed if it\nequals this value.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierNone = 0x0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierNone",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierRightAlt-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightAlt = 0x40\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightAlt",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierRightControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightControl = 0x10\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightControl",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierRightMeta-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightMeta = 0x100\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightMeta",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierRightShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightShift = 0x4\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightShift",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataFuchsia\/modifierShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe SHIFT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierShift = modifierLeftShift | modifierRightShift\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierShift",
                    "memberOf": "services.RawKeyEventDataFuchsia"
                },
                {
                    "name": "modifiers",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The modifiers that were present when the key event occurred.<\/p>\n<p>See <a href=\"https:\/\/fuchsia.googlesource.com\/garnet\/+\/master\/public\/fidl\/fuchsia.ui.input\/input_event_constants.fidl\">fuchsia.googlesource.com\/garnet\/+\/master\/public\/fidl\/fuchsia.ui.input\/input_event_constants.fidl<\/a>\nfor the numerical values of the modifiers. Many of these are also\nreplicated as static constants in this class.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/modifiersPressed.html\">modifiersPressed<\/a>, which returns a Map of currently pressed modifiers\nand their keyboard side.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a>, to see if a specific modifier is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isControlPressed.html\">isControlPressed<\/a>, to see if a CTRL key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isShiftPressed.html\">isShiftPressed<\/a>, to see if a SHIFT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isAltPressed.html\">isAltPressed<\/a>, to see if an ALT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isMetaPressed.html\">isMetaPressed<\/a>, to see if a META key is pressed.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/modifiers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int modifiers\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalKey",
                    "type": "services.PhysicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataFuchsia",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataFuchsia\/physicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPhysicalKeyboardKey get physicalKey =&gt; kFuchsiaToPhysicalKey[hidUsage] ?? PhysicalKeyboardKey.none;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyEventDataFuchsia-class.html",
            "desc": "<p>Platform-specific key event data for Fuchsia.<\/p>\n<p>This object contains information about key events obtained from Fuchsia's\n<code>KeyData<\/code> interface.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyEventDataFuchsia"
        },
        {
            "name": "services.RawKeyEventDataMacOs",
            "extends": [
                "services.RawKeyEventData",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyEventDataMacOs",
                    "type": "",
                    "desc": "<p>Creates a key event data structure specific for macOS.<\/p>\n<p>The <code>characters<\/code>, <code>charactersIgnoringModifiers<\/code>, and <code>modifiers<\/code>, arguments\nmust not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "sig": "",
                    "params": [
                        {
                            "name": "characters",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "charactersIgnoringModifiers",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "keyCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "modifiers",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyEventDataMacOs\/RawKeyEventDataMacOs.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventDataMacOs({\n  this.characters = '',\n  this.charactersIgnoringModifiers = '',\n  this.keyCode = 0,\n  this.modifiers = 0,\n}) : assert(characters != null),\n     assert(charactersIgnoringModifiers != null),\n     assert(keyCode != null),\n     assert(modifiers != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getModifierSide",
                    "type": "services.KeyboardSide",
                    "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataMacOs\/getModifierSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nKeyboardSide getModifierSide(ModifierKey key) {\n  KeyboardSide findSide(int leftMask, int rightMask) {\n    final int combinedMask = leftMask | rightMask;\n    final int combined = modifiers &amp; combinedMask;\n    if (combined == leftMask) {\n      return KeyboardSide.left;\n    } else if (combined == rightMask) {\n      return KeyboardSide.right;\n    } else if (combined == combinedMask) {\n      return KeyboardSide.all;\n    }\n    return null;\n  }\n\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return findSide(modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return findSide(modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return findSide(modifierLeftOption, modifierRightOption);\n    case ModifierKey.metaModifier:\n      return findSide(modifierLeftCommand, modifierRightCommand);\n    case ModifierKey.capsLockModifier:\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      return KeyboardSide.all;\n  }\n\n  assert(false, 'Not handling $key type properly.');\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isModifierPressed",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "services.ModifierKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "side",
                            "type": "services.KeyboardSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataMacOs\/isModifierPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isModifierPressed(ModifierKey key, {KeyboardSide side = KeyboardSide.any}) {\n  final int independentModifier = modifiers &amp; deviceIndependentMask;\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return _isLeftRightModifierPressed(side, independentModifier &amp; modifierControl, modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return _isLeftRightModifierPressed(side, independentModifier &amp; modifierShift, modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return _isLeftRightModifierPressed(side, independentModifier &amp; modifierOption, modifierLeftOption, modifierRightOption);\n    case ModifierKey.metaModifier:\n      return _isLeftRightModifierPressed(side, independentModifier &amp; modifierCommand, modifierLeftCommand, modifierRightCommand);\n    case ModifierKey.capsLockModifier:\n      return independentModifier &amp; modifierCapsLock != 0;\n    case ModifierKey.numLockModifier:\n      return independentModifier &amp; modifierNumericPad != 0;\n    case ModifierKey.functionModifier:\n      return independentModifier &amp; modifierFunction != 0;\n    case ModifierKey.symbolModifier:\n    case ModifierKey.scrollLockModifier:\n      \/\/ These are not used in macOS keyboards.\n      return false;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/RawKeyEventDataMacOs\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(keyLabel: $keyLabel, keyCode: $keyCode, characters: $characters,'\n      ' unmodifiedCharacters: $charactersIgnoringModifiers, modifiers: $modifiers, '\n      'modifiers down: $modifiersPressed)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "characters",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The Unicode characters associated with a key-up or key-down event.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/documentation\/appkit\/nsevent\/1534183-characters?language=objc\">Apple's NSEvent documentation<\/a><\/li><\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/characters.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String characters\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "charactersIgnoringModifiers",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The characters generated by a key event as if no modifier key (except for\nShift) applies.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/documentation\/appkit\/nsevent\/1524605-charactersignoringmodifiers?language=objc\">Apple's NSEvent documentation<\/a><\/li><\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/charactersIgnoringModifiers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String charactersIgnoringModifiers\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/deviceIndependentMask-constant.html",
                    "desc": "<p>Used to retrieve only the device-independent modifier flags, allowing\napplications to mask off the device-dependent modifier flags, including\nevent coalescing information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int deviceIndependentMask = 0xffff0000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "deviceIndependentMask",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "name": "keyCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The virtual key code for the keyboard key associated with a key event.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/documentation\/appkit\/nsevent\/1534513-keycode?language=objc\">Apple's NSEvent documentation<\/a><\/li><\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/keyCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int keyCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventDataMacOs\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/keyLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get keyLabel =&gt; charactersIgnoringModifiers.isEmpty ? null : charactersIgnoringModifiers;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "logicalKey",
                    "type": "services.LogicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataMacOs\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataMacOs\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/logicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLogicalKeyboardKey get logicalKey {\n  \/\/ Look to see if the keyCode is a printable number pad key, so that a\n  \/\/ difference between regular keys (e.g. \"=\") and the number pad version\n  \/\/ (e.g. the \"=\" on the number pad) can be determined.\n  final LogicalKeyboardKey numPadKey = kMacOsNumPadMap[keyCode];\n  if (numPadKey != null) {\n    return numPadKey;\n  }\n\n  \/\/ Look to see if the keyCode is one we know about and have a mapping for.\n  if (keyLabel != null &amp;&amp;\n      !LogicalKeyboardKey.isControlCharacter(keyLabel)) {\n    assert(charactersIgnoringModifiers.length &lt;= 2);\n    int codeUnit = charactersIgnoringModifiers.codeUnitAt(0);\n    if (charactersIgnoringModifiers.length == 2) {\n      \/\/ Not covering length &gt; 2 case since &gt; 1 is already unlikely.\n      final int secondCode = charactersIgnoringModifiers.codeUnitAt(1);\n      codeUnit = (codeUnit &lt;&lt; 16) | secondCode;\n    }\n\n    final int keyId = LogicalKeyboardKey.unicodePlane | (codeUnit &amp; LogicalKeyboardKey.valueMask);\n    return LogicalKeyboardKey.findKeyByKeyId(keyId) ?? LogicalKeyboardKey(\n      keyId,\n      keyLabel: keyLabel,\n      debugName: kReleaseMode ? null : 'Key ${keyLabel.toUpperCase()}',\n    );\n  }\n\n  \/\/ This is a non-printable key that we don't know about, so we mint a new\n  \/\/ code with the autogenerated bit set.\n  const int macOsKeyIdPlane = 0x00500000000;\n\n  \/\/ Keys like \"backspace\" won't have a character, but it's known by the physical keyboard.\n  \/\/ Since there is no logical keycode map for macOS (macOS uses the keycode to reference\n  \/\/ physical keys), a LogicalKeyboardKey is created with the physical key's HID usage and\n  \/\/ debugName. This avoids the need for duplicating the physical key map.\n  if (physicalKey != PhysicalKeyboardKey.none) {\n    final int keyId = physicalKey.usbHidUsage | LogicalKeyboardKey.hidPlane;\n    return LogicalKeyboardKey.findKeyByKeyId(keyId) ?? LogicalKeyboardKey(\n      keyId,\n      keyLabel: physicalKey.debugName,\n      debugName: physicalKey.debugName,\n    );\n  }\n\n  return LogicalKeyboardKey(\n    macOsKeyIdPlane | keyCode | LogicalKeyboardKey.autogeneratedMask,\n    debugName: kReleaseMode ? null : 'Unknown macOS key code $keyCode',\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierCapsLock-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the CAPS\nLOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierCapsLock = 0x10000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierCapsLock",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierCommand-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether one of the\nCMD modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierCommand = 0x100000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierCommand",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether one of the\nCTRL modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierControl = 0x40000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierControl",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierFunction-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether one of the\nFUNCTION modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierFunction = 0x800000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierFunction",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierHelp-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the\nHELP modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierHelp = 0x400000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierHelp",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierLeftCommand-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the left\nCMD modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftCommand = 0x08\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftCommand",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierLeftControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the left\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftControl = 0x01\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftControl",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierLeftOption-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the left\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftOption = 0x20\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftOption",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierLeftShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the left\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftShift = 0x02\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierLeftShift",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierNumericPad-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether any key in\nthe numeric keypad is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierNumericPad = 0x200000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierNumericPad",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierOption-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether one of the\nALT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierOption = 0x80000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierOption",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierRightCommand-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the right\nCMD modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightCommand = 0x10\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightCommand",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierRightControl-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the right\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightControl = 0x2000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightControl",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierRightOption-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the right\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightOption = 0x40\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightOption",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierRightShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether the right\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightShift = 0x04\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierRightShift",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "type": "",
                    "href": "services\/RawKeyEventDataMacOs\/modifierShift-constant.html",
                    "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field to test whether one of the\nSHIFT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataMacOs\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataMacOs\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierShift = 0x20000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modifierShift",
                    "memberOf": "services.RawKeyEventDataMacOs"
                },
                {
                    "name": "modifiers",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>A mask of the current modifiers using the values in Modifier Flags.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/documentation\/appkit\/nsevent\/1535211-modifierflags?language=objc\">Apple's NSEvent documentation<\/a><\/li><\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/modifiers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int modifiers\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "physicalKey",
                    "type": "services.PhysicalKeyboardKey",
                    "types": [],
                    "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventDataMacOs\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataMacOs\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataMacOs\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
                    "memberOf": "services.RawKeyEventDataMacOs",
                    "isConstant": false,
                    "href": "services\/RawKeyEventDataMacOs\/physicalKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPhysicalKeyboardKey get physicalKey =&gt; kMacOsToPhysicalKey[keyCode] ?? PhysicalKeyboardKey.none;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyEventDataMacOs-class.html",
            "desc": "<p>Platform-specific key event data for macOS.<\/p>\n<p>This object contains information about key events obtained from macOS's\n<code>NSEvent<\/code> interface.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyEventDataMacOs"
        },
        {
            "name": "services.RawKeyUpEvent",
            "extends": [
                "services.RawKeyEvent",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "RawKeyUpEvent",
                    "type": "",
                    "desc": "<p>Creates a key event that represents the user releasing a key.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyUpEvent",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "services.RawKeyEventData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "character",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/RawKeyUpEvent\/RawKeyUpEvent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyUpEvent({\n  @required RawKeyEventData data,\n  String character,\n}) : super(data: data, character: character);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyUpEvent-class.html",
            "desc": "<p>The user has released a key on the keyboard.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyUpEvent"
        },
        {
            "name": "services.RawKeyboard",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Calls the listener every time the user presses or releases a key.<\/p>\n<p>Listeners can be removed with <a href=\"services\/RawKeyboard\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyboard",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "foundation.ValueChanged<services.RawKeyEvent>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.ValueChanged",
                                "services.RawKeyEvent"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyboard\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(ValueChanged&lt;RawKeyEvent&gt; listener) {\n  _listeners.add(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Stop calling the listener every time the user presses or releases a key.<\/p>\n<p>Listeners can be added with <a href=\"services\/RawKeyboard\/addListener.html\">addListener<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.RawKeyboard",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "foundation.ValueChanged<services.RawKeyEvent>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "foundation.ValueChanged",
                                "services.RawKeyEvent"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/RawKeyboard\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(ValueChanged&lt;RawKeyEvent&gt; listener) {\n  _listeners.remove(listener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "instance",
                    "type": "services.RawKeyboard",
                    "types": [],
                    "desc": "<p>The shared instance of <a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>.<\/p>\n        ",
                    "memberOf": "services.RawKeyboard",
                    "isConstant": false,
                    "href": "services\/RawKeyboard\/instance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final RawKeyboard instance = RawKeyboard._()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keysPressed",
                    "type": "dart:core.Set<services.LogicalKeyboardKey>",
                    "types": [
                        "dart:core.Set",
                        "services.LogicalKeyboardKey"
                    ],
                    "desc": "<p>Returns the set of keys currently pressed.<\/p>\n        ",
                    "memberOf": "services.RawKeyboard",
                    "isConstant": false,
                    "href": "services\/RawKeyboard\/keysPressed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;LogicalKeyboardKey&gt; get keysPressed {\n  return _keysPressed.toSet();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/RawKeyboard-class.html",
            "desc": "<p>An interface for listening to raw key events.<\/p>\n<p>Raw key events pass through as much information as possible from the\nunderlying platform's key events, which makes them provide a high level of\nfidelity but a low level of portability.<\/p>\n<p>A <a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a> is useful for listening to raw key events and hardware\nbuttons that are represented as keys. Typically used by games and other apps\nthat use keyboards for purposes other than text entry.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyDownEvent-class.html\">RawKeyDownEvent<\/a> and <a href=\"services\/RawKeyUpEvent-class.html\">RawKeyUpEvent<\/a>, the classes used to describe\nspecific raw key events.<\/li>\n<li>\n<a href=\"widgets\/RawKeyboardListener-class.html\">RawKeyboardListener<\/a>, a widget that listens for raw key events.<\/li>\n<li>\n<a href=\"services\/SystemChannels\/keyEvent-constant.html\">SystemChannels.keyEvent<\/a>, the low-level channel used for receiving\nevents from the system.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawKeyboard"
        },
        {
            "name": "services.ServicesBinding",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "ServicesBinding",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.ServicesBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/ServicesBinding\/ServicesBinding.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "evict",
                    "type": "",
                    "desc": "<p>Called in response to the <code>ext.flutter.evict<\/code> service extension.<\/p>\n<p>This is used by the <code>flutter<\/code> tool during hot reload so that any images\nthat have changed on disk get cleared from caches.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ServicesBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "asset",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/ServicesBinding\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid evict(String asset) {\n  rootBundle.evict(asset);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ServicesBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/ServicesBinding\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  _instance = this;\n  window\n    ..onPlatformMessage = BinaryMessages.handlePlatformMessage;\n  initLicenses();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initLicenses",
                    "type": "",
                    "desc": "<p>Adds relevant licenses to the <a href=\"foundation\/LicenseRegistry-class.html\">LicenseRegistry<\/a>.<\/p>\n<p>By default, the <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>'s implementation of <a href=\"services\/ServicesBinding\/initLicenses.html\">initLicenses<\/a> adds\nall the licenses collected by the <code>flutter<\/code> tool during compilation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.ServicesBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/ServicesBinding\/initLicenses.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid initLicenses() {\n  LicenseRegistry.addLicense(_addLicenses);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initServiceExtensions",
                    "type": "",
                    "desc": "<p>Called when the binding is initialized, to register service\nextensions.<\/p>\n<p>Bindings that want to expose service extensions should overload\nthis method to register them using calls to\n<a href=\"foundation\/BindingBase\/registerSignalServiceExtension.html\">registerSignalServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerBoolServiceExtension.html\">registerBoolServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerNumericServiceExtension.html\">registerNumericServiceExtension<\/a>, and\n<a href=\"foundation\/BindingBase\/registerServiceExtension.html\">registerServiceExtension<\/a> (in increasing order of complexity).<\/p>\n<p>Implementations of this method must call their superclass\nimplementation.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses\">github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses<\/a><\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.ServicesBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/ServicesBinding\/initServiceExtensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initServiceExtensions() {\n  super.initServiceExtensions();\n\n  assert(() {\n    registerStringServiceExtension(\n      \/\/ ext.flutter.evict value=foo.png will cause foo.png to be evicted from\n      \/\/ the rootBundle cache and cause the entire image cache to be cleared.\n      \/\/ This is used by hot reload mode to clear out the cache of resources\n      \/\/ that have changed.\n      name: 'evict',\n      getter: () async =&gt; '',\n      setter: (String value) async {\n        evict(value);\n      },\n    );\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "instance",
                    "type": "services.ServicesBinding",
                    "types": [],
                    "desc": "<p>The current <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>, if one has been created.<\/p>\n        ",
                    "memberOf": "services.ServicesBinding",
                    "isConstant": false,
                    "href": "services\/ServicesBinding\/instance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static ServicesBinding get instance =&gt; _instance;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": true,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/ServicesBinding-mixin.html",
            "desc": "<p>Listens for platform messages and directs them to <a href=\"services\/BinaryMessages-class.html\">BinaryMessages<\/a>.<\/p>\n<p>The <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> also registers a <a href=\"foundation\/LicenseEntryCollector.html\">LicenseEntryCollector<\/a> that exposes\nthe licenses found in the <code>LICENSE<\/code> file stored at the root of the asset\nbundle, and implements the <code>ext.flutter.evict<\/code> service extension (see\n<a href=\"services\/ServicesBinding\/evict.html\">evict<\/a>).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "mixin",
            "shortname": "ServicesBinding"
        },
        {
            "name": "services.StandardMessageCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "StandardMessageCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> using the Flutter standard binary encoding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/StandardMessageCodec\/StandardMessageCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StandardMessageCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeMessage",
                    "type": "",
                    "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/decodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndynamic decodeMessage(ByteData message) {\n  if (message == null)\n    return null;\n  final ReadBuffer buffer = ReadBuffer(message);\n  final dynamic result = readValue(buffer);\n  if (buffer.hasRemaining)\n    throw const FormatException('Message corrupted');\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "encodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/encodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMessage(dynamic message) {\n  if (message == null)\n    return null;\n  final WriteBuffer buffer = WriteBuffer();\n  writeValue(buffer, message);\n  return buffer.done();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readSize",
                    "type": "dart:core.int",
                    "desc": "<p>Reads a non-negative int from <code>buffer<\/code> as written by <a href=\"services\/StandardMessageCodec\/writeSize.html\">writeSize<\/a>.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "foundation.ReadBuffer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/readSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readSize(ReadBuffer buffer) {\n  final int value = buffer.getUint8();\n  switch (value) {\n    case 254:\n      return buffer.getUint16();\n    case 255:\n      return buffer.getUint32();\n    default:\n      return value;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readValue",
                    "type": "",
                    "desc": "<p>Reads a value from <code>buffer<\/code> as written by <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "foundation.ReadBuffer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/readValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic readValue(ReadBuffer buffer) {\n  if (!buffer.hasRemaining)\n    throw const FormatException('Message corrupted');\n  final int type = buffer.getUint8();\n  return readValueOfType(type, buffer);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "readValueOfType",
                    "type": "",
                    "desc": "<p>Reads a value of the indicated <code>type<\/code> from <code>buffer<\/code>.<\/p>\n<p>The codec can be extended by overriding this method, calling super for\ntypes that the extension does not handle. See the discussion at\n<a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "type",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "buffer",
                            "type": "foundation.ReadBuffer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/readValueOfType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic readValueOfType(int type, ReadBuffer buffer) {\n  switch (type) {\n    case _valueNull:\n      return null;\n    case _valueTrue:\n      return true;\n    case _valueFalse:\n      return false;\n    case _valueInt32:\n      return buffer.getInt32();\n    case _valueInt64:\n      return buffer.getInt64();\n    case _valueFloat64:\n      return buffer.getFloat64();\n    case _valueLargeInt:\n    case _valueString:\n      final int length = readSize(buffer);\n      return utf8.decoder.convert(buffer.getUint8List(length));\n    case _valueUint8List:\n      final int length = readSize(buffer);\n      return buffer.getUint8List(length);\n    case _valueInt32List:\n      final int length = readSize(buffer);\n      return buffer.getInt32List(length);\n    case _valueInt64List:\n      final int length = readSize(buffer);\n      return buffer.getInt64List(length);\n    case _valueFloat64List:\n      final int length = readSize(buffer);\n      return buffer.getFloat64List(length);\n    case _valueList:\n      final int length = readSize(buffer);\n      final dynamic result = List&lt;dynamic&gt;(length);\n      for (int i = 0; i &lt; length; i++)\n        result[i] = readValue(buffer);\n      return result;\n    case _valueMap:\n      final int length = readSize(buffer);\n      final dynamic result = &lt;dynamic, dynamic&gt;{};\n      for (int i = 0; i &lt; length; i++)\n        result[readValue(buffer)] = readValue(buffer);\n      return result;\n    default: throw const FormatException('Message corrupted');\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeSize",
                    "type": "",
                    "desc": "<p>Writes a non-negative 32-bit integer <code>value<\/code> to <code>buffer<\/code>\nusing an expanding 1-5 byte encoding that optimizes for small values.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "foundation.WriteBuffer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/writeSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeSize(WriteBuffer buffer, int value) {\n  assert(0 &lt;= value &amp;&amp; value &lt;= 0xffffffff);\n  if (value &lt; 254) {\n    buffer.putUint8(value);\n  } else if (value &lt;= 0xffff) {\n    buffer.putUint8(254);\n    buffer.putUint16(value);\n  } else {\n    buffer.putUint8(255);\n    buffer.putUint32(value);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeValue",
                    "type": "",
                    "desc": "<p>Writes <code>value<\/code> to <code>buffer<\/code> by first writing a type discriminator\nbyte, then the value itself.<\/p>\n<p>This method may be called recursively to serialize container values.<\/p>\n<p>Type discriminators 0 through 127 inclusive are reserved for use by the\nbase class, as follows:<\/p>\n<ul>\n<li>null = 0<\/li>\n<li>true = 1<\/li>\n<li>false = 2<\/li>\n<li>32 bit integer = 3<\/li>\n<li>64 bit integer = 4<\/li>\n<li>larger integers = 5 (see below)<\/li>\n<li>64 bit floating-point number = 6<\/li>\n<li>String = 7<\/li>\n<li>Uint8List = 8<\/li>\n<li>Int32List = 9<\/li>\n<li>Int64List = 10<\/li>\n<li>Float64List = 11<\/li>\n<li>List = 12<\/li>\n<li>Map = 13<\/li>\n<li>Reserved for future expansion: 14..127<\/li>\n<\/ul>\n<p>The codec can be extended by overriding this method, calling super\nfor values that the extension does not handle. Type discriminators\nused by extensions must be greater than or equal to 128 in order to avoid\nclashes with any later extensions to the base class.<\/p>\n<p>The \"larger integers\" type, 5, is never used by <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>. A subclass\ncould represent big integers from another package using that type. The\nformat is first the type byte (0x05), then the actual number as an ASCII\nstring giving the hexadecimal representation of the integer, with the\nstring's length as encoded by <a href=\"services\/StandardMessageCodec\/writeSize.html\">writeSize<\/a> followed by the string bytes. On\nAndroid, that would get converted to a <code>java.math.BigInteger<\/code> object. On\niOS, the string representation is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMessageCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "foundation.WriteBuffer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMessageCodec\/writeValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeValue(WriteBuffer buffer, dynamic value) {\n  if (value == null) {\n    buffer.putUint8(_valueNull);\n  } else if (value is bool) {\n    buffer.putUint8(value ? _valueTrue : _valueFalse);\n  } else if (value is int) {\n    if (-0x7fffffff - 1 &lt;= value &amp;&amp; value &lt;= 0x7fffffff) {\n      buffer.putUint8(_valueInt32);\n      buffer.putInt32(value);\n    } else {\n      buffer.putUint8(_valueInt64);\n      buffer.putInt64(value);\n    }\n  } else if (value is double) {\n    buffer.putUint8(_valueFloat64);\n    buffer.putFloat64(value);\n  } else if (value is String) {\n    buffer.putUint8(_valueString);\n    final List&lt;int&gt; bytes = utf8.encoder.convert(value);\n    writeSize(buffer, bytes.length);\n    buffer.putUint8List(bytes);\n  } else if (value is Uint8List) {\n    buffer.putUint8(_valueUint8List);\n    writeSize(buffer, value.length);\n    buffer.putUint8List(value);\n  } else if (value is Int32List) {\n    buffer.putUint8(_valueInt32List);\n    writeSize(buffer, value.length);\n    buffer.putInt32List(value);\n  } else if (value is Int64List) {\n    buffer.putUint8(_valueInt64List);\n    writeSize(buffer, value.length);\n    buffer.putInt64List(value);\n  } else if (value is Float64List) {\n    buffer.putUint8(_valueFloat64List);\n    writeSize(buffer, value.length);\n    buffer.putFloat64List(value);\n  } else if (value is List) {\n    buffer.putUint8(_valueList);\n    writeSize(buffer, value.length);\n    for (final dynamic item in value) {\n      writeValue(buffer, item);\n    }\n  } else if (value is Map) {\n    buffer.putUint8(_valueMap);\n    writeSize(buffer, value.length);\n    value.forEach((dynamic key, dynamic value) {\n      writeValue(buffer, key);\n      writeValue(buffer, value);\n    });\n  } else {\n    throw ArgumentError.value(value);\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/StandardMessageCodec-class.html",
            "desc": "<p><a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> using the Flutter standard binary encoding.<\/p>\n<p>Supported messages are acyclic values of these forms:<\/p>\n<ul>\n<li>null<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/num-class.html\">num<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>s<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>s, <a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>s, <a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>s, <a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>s of supported values<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>s from supported values to supported values<\/li>\n<\/ul>\n<p>Decoded values will use <code>List&lt;dynamic&gt;<\/code> and <code>Map&lt;dynamic, dynamic&gt;<\/code>\nirrespective of content.<\/p>\n<p>On Android, messages are represented as follows:<\/p>\n<ul>\n<li>null: null<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>: <code>java.lang.Boolean<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/int-class.html\">int<\/a>: <code>java.lang.Integer<\/code> for values that are representable using 32-bit\ntwo's complement; <code>java.lang.Long<\/code> otherwise<\/li>\n<li>\n<a href=\"dart-core\/double-class.html\">double<\/a>: <code>java.lang.Double<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>: <code>java.lang.String<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>: <code>byte[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>: <code>int[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>: <code>long[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>: <code>double[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>: <code>java.util.ArrayList<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>: <code>java.util.HashMap<\/code>\n<\/li>\n<\/ul>\n<p>On iOS, messages are represented as follows:<\/p>\n<ul>\n<li>null: nil<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>: <code>NSNumber numberWithBool:<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/int-class.html\">int<\/a>: <code>NSNumber numberWithInt:<\/code> for values that are representable using\n32-bit two's complement; <code>NSNumber numberWithLong:<\/code> otherwise<\/li>\n<li>\n<a href=\"dart-core\/double-class.html\">double<\/a>: <code>NSNumber numberWithDouble:<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>: <code>NSString<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>, <a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>, <a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>, <a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>:\n<code>FlutterStandardTypedData<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>: <code>NSArray<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>: <code>NSDictionary<\/code>\n<\/li>\n<\/ul>\n<p>When sending a <code>java.math.BigInteger<\/code> from Java, it is converted into a\n<a href=\"dart-core\/String-class.html\">String<\/a> with the hexadecimal representation of the integer. (The value is\ntagged as being a big integer; subclasses of this class could be made to\nsupport it natively; see the discussion at <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.) This codec does\nnot support sending big integers from Dart.<\/p>\n<p>The codec is extensible by subclasses overriding <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a> and\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StandardMessageCodec"
        },
        {
            "name": "services.StandardMethodCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "StandardMethodCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> using the Flutter standard binary encoding.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "messageCodec",
                            "type": "services.StandardMessageCodec",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/StandardMethodCodec\/StandardMethodCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StandardMethodCodec([this.messageCodec = const StandardMessageCodec()]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeEnvelope",
                    "type": "",
                    "desc": "<p>Decodes the specified result <code>envelope<\/code> from binary.<\/p>\n<p>Throws <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>, if <code>envelope<\/code> represents an error, otherwise\nreturns the enveloped result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "envelope",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMethodCodec\/decodeEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndynamic decodeEnvelope(ByteData envelope) {\n  \/\/ First byte is zero in success case, and non-zero otherwise.\n  if (envelope.lengthInBytes == 0)\n    throw const FormatException('Expected envelope, got nothing');\n  final ReadBuffer buffer = ReadBuffer(envelope);\n  if (buffer.getUint8() == 0)\n    return messageCodec.readValue(buffer);\n  final dynamic errorCode = messageCodec.readValue(buffer);\n  final dynamic errorMessage = messageCodec.readValue(buffer);\n  final dynamic errorDetails = messageCodec.readValue(buffer);\n  if (errorCode is String &amp;&amp; (errorMessage == null || errorMessage is String) &amp;&amp; !buffer.hasRemaining)\n    throw PlatformException(code: errorCode, message: errorMessage, details: errorDetails);\n  else\n    throw const FormatException('Invalid envelope');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "decodeMethodCall",
                    "type": "services.MethodCall",
                    "desc": "<p>Decodes the specified <code>methodCall<\/code> from binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "methodCall",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMethodCodec\/decodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMethodCall decodeMethodCall(ByteData methodCall) {\n  final ReadBuffer buffer = ReadBuffer(methodCall);\n  final dynamic method = messageCodec.readValue(buffer);\n  final dynamic arguments = messageCodec.readValue(buffer);\n  if (method is String &amp;&amp; !buffer.hasRemaining)\n    return MethodCall(method, arguments);\n  else\n    throw const FormatException('Invalid method call');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeErrorEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes an error result into a binary envelope.<\/p>\n<p>The specified error <code>code<\/code>, human-readable error <code>message<\/code>, and error\n<code>details<\/code> correspond to the fields of <a href=\"services\/PlatformException-class.html\">PlatformException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "code",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "details",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMethodCodec\/encodeErrorEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeErrorEnvelope({ @required String code, String message, dynamic details }) {\n  final WriteBuffer buffer = WriteBuffer();\n  buffer.putUint8(1);\n  messageCodec.writeValue(buffer, code);\n  messageCodec.writeValue(buffer, message);\n  messageCodec.writeValue(buffer, details);\n  return buffer.done();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeMethodCall",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>methodCall<\/code> into binary.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "call",
                            "type": "services.MethodCall",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMethodCodec\/encodeMethodCall.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMethodCall(MethodCall call) {\n  final WriteBuffer buffer = WriteBuffer();\n  messageCodec.writeValue(buffer, call.method);\n  messageCodec.writeValue(buffer, call.arguments);\n  return buffer.done();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeSuccessEnvelope",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes a successful <code>result<\/code> into a binary envelope.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StandardMethodCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "result",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StandardMethodCodec\/encodeSuccessEnvelope.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeSuccessEnvelope(dynamic result) {\n  final WriteBuffer buffer = WriteBuffer();\n  buffer.putUint8(0);\n  messageCodec.writeValue(buffer, result);\n  return buffer.done();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "messageCodec",
                    "type": "services.StandardMessageCodec",
                    "types": [],
                    "desc": "<p>The message codec that this method codec uses for encoding values.<\/p>\n        ",
                    "memberOf": "services.StandardMethodCodec",
                    "isConstant": false,
                    "href": "services\/StandardMethodCodec\/messageCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StandardMessageCodec messageCodec\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/StandardMethodCodec-class.html",
            "desc": "<p><a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> using the Flutter standard binary encoding.<\/p>\n<p>The standard codec is guaranteed to be compatible with the corresponding\nstandard codec for FlutterMethodChannels on the host platform. These parts\nof the Flutter SDK are evolved synchronously.<\/p>\n<p>Values supported as method arguments and result payloads are those supported\nby <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StandardMethodCodec"
        },
        {
            "name": "services.StringCodec",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "StringCodec",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with UTF-8 encoded String messages.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StringCodec",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/StringCodec\/StringCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StringCodec();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decodeMessage",
                    "type": "dart:core.String",
                    "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StringCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:typed_data.ByteData",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StringCodec\/decodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString decodeMessage(ByteData message) {\n  if (message == null)\n    return null;\n  return utf8.decoder.convert(message.buffer.asUint8List(message.offsetInBytes, message.lengthInBytes));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encodeMessage",
                    "type": "dart:typed_data.ByteData",
                    "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.StringCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/StringCodec\/encodeMessage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMessage(String message) {\n  if (message == null)\n    return null;\n  final Uint8List encoded = utf8.encoder.convert(message);\n  return encoded.buffer.asByteData();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/StringCodec-class.html",
            "desc": "<p><a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> with UTF-8 encoded String messages.<\/p>\n<p>On Android, messages will be represented using <code>java.util.String<\/code>.\nOn iOS, messages will be represented using <code>NSString<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StringCodec"
        },
        {
            "name": "services.SystemChannels",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "services\/SystemChannels\/accessibility-constant.html",
                    "desc": "<p>A <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for accessibility events.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsEvent-class.html\">SemanticsEvent<\/a> and its subclasses for a list of valid accessibility\nevents that can be sent over this channel.<\/li>\n<li>\n<a href=\"semantics\/SemanticsNode\/sendEvent.html\">SemanticsNode.sendEvent<\/a>, which uses this channel to dispatch events.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; accessibility = BasicMessageChannel&lt;dynamic&gt;(\n  'flutter\/accessibility',\n  StandardMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "accessibility",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/keyEvent-constant.html",
                    "desc": "<p>A JSON <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for keyboard events.<\/p>\n<p>Each incoming message received on this channel (registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>) consists of a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\nplatform-specific data, plus a <code>type<\/code> field which is either <code>keydown<\/code>, or\n<code>keyup<\/code>.<\/p>\n<p>On Android, the available fields are those described by\n<a href=\"services\/RawKeyEventDataAndroid-class.html\">RawKeyEventDataAndroid<\/a>'s properties.<\/p>\n<p>On Fuchsia, the available fields are those described by\n<a href=\"services\/RawKeyEventDataFuchsia-class.html\">RawKeyEventDataFuchsia<\/a>'s properties.<\/p>\n<p>No messages are sent on other platforms currently.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this channel to expose key data.<\/li>\n<li>\n<a href=\"services\/RawKeyEvent\/RawKeyEvent.fromMessage.html\">new RawKeyEvent.fromMessage<\/a>, which can decode this data into the <a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a>\nsubclasses mentioned above.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; keyEvent = BasicMessageChannel&lt;dynamic&gt;(\n    'flutter\/keyevent',\n    JSONMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "keyEvent",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/lifecycle-constant.html",
                    "desc": "<p>A string <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for lifecycle events.<\/p>\n<p>Valid messages are string representations of the values of the\n<a href=\"dart-ui\/AppLifecycleState-class.html\">AppLifecycleState<\/a> enumeration. A handler can be registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver\/didChangeAppLifecycleState.html\">WidgetsBindingObserver.didChangeAppLifecycleState<\/a>, which triggers\nwhenever a message is received on this channel.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;String&gt; lifecycle = BasicMessageChannel&lt;String&gt;(\n    'flutter\/lifecycle',\n    StringCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lifecycle",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/navigation-constant.html",
                    "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for navigation.<\/p>\n<p>The following incoming methods are defined for this channel (registered\nusing <a href=\"services\/MethodChannel\/setMethodCallHandler.html\">MethodChannel.setMethodCallHandler<\/a>):<\/p>\n<ul>\n<li>\n<p><code>popRoute<\/code>, which is called when the system wants the current route to\nbe removed (e.g. if the user hits a system-level back button).<\/p>\n<\/li>\n<li>\n<p><code>pushRoute<\/code>, which is called with a single string argument when the\noperating system instructs the application to open a particular page.<\/p>\n<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver\/didPopRoute.html\">WidgetsBindingObserver.didPopRoute<\/a> and\n<a href=\"widgets\/WidgetsBindingObserver\/didPushRoute.html\">WidgetsBindingObserver.didPushRoute<\/a>, which expose this channel's\nmethods.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel navigation = MethodChannel(\n    'flutter\/navigation',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "navigation",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/platform-constant.html",
                    "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for invoking miscellaneous platform methods.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul>\n<li>\n<p><code>Clipboard.setData<\/code>: Places the data from the <code>text<\/code> entry of the\nargument, which must be a <a href=\"dart-core\/Map-class.html\">Map<\/a>, onto the system clipboard. See\n<a href=\"services\/Clipboard\/setData.html\">Clipboard.setData<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>Clipboard.getData<\/code>: Returns the data that has the format specified in\nthe argument, a <a href=\"dart-core\/String-class.html\">String<\/a>, from the system clipboard. The only format\ncurrently supported is <code>text\/plain<\/code> (<a href=\"services\/Clipboard\/kTextPlain-constant.html\">Clipboard.kTextPlain<\/a>). The\nresult is a <a href=\"dart-core\/Map-class.html\">Map<\/a> with a single key, <code>text<\/code>. See <a href=\"services\/Clipboard\/getData.html\">Clipboard.getData<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>HapticFeedback.vibrate<\/code>: Triggers a system-default haptic response.\nSee <a href=\"services\/HapticFeedback\/vibrate.html\">HapticFeedback.vibrate<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemSound.play<\/code>: Triggers a system audio effect. The argument must\nbe a <a href=\"dart-core\/String-class.html\">String<\/a> describing the desired effect; currently only <code>click<\/code> is\nsupported. See <a href=\"services\/SystemSound\/play.html\">SystemSound.play<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setPreferredOrientations<\/code>: Informs the operating system\nof the desired orientation of the display. The argument is a <a href=\"dart-core\/List-class.html\">List<\/a> of\nvalues which are string representations of values of the\n<a href=\"services\/DeviceOrientation-class.html\">DeviceOrientation<\/a> enum. See <a href=\"services\/SystemChrome\/setPreferredOrientations.html\">SystemChrome.setPreferredOrientations<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setApplicationSwitcherDescription<\/code>: Informs the operating\nsystem of the desired label and color to be used to describe the\napplication in any system-level application lists (e.g. application\nswitchers). The argument is a <a href=\"dart-core\/Map-class.html\">Map<\/a> with two keys, <code>label<\/code> giving a\n<a href=\"dart-core\/String-class.html\">String<\/a> description, and <code>primaryColor<\/code> giving a 32 bit integer value\n(the lower eight bits being the blue channel, the next eight bits being\nthe green channel, the next eight bits being the red channel, and the\nhigh eight bits being set, as from <a href=\"dart-ui\/Color\/value.html\">Color.value<\/a> for an opaque color).\nThe <code>primaryColor<\/code> can also be zero to indicate that the system default\nshould be used. See <a href=\"services\/SystemChrome\/setPreferredOrientations.html\">SystemChrome.setPreferredOrientations<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setEnabledSystemUIOverlays<\/code>: Specifies the set of system\noverlays to have visible when the application is running. The argument\nis a <a href=\"dart-core\/List-class.html\">List<\/a> of values which are string representations of values of the\n<a href=\"services\/SystemUiOverlay-class.html\">SystemUiOverlay<\/a> enum. See <a href=\"services\/SystemChrome\/setEnabledSystemUIOverlays.html\">SystemChrome.setEnabledSystemUIOverlays<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setSystemUIOverlayStyle<\/code>: Specifies whether system\noverlays (e.g. the status bar on Android or iOS) should be <code>light<\/code> or\n<code>dark<\/code>. The argument is one of those two strings. See\n<a href=\"services\/SystemChrome\/setSystemUIOverlayStyle.html\">SystemChrome.setSystemUIOverlayStyle<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemNavigator.pop<\/code>: Tells the operating system to close the\napplication, or the closest equivalent. See <a href=\"services\/SystemNavigator\/pop.html\">SystemNavigator.pop<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>Calls to methods that are not implemented on the shell side are ignored\n(so it is safe to call methods when the relevant plugin might be missing).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel platform = OptionalMethodChannel(\n    'flutter\/platform',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "platform",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/platform_views-constant.html",
                    "desc": "<p>A <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for controlling platform views.<\/p>\n<p>See also: <a href=\"services\/PlatformViewsService-class.html\">PlatformViewsService<\/a> for the available operations on this channel.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel platform_views = MethodChannel(\n  'flutter\/platform_views',\n  StandardMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "platform_views",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/skia-constant.html",
                    "desc": "<p>A <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for configuring the Skia graphics library.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul><li>\n<code>Skia.setResourceCacheMaxBytes<\/code>: Set the maximum number of bytes that\ncan be held in the GPU resource cache.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel skia = MethodChannel(\n  'flutter\/skia',\n  JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "skia",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/system-constant.html",
                    "desc": "<p>A JSON <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for system events.<\/p>\n<p>Events are exposed as <a href=\"dart-core\/Map-class.html\">Map<\/a>s with string keys. The <code>type<\/code> key specifies\nthe type of the event; the currently supported system event types are\nthose listed below. A handler can be registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>.<\/p>\n<ul><li>\n<code>memoryPressure<\/code>: Indicates that the operating system would like\napplications to release caches to free up more memory. See\n<a href=\"widgets\/WidgetsBindingObserver\/didHaveMemoryPressure.html\">WidgetsBindingObserver.didHaveMemoryPressure<\/a>, which triggers whenever\na message is received on this channel.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; system = BasicMessageChannel&lt;dynamic&gt;(\n    'flutter\/system',\n    JSONMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "system",
                    "memberOf": "services.SystemChannels"
                },
                {
                    "type": "",
                    "href": "services\/SystemChannels\/textInput-constant.html",
                    "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for handling text input.<\/p>\n<p>This channel exposes a system text input control for interacting with IMEs\n(input method editors, for example on-screen keyboards). There is one\ncontrol, and at any time it can have one active transaction. Transactions\nare represented by an integer. New Transactions are started by\n<code>TextInput.setClient<\/code>. Messages that are sent are assumed to be for the\ncurrent transaction (the last \"client\" set by <code>TextInput.setClient<\/code>).\nMessages received from the shell side specify the transaction to which\nthey apply, so that stale messages referencing past transactions can be\nignored.<\/p>\n<p>The methods described below are wrapped in a more convenient form by the\n<a href=\"services\/TextInput-class.html\">TextInput<\/a> and <a href=\"services\/TextInputConnection-class.html\">TextInputConnection<\/a> class.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul>\n<li>\n<p><code>TextInput.setClient<\/code>: Establishes a new transaction. The arguments is\na <a href=\"dart-core\/List-class.html\">List<\/a> whose first value is an integer representing a previously\nunused transaction identifier, and the second is a <a href=\"dart-core\/String-class.html\">String<\/a> with a\nJSON-encoded object with five keys, as obtained from\n<code>TextInputConfiguration.toJSON<\/code>. This method must be invoked before any\nothers (except <code>TextInput.hide<\/code>). See <a href=\"services\/TextInput\/attach.html\">TextInput.attach<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.show<\/code>: Show the keyboard. See <a href=\"services\/TextInputConnection\/show.html\">TextInputConnection.show<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.setEditingState<\/code>: Update the value in the text editing\ncontrol. The argument is a <a href=\"dart-core\/String-class.html\">String<\/a> with a JSON-encoded object with\nseven keys, as obtained from <a href=\"services\/TextEditingValue\/toJSON.html\">TextEditingValue.toJSON<\/a>. See\n<a href=\"services\/TextInputConnection\/setEditingState.html\">TextInputConnection.setEditingState<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.clearClient<\/code>: End the current transaction. The next method\ncalled must be <code>TextInput.setClient<\/code> (or <code>TextInput.hide<\/code>). See\n<a href=\"services\/TextInputConnection\/close.html\">TextInputConnection.close<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.hide<\/code>: Hide the keyboard. Unlike the other methods, this can\nbe called at any time. See <a href=\"services\/TextInputConnection\/close.html\">TextInputConnection.close<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>The following incoming methods are defined for this channel (registered\nusing <a href=\"services\/MethodChannel\/setMethodCallHandler.html\">MethodChannel.setMethodCallHandler<\/a>). In each case, the first argument\nis a transaction identifier. Calls for stale transactions should be ignored.<\/p>\n<ul>\n<li>\n<p><code>TextInputClient.updateEditingState<\/code>: The user has changed the contents\nof the text control. The second argument is a <a href=\"dart-core\/String-class.html\">String<\/a> containing a\nJSON-encoded object with seven keys, in the form expected by <a href=\"services\/TextEditingValue\/TextEditingValue.fromJSON.html\">new\nTextEditingValue.fromJSON<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInputClient.performAction<\/code>: The user has triggered an action. The\nsecond argument is a <a href=\"dart-core\/String-class.html\">String<\/a> consisting of the stringification of one\nof the values of the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> enum.<\/p>\n<\/li>\n<\/ul>\n<p>Calls to methods that are not implemented on the shell side are ignored\n(so it is safe to call methods when the relevant plugin might be missing).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel textInput = OptionalMethodChannel(\n    'flutter\/textinput',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "textInput",
                    "memberOf": "services.SystemChannels"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemChannels-class.html",
            "desc": "<p>Platform channels used by the Flutter system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemChannels"
        },
        {
            "name": "services.SystemChrome",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "restoreSystemUIOverlays",
                    "type": "dart:async.Future",
                    "desc": "<p>Restores the system overlays to the last settings provided via\n<a href=\"services\/SystemChrome\/setEnabledSystemUIOverlays.html\">setEnabledSystemUIOverlays<\/a>. May be used when the platform force enables\/disables\nUI elements.<\/p>\n<p>For example, when the Android keyboard disables hidden status and navigation bars,\nthis can be called to re-disable the bars when the keyboard is closed.<\/p>\n<p>On Android, the system UI cannot be changed until 1 second after the previous\nchange. This is to prevent malware from permanently hiding navigation buttons.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemChrome",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/SystemChrome\/restoreSystemUIOverlays.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; restoreSystemUIOverlays() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.restoreSystemUIOverlays',\n    null,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setApplicationSwitcherDescription",
                    "type": "dart:async.Future",
                    "desc": "<p>Specifies the description of the current state of the application as it\npertains to the application switcher (also known as \"recent tasks\").<\/p>\n<p>Any part of the description that is unsupported on the current platform\nwill be ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemChrome",
                    "sig": "",
                    "params": [
                        {
                            "name": "description",
                            "type": "services.ApplicationSwitcherDescription",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemChrome\/setApplicationSwitcherDescription.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setApplicationSwitcherDescription(ApplicationSwitcherDescription description) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setApplicationSwitcherDescription',\n    &lt;String, dynamic&gt;{\n      'label': description.label,\n      'primaryColor': description.primaryColor,\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setEnabledSystemUIOverlays",
                    "type": "dart:async.Future",
                    "desc": "<p>Specifies the set of system overlays to have visible when the application\nis running.<\/p>\n<p>The <code>overlays<\/code> argument is a list of <a href=\"services\/SystemUiOverlay-class.html\">SystemUiOverlay<\/a> enum values\ndenoting the overlays to show.<\/p>\n<p>If a particular overlay is unsupported on the platform, enabling or\ndisabling that overlay will be ignored.<\/p>\n<p>The settings here can be overridden by the platform when System UI becomes\nnecessary for functionality.<\/p>\n<p>For example, on Android, when the keyboard becomes visible, it will enable the\nnavigation bar and status bar system UI overlays. When the keyboard is closed,\nAndroid will not restore the previous UI visibility settings, and the UI\nvisibility cannot be changed until 1 second after the keyboard is closed to\nprevent malware locking users from navigation buttons.<\/p>\n<p>To regain \"fullscreen\" after text entry, the UI overlays should be set again\nafter a delay of 1 second. This can be achieved through <a href=\"services\/SystemChrome\/restoreSystemUIOverlays.html\">restoreSystemUIOverlays<\/a>\nor calling this again. Otherwise, the original UI overlay settings will be\nautomatically restored only when the application loses and regains focus.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemChrome",
                    "sig": "",
                    "params": [
                        {
                            "name": "overlays",
                            "type": "dart:core.List<services.SystemUiOverlay>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "services.SystemUiOverlay"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemChrome\/setEnabledSystemUIOverlays.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setEnabledSystemUIOverlays(List&lt;SystemUiOverlay&gt; overlays) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setEnabledSystemUIOverlays',\n    _stringify(overlays),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setPreferredOrientations",
                    "type": "dart:async.Future",
                    "desc": "<p>Specifies the set of orientations the application interface can\nbe displayed in.<\/p>\n<p>The <code>orientation<\/code> argument is a list of <a href=\"services\/DeviceOrientation-class.html\">DeviceOrientation<\/a> enum values.\nThe empty list causes the application to defer to the operating system\ndefault.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemChrome",
                    "sig": "",
                    "params": [
                        {
                            "name": "orientations",
                            "type": "dart:core.List<services.DeviceOrientation>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "services.DeviceOrientation"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemChrome\/setPreferredOrientations.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setPreferredOrientations(List&lt;DeviceOrientation&gt; orientations) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setPreferredOrientations',\n    _stringify(orientations),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setSystemUIOverlayStyle",
                    "type": "",
                    "desc": "<p>Specifies the style to use for the system overlays that are visible (if\nany).<\/p>\n<p>This method will schedule the embedder update to be run in a microtask.\nAny subsequent calls to this method during the current event loop will\noverwrite the pending value, such that only the last specified value takes\neffect.<\/p>\n<p>Call this API in code whose lifecycle matches that of the desired\nsystem UI styles. For instance, to change the system UI style on a new\npage, consider calling when pushing\/popping a new <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>.<\/p>\n<p>However, the <a href=\"material\/AppBar-class.html\">AppBar<\/a> widget automatically sets the system overlay style\nbased on its <a href=\"material\/AppBar\/brightness.html\">AppBar.brightness<\/a>, so configure that instead of calling\nthis method directly. Likewise, do the same for <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>\nvia <a href=\"cupertino\/CupertinoNavigationBar\/backgroundColor.html\">CupertinoNavigationBar.backgroundColor<\/a>.<\/p>\n<p>If a particular style is not supported on the platform, selecting it will\nhave no effect.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark);\n  return Placeholder();\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>For more complex control of the system overlay styles, consider using\nan <a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a> widget instead of calling <code>setSystemUiOverlayStyle<\/code>\ndirectly. This widget places a value directly into the layer tree where\nit can be hit-tested by the framework. On every frame, the framework will\nhit-test and select the annotated region it finds under the status and\nnavigation bar and synthesize them into a single style. This can be used\nto configure the system styles when an app bar is not used.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nThe following example creates a widget that changes the status bar color\nto a random value on Android.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/services.dart';\nimport 'dart:math' as math;\n\n\/\/ ...\n\nfinal _random = math.Random();\nSystemUiOverlayStyle _currentStyle = SystemUiOverlayStyle.light;\n\nvoid _changeColor() {\n  final color = Color.fromRGBO(\n    _random.nextInt(255),\n    _random.nextInt(255),\n    _random.nextInt(255),\n    1.0,\n  );\n  setState(() {\n    _currentStyle = SystemUiOverlayStyle.dark.copyWith(\n      statusBarColor: color,\n    );\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  return AnnotatedRegion(\n    value: _currentStyle,\n    child: Center(\n      child: RaisedButton(\n        child: const Text('Change Color'),\n        onPressed: _changeColor,\n       ),\n     ),\n   );\n }<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=services.SystemChrome.setSystemUIOverlayStyle.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for services.SystemChrome.setSystemUIOverlayStyle.2\n\n\/\/ The following example creates a widget that changes the status bar color\n\/\/ to a random value on Android.\n\nimport 'package:flutter\/material.dart';\n\nimport 'package:flutter\/services.dart';\nimport 'dart:math' as math;\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatefulWidget(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  final _random = math.Random();\n  SystemUiOverlayStyle _currentStyle = SystemUiOverlayStyle.light;\n\n  void _changeColor() {\n    final color = Color.fromRGBO(\n      _random.nextInt(255),\n      _random.nextInt(255),\n      _random.nextInt(255),\n      1.0,\n    );\n    setState(() {\n      _currentStyle = SystemUiOverlayStyle.dark.copyWith(\n        statusBarColor: color,\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnnotatedRegion(\n      value: _currentStyle,\n      child: Center(\n        child: RaisedButton(\n          child: const Text('Change Color'),\n          onPressed: _changeColor,\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a>, the widget used to place data into the layer tree.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "services.SystemChrome",
                    "sig": "",
                    "params": [
                        {
                            "name": "style",
                            "type": "services.SystemUiOverlayStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemChrome\/setSystemUIOverlayStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void setSystemUIOverlayStyle(SystemUiOverlayStyle style) {\n  assert(style != null);\n  if (_pendingStyle != null) {\n    \/\/ The microtask has already been queued; just update the pending value.\n    _pendingStyle = style;\n    return;\n  }\n  if (style == _latestStyle) {\n    \/\/ Trivial success: no microtask has been queued and the given style is\n    \/\/ already in effect, so no need to queue a microtask.\n    return;\n  }\n  _pendingStyle = style;\n  scheduleMicrotask(() {\n    assert(_pendingStyle != null);\n    if (_pendingStyle != _latestStyle) {\n      SystemChannels.platform.invokeMethod&lt;void&gt;(\n        'SystemChrome.setSystemUIOverlayStyle',\n        _pendingStyle._toMap(),\n      );\n      _latestStyle = _pendingStyle;\n    }\n    _pendingStyle = null;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "latestStyle",
                    "type": "services.SystemUiOverlayStyle",
                    "types": [],
                    "desc": "<p>The last style that was set using <a href=\"services\/SystemChrome\/setSystemUIOverlayStyle.html\">SystemChrome.setSystemUIOverlayStyle<\/a>.<\/p>\n        ",
                    "memberOf": "services.SystemChrome",
                    "isConstant": false,
                    "href": "services\/SystemChrome\/latestStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nstatic SystemUiOverlayStyle get latestStyle =&gt; _latestStyle;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemChrome-class.html",
            "desc": "<p>Controls specific aspects of the operating system's graphical interface and\nhow it interacts with the application.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemChrome"
        },
        {
            "name": "services.SystemNavigator",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "pop",
                    "type": "dart:async.Future",
                    "desc": "<p>Instructs the system navigator to remove this activity from the stack and\nreturn to the previous activity.<\/p>\n<p>On iOS, calls to this method are ignored because Apple's human interface\nguidelines state that applications should not exit themselves.<\/p>\n<p>This method should be preferred over calling <code>dart:io<\/code>'s <a href=\"dart-io\/exit.html\">exit<\/a> method, as\nthe latter may cause the underlying platform to act as if the application\nhad crashed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemNavigator",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/SystemNavigator\/pop.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; pop() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;('SystemNavigator.pop');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemNavigator-class.html",
            "desc": "<p>Controls specific aspects of the system navigation stack.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemNavigator"
        },
        {
            "name": "services.SystemSound",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "play",
                    "type": "dart:async.Future",
                    "desc": "<p>Play the specified system sound. If that sound is not present on the\nsystem, the call is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemSound",
                    "sig": "",
                    "params": [
                        {
                            "name": "type",
                            "type": "services.SystemSoundType",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemSound\/play.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; play(SystemSoundType type) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemSound.play',\n    type.toString(),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemSound-class.html",
            "desc": "<p>Provides access to the library of short system specific sounds for common\ntasks.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemSound"
        },
        {
            "type": "",
            "name": "services.SystemSoundType",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemSoundType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/SystemSoundType\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemSoundType-class.html",
            "desc": "<p>A sound provided by the system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "SystemSoundType"
        },
        {
            "type": "",
            "name": "services.SystemUiOverlay",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemUiOverlay",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/SystemUiOverlay\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemUiOverlay-class.html",
            "desc": "<p>Specifies a system overlay at a particular location.<\/p>\n<p>Used by <a href=\"services\/SystemChrome\/setEnabledSystemUIOverlays.html\">SystemChrome.setEnabledSystemUIOverlays<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "SystemUiOverlay"
        },
        {
            "name": "services.SystemUiOverlayStyle",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/SystemUiOverlayStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemUiOverlayStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemUiOverlayStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final SystemUiOverlayStyle typedOther = other;\n  return typedOther.systemNavigationBarColor == systemNavigationBarColor\n    &amp;&amp; typedOther.systemNavigationBarDividerColor == systemNavigationBarDividerColor\n    &amp;&amp; typedOther.statusBarColor == statusBarColor\n    &amp;&amp; typedOther.statusBarIconBrightness == statusBarIconBrightness\n    &amp;&amp; typedOther.statusBarBrightness == statusBarBrightness\n    &amp;&amp; typedOther.systemNavigationBarIconBrightness == systemNavigationBarIconBrightness;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SystemUiOverlayStyle",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"services\/SystemUiOverlayStyle-class.html\">SystemUiOverlayStyle<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemUiOverlayStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "systemNavigationBarColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "systemNavigationBarDividerColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "systemNavigationBarIconBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarIconBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/SystemUiOverlayStyle\/SystemUiOverlayStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SystemUiOverlayStyle({\n  this.systemNavigationBarColor,\n  this.systemNavigationBarDividerColor,\n  this.systemNavigationBarIconBrightness,\n  this.statusBarColor,\n  this.statusBarBrightness,\n  this.statusBarIconBrightness,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "services.SystemUiOverlayStyle",
                    "desc": "<p>Creates a copy of this theme with the given fields replaced with new values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemUiOverlayStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "systemNavigationBarColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "systemNavigationBarDividerColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statusBarIconBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "systemNavigationBarIconBrightness",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/SystemUiOverlayStyle\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SystemUiOverlayStyle copyWith({\n  Color systemNavigationBarColor,\n  Color systemNavigationBarDividerColor,\n  Color statusBarColor,\n  Brightness statusBarBrightness,\n  Brightness statusBarIconBrightness,\n  Brightness systemNavigationBarIconBrightness,\n}) {\n  return SystemUiOverlayStyle(\n    systemNavigationBarColor: systemNavigationBarColor ?? this.systemNavigationBarColor,\n    systemNavigationBarDividerColor: systemNavigationBarDividerColor ?? this.systemNavigationBarDividerColor,\n    statusBarColor: statusBarColor ?? this.statusBarColor,\n    statusBarIconBrightness: statusBarIconBrightness ?? this.statusBarIconBrightness,\n    statusBarBrightness: statusBarBrightness ?? this.statusBarBrightness,\n    systemNavigationBarIconBrightness: systemNavigationBarIconBrightness ?? this.systemNavigationBarIconBrightness,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.SystemUiOverlayStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/SystemUiOverlayStyle\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; _toMap().toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/SystemUiOverlayStyle\/dark-constant.html",
                    "desc": "<p>System overlays should be drawn with a dark color. Intended for\napplications with a light background.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SystemUiOverlayStyle dark = SystemUiOverlayStyle(\n  systemNavigationBarColor: Color(0xFF000000),\n  systemNavigationBarDividerColor: null,\n  statusBarColor: null,\n  systemNavigationBarIconBrightness: Brightness.light,\n  statusBarIconBrightness: Brightness.dark,\n  statusBarBrightness: Brightness.light,\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "dark",
                    "memberOf": "services.SystemUiOverlayStyle"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/SystemUiOverlayStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/SystemUiOverlayStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/SystemUiOverlayStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/SystemUiOverlayStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/SystemUiOverlayStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/SystemUiOverlayStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    systemNavigationBarColor,\n    systemNavigationBarDividerColor,\n    statusBarColor,\n    statusBarBrightness,\n    statusBarIconBrightness,\n    systemNavigationBarIconBrightness,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/SystemUiOverlayStyle\/light-constant.html",
                    "desc": "<p>System overlays should be drawn with a light color. Intended for\napplications with a dark background.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SystemUiOverlayStyle light = SystemUiOverlayStyle(\n  systemNavigationBarColor: Color(0xFF000000),\n  systemNavigationBarDividerColor: null,\n  statusBarColor: null,\n  systemNavigationBarIconBrightness: Brightness.light,\n  statusBarIconBrightness: Brightness.light,\n  statusBarBrightness: Brightness.dark,\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "light",
                    "memberOf": "services.SystemUiOverlayStyle"
                },
                {
                    "name": "statusBarBrightness",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The brightness of top status bar.<\/p>\n<p>Only honored in iOS.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/statusBarBrightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness statusBarBrightness\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "statusBarColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color of top status bar.<\/p>\n<p>Only honored in Android version M and greater.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/statusBarColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color statusBarColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "statusBarIconBrightness",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The brightness of the top status bar icons.<\/p>\n<p>Only honored in Android version M and greater.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/statusBarIconBrightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness statusBarIconBrightness\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemNavigationBarColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color of the system bottom navigation bar.<\/p>\n<p>Only honored in Android versions O and greater.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/systemNavigationBarColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color systemNavigationBarColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemNavigationBarDividerColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color of the divider between the system's bottom navigation bar and the app's content.<\/p>\n<p>Only honored in Android versions P and greater.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/systemNavigationBarDividerColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color systemNavigationBarDividerColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemNavigationBarIconBrightness",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The brightness of the system navigation bar icons.<\/p>\n<p>Only honored in Android versions O and greater.<\/p>\n        ",
                    "memberOf": "services.SystemUiOverlayStyle",
                    "isConstant": false,
                    "href": "services\/SystemUiOverlayStyle\/systemNavigationBarIconBrightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness systemNavigationBarIconBrightness\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/SystemUiOverlayStyle-class.html",
            "desc": "<p>Specifies a preference for the style of the system overlays.<\/p>\n<p>Used by <a href=\"services\/SystemChrome\/setSystemUIOverlayStyle.html\">SystemChrome.setSystemUIOverlayStyle<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemUiOverlayStyle"
        },
        {
            "type": "",
            "name": "services.TextCapitalization",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextCapitalization",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextCapitalization\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextCapitalization-class.html",
            "desc": "<p>Configures how the platform keyboard will select an uppercase or\nlowercase keyboard.<\/p>\n<p>Only supports text keyboards, other keyboard types will ignore this\nconfiguration. Capitalization is locale-aware.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextCapitalization"
        },
        {
            "name": "services.TextEditingValue",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/TextEditingValue\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextEditingValue\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextEditingValue)\n    return false;\n  final TextEditingValue typedOther = other;\n  return typedOther.text == text\n      &amp;&amp; typedOther.selection == selection\n      &amp;&amp; typedOther.composing == composing;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextEditingValue",
                    "type": "",
                    "desc": "<p>Creates information for editing a run of text.<\/p>\n<p>The selection and composing range must be within the text.<\/p>\n<p>The <code>text<\/code>, <code>selection<\/code>, and <code>composing<\/code> arguments must not be null but\neach have default values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "selection",
                            "type": "services.TextSelection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "composing",
                            "type": "services.TextRange",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextEditingValue\/TextEditingValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextEditingValue({\n  this.text = '',\n  this.selection = const TextSelection.collapsed(offset: -1),\n  this.composing = TextRange.empty,\n}) : assert(text != null),\n     assert(selection != null),\n     assert(composing != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "services.TextEditingValue",
                    "desc": "<p>Creates a copy of this value but with the given fields replaced with the new values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "selection",
                            "type": "services.TextSelection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "composing",
                            "type": "services.TextRange",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextEditingValue\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextEditingValue copyWith({\n  String text,\n  TextSelection selection,\n  TextRange composing,\n}) {\n  return TextEditingValue(\n    text: text ?? this.text,\n    selection: selection ?? this.selection,\n    composing: composing ?? this.composing,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextEditingValue.fromJSON",
                    "type": "",
                    "desc": "<p>Creates an instance of this class from a JSON object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoded",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextEditingValue\/TextEditingValue.fromJSON.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TextEditingValue.fromJSON(Map&lt;String, dynamic&gt; encoded) {\n  return TextEditingValue(\n    text: encoded['text'],\n    selection: TextSelection(\n      baseOffset: encoded['selectionBase'] ?? -1,\n      extentOffset: encoded['selectionExtent'] ?? -1,\n      affinity: _toTextAffinity(encoded['selectionAffinity']) ?? TextAffinity.downstream,\n      isDirectional: encoded['selectionIsDirectional'] ?? false,\n    ),\n    composing: TextRange(\n      start: encoded['composingBase'] ?? -1,\n      end: encoded['composingExtent'] ?? -1,\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJSON",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "<p>Returns a representation of this object as a JSON object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextEditingValue\/toJSON.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; toJSON() {\n  return &lt;String, dynamic&gt;{\n    'text': text,\n    'selectionBase': selection.baseOffset,\n    'selectionExtent': selection.extentOffset,\n    'selectionAffinity': selection.affinity.toString(),\n    'selectionIsDirectional': selection.isDirectional,\n    'composingBase': composing.start,\n    'composingExtent': composing.end,\n  };\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextEditingValue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextEditingValue\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(text: \\u2524$text\\u251C, selection: $selection, composing: $composing)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "composing",
                    "type": "services.TextRange",
                    "types": [],
                    "desc": "<p>The range of text that is still being composed.<\/p>\n        ",
                    "memberOf": "services.TextEditingValue",
                    "isConstant": false,
                    "href": "services\/TextEditingValue\/composing.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextRange composing\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/TextEditingValue\/empty-constant.html",
                    "desc": "<p>A value that corresponds to the empty string with no selection and no composing range.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextEditingValue empty = TextEditingValue()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "empty",
                    "memberOf": "services.TextEditingValue"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextEditingValue\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextEditingValue\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextEditingValue\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextEditingValue\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextEditingValue\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextEditingValue\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.TextEditingValue",
                    "isConstant": false,
                    "href": "services\/TextEditingValue\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(\n  text.hashCode,\n  selection.hashCode,\n  composing.hashCode,\n);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "selection",
                    "type": "services.TextSelection",
                    "types": [],
                    "desc": "<p>The range of text that is currently selected.<\/p>\n        ",
                    "memberOf": "services.TextEditingValue",
                    "isConstant": false,
                    "href": "services\/TextEditingValue\/selection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSelection selection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The current text being edited.<\/p>\n        ",
                    "memberOf": "services.TextEditingValue",
                    "isConstant": false,
                    "href": "services\/TextEditingValue\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.TextEditingController"
            ],
            "realImplementors": [
                "widgets.TextEditingController"
            ],
            "cn": [],
            "href": "services\/TextEditingValue-class.html",
            "desc": "<p>The current text, selection, and composing state for editing a run of text.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextEditingValue"
        },
        {
            "name": "services.TextInput",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "attach",
                    "type": "services.TextInputConnection",
                    "desc": "<p>Begin interacting with the text input control.<\/p>\n<p>Calling this function helps multiple clients coordinate about which one is\ncurrently interacting with the text input control. The returned\n<a href=\"services\/TextInputConnection-class.html\">TextInputConnection<\/a> provides an interface for actually interacting with\nthe text input control.<\/p>\n<p>A client that no longer wishes to interact with the text input control\nshould call <a href=\"services\/TextInputConnection\/close.html\">TextInputConnection.close<\/a> on the returned\n<a href=\"services\/TextInputConnection-class.html\">TextInputConnection<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInput",
                    "sig": "",
                    "params": [
                        {
                            "name": "client",
                            "type": "services.TextInputClient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "configuration",
                            "type": "services.TextInputConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInput\/attach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextInputConnection attach(TextInputClient client, TextInputConfiguration configuration) {\n  assert(client != null);\n  assert(configuration != null);\n  assert(_debugEnsureInputActionWorksOnPlatform(configuration.inputAction));\n  final TextInputConnection connection = TextInputConnection._(client);\n  _clientHandler._currentConnection = connection;\n  SystemChannels.textInput.invokeMethod&lt;void&gt;(\n    'TextInput.setClient',\n    &lt;dynamic&gt;[ connection._id, configuration.toJson() ],\n  );\n  return connection;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInput-class.html",
            "desc": "<p>An interface to the system's text input control.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInput"
        },
        {
            "type": "",
            "name": "services.TextInputAction",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputAction",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputAction\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInputAction-class.html",
            "desc": "<p>An action the user has requested the text input control to perform.<\/p>\n<p>Each action represents a logical meaning, and also configures the soft\nkeyboard to display a certain kind of action button. The visual appearance\nof the action button might differ between versions of the same OS.<\/p>\n<p>Despite the logical meaning of each action, choosing a particular\n<a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> does not necessarily cause any specific behavior to\nhappen. It is up to the developer to ensure that the behavior that occurs\nwhen an action button is pressed is appropriate for the action button chosen.<\/p>\n<p>For example: If the user presses the keyboard action button on iOS when it\nreads \"Emergency Call\", the result should not be a focus change to the next\nTextField. This behavior is not logically appropriate for a button that says\n\"Emergency Call\".<\/p>\n<p>See <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> for more information about customizing action button\nbehavior.<\/p>\n<p>Most <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a>s are supported equally by both Android and iOS.\nHowever, there is not a complete, direct mapping between Android's IME input\ntypes and iOS's keyboard return types. Therefore, some <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a>s\nare inappropriate for one of the platforms. If a developer chooses an\ninappropriate <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> when running in debug mode, an error will be\nthrown. If the same thing is done in release mode, then instead of sending\nthe inappropriate value, Android will use \"unspecified\" on the platform\nside and iOS will use \"default\" on the platform side.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/TextInput-class.html\">TextInput<\/a>, which configures the platform's keyboard setup.<\/li>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a>, which invokes callbacks when the action button is pressed.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "TextInputAction"
        },
        {
            "name": "services.TextInputClient",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "TextInputClient",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputClient",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/TextInputClient\/TextInputClient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextInputClient();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "performAction",
                    "type": "",
                    "desc": "<p>Requests that this client perform the given action.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "action",
                            "type": "services.TextInputAction",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputClient\/performAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void performAction(TextInputAction action);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateEditingValue",
                    "type": "",
                    "desc": "<p>Requests that this client update its editing state to the given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputClient\/updateEditingValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateEditingValue(TextEditingValue value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "updateFloatingCursor",
                    "type": "",
                    "desc": "<p>Updates the floating cursor position and state.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "point",
                            "type": "services.RawFloatingCursorPoint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputClient\/updateFloatingCursor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateFloatingCursor(RawFloatingCursorPoint point);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInputClient-class.html",
            "desc": "<p>An interface to receive information from <a href=\"services\/TextInput-class.html\">TextInput<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"services\/TextInput\/attach.html\">TextInput.attach<\/a><\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInputClient"
        },
        {
            "name": "services.TextInputConfiguration",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "TextInputConfiguration",
                    "type": "",
                    "desc": "<p>Creates configuration information for a text input control.<\/p>\n<p>All arguments have default values, except <code>actionLabel<\/code>. Only\n<code>actionLabel<\/code> may be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "inputType",
                            "type": "services.TextInputType",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "obscureText",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "autocorrect",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "actionLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "inputAction",
                            "type": "services.TextInputAction",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "keyboardAppearance",
                            "type": "dart:ui.Brightness",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textCapitalization",
                            "type": "services.TextCapitalization",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextInputConfiguration\/TextInputConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextInputConfiguration({\n  this.inputType = TextInputType.text,\n  this.obscureText = false,\n  this.autocorrect = true,\n  this.actionLabel,\n  this.inputAction = TextInputAction.done,\n  this.keyboardAppearance = Brightness.light,\n  this.textCapitalization = TextCapitalization.none,\n}) : assert(inputType != null),\n     assert(obscureText != null),\n     assert(autocorrect != null),\n     assert(keyboardAppearance != null),\n     assert(inputAction != null),\n     assert(textCapitalization != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJson",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "<p>Returns a representation of this object as a JSON object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputConfiguration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputConfiguration\/toJson.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; toJson() {\n  return &lt;String, dynamic&gt;{\n    'inputType': inputType.toJson(),\n    'obscureText': obscureText,\n    'autocorrect': autocorrect,\n    'actionLabel': actionLabel,\n    'inputAction': inputAction.toString(),\n    'textCapitalization': textCapitalization.toString(),\n    'keyboardAppearance': keyboardAppearance.toString(),\n  };\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                }
            ],
            "props": [
                {
                    "name": "actionLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>What text to display in the text input control's action button.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/actionLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String actionLabel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "autocorrect",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to enable auto-correction.<\/p>\n<p>Defaults to true.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/autocorrect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autocorrect\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inputAction",
                    "type": "services.TextInputAction",
                    "types": [],
                    "desc": "<p>What kind of action to request for the action button on the IME.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/inputAction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputAction inputAction\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inputType",
                    "type": "services.TextInputType",
                    "types": [],
                    "desc": "<p>The type of information for which to optimize the text input control.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/inputType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputType inputType\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyboardAppearance",
                    "type": "dart:ui.Brightness",
                    "types": [],
                    "desc": "<p>The appearance of the keyboard.<\/p>\n<p>This setting is only honored on iOS devices.<\/p>\n<p>Defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/keyboardAppearance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness keyboardAppearance\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "obscureText",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to hide the text being edited (e.g., for passwords).<\/p>\n<p>Defaults to false.<\/p>\n        ",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/obscureText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscureText\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textCapitalization",
                    "type": "services.TextCapitalization",
                    "types": [],
                    "desc": "<p>Specifies how platforms may automatically capitalize text entered by the\nuser.<\/p>\n<p>Defaults to <a href=\"services\/TextCapitalization-class.html\">TextCapitalization.none<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/TextCapitalization-class.html\">TextCapitalization<\/a>, for a description of each capitalization behavior.<\/li><\/ul>",
                    "memberOf": "services.TextInputConfiguration",
                    "isConstant": false,
                    "href": "services\/TextInputConfiguration\/textCapitalization.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextCapitalization textCapitalization\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInputConfiguration-class.html",
            "desc": "<p>Controls the visual appearance of the text input control.<\/p>\n<p>Many <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a>s are common between Android and iOS. However, if an\n<a href=\"services\/TextInputConfiguration\/inputAction.html\">inputAction<\/a> is provided that is not supported by the current\nplatform in debug mode, an error will be thrown when the corresponding\ntext input is attached. For example, providing iOS's \"emergencyCall\"\naction when running on an Android device will result in an error when in\ndebug mode. In release mode, incompatible <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a>s are replaced\neither with \"unspecified\" on Android, or \"default\" on iOS. Appropriate\n<a href=\"services\/TextInputConfiguration\/inputAction.html\">inputAction<\/a>s can be chosen by checking the current platform and then\nselecting the appropriate action.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"services\/TextInput\/attach.html\">TextInput.attach<\/a><\/li>\n<li><a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a><\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInputConfiguration"
        },
        {
            "name": "services.TextInputConnection",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Stop interacting with the text input control.<\/p>\n<p>After calling this method, the text input control might disappear if no\nother client attaches to it within this animation frame.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputConnection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputConnection\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close() {\n  if (attached) {\n    SystemChannels.textInput.invokeMethod&lt;void&gt;('TextInput.clearClient');\n    _clientHandler\n      .._currentConnection = null\n      .._scheduleHide();\n  }\n  assert(!attached);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setEditingState",
                    "type": "",
                    "desc": "<p>Requests that the text input control change its internal state to match the given state.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputConnection",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputConnection\/setEditingState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setEditingState(TextEditingValue value) {\n  assert(attached);\n  SystemChannels.textInput.invokeMethod&lt;void&gt;(\n    'TextInput.setEditingState',\n    value.toJSON(),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "show",
                    "type": "",
                    "desc": "<p>Requests that the text input control become visible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputConnection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputConnection\/show.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void show() {\n  assert(attached);\n  SystemChannels.textInput.invokeMethod&lt;void&gt;('TextInput.show');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "attached",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this connection is currently interacting with the text input control.<\/p>\n        ",
                    "memberOf": "services.TextInputConnection",
                    "isConstant": false,
                    "href": "services\/TextInputConnection\/attached.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get attached =&gt; _clientHandler._currentConnection == this;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInputConnection-class.html",
            "desc": "<p>An interface for interacting with a text input control.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"services\/TextInput\/attach.html\">TextInput.attach<\/a><\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInputConnection"
        },
        {
            "name": "services.TextInputFormatFunction",
            "type": "services.TextEditingValue",
            "desc": "<p>Function signature expected for creating custom <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a>\nshorthands via <a href=\"services\/TextInputFormatter\/withFunction.html\">TextInputFormatter.withFunction<\/a>;<\/p>\n    ",
            "static": false,
            "memberOf": "services",
            "sig": "",
            "params": [
                {
                    "name": "oldValue",
                    "type": "services.TextEditingValue",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "newValue",
                    "type": "services.TextEditingValue",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/TextInputFormatFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef TextInputFormatFunction = TextEditingValue Function(\n  TextEditingValue oldValue,\n  TextEditingValue newValue,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "services.TextInputFormatter",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "TextInputFormatter",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.TextInputFormatter",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/TextInputFormatter\/TextInputFormatter.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "formatEditUpdate",
                    "type": "services.TextEditingValue",
                    "desc": "<p>Called when text is being typed or cut\/copy\/pasted in the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>.<\/p>\n<p>You can override the resulting text based on the previous text value and\nthe incoming new text value.<\/p>\n<p>When formatters are chained, <code>oldValue<\/code> reflects the initial value of\n<a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> at the beginning of the chain.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "oldValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputFormatter\/formatEditUpdate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextEditingValue formatEditUpdate(\n  TextEditingValue oldValue,\n  TextEditingValue newValue,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withFunction",
                    "type": "services.TextInputFormatter",
                    "desc": "<p>A shorthand to creating a custom <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> which formats\nincoming text input changes with the given function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "formatFunction",
                            "type": "services.TextInputFormatFunction",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputFormatter\/withFunction.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextInputFormatter withFunction(\n  TextInputFormatFunction formatFunction,\n) {\n  return _SimpleTextInputFormatter(formatFunction);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "services.BlacklistingTextInputFormatter",
                "services.LengthLimitingTextInputFormatter",
                "services.WhitelistingTextInputFormatter"
            ],
            "realImplementors": [
                "services.BlacklistingTextInputFormatter",
                "services.LengthLimitingTextInputFormatter",
                "services.WhitelistingTextInputFormatter"
            ],
            "cn": [],
            "href": "services\/TextInputFormatter-class.html",
            "desc": "<p>A <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> can be optionally injected into an <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>\nto provide as-you-type validation and formatting of the text being edited.<\/p>\n<p>Text modification should only be applied when text is being committed by the\nIME and not on text under composition (i.e., only when\n<a href=\"services\/TextEditingValue\/composing.html\">TextEditingValue.composing<\/a> is collapsed).<\/p>\n<p>Concrete implementations <a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a>, which removes\nblacklisted characters upon edit commit, and\n<a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a>, which only allows entries of whitelisted\ncharacters, are provided.<\/p>\n<p>To create custom formatters, extend the <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> class and\nimplement the <a href=\"services\/TextInputFormatter\/formatEditUpdate.html\">formatEditUpdate<\/a> method.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a> on which the formatting apply.<\/li>\n<li>\n<a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a>, a provided formatter for blacklisting\ncharacters.<\/li>\n<li>\n<a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a>, a provided formatter for whitelisting\ncharacters.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInputFormatter"
        },
        {
            "name": "services.TextInputType",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/TextInputType\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputType",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextInputType\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! TextInputType)\n    return false;\n  final TextInputType typedOther = other;\n  return typedOther.index == index\n      &amp;&amp; typedOther.signed == signed\n      &amp;&amp; typedOther.decimal == decimal;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextInputType.numberWithOptions",
                    "type": "",
                    "desc": "<p>Optimize for numerical information.<\/p>\n<p>Requests a numeric keyboard with additional settings.\nThe <code>signed<\/code> and <code>decimal<\/code> parameters are optional.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputType",
                    "sig": "",
                    "params": [
                        {
                            "name": "signed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decimal",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextInputType\/TextInputType.numberWithOptions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextInputType.numberWithOptions({\n  this.signed = false,\n  this.decimal = false,\n}) : index = 2;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toJson",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "<p>Returns a representation of this object as a JSON object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputType\/toJson.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; toJson() {\n  return &lt;String, dynamic&gt;{\n    'name': _name,\n    'signed': signed,\n    'decimal': decimal,\n  };\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextInputType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextInputType\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType('\n      'name: $_name, '\n      'signed: $signed, '\n      'decimal: $decimal)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/TextInputType\/datetime-constant.html",
                    "desc": "<p>Optimize for date and time information.<\/p>\n<p>On iOS, requests the default keyboard.<\/p>\n<p>On Android, requests a keyboard with ready access to the number keys,\n\":\", and \"-\".<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType datetime = TextInputType._(4)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "datetime",
                    "memberOf": "services.TextInputType"
                },
                {
                    "name": "decimal",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The number is decimal, allowing a decimal point to provide fractional.<\/p>\n<p>This flag is only used for the <a href=\"services\/TextInputType\/number-constant.html\">number<\/a> input type, otherwise <code>null<\/code>.\nUse <code>const TextInputType.numberWithOptions(decimal: true)<\/code> to set this.<\/p>\n        ",
                    "memberOf": "services.TextInputType",
                    "isConstant": false,
                    "href": "services\/TextInputType\/decimal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool decimal\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/emailAddress-constant.html",
                    "desc": "<p>Optimize for email addresses.<\/p>\n<p>Requests a keyboard with ready access to the \"@\" and \".\" keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType emailAddress = TextInputType._(5)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "emailAddress",
                    "memberOf": "services.TextInputType"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextInputType\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.TextInputType",
                    "isConstant": false,
                    "href": "services\/TextInputType\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(index, signed, decimal);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Enum value index, corresponds to one of the <a href=\"services\/TextInputType\/values-constant.html\">values<\/a>.<\/p>\n        ",
                    "memberOf": "services.TextInputType",
                    "isConstant": false,
                    "href": "services\/TextInputType\/index.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/multiline-constant.html",
                    "desc": "<p>Optimize for multi-line textual information.<\/p>\n<p>Requests the default platform keyboard, but accepts newlines when the\nenter key is pressed. This is the input type used for all multi-line text\nfields.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType multiline = TextInputType._(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "multiline",
                    "memberOf": "services.TextInputType"
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/number-constant.html",
                    "desc": "<p>Optimize for unsigned numerical information without a decimal point.<\/p>\n<p>Requests a default keyboard with ready access to the number keys.\nAdditional options, such as decimal point and\/or positive\/negative\nsigns, can be requested using <a href=\"services\/TextInputType\/TextInputType.numberWithOptions.html\">new TextInputType.numberWithOptions<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType number = TextInputType.numberWithOptions()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "number",
                    "memberOf": "services.TextInputType"
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/phone-constant.html",
                    "desc": "<p>Optimize for telephone numbers.<\/p>\n<p>Requests a keyboard with ready access to the number keys, \"*\", and \"#\".<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType phone = TextInputType._(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "phone",
                    "memberOf": "services.TextInputType"
                },
                {
                    "name": "signed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The number is signed, allowing a positive or negative sign at the start.<\/p>\n<p>This flag is only used for the <a href=\"services\/TextInputType\/number-constant.html\">number<\/a> input type, otherwise <code>null<\/code>.\nUse <code>const TextInputType.numberWithOptions(signed: true)<\/code> to set this.<\/p>\n        ",
                    "memberOf": "services.TextInputType",
                    "isConstant": false,
                    "href": "services\/TextInputType\/signed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool signed\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/text-constant.html",
                    "desc": "<p>Optimize for textual information.<\/p>\n<p>Requests the default platform keyboard.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType text = TextInputType._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "text",
                    "memberOf": "services.TextInputType"
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/url-constant.html",
                    "desc": "<p>Optimize for URLs.<\/p>\n<p>Requests a keyboard with ready access to the \"\/\" and \".\" keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType url = TextInputType._(6)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "url",
                    "memberOf": "services.TextInputType"
                },
                {
                    "type": "",
                    "href": "services\/TextInputType\/values-constant.html",
                    "desc": "<p>All possible enum values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const List&lt;TextInputType&gt; values = &lt;TextInputType&gt;[\n  text, multiline, number, phone, datetime, emailAddress, url,\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "values",
                    "memberOf": "services.TextInputType"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextInputType-class.html",
            "desc": "<p>The type of information for which to optimize the text input control.<\/p>\n<p>On Android, behavior may vary across device and keyboard provider.<\/p>\n<p>This class stays as close to <code>Enum<\/code> interface as possible, and allows\nfor additional flags for some input types. For example, numeric input\ncan specify whether it supports decimal numbers and\/or signed numbers.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextInputType"
        },
        {
            "name": "services.TextRange",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/TextRange\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextRange\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextRange)\n    return false;\n  final TextRange typedOther = other;\n  return typedOther.start == start\n      &amp;&amp; typedOther.end == end;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextRange",
                    "type": "",
                    "desc": "<p>Creates a text range.<\/p>\n<p>The <code>start<\/code> and <code>end<\/code> arguments must not be null. Both the <code>start<\/code> and\n<code>end<\/code> must either be greater than or equal to zero or both exactly -1.<\/p>\n<p>Instead of creating an empty text range, consider using the <a href=\"services\/TextRange\/empty-constant.html\">empty<\/a>\nconstant.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextRange\/TextRange.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextRange({\n  @required this.start,\n  @required this.end,\n}) : assert(start != null &amp;&amp; start &gt;= -1),\n     assert(end != null &amp;&amp; end &gt;= -1);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextRange.collapsed",
                    "type": "",
                    "desc": "<p>A text range that starts and ends at offset.<\/p>\n<p>The <code>offset<\/code> argument must be non-null and greater than or equal to -1.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextRange\/TextRange.collapsed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextRange.collapsed(int offset)\n  : assert(offset != null &amp;&amp; offset &gt;= -1),\n    start = offset,\n    end = offset;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "textAfter",
                    "type": "dart:core.String",
                    "desc": "<p>The text after this range.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextRange\/textAfter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textAfter(String text) {\n  assert(isNormalized);\n  return text.substring(end);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "textBefore",
                    "type": "dart:core.String",
                    "desc": "<p>The text before this range.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextRange\/textBefore.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textBefore(String text) {\n  assert(isNormalized);\n  return text.substring(0, start);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "textInside",
                    "type": "dart:core.String",
                    "desc": "<p>The text inside this range.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextRange\/textInside.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textInside(String text) {\n  assert(isNormalized);\n  return text.substring(start, end);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextRange",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextRange\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TextRange(start: $start, end: $end)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "services\/TextRange\/empty-constant.html",
                    "desc": "<p>A text range that contains nothing and is not in the text.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextRange empty = TextRange(start: -1, end: -1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "empty",
                    "memberOf": "services.TextRange"
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The next index after the characters in this range.<\/p>\n<p>If <a href=\"services\/TextRange\/start.html\">start<\/a> and <a href=\"services\/TextRange\/end.html\">end<\/a> are both -1, the text range is empty.<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int end\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextRange\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(\n  start.hashCode,\n  end.hashCode,\n);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isCollapsed",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this range is empty (but still potentially placed inside the text).<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/isCollapsed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCollapsed =&gt; start == end;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNormalized",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the start of this range precedes the end.<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/isNormalized.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNormalized =&gt; end &gt;= start;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isValid",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this range represents a valid position in the text.<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/isValid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValid =&gt; start &gt;= 0 &amp;&amp; end &gt;= 0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The index of the first character in the range.<\/p>\n<p>If <a href=\"services\/TextRange\/start.html\">start<\/a> and <a href=\"services\/TextRange\/end.html\">end<\/a> are both -1, the text range is empty.<\/p>\n        ",
                    "memberOf": "services.TextRange",
                    "isConstant": false,
                    "href": "services\/TextRange\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int start\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "services.TextSelection"
            ],
            "realImplementors": [
                "services.TextSelection"
            ],
            "cn": [],
            "href": "services\/TextRange-class.html",
            "desc": "<p>A range of characters in a string of text.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextRange"
        },
        {
            "name": "services.TextSelection",
            "extends": [
                "services.TextRange",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/TextSelection\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextSelection\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextSelection)\n    return false;\n  final TextSelection typedOther = other;\n  return typedOther.baseOffset == baseOffset\n      &amp;&amp; typedOther.extentOffset == extentOffset\n      &amp;&amp; typedOther.affinity == affinity\n      &amp;&amp; typedOther.isDirectional == isDirectional;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextSelection",
                    "type": "",
                    "desc": "<p>Creates a text selection.<\/p>\n<p>The <code>baseOffset<\/code> and <code>extentOffset<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [
                        {
                            "name": "baseOffset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "extentOffset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "affinity",
                            "type": "dart:ui.TextAffinity",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isDirectional",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextSelection\/TextSelection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSelection({\n  @required this.baseOffset,\n  @required this.extentOffset,\n  this.affinity = TextAffinity.downstream,\n  this.isDirectional = false,\n}) : super(\n       start: baseOffset &lt; extentOffset ? baseOffset : extentOffset,\n       end: baseOffset &lt; extentOffset ? extentOffset : baseOffset\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextSelection.collapsed",
                    "type": "",
                    "desc": "<p>Creates a collapsed selection at the given offset.<\/p>\n<p>A collapsed selection starts and ends at the same offset, which means it\ncontains zero characters but instead serves as an insertion point in the\ntext.<\/p>\n<p>The <code>offset<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "affinity",
                            "type": "dart:ui.TextAffinity",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextSelection\/TextSelection.collapsed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSelection.collapsed({\n  @required int offset,\n  this.affinity = TextAffinity.downstream,\n}) : baseOffset = offset,\n     extentOffset = offset,\n     isDirectional = false,\n     super.collapsed(offset);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "services.TextSelection",
                    "desc": "<p>Creates a new <a href=\"services\/TextSelection-class.html\">TextSelection<\/a> based on the current selection, with the\nprovided parameters overridden.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [
                        {
                            "name": "baseOffset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "extentOffset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "affinity",
                            "type": "dart:ui.TextAffinity",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "isDirectional",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextSelection\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection copyWith({\n  int baseOffset,\n  int extentOffset,\n  TextAffinity affinity,\n  bool isDirectional,\n}) {\n  return TextSelection(\n    baseOffset: baseOffset ?? this.baseOffset,\n    extentOffset: extentOffset ?? this.extentOffset,\n    affinity: affinity ?? this.affinity,\n    isDirectional: isDirectional ?? this.isDirectional,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextSelection.fromPosition",
                    "type": "",
                    "desc": "<p>Creates a collapsed selection at the given text position.<\/p>\n<p>A collapsed selection starts and ends at the same offset, which means it\ncontains zero characters but instead serves as an insertion point in the\ntext.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.TextPosition",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/TextSelection\/TextSelection.fromPosition.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection.fromPosition(TextPosition position)\n  : baseOffset = position.offset,\n    extentOffset = position.offset,\n    affinity = position.affinity,\n    isDirectional = false,\n    super.collapsed(position.offset);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextSelection\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(baseOffset: $baseOffset, extentOffset: $extentOffset, affinity: $affinity, isDirectional: $isDirectional)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "affinity",
                    "type": "dart:ui.TextAffinity",
                    "types": [],
                    "desc": "<p>If the text range is collapsed and has more than one visual location\n(e.g., occurs at a line break), which of the two locations to use when\npainting the caret.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/affinity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAffinity affinity\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "base",
                    "type": "dart:ui.TextPosition",
                    "types": [],
                    "desc": "<p>The position at which the selection originates.<\/p>\n<p>Might be larger than, smaller than, or equal to extent.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/base.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition get base =&gt; TextPosition(offset: baseOffset, affinity: affinity);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "baseOffset",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The offset at which the selection originates.<\/p>\n<p>Might be larger than, smaller than, or equal to extent.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/baseOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int baseOffset\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "extent",
                    "type": "dart:ui.TextPosition",
                    "types": [],
                    "desc": "<p>The position at which the selection terminates.<\/p>\n<p>When the user uses the arrow keys to adjust the selection, this is the\nvalue that changes. Similarly, if the current theme paints a caret on one\nside of the selection, this is the location at which to paint the caret.<\/p>\n<p>Might be larger than, smaller than, or equal to base.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/extent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition get extent =&gt; TextPosition(offset: extentOffset, affinity: affinity);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "extentOffset",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The offset at which the selection terminates.<\/p>\n<p>When the user uses the arrow keys to adjust the selection, this is the\nvalue that changes. Similarly, if the current theme paints a caret on one\nside of the selection, this is the location at which to paint the caret.<\/p>\n<p>Might be larger than, smaller than, or equal to base.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/extentOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int extentOffset\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextSelection\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(\n  baseOffset.hashCode,\n  extentOffset.hashCode,\n  affinity.hashCode,\n  isDirectional.hashCode,\n);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isDirectional",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this selection has disambiguated its base and extent.<\/p>\n<p>On some platforms, the base and extent are not disambiguated until the\nfirst time the user adjusts the selection. At that point, either the start\nor the end of the selection becomes the base and the other one becomes the\nextent and is adjusted.<\/p>\n        ",
                    "memberOf": "services.TextSelection",
                    "isConstant": false,
                    "href": "services\/TextSelection\/isDirectional.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDirectional\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextSelection-class.html",
            "desc": "<p>A range of text that represents a selection.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextSelection"
        },
        {
            "name": "services.TextSelectionDelegate",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "TextSelectionDelegate",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "services.TextSelectionDelegate",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "services\/TextSelectionDelegate\/TextSelectionDelegate.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bringIntoView",
                    "type": "",
                    "desc": "<p>Brings the provided <a href=\"dart-ui\/TextPosition-class.html\">TextPosition<\/a> into the visible area of the text\ninput.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelectionDelegate",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.TextPosition",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/TextSelectionDelegate\/bringIntoView.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void bringIntoView(TextPosition position);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "hideToolbar",
                    "type": "",
                    "desc": "<p>Hides the text selection toolbar.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.TextSelectionDelegate",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/TextSelectionDelegate\/hideToolbar.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hideToolbar();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "textEditingValue",
                    "type": "services.TextEditingValue",
                    "types": [],
                    "desc": "<p>Gets the current text input.<\/p>\n        ",
                    "memberOf": "services.TextSelectionDelegate",
                    "isConstant": false,
                    "href": "services\/TextSelectionDelegate\/textEditingValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextEditingValue get textEditingValue;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/TextSelectionDelegate-class.html",
            "desc": "<p>An interface for manipulating the selection, to be used by the implementor\nof the toolbar widget.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextSelectionDelegate"
        },
        {
            "name": "services.UiKitViewController",
            "extends": [],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "acceptGesture",
                    "type": "dart:async.Future",
                    "desc": "<p>Accept an active gesture.<\/p>\n<p>When a touch sequence is happening on the embedded UIView all touch events are delayed.\nCalling this method releases the delayed events to the embedded UIView and makes it consume\nany following touch events for the pointers involved in the active gesture.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.UiKitViewController",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/UiKitViewController\/acceptGesture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; acceptGesture() {\n  final Map&lt;String, dynamic&gt; args = &lt;String, dynamic&gt;{\n    'id': id,\n  };\n  return SystemChannels.platform_views.invokeMethod('acceptGesture', args);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispose",
                    "type": "dart:async.Future",
                    "desc": "<p>Disposes the view.<\/p>\n<p>The <a href=\"services\/UiKitViewController-class.html\">UiKitViewController<\/a> object is unusable after calling this.\nThe <code>id<\/code> of the platform view cannot be reused after the view is\ndisposed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.UiKitViewController",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/UiKitViewController\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; dispose() async {\n  _debugDisposed = true;\n  await SystemChannels.platform_views.invokeMethod&lt;void&gt;('dispose', id);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rejectGesture",
                    "type": "dart:async.Future",
                    "desc": "<p>Rejects an active gesture.<\/p>\n<p>When a touch sequence is happening on the embedded UIView all touch events are delayed.\nCalling this method drops the buffered touch events and prevents any future touch events for\nthe pointers that are part of the active touch sequence from arriving to the embedded view.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.UiKitViewController",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "services\/UiKitViewController\/rejectGesture.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; rejectGesture() {\n  final Map&lt;String, dynamic&gt; args = &lt;String, dynamic&gt;{\n    'id': id,\n  };\n  return SystemChannels.platform_views.invokeMethod('rejectGesture', args);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLayoutDirection",
                    "type": "dart:async.Future",
                    "desc": "<p>Sets the layout direction for the Android view.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.UiKitViewController",
                    "sig": "",
                    "params": [
                        {
                            "name": "layoutDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/UiKitViewController\/setLayoutDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLayoutDirection(TextDirection layoutDirection) async {\n  assert(!_debugDisposed, 'trying to set a layout direction for a disposed Android View. View id: $id');\n\n  if (layoutDirection == _layoutDirection)\n    return;\n\n  assert(layoutDirection != null);\n  _layoutDirection = layoutDirection;\n\n  \/\/ TODO(amirh): invoke the iOS platform views channel direction method once available.\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The unique identifier of the iOS view controlled by this controller.<\/p>\n<p>This identifier is typically generated by\n<a href=\"services\/PlatformViewsRegistry\/getNextPlatformViewId.html\">PlatformViewsRegistry.getNextPlatformViewId<\/a>.<\/p>\n        ",
                    "memberOf": "services.UiKitViewController",
                    "isConstant": false,
                    "href": "services\/UiKitViewController\/id.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/UiKitViewController-class.html",
            "desc": "<p>Controls an iOS UIView.<\/p>\n<p>Typically created with <a href=\"services\/PlatformViewsService\/initUiKitView.html\">PlatformViewsService.initUiKitView<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "UiKitViewController"
        },
        {
            "name": "services.WhitelistingTextInputFormatter",
            "extends": [
                "services.TextInputFormatter",
                "dart:core.Object"
            ],
            "memberOf": "services",
            "events": [],
            "methods": [
                {
                    "name": "WhitelistingTextInputFormatter",
                    "type": "",
                    "desc": "<p>Creates a formatter that allows only the insertion of whitelisted characters patterns.<\/p>\n<p>The <code>whitelistedPattern<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.WhitelistingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "whitelistedPattern",
                            "type": "dart:core.Pattern",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "services\/WhitelistingTextInputFormatter\/WhitelistingTextInputFormatter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">WhitelistingTextInputFormatter(this.whitelistedPattern)\n  : assert(whitelistedPattern != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "formatEditUpdate",
                    "type": "services.TextEditingValue",
                    "desc": "<p>Called when text is being typed or cut\/copy\/pasted in the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>.<\/p>\n<p>You can override the resulting text based on the previous text value and\nthe incoming new text value.<\/p>\n<p>When formatters are chained, <code>oldValue<\/code> reflects the initial value of\n<a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> at the beginning of the chain.<\/p>\n    ",
                    "static": false,
                    "memberOf": "services.WhitelistingTextInputFormatter",
                    "sig": "",
                    "params": [
                        {
                            "name": "oldValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "newValue",
                            "type": "services.TextEditingValue",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "services\/WhitelistingTextInputFormatter\/formatEditUpdate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTextEditingValue formatEditUpdate(\n  TextEditingValue oldValue, \/\/ unused.\n  TextEditingValue newValue,\n) {\n  return _selectionAwareTextManipulation(\n    newValue,\n    (String substring) {\n      return whitelistedPattern\n          .allMatches(substring)\n          .map&lt;String&gt;((Match match) =&gt; match.group(0))\n          .join();\n    } ,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "digitsOnly",
                    "type": "services.WhitelistingTextInputFormatter",
                    "types": [],
                    "desc": "<p>A <a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a> that takes in digits <code>[0-9]<\/code> only.<\/p>\n        ",
                    "memberOf": "services.WhitelistingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/WhitelistingTextInputFormatter\/digitsOnly.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final WhitelistingTextInputFormatter digitsOnly\n    = WhitelistingTextInputFormatter(RegExp(r'\\d+'))\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "whitelistedPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "<p>A <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a> to extract all instances of allowed characters.<\/p>\n<p><a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> with multiple groups is not supported.<\/p>\n        ",
                    "memberOf": "services.WhitelistingTextInputFormatter",
                    "isConstant": false,
                    "href": "services\/WhitelistingTextInputFormatter\/whitelistedPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Pattern whitelistedPattern\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "services\/WhitelistingTextInputFormatter-class.html",
            "desc": "<p>A <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> that allows only the insertion of whitelisted\ncharacters patterns.<\/p>\n<p>Since this formatter only removes characters from the text, it attempts to\npreserve the existing <a href=\"services\/TextEditingValue\/selection.html\">TextEditingValue.selection<\/a> to values it would now\nfall at with the removed characters.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a>, which uses a blacklist instead of a\nwhitelist.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WhitelistingTextInputFormatter"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}