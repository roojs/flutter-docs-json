{
    "class": [
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/BarycentricFilter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.BarycentricFilter",
            "shortname": "BarycentricFilter",
            "extends": [
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/BarycentricFilter\/BarycentricFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "BarycentricFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.BarycentricFilter",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of the mesh with any filter transforms applied.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMeshGeometry filter(MeshGeometry mesh) {\n  final List&lt;VertexAttrib&gt; newAttribs =\n      new List&lt;VertexAttrib&gt;.from(mesh.attribs, growable: true);\n\n  if (mesh.getAttrib('BARYCENTRIC') == null) {\n    newAttribs.add(new VertexAttrib('BARYCENTRIC', 3, 'float'));\n  }\n\n  final MeshGeometry output =\n      new MeshGeometry(mesh.triangleVertexCount, newAttribs);\n\n  Vector3List barycentricCoords;\n  final VectorList&lt;Vector&gt; view = output.getViewForAttrib('BARYCENTRIC');\n  if (view is Vector3List) {\n    barycentricCoords = view;\n  } else {\n    return null;\n  }\n\n  final List&lt;VectorList&lt;Vector&gt;&gt; srcAttribs = &lt;VectorList&lt;Vector&gt;&gt;[];\n  final List&lt;VectorList&lt;Vector&gt;&gt; destAttribs = &lt;VectorList&lt;Vector&gt;&gt;[];\n  for (VertexAttrib attrib in mesh.attribs) {\n    if (attrib.name == 'BARYCENTRIC') {\n      continue;\n    }\n\n    srcAttribs.add(mesh.getViewForAttrib(attrib.name));\n    destAttribs.add(output.getViewForAttrib(attrib.name));\n  }\n\n  final Vector3 b0 = new Vector3(1.0, 0.0, 0.0);\n  final Vector3 b1 = new Vector3(0.0, 1.0, 0.0);\n  final Vector3 b2 = new Vector3(0.0, 0.0, 1.0);\n\n  int i0, i1, i2;\n\n  for (int i = 0; i &lt; output.length; i += 3) {\n    if (mesh.indices != null) {\n      i0 = mesh.indices[i];\n      i1 = mesh.indices[i + 1];\n      i2 = mesh.indices[i + 2];\n    } else {\n      i0 = i;\n      i1 = i + 1;\n      i2 = i + 2;\n    }\n\n    barycentricCoords[i] = b0;\n    barycentricCoords[i + 1] = b1;\n    barycentricCoords[i + 2] = b2;\n\n    \/\/ Copy the remaining attributes over\n    for (int j = 0; j &lt; srcAttribs.length; ++j) {\n      destAttribs[j][i] = srcAttribs[j][i0];\n      destAttribs[j][i + 1] = srcAttribs[j][i1];\n      destAttribs[j][i + 2] = srcAttribs[j][i2];\n    }\n  }\n\n  return output;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/BarycentricFilter\/filter.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "filter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.BarycentricFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;VertexAttrib&gt; get generates =&gt;\n    &lt;VertexAttrib&gt;[new VertexAttrib('BARYCENTRIC', 3, 'float')];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/BarycentricFilter\/generates.html",
                    "name": "generates",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.BarycentricFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/CircleGenerator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.CircleGenerator",
            "shortname": "CircleGenerator",
            "extends": [
                "vector_math_geometry.GeometryGenerator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/CircleGenerator\/CircleGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CircleGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createCircle(double radius,\n    {GeometryGeneratorFlags flags,\n    List&lt;GeometryFilter&gt; filters,\n    int segments: 64,\n    double thetaStart: 0.0,\n    double thetaLength: math.pi * 2.0}) {\n  _radius = radius;\n  _segments = segments;\n  _thetaStart = thetaStart;\n  _thetaLength = thetaLength;\n  return createGeometry(flags: flags, filters: filters);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CircleGenerator\/createCircle.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createCircle",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": [
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        },
                        {
                            "name": "radius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "segments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "thetaLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "thetaStart",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateIndices(Uint16List indices) {\n  int index = 0;\n  for (int i = 1; i &lt;= _segments; i++) {\n    indices[index] = i;\n    indices[index + 1] = i + 1;\n    indices[index + 2] = 0;\n    index += 3;\n  }\n  assert(index == indexCount);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CircleGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexPositions(Vector3List positions, Uint16List indices) {\n  final Vector3 v = new Vector3.zero();\n  positions[0] = v;\n  int index = 1;\n  for (int i = 0; i &lt;= _segments; i++) {\n    final double percent = i \/ _segments;\n    v\n      ..x = _radius * math.cos(_thetaStart + percent * _thetaLength)\n      ..z = _radius * math.sin(_thetaStart + percent * _thetaLength);\n    positions[index] = v;\n    index++;\n  }\n  assert(index == vertexCount);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CircleGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  final Vector2 v = new Vector2(0.5, 0.5);\n  texCoords[0] = v;\n  int index = 1;\n  for (int i = 0; i &lt;= _segments; i++) {\n    final Vector3 position = positions[index];\n    final double x = (position.x \/ (_radius + 1.0)) * 0.5;\n    final double y = (position.z \/ (_radius + 1.0)) * 0.5;\n    v\n      ..x = x + 0.5\n      ..y = y + 0.5;\n    texCoords[index] = v;\n    index++;\n  }\n  assert(index == vertexCount);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CircleGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexCount =&gt; (_segments) * 3;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CircleGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get vertexCount =&gt; _segments + 2;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CircleGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CircleGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/ColorFilter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.ColorFilter",
            "shortname": "ColorFilter",
            "extends": [
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ColorFilter(this.color);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/ColorFilter\/ColorFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ColorFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.ColorFilter",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "vector_math.Vector4"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a copy of the mesh with any filter transforms applied.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMeshGeometry filter(MeshGeometry mesh) {\n  MeshGeometry output;\n  if (mesh.getAttrib('COLOR') == null) {\n    final List&lt;VertexAttrib&gt; attributes = &lt;VertexAttrib&gt;[]\n      ..addAll(mesh.attribs)\n      ..add(new VertexAttrib('COLOR', 4, 'float'));\n    output = new MeshGeometry.resetAttribs(mesh, attributes);\n  } else {\n    output = new MeshGeometry.copy(mesh);\n  }\n\n  final VectorList&lt;Vector&gt; colors = output.getViewForAttrib('COLOR');\n  if (colors is Vector4List) {\n    for (int i = 0; i &lt; colors.length; ++i) {\n      colors[i] = color;\n    }\n    return output;\n  } else {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/ColorFilter\/filter.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "filter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.ColorFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Vector4 color\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/ColorFilter\/color.html",
                    "name": "color",
                    "isDeprecated": false,
                    "type": "vector_math.Vector4",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.ColorFilter",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;VertexAttrib&gt; get generates =&gt;\n    &lt;VertexAttrib&gt;[new VertexAttrib('COLOR', 4, 'float')];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/ColorFilter\/generates.html",
                    "name": "generates",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.ColorFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/CubeGenerator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.CubeGenerator",
            "shortname": "CubeGenerator",
            "extends": [
                "vector_math_geometry.GeometryGenerator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/CubeGenerator\/CubeGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CubeGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createCube(num width, num height, num depth,\n    {GeometryGeneratorFlags flags, List&lt;GeometryFilter&gt; filters}) {\n  _width = width.toDouble();\n  _height = height.toDouble();\n  _depth = depth.toDouble();\n\n  return createGeometry(flags: flags, filters: filters);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CubeGenerator\/createCube.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createCube",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": [
                        {
                            "name": "depth",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        },
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        },
                        {
                            "name": "height",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        },
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateIndices(Uint16List indices) {\n  indices.setAll(0, &lt;int&gt;[\n    0,\n    1,\n    2,\n    0,\n    2,\n    3,\n    4,\n    5,\n    6,\n    4,\n    6,\n    7,\n    8,\n    9,\n    10,\n    8,\n    10,\n    11,\n    12,\n    13,\n    14,\n    12,\n    14,\n    15,\n    16,\n    17,\n    18,\n    16,\n    18,\n    19,\n    20,\n    21,\n    22,\n    20,\n    22,\n    23\n  ]);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CubeGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexPositions(Vector3List positions, Uint16List indices) {\n  \/\/ Front\n  positions[0] = new Vector3(_width, _height, _depth);\n  positions[1] = new Vector3(-_width, _height, _depth);\n  positions[2] = new Vector3(-_width, -_height, _depth);\n  positions[3] = new Vector3(_width, -_height, _depth);\n\n  \/\/ Back\n  positions[4] = new Vector3(_width, -_height, -_depth);\n  positions[5] = new Vector3(-_width, -_height, -_depth);\n  positions[6] = new Vector3(-_width, _height, -_depth);\n  positions[7] = new Vector3(_width, _height, -_depth);\n\n  \/\/ Right\n  positions[8] = new Vector3(_width, -_height, _depth);\n  positions[9] = new Vector3(_width, -_height, -_depth);\n  positions[10] = new Vector3(_width, _height, -_depth);\n  positions[11] = new Vector3(_width, _height, _depth);\n\n  \/\/ Left\n  positions[12] = new Vector3(-_width, _height, _depth);\n  positions[13] = new Vector3(-_width, _height, -_depth);\n  positions[14] = new Vector3(-_width, -_height, -_depth);\n  positions[15] = new Vector3(-_width, -_height, _depth);\n\n  \/\/ Top\n  positions[16] = new Vector3(_width, _height, _depth);\n  positions[17] = new Vector3(_width, _height, -_depth);\n  positions[18] = new Vector3(-_width, _height, -_depth);\n  positions[19] = new Vector3(-_width, _height, _depth);\n\n  \/\/ Bottom\n  positions[20] = new Vector3(-_width, -_height, _depth);\n  positions[21] = new Vector3(-_width, -_height, -_depth);\n  positions[22] = new Vector3(_width, -_height, -_depth);\n  positions[23] = new Vector3(_width, -_height, _depth);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CubeGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  \/\/ Front\n  texCoords[0] = new Vector2(1.0, 0.0);\n  texCoords[1] = new Vector2(0.0, 0.0);\n  texCoords[2] = new Vector2(0.0, 1.0);\n  texCoords[3] = new Vector2(1.0, 1.0);\n\n  \/\/ Back\n  texCoords[4] = new Vector2(0.0, 1.0);\n  texCoords[5] = new Vector2(1.0, 1.0);\n  texCoords[6] = new Vector2(1.0, 0.0);\n  texCoords[7] = new Vector2(0.0, 0.0);\n\n  \/\/ Right\n  texCoords[8] = new Vector2(0.0, 1.0);\n  texCoords[9] = new Vector2(1.0, 1.0);\n  texCoords[10] = new Vector2(1.0, 0.0);\n  texCoords[11] = new Vector2(0.0, 0.0);\n\n  \/\/ Left\n  texCoords[12] = new Vector2(1.0, 0.0);\n  texCoords[13] = new Vector2(0.0, 0.0);\n  texCoords[14] = new Vector2(0.0, 1.0);\n  texCoords[15] = new Vector2(1.0, 1.0);\n\n  \/\/ Top\n  texCoords[16] = new Vector2(1.0, 1.0);\n  texCoords[17] = new Vector2(1.0, 0.0);\n  texCoords[18] = new Vector2(0.0, 0.0);\n  texCoords[19] = new Vector2(0.0, 1.0);\n\n  \/\/ Bottom\n  texCoords[20] = new Vector2(0.0, 0.0);\n  texCoords[21] = new Vector2(0.0, 1.0);\n  texCoords[22] = new Vector2(1.0, 1.0);\n  texCoords[23] = new Vector2(1.0, 0.0);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CubeGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexCount =&gt; 36;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CubeGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get vertexCount =&gt; 24;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CubeGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CubeGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/CylinderGenerator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.CylinderGenerator",
            "shortname": "CylinderGenerator",
            "extends": [
                "vector_math_geometry.GeometryGenerator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/CylinderGenerator\/CylinderGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CylinderGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createCylinder(num topRadius, num bottomRadius, num height,\n    {int segments: 16,\n    GeometryGeneratorFlags flags,\n    List&lt;GeometryFilter&gt; filters}) {\n  _topRadius = topRadius.toDouble();\n  _bottomRadius = bottomRadius.toDouble();\n  _height = height.toDouble();\n  _segments = segments;\n\n  return createGeometry(flags: flags, filters: filters);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CylinderGenerator\/createCylinder.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createCylinder",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": [
                        {
                            "name": "bottomRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        },
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        },
                        {
                            "name": "height",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        },
                        {
                            "name": "segments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "topRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateIndices(Uint16List indices) {\n  int i = 0;\n\n  \/\/ Sides\n  int base1 = 0;\n  final int base2 = _segments + 1;\n  for (int x = 0; x &lt; _segments; ++x) {\n    indices[i++] = base1 + x;\n    indices[i++] = base1 + x + 1;\n    indices[i++] = base2 + x;\n\n    indices[i++] = base1 + x + 1;\n    indices[i++] = base2 + x + 1;\n    indices[i++] = base2 + x;\n  }\n\n  \/\/ Top cap\n  base1 = (_segments + 1) * 2;\n  for (int x = 1; x &lt; _segments - 1; ++x) {\n    indices[i++] = base1;\n    indices[i++] = base1 + x + 1;\n    indices[i++] = base1 + x;\n  }\n\n  \/\/ Bottom cap\n  base1 = (_segments + 1) * 2 + _segments;\n  for (int x = 1; x &lt; _segments - 1; ++x) {\n    indices[i++] = base1;\n    indices[i++] = base1 + x;\n    indices[i++] = base1 + x + 1;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CylinderGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexPositions(Vector3List positions, Uint16List indices) {\n  int i = 0;\n\n  \/\/ Top\n  for (int x = 0; x &lt;= _segments; ++x) {\n    final double u = x \/ _segments;\n\n    positions[i++] = new Vector3(_topRadius * math.cos(u * math.pi * 2.0),\n        _height * 0.5, _topRadius * math.sin(u * math.pi * 2.0));\n  }\n\n  \/\/ Bottom\n  for (int x = 0; x &lt;= _segments; ++x) {\n    final double u = x \/ _segments;\n\n    positions[i++] = new Vector3(_bottomRadius * math.cos(u * math.pi * 2.0),\n        _height * -0.5, _bottomRadius * math.sin(u * math.pi * 2.0));\n  }\n\n  \/\/ Top cap\n  for (int x = 0; x &lt; _segments; ++x) {\n    final double u = x \/ _segments;\n\n    positions[i++] = new Vector3(_topRadius * math.cos(u * math.pi * 2.0),\n        _height * 0.5, _topRadius * math.sin(u * math.pi * 2.0));\n  }\n\n  \/\/ Bottom cap\n  for (int x = 0; x &lt; _segments; ++x) {\n    final double u = x \/ _segments;\n\n    positions[i++] = new Vector3(_bottomRadius * math.cos(u * math.pi * 2.0),\n        _height * -0.5, _bottomRadius * math.sin(u * math.pi * 2.0));\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CylinderGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  int i = 0;\n\n  \/\/ Cylinder top\n  for (int x = 0; x &lt;= _segments; ++x) {\n    final double u = 1.0 - (x \/ _segments);\n    texCoords[i++] = new Vector2(u, 0.0);\n  }\n\n  \/\/ Cylinder bottom\n  for (int x = 0; x &lt;= _segments; ++x) {\n    final double u = 1.0 - (x \/ _segments);\n    texCoords[i++] = new Vector2(u, 1.0);\n  }\n\n  \/\/ Top cap\n  for (int x = 0; x &lt; _segments; ++x) {\n    final double r = (x \/ _segments) * math.pi * 2.0;\n    texCoords[i++] =\n        new Vector2((math.cos(r) * 0.5 + 0.5), (math.sin(r) * 0.5 + 0.5));\n  }\n\n  \/\/ Bottom cap\n  for (int x = 0; x &lt; _segments; ++x) {\n    final double r = (x \/ _segments) * math.pi * 2.0;\n    texCoords[i++] =\n        new Vector2((math.cos(r) * 0.5 + 0.5), (math.sin(r) * 0.5 + 0.5));\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/CylinderGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexCount =&gt; (_segments * 6) + ((_segments - 2) * 6);<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CylinderGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get vertexCount =&gt; ((_segments + 1) * 2) + (_segments * 2);<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/CylinderGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.CylinderGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/FlatShadeFilter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.FlatShadeFilter",
            "shortname": "FlatShadeFilter",
            "extends": [
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/FlatShadeFilter\/FlatShadeFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FlatShadeFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.FlatShadeFilter",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of the mesh with any filter transforms applied.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMeshGeometry filter(MeshGeometry mesh) {\n  final List&lt;VertexAttrib&gt; newAttribs =\n      new List&lt;VertexAttrib&gt;.from(mesh.attribs, growable: true);\n\n  if (mesh.getAttrib('NORMAL') == null) {\n    newAttribs.add(new VertexAttrib('NORMAL', 3, 'float'));\n  }\n\n  final MeshGeometry output =\n      new MeshGeometry(mesh.triangleVertexCount, newAttribs);\n\n  final Vector3 p0 = new Vector3.zero(),\n      p1 = new Vector3.zero(),\n      p2 = new Vector3.zero();\n\n  final VectorList&lt;Vector&gt; srcPosition = mesh.getViewForAttrib('POSITION');\n  final VectorList&lt;Vector&gt; destPosition = output.getViewForAttrib('POSITION');\n  final VectorList&lt;Vector&gt; normals = output.getViewForAttrib('NORMAL');\n\n  if (srcPosition is! Vector3List ||\n      destPosition is! Vector3List ||\n      normals is! Vector3List) {\n    return null;\n  }\n\n  final List&lt;VectorList&lt;Vector&gt;&gt; srcAttribs = &lt;VectorList&lt;Vector&gt;&gt;[];\n  final List&lt;VectorList&lt;Vector&gt;&gt; destAttribs = &lt;VectorList&lt;Vector&gt;&gt;[];\n  for (VertexAttrib attrib in mesh.attribs) {\n    if (attrib.name == 'POSITION' || attrib.name == 'NORMAL') {\n      continue;\n    }\n\n    srcAttribs.add(mesh.getViewForAttrib(attrib.name));\n    destAttribs.add(output.getViewForAttrib(attrib.name));\n  }\n\n  for (int i = 0; i &lt; output.length; i += 3) {\n    final int i0 = mesh.indices[i];\n    final int i1 = mesh.indices[i + 1];\n    final int i2 = mesh.indices[i + 2];\n\n    srcPosition..load(i0, p0)..load(i1, p1)..load(i2, p2);\n\n    destPosition[i] = p0;\n    destPosition[i + 1] = p1;\n    destPosition[i + 2] = p2;\n\n    \/\/ Store the normalized cross product of p1 and p2 in p0.\n    p1.sub(p0);\n    p2.sub(p0);\n    p1.crossInto(p2, p0).normalize();\n\n    normals[i] = p0;\n    normals[i + 1] = p0;\n    normals[i + 2] = p0;\n\n    \/\/ Copy the remaining attributes over\n    for (int j = 0; j &lt; srcAttribs.length; ++j) {\n      destAttribs[j][i] = srcAttribs[j][i0];\n      destAttribs[j][i + 1] = srcAttribs[j][i1];\n      destAttribs[j][i + 2] = srcAttribs[j][i2];\n    }\n  }\n\n  return output;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/FlatShadeFilter\/filter.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "filter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.FlatShadeFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;VertexAttrib&gt; get generates =&gt;\n    &lt;VertexAttrib&gt;[new VertexAttrib('NORMAL', 3, 'float')];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/FlatShadeFilter\/generates.html",
                    "name": "generates",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.FlatShadeFilter",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;VertexAttrib&gt; get requires =&gt;\n    &lt;VertexAttrib&gt;[new VertexAttrib('POSITION', 3, 'float')];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/FlatShadeFilter\/requires.html",
                    "name": "requires",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.FlatShadeFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/GeometryFilter-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.GeometryFilter",
            "shortname": "GeometryFilter",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "vector_math_geometry.BarycentricFilter",
                "vector_math_geometry.ColorFilter",
                "vector_math_geometry.FlatShadeFilter",
                "vector_math_geometry.InvertFilter",
                "vector_math_geometry.TransformFilter"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/GeometryFilter\/GeometryFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GeometryFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryFilter",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of the mesh with any filter transforms applied.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry filter(MeshGeometry mesh);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryFilter\/filter.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "filter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;VertexAttrib&gt; get generates =&gt; &lt;VertexAttrib&gt;[];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryFilter\/generates.html",
                    "name": "generates",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryFilter",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get inplace =&gt; false;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryFilter\/inplace.html",
                    "name": "inplace",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryFilter",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;VertexAttrib&gt; get requires =&gt; &lt;VertexAttrib&gt;[];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryFilter\/requires.html",
                    "name": "requires",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/GeometryGenerator-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.GeometryGenerator",
            "shortname": "GeometryGenerator",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "vector_math_geometry.CircleGenerator",
                "vector_math_geometry.CubeGenerator",
                "vector_math_geometry.CylinderGenerator",
                "vector_math_geometry.RingGenerator",
                "vector_math_geometry.SphereGenerator"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/GeometryGenerator\/GeometryGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GeometryGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createGeometry(\n    {GeometryGeneratorFlags flags, List&lt;GeometryFilter&gt; filters}) {\n  flags ??= new GeometryGeneratorFlags();\n\n  VertexAttrib positionAttrib;\n  VertexAttrib texCoordAttrib;\n  VertexAttrib normalAttrib;\n  VertexAttrib tangentAttrib;\n\n  Vector2List texCoordView;\n  Vector3List positionView;\n  Vector3List normalView;\n  Vector4List tangentView;\n\n  final List&lt;VertexAttrib&gt; attribs = &lt;VertexAttrib&gt;[];\n\n  positionAttrib = new VertexAttrib('POSITION', 3, 'float');\n  attribs.add(positionAttrib);\n\n  if (flags.texCoords || flags.tangents) {\n    texCoordAttrib = new VertexAttrib('TEXCOORD0', 2, 'float');\n    attribs.add(texCoordAttrib);\n  }\n\n  if (flags.normals || flags.tangents) {\n    normalAttrib = new VertexAttrib('NORMAL', 3, 'float');\n    attribs.add(normalAttrib);\n  }\n\n  if (flags.tangents) {\n    tangentAttrib = new VertexAttrib('TANGENT', 4, 'float');\n    attribs.add(tangentAttrib);\n  }\n\n  MeshGeometry mesh = new MeshGeometry(vertexCount, attribs)\n    ..indices = new Uint16List(indexCount);\n  generateIndices(mesh.indices);\n\n  VectorList&lt;Vector&gt; view = mesh.getViewForAttrib('POSITION');\n  if (view is Vector3List) {\n    positionView = view;\n    generateVertexPositions(positionView, mesh.indices);\n  }\n\n  if (flags.texCoords || flags.tangents) {\n    view = mesh.getViewForAttrib('TEXCOORD0');\n    if (view is Vector2List) {\n      texCoordView = view;\n      generateVertexTexCoords(texCoordView, positionView, mesh.indices);\n    }\n  }\n\n  if (flags.normals || flags.tangents) {\n    view = mesh.getViewForAttrib('NORMAL');\n    if (view is Vector3List) {\n      normalView = view;\n      generateVertexNormals(normalView, positionView, mesh.indices);\n    }\n  }\n\n  if (flags.tangents) {\n    view = mesh.getViewForAttrib('TANGENT');\n    if (view is Vector4List) {\n      tangentView = view;\n      generateVertexTangents(\n          tangentView, positionView, normalView, texCoordView, mesh.indices);\n    }\n  }\n\n  if (filters != null) {\n    for (GeometryFilter filter in filters) {\n      if (filter.inplace &amp;&amp; filter is InplaceGeometryFilter) {\n        filter.filterInplace(mesh);\n      } else {\n        mesh = filter.filter(mesh);\n      }\n    }\n  }\n\n  return mesh;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/createGeometry.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createGeometry",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void generateIndices(Uint16List indices);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void generateVertexNormals(\n    Vector3List normals, Vector3List positions, Uint16List indices) {\n  generateNormals(normals, positions, indices);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/generateVertexNormals.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexNormals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "normals",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void generateVertexPositions(Vector3List positions, Uint16List indices);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void generateVertexTangents(Vector4List tangents, Vector3List positions,\n    Vector3List normals, Vector2List texCoords, Uint16List indices) {\n  generateTangents(tangents, positions, normals, texCoords, indices);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/generateVertexTangents.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTangents",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "normals",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "tangents",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector4List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  for (int i = 0; i &lt; positions.length; ++i) {\n    final Vector3 p = positions[i];\n\n    \/\/ These are TERRIBLE texture coords, but it's better than nothing.\n    \/\/ Override this function and put better ones in place!\n    texCoords[i] = new Vector2(p.x + p.z, p.y + p.z);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get indexCount;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get vertexCount;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/GeometryGeneratorFlags-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.GeometryGeneratorFlags",
            "shortname": "GeometryGeneratorFlags",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GeometryGeneratorFlags(\n    {this.texCoords: true, this.normals: true, this.tangents: true});<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/GeometryGeneratorFlags\/GeometryGeneratorFlags.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GeometryGeneratorFlags",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.GeometryGeneratorFlags",
                    "params": [
                        {
                            "name": "normals",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tangents",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool normals\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryGeneratorFlags\/normals.html",
                    "name": "normals",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryGeneratorFlags",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool tangents\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryGeneratorFlags\/tangents.html",
                    "name": "tangents",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryGeneratorFlags",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool texCoords\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/GeometryGeneratorFlags\/texCoords.html",
                    "name": "texCoords",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.GeometryGeneratorFlags",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/InplaceGeometryFilter-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.InplaceGeometryFilter",
            "shortname": "InplaceGeometryFilter",
            "extends": [
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "vector_math_geometry.InvertFilter",
                "vector_math_geometry.TransformFilter"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/InplaceGeometryFilter\/InplaceGeometryFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "InplaceGeometryFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.InplaceGeometryFilter",
                    "params": []
                },
                {
                    "desc": "<p>Returns a copy of the mesh with any filter transforms applied.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMeshGeometry filter(MeshGeometry mesh) {\n  final MeshGeometry output = new MeshGeometry.copy(mesh);\n  filterInplace(output);\n  return output;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/InplaceGeometryFilter\/filter.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "filter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.InplaceGeometryFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the filter to the mesh.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void filterInplace(MeshGeometry mesh);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/InplaceGeometryFilter\/filterInplace.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "filterInplace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.InplaceGeometryFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get inplace =&gt; true;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/InplaceGeometryFilter\/inplace.html",
                    "name": "inplace",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.InplaceGeometryFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/InvertFilter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.InvertFilter",
            "shortname": "InvertFilter",
            "extends": [
                "vector_math_geometry.InplaceGeometryFilter",
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/InvertFilter\/InvertFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "InvertFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.InvertFilter",
                    "params": []
                },
                {
                    "desc": "<p>Applies the filter to the mesh.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid filterInplace(MeshGeometry mesh) {\n  \/\/ TODO: Do the tangents need to be inverted? Maybe just the W component?\n  \/\/ TODO: Should modify in-place be allowed, or should it be required\n  \/\/ to return a new geometry?\n\n  \/\/ Swap all the triangle indices\n  for (int i = 0; i &lt; mesh.indices.length; i += 3) {\n    final int tmp = mesh.indices[i];\n    mesh.indices[i] = mesh.indices[i + 2];\n    mesh.indices[i + 2] = tmp;\n  }\n\n  final VectorList&lt;Vector&gt; normals = mesh.getViewForAttrib('NORMAL');\n  if (normals is Vector3List) {\n    for (int i = 0; i &lt; normals.length; ++i) {\n      normals[i] = -normals[i];\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/InvertFilter\/filterInplace.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "filterInplace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.InvertFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/MeshGeometry-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.MeshGeometry",
            "shortname": "MeshGeometry",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory MeshGeometry(int length, List&lt;VertexAttrib&gt; attributes) {\n  int stride = 0;\n  for (VertexAttrib a in attributes) {\n    stride += a.elementSize * a.size;\n  }\n  int offset = 0;\n  final List&lt;VertexAttrib&gt; attribs = &lt;VertexAttrib&gt;[];\n  for (VertexAttrib a in attributes) {\n    attribs.add(new VertexAttrib._resetStrideOffset(a, stride, offset));\n    offset += a.elementSize * a.size;\n  }\n\n  return new MeshGeometry._internal(length, stride, attribs);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/MeshGeometry.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MeshGeometry",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": [
                        {
                            "name": "attributes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<vector_math_geometry.VertexAttrib>"
                        },
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static VertexAttrib attribFromJson(String name, Map&lt;String, Object&gt; json) {\n  final Object jsonSize = json[\"size\"];\n  final Object jsonType = json[\"type\"];\n  final Object jsonStride = json[\"stride\"];\n  final Object jsonOffset = json[\"offset\"];\n  if (jsonSize is int &amp;&amp;\n      jsonType is String &amp;&amp;\n      jsonStride is int &amp;&amp;\n      jsonOffset is int) {\n    return new VertexAttrib._internal(\n        name, jsonSize, jsonType, jsonStride, jsonOffset);\n  } else {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/attribFromJson.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.VertexAttrib",
                    "name": "attribFromJson",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": [
                        {
                            "name": "json",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map<dart:core.String<dart:core.Object>>"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool attribsAreCompatible(MeshGeometry mesh) {\n  if (mesh.attribs.length != attribs.length) {\n    return false;\n  }\n\n  for (VertexAttrib attrib in attribs) {\n    final VertexAttrib otherAttrib = mesh.getAttrib(attrib.name);\n    if (otherAttrib == null) {\n      return false;\n    }\n    if (attrib.type != otherAttrib.type ||\n        attrib.size != otherAttrib.size ||\n        attrib.stride != otherAttrib.stride ||\n        attrib.offset != otherAttrib.offset) {\n      return false;\n    }\n  }\n\n  if ((indices == null &amp;&amp; mesh.indices != null) ||\n      (indices != null &amp;&amp; mesh.indices == null)) {\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/attribsAreCompatible.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "attribsAreCompatible",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VertexAttrib getAttrib(String name) {\n  for (VertexAttrib attrib in attribs) {\n    if (attrib.name == name) {\n      return attrib;\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/getAttrib.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.VertexAttrib",
                    "name": "getAttrib",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VectorList&lt;Vector&gt; getViewForAttrib(String name) {\n  for (VertexAttrib attrib in attribs) {\n    if (attrib.name == name) {\n      return attrib.getView(buffer);\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/getViewForAttrib.html",
                    "isDeprecated": false,
                    "type": "vector_math_lists.VectorList<vector_math.Vector>",
                    "name": "getViewForAttrib",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, Object&gt; toJson() {\n  final Map&lt;String, Object&gt; r = &lt;String, Object&gt;{};\n  r['attributes'] = attribs;\n  r['indices'] = indices;\n  r['vertices'] = buffer;\n  return r;\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/MeshGeometry\/toJson.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "name": "toJson",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;VertexAttrib&gt; attribs\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/attribs.html",
                    "name": "attribs",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Float32List buffer\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/buffer.html",
                    "name": "buffer",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Float32List",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uint16List indices\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/indices.html",
                    "name": "indices",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint16List",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int length\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int stride\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/stride.html",
                    "name": "stride",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get triangleVertexCount =&gt; indices != null ? indices.length : length;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/MeshGeometry\/triangleVertexCount.html",
                    "name": "triangleVertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.MeshGeometry",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/RingGenerator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.RingGenerator",
            "shortname": "RingGenerator",
            "extends": [
                "vector_math_geometry.GeometryGenerator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/RingGenerator\/RingGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RingGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createRing(double innerRadius, double outerRadius,\n    {GeometryGeneratorFlags flags,\n    List&lt;GeometryFilter&gt; filters,\n    int segments: 64,\n    double thetaStart: 0.0,\n    double thetaLength: math.pi * 2.0,\n    bool stripTextureCoordinates: true}) {\n  _innerRadius = innerRadius;\n  _outerRadius = outerRadius;\n  _segments = segments;\n  _thetaStart = thetaStart;\n  _thetaLength = thetaLength;\n  _stripTextureCoordinates = stripTextureCoordinates;\n  return createGeometry(flags: flags, filters: filters);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/RingGenerator\/createRing.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createRing",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": [
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        },
                        {
                            "name": "innerRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "outerRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "segments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "stripTextureCoordinates",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "thetaLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "thetaStart",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateIndices(Uint16List indices) {\n  int index = 0;\n  final int length = _segments * 2;\n  for (int i = 0; i &lt; length; i += 2) {\n    indices[index + 0] = i + 0;\n    indices[index + 1] = i + 1;\n    indices[index + 2] = i + 3;\n    indices[index + 3] = i + 0;\n    indices[index + 4] = i + 3;\n    indices[index + 5] = i + 2;\n    index += 6;\n  }\n  assert(index == indexCount);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/RingGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexPositions(Vector3List positions, Uint16List indices) {\n  final Vector3 v = new Vector3.zero();\n  int index = 0;\n  for (int i = 0; i &lt;= _segments; i++) {\n    final double percent = i \/ _segments;\n    v\n      ..x = _innerRadius * math.cos(_thetaStart + percent * _thetaLength)\n      ..z = _innerRadius * math.sin(_thetaStart + percent * _thetaLength);\n    positions[index] = v;\n    index++;\n    v\n      ..x = _outerRadius * math.cos(_thetaStart + percent * _thetaLength)\n      ..z = _outerRadius * math.sin(_thetaStart + percent * _thetaLength);\n    positions[index] = v;\n    index++;\n  }\n  assert(index == vertexCount);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/RingGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  if (_stripTextureCoordinates) {\n    final Vector2 v = new Vector2.zero();\n    int index = 0;\n    for (int i = 0; i &lt;= _segments; i++) {\n      final double percent = i \/ _segments;\n      v\n        ..x = 0.0\n        ..y = percent;\n      texCoords[index] = v;\n      index++;\n      v\n        ..x = 1.0\n        ..y = percent;\n      texCoords[index] = v;\n      index++;\n    }\n  } else {\n    final Vector2 v = new Vector2.zero();\n    int index = 0;\n    for (int i = 0; i &lt;= _segments; i++) {\n      Vector3 position = positions[index];\n      double x = (position.x \/ (_outerRadius + 1.0)) * 0.5;\n      double y = (position.z \/ (_outerRadius + 1.0)) * 0.5;\n      v\n        ..x = x + 0.5\n        ..y = y + 0.5;\n      texCoords[index] = v;\n      index++;\n      position = positions[index];\n      x = (position.x \/ (_outerRadius + 1.0)) * 0.5;\n      y = (position.z \/ (_outerRadius + 1.0)) * 0.5;\n      v\n        ..x = x + 0.5\n        ..y = y + 0.5;\n      texCoords[index] = v;\n      index++;\n    }\n    assert(index == vertexCount);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/RingGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexCount =&gt; (_segments) * 3 * 2;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/RingGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get vertexCount =&gt; (_segments + 1) * 2;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/RingGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.RingGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/SphereGenerator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.SphereGenerator",
            "shortname": "SphereGenerator",
            "extends": [
                "vector_math_geometry.GeometryGenerator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "vector_math_geometry\/SphereGenerator\/SphereGenerator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SphereGenerator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MeshGeometry createSphere(num radius,\n    {int latSegments: 16,\n    int lonSegments: 16,\n    GeometryGeneratorFlags flags,\n    List&lt;GeometryFilter&gt; filters}) {\n  _radius = radius.toDouble();\n  _latSegments = latSegments;\n  _lonSegments = lonSegments;\n\n  return createGeometry(flags: flags, filters: filters);\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/SphereGenerator\/createSphere.html",
                    "isDeprecated": false,
                    "type": "vector_math_geometry.MeshGeometry",
                    "name": "createSphere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": [
                        {
                            "name": "filters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<vector_math_geometry.GeometryFilter>"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.GeometryGeneratorFlags"
                        },
                        {
                            "name": "latSegments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "lonSegments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "radius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateIndices(Uint16List indices) {\n  int i = 0;\n  for (int y = 0; y &lt; _latSegments; ++y) {\n    final int base1 = (_lonSegments + 1) * y;\n    final int base2 = (_lonSegments + 1) * (y + 1);\n\n    for (int x = 0; x &lt; _lonSegments; ++x) {\n      indices[i++] = base1 + x;\n      indices[i++] = base1 + x + 1;\n      indices[i++] = base2 + x;\n\n      indices[i++] = base1 + x + 1;\n      indices[i++] = base2 + x + 1;\n      indices[i++] = base2 + x;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/SphereGenerator\/generateIndices.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateIndices",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexNormals(\n    Vector3List normals, Vector3List positions, Uint16List indices) {\n  int i = 0;\n  for (int y = 0; y &lt;= _latSegments; ++y) {\n    final double v = y \/ _latSegments;\n    final double sv = math.sin(v * math.pi);\n    final double cv = math.cos(v * math.pi);\n\n    for (int x = 0; x &lt;= _lonSegments; ++x) {\n      final double u = x \/ _lonSegments;\n\n      normals[i++] = new Vector3(math.cos(u * math.pi * 2.0) * sv, cv,\n          math.sin(u * math.pi * 2.0) * sv);\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/SphereGenerator\/generateVertexNormals.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexNormals",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "normals",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexPositions(Vector3List positions, Uint16List indices) {\n  int i = 0;\n  for (int y = 0; y &lt;= _latSegments; ++y) {\n    final double v = y \/ _latSegments;\n    final double sv = math.sin(v * math.pi);\n    final double cv = math.cos(v * math.pi);\n\n    for (int x = 0; x &lt;= _lonSegments; ++x) {\n      final double u = x \/ _lonSegments;\n\n      positions[i++] = new Vector3(_radius * math.cos(u * math.pi * 2.0) * sv,\n          _radius * cv, _radius * math.sin(u * math.pi * 2.0) * sv);\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/SphereGenerator\/generateVertexPositions.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexPositions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid generateVertexTexCoords(\n    Vector2List texCoords, Vector3List positions, Uint16List indices) {\n  int i = 0;\n  for (int y = 0; y &lt;= _latSegments; ++y) {\n    final double v = y \/ _latSegments;\n\n    for (int x = 0; x &lt;= _lonSegments; ++x) {\n      final double u = x \/ _lonSegments;\n      texCoords[i++] = new Vector2(u, v);\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/SphereGenerator\/generateVertexTexCoords.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "generateVertexTexCoords",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": [
                        {
                            "name": "indices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Uint16List"
                        },
                        {
                            "name": "positions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector3List"
                        },
                        {
                            "name": "texCoords",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_lists.Vector2List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexCount =&gt; 6 * _lonSegments * _latSegments;<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/SphereGenerator\/indexCount.html",
                    "name": "indexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get vertexCount =&gt; (_lonSegments + 1) * (_latSegments + 1);<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/SphereGenerator\/vertexCount.html",
                    "name": "vertexCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.SphereGenerator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/TransformFilter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.TransformFilter",
            "shortname": "TransformFilter",
            "extends": [
                "vector_math_geometry.InplaceGeometryFilter",
                "vector_math_geometry.GeometryFilter",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TransformFilter(this.transform);<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/TransformFilter\/TransformFilter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TransformFilter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.TransformFilter",
                    "params": [
                        {
                            "name": "transform",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "vector_math.Matrix4"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the filter to the mesh.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid filterInplace(MeshGeometry mesh) {\n  final VectorList&lt;Vector&gt; position = mesh.getViewForAttrib('POSITION');\n  if (position is Vector3List) {\n    for (int i = 0; i &lt; position.length; ++i) {\n      \/\/ multiplication always returns Vector3 here\n      \/\/ ignore: invalid_assignment\n      position[i] = transform * position[i];\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/TransformFilter\/filterInplace.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "filterInplace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.TransformFilter",
                    "params": [
                        {
                            "name": "mesh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "vector_math_geometry.MeshGeometry"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;VertexAttrib&gt; get requires =&gt;\n    &lt;VertexAttrib&gt;[new VertexAttrib('POSITION', 3, 'float')];<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/TransformFilter\/requires.html",
                    "name": "requires",
                    "isDeprecated": false,
                    "type": "dart:core.List<vector_math_geometry.VertexAttrib>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.TransformFilter",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Matrix4 transform\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/TransformFilter\/transform.html",
                    "name": "transform",
                    "isDeprecated": false,
                    "type": "vector_math.Matrix4",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.TransformFilter",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "vector_math_geometry\/VertexAttrib-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "vector_math_geometry",
            "name": "vector_math_geometry.VertexAttrib",
            "shortname": "VertexAttrib",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VertexAttrib(this.name, this.size, this.type)\n    : stride = 0,\n      offset = 0;<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/VertexAttrib\/VertexAttrib.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "VertexAttrib",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "size",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "type",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VectorList&lt;Vector&gt; getView(Float32List buffer) {\n  final int viewOffset = offset ~\/ buffer.elementSizeInBytes;\n  final int viewStride = stride ~\/ buffer.elementSizeInBytes;\n  switch (size) {\n    case 2:\n      return new Vector2List.view(buffer, viewOffset, viewStride);\n    case 3:\n      return new Vector3List.view(buffer, viewOffset, viewStride);\n    case 4:\n      return new Vector4List.view(buffer, viewOffset, viewStride);\n    default:\n      throw new StateError('size of $size is not supported');\n  }\n}<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/VertexAttrib\/getView.html",
                    "isDeprecated": false,
                    "type": "vector_math_lists.VectorList<vector_math.Vector>",
                    "name": "getView",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": [
                        {
                            "name": "buffer",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:typed_data.Float32List"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, Object&gt; toJson() =&gt; &lt;String, Object&gt;{\n      'format': format,\n      'name': name,\n      'offset': offset,\n      'stride': stride,\n      'size': size,\n      'type': type\n    };<\/code><\/pre>\n    ",
                    "href": "vector_math_geometry\/VertexAttrib\/toJson.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
                    "name": "toJson",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSize {\n  switch (type) {\n    case 'float':\n    case 'int':\n      return 4;\n    case 'short':\n      return 2;\n    case 'byte':\n      return 1;\n    default:\n      return 0;\n  }\n}<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/elementSize.html",
                    "name": "elementSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get format =&gt; '$type$size';<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/format.html",
                    "name": "format",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int size\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/size.html",
                    "name": "size",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int stride\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/stride.html",
                    "name": "stride",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String type\n\n<\/code><\/pre>\n        ",
                    "href": "vector_math_geometry\/VertexAttrib\/type.html",
                    "name": "type",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "vector_math_geometry.VertexAttrib",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}