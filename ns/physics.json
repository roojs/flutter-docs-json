{
    "class": [
        {
            "desc": "<p>A <a href=\"physics\/FrictionSimulation-class.html\">FrictionSimulation<\/a> that clamps the modeled particle to a specific range\nof values.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/BoundedFrictionSimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.BoundedFrictionSimulation",
            "shortname": "BoundedFrictionSimulation",
            "extends": [
                "physics.FrictionSimulation",
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"physics\/BoundedFrictionSimulation-class.html\">BoundedFrictionSimulation<\/a> with the given arguments, namely:\nthe fluid drag coefficient, a unitless value; the initial position, in the\nsame length units as used for <a href=\"physics\/BoundedFrictionSimulation\/x.html\">x<\/a>; the initial velocity, in the same\nvelocity units as used for <a href=\"physics\/FrictionSimulation\/dx.html\">dx<\/a>, the minimum value for the position, and\nthe maximum value for the position. The minimum and maximum values must be\nin the same units as the initial position, and the initial position must\nbe within the given range.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoundedFrictionSimulation(\n  double drag,\n  double position,\n  double velocity,\n  this._minX,\n  this._maxX,\n) : assert(position.clamp(_minX, _maxX) == position),\n    super(drag, position, velocity);<\/code><\/pre>\n    ",
                    "href": "physics\/BoundedFrictionSimulation\/BoundedFrictionSimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "BoundedFrictionSimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.BoundedFrictionSimulation",
                    "params": [
                        {
                            "name": "_maxX",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "_minX",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "drag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isDone(double time) {\n  return super.isDone(time) ||\n    (x(time) - _minX).abs() &lt; tolerance.distance ||\n    (x(time) - _maxX).abs() &lt; tolerance.distance;\n}<\/code><\/pre>\n    ",
                    "href": "physics\/BoundedFrictionSimulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.BoundedFrictionSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) {\n  return super.x(time).clamp(_minX, _maxX);\n}<\/code><\/pre>\n    ",
                    "href": "physics\/BoundedFrictionSimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.BoundedFrictionSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A simulation that applies limits to another simulation.<\/p>\n<p>The limits are only applied to the other simulation's outputs. For example,\nif a maximum position was applied to a gravity simulation with the\nparticle's initial velocity being up, and the acceleration being down, and\nthe maximum position being between the initial position and the curve's\napogee, then the particle would return to its initial position in the same\namount of time as it would have if the maximum had not been applied; the\ndifference would just be that the position would be reported as pinned to\nthe maximum value for the times that it would otherwise have been reported\nas higher.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/ClampedSimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.ClampedSimulation",
            "shortname": "ClampedSimulation",
            "extends": [
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"physics\/ClampedSimulation-class.html\">ClampedSimulation<\/a> that clamps the given simulation.<\/p>\n<p>The named arguments specify the ranges for the clamping behavior, as\napplied to <a href=\"physics\/ClampedSimulation\/x.html\">x<\/a> and <a href=\"physics\/ClampedSimulation\/dx.html\">dx<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ClampedSimulation(\n  this.simulation, {\n  this.xMin = double.negativeInfinity,\n  this.xMax = double.infinity,\n  this.dxMin = double.negativeInfinity,\n  this.dxMax = double.infinity,\n}) : assert(simulation != null),\n     assert(xMax &gt;= xMin),\n     assert(dxMax &gt;= dxMin);<\/code><\/pre>\n    ",
                    "href": "physics\/ClampedSimulation\/ClampedSimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ClampedSimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": [
                        {
                            "name": "dxMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "dxMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "simulation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.Simulation"
                        },
                        {
                            "name": "xMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "xMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble dx(double time) =&gt; simulation.dx(time).clamp(dxMin, dxMax);<\/code><\/pre>\n    ",
                    "href": "physics\/ClampedSimulation\/dx.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "dx",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isDone(double time) =&gt; simulation.isDone(time);<\/code><\/pre>\n    ",
                    "href": "physics\/ClampedSimulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) =&gt; simulation.x(time).clamp(xMin, xMax);<\/code><\/pre>\n    ",
                    "href": "physics\/ClampedSimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The maximum to apply to <a href=\"physics\/ClampedSimulation\/dx.html\">dx<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double dxMax\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/ClampedSimulation\/dxMax.html",
                    "name": "dxMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": []
                },
                {
                    "desc": "<p>The minimum to apply to <a href=\"physics\/ClampedSimulation\/dx.html\">dx<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double dxMin\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/ClampedSimulation\/dxMin.html",
                    "name": "dxMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": []
                },
                {
                    "desc": "<p>The simulation being clamped. Calls to <a href=\"physics\/ClampedSimulation\/x.html\">x<\/a>, <a href=\"physics\/ClampedSimulation\/dx.html\">dx<\/a>, and <a href=\"physics\/ClampedSimulation\/isDone.html\">isDone<\/a> are\nforwarded to the simulation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Simulation simulation\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/ClampedSimulation\/simulation.html",
                    "name": "simulation",
                    "isDeprecated": false,
                    "type": "physics.Simulation",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": []
                },
                {
                    "desc": "<p>The maximum to apply to <a href=\"physics\/ClampedSimulation\/x.html\">x<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double xMax\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/ClampedSimulation\/xMax.html",
                    "name": "xMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": []
                },
                {
                    "desc": "<p>The minimum to apply to <a href=\"physics\/ClampedSimulation\/x.html\">x<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double xMin\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/ClampedSimulation\/xMin.html",
                    "name": "xMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.ClampedSimulation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A simulation that applies a drag to slow a particle down.<\/p>\n<p>Models a particle affected by fluid drag, e.g. air resistance.<\/p>\n<p>The simulation ends when the velocity of the particle drops to zero (within\nthe current velocity <a href=\"physics\/Simulation\/tolerance.html\">tolerance<\/a>).<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/FrictionSimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.FrictionSimulation",
            "shortname": "FrictionSimulation",
            "extends": [
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "physics.BoundedFrictionSimulation"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"physics\/FrictionSimulation-class.html\">FrictionSimulation<\/a> with the given arguments, namely: the fluid\ndrag coefficient, a unitless value; the initial position, in the same\nlength units as used for <a href=\"physics\/FrictionSimulation\/x.html\">x<\/a>; and the initial velocity, in the same\nvelocity units as used for <a href=\"physics\/FrictionSimulation\/dx.html\">dx<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FrictionSimulation(\n  double drag,\n  double position,\n  double velocity, {\n  Tolerance tolerance = Tolerance.defaultTolerance,\n}) : _drag = drag,\n     _dragLog = math.log(drag),\n     _x = position,\n     _v = velocity,\n     super(tolerance: tolerance);<\/code><\/pre>\n    ",
                    "href": "physics\/FrictionSimulation\/FrictionSimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FrictionSimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": [
                        {
                            "name": "drag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.Tolerance"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble dx(double time) =&gt; _v * math.pow(_drag, time);<\/code><\/pre>\n    ",
                    "href": "physics\/FrictionSimulation\/dx.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "dx",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isDone(double time) =&gt; dx(time).abs() &lt; tolerance.velocity;<\/code><\/pre>\n    ",
                    "href": "physics\/FrictionSimulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The time at which the value of <code>x(time)<\/code> will equal <code>x<\/code>.<\/p>\n<p>Returns <code>double.infinity<\/code> if the simulation will never reach <code>x<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double timeAtX(double x) {\n  if (x == _x)\n    return 0.0;\n  if (_v == 0.0 || (_v &gt; 0 ? (x &lt; _x || x &gt; finalX) : (x &gt; _x || x &lt; finalX)))\n    return double.infinity;\n  return math.log(_dragLog * (x - _x) \/ _v + 1.0) \/ _dragLog;\n}<\/code><\/pre>\n    ",
                    "href": "physics\/FrictionSimulation\/timeAtX.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "timeAtX",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": [
                        {
                            "name": "x",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) =&gt; _x + _v * math.pow(_drag, time) \/ _dragLog - _v \/ _dragLog;<\/code><\/pre>\n    ",
                    "href": "physics\/FrictionSimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The value of <a href=\"physics\/FrictionSimulation\/x.html\">x<\/a> at <code>double.infinity<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get finalX =&gt; _x - _v \/ _dragLog;<\/code><\/pre>\n        ",
                    "href": "physics\/FrictionSimulation\/finalX.html",
                    "name": "finalX",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.FrictionSimulation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A simulation that applies a constant accelerating force.<\/p>\n<p>Models a particle that follows Newton's second law of motion. The simulation\nends when the position reaches a defined point.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis method triggers an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> (a previously constructed\n<code>_controller<\/code> field) to simulate a fall of 300 pixels.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void _startFall() {\n  _controller.animateWith(GravitySimulation(\n    10.0, \/\/ acceleration, pixels per second per second\n    0.0, \/\/ starting position, pixels\n    300.0, \/\/ ending position, pixels\n    0.0, \/\/ starting velocity, pixels per second\n  ));\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>This <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> could be used with an <a href=\"widgets\/AnimatedBuilder-class.html\">AnimatedBuilder<\/a> to\nanimate the position of a child as if it was falling.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Curves\/bounceOut-constant.html\">Curves.bounceOut<\/a>, a <a href=\"animation\/Curve-class.html\">Curve<\/a> that has a similar aesthetics but includes\na bouncing effect.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "physics\/GravitySimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.GravitySimulation",
            "shortname": "GravitySimulation",
            "extends": [
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"physics\/GravitySimulation-class.html\">GravitySimulation<\/a> using the given arguments, which are,\nrespectively: an acceleration that is to be applied continually over time;\nan initial position relative to an origin; the magnitude of the distance\nfrom that origin beyond which (in either direction) to consider the\nsimulation to be \"done\", which must be positive; and an initial velocity.<\/p>\n<p>The initial position and maximum distance are measured in arbitrary length\nunits L from an arbitrary origin. The units will match those used for <a href=\"physics\/GravitySimulation\/x.html\">x<\/a>.<\/p>\n<p>The time unit T used for the arguments to <a href=\"physics\/GravitySimulation\/x.html\">x<\/a>, <a href=\"physics\/GravitySimulation\/dx.html\">dx<\/a>, and <a href=\"physics\/GravitySimulation\/isDone.html\">isDone<\/a>,\ncombined with the aforementioned length unit, together determine the units\nthat must be used for the velocity and acceleration arguments: L\/T and\nL\/T\u00b2 respectively. The same units of velocity are used for the velocity\nobtained from <a href=\"physics\/GravitySimulation\/dx.html\">dx<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GravitySimulation(\n  double acceleration,\n  double distance,\n  double endDistance,\n  double velocity,\n) : assert(acceleration != null),\n    assert(distance != null),\n    assert(velocity != null),\n    assert(endDistance != null),\n    assert(endDistance &gt;= 0),\n    _a = acceleration,\n    _x = distance,\n    _v = velocity,\n    _end = endDistance;<\/code><\/pre>\n    ",
                    "href": "physics\/GravitySimulation\/GravitySimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GravitySimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.GravitySimulation",
                    "params": [
                        {
                            "name": "acceleration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "endDistance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble dx(double time) =&gt; _v + time * _a;<\/code><\/pre>\n    ",
                    "href": "physics\/GravitySimulation\/dx.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "dx",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.GravitySimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isDone(double time) =&gt; x(time).abs() &gt;= _end;<\/code><\/pre>\n    ",
                    "href": "physics\/GravitySimulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.GravitySimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) =&gt; _x + _v * time + 0.5 * _a * time * time;<\/code><\/pre>\n    ",
                    "href": "physics\/GravitySimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.GravitySimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A SpringSimulation where the value of <a href=\"physics\/ScrollSpringSimulation\/x.html\">x<\/a> is guaranteed to have exactly the\nend value when the simulation isDone().<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/ScrollSpringSimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.ScrollSpringSimulation",
            "shortname": "ScrollSpringSimulation",
            "extends": [
                "physics.SpringSimulation",
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a spring simulation from the provided spring description, start\ndistance, end distance, and initial velocity.<\/p>\n<p>See the <a href=\"physics\/SpringSimulation\/SpringSimulation.html\">new SpringSimulation<\/a> constructor on the superclass for a\ndiscussion of the arguments' units.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScrollSpringSimulation(\n  SpringDescription spring,\n  double start,\n  double end,\n  double velocity, {\n  Tolerance tolerance = Tolerance.defaultTolerance,\n}) : super(spring, start, end, velocity, tolerance: tolerance);<\/code><\/pre>\n    ",
                    "href": "physics\/ScrollSpringSimulation\/ScrollSpringSimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ScrollSpringSimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.ScrollSpringSimulation",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "spring",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.SpringDescription"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.Tolerance"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) =&gt; isDone(time) ? _endPosition : super.x(time);<\/code><\/pre>\n    ",
                    "href": "physics\/ScrollSpringSimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.ScrollSpringSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The base class for all simulations.<\/p>\n<p>A simulation models an object, in a one-dimensional space, on which particular\nforces are being applied, and exposes:<\/p>\n<ul>\n<li>The object's position, <a href=\"physics\/Simulation\/x.html\">x<\/a>\n<\/li>\n<li>The object's velocity, <a href=\"physics\/Simulation\/dx.html\">dx<\/a>\n<\/li>\n<li>Whether the simulation is \"done\", <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a>\n<\/li>\n<\/ul>\n<p>A simulation is generally \"done\" if the object has, to a given <a href=\"physics\/Simulation\/tolerance.html\">tolerance<\/a>,\ncome to a complete rest.<\/p>\n<p>The <a href=\"physics\/Simulation\/x.html\">x<\/a>, <a href=\"physics\/Simulation\/dx.html\">dx<\/a>, and <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a> functions take a time argument which specifies\nthe time for which they are to be evaluated. In principle, simulations can\nbe stateless, and thus can be queried with arbitrary times. In practice,\nhowever, some simulations are not, and calling any of these functions will\nadvance the simulation to the given time.<\/p>\n<p>As a general rule, therefore, a simulation should only be queried using\ntimes that are equal to or greater than all times previously used for that\nsimulation.<\/p>\n<p>Simulations do not specify units for distance, velocity, and time. Client\nshould establish a convention and use that convention consistently with all\nrelated objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/Simulation-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.Simulation",
            "shortname": "Simulation",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "physics.BoundedFrictionSimulation",
                "physics.ClampedSimulation",
                "physics.FrictionSimulation",
                "physics.GravitySimulation",
                "physics.ScrollSpringSimulation",
                "physics.SpringSimulation",
                "widgets.BouncingScrollSimulation",
                "widgets.ClampingScrollSimulation"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Initializes the <code>tolerance<\/code> field for subclasses.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Simulation({ this.tolerance = Tolerance.defaultTolerance });<\/code><\/pre>\n    ",
                    "href": "physics\/Simulation\/Simulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Simulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.Simulation",
                    "params": [
                        {
                            "name": "tolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.Tolerance"
                        }
                    ]
                },
                {
                    "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double dx(double time);<\/code><\/pre>\n    ",
                    "href": "physics\/Simulation\/dx.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "dx",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.Simulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isDone(double time);<\/code><\/pre>\n    ",
                    "href": "physics\/Simulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.Simulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "href": "physics\/Simulation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.Simulation",
                    "params": []
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double x(double time);<\/code><\/pre>\n    ",
                    "href": "physics\/Simulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.Simulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>How close to the actual end of the simulation a value at a particular time\nmust be before <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a> considers the simulation to be \"done\".<\/p>\n<p>A simulation with an asymptotic curve would never technically be \"done\",\nbut once the difference from the value at a particular time and the\nasymptote itself could not be seen, it would be pointless to continue. The\ntolerance defines how to determine if the difference could not be seen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Tolerance tolerance\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/Simulation\/tolerance.html",
                    "name": "tolerance",
                    "isDeprecated": false,
                    "type": "physics.Tolerance",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.Simulation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Structure that describes a spring's constants.<\/p>\n<p>Used to configure a <a href=\"physics\/SpringSimulation-class.html\">SpringSimulation<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/SpringDescription-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.SpringDescription",
            "shortname": "SpringDescription",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a spring given the mass, stiffness, and the damping coefficient.<\/p>\n<p>See <code>mass<\/code>, <code>stiffness<\/code>, and <code>damping<\/code> for the units of the arguments.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SpringDescription({\n  this.mass,\n  this.stiffness,\n  this.damping,\n});<\/code><\/pre>\n    ",
                    "href": "physics\/SpringDescription\/SpringDescription.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SpringDescription",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.SpringDescription",
                    "params": [
                        {
                            "name": "damping",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "mass",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "stiffness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(mass: ${mass.toStringAsFixed(1)}, stiffness: ${stiffness.toStringAsFixed(1)}, damping: ${damping.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
                    "href": "physics\/SpringDescription\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.SpringDescription",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The damping coefficient (c).<\/p>\n<p>Do not confuse the damping <em>coefficient<\/em> (c) with the damping <em>ratio<\/em> (\u03b6).\nTo create a <a href=\"physics\/SpringDescription-class.html\">SpringDescription<\/a> with a damping ratio, use the <a href=\"physics\/SpringDescription\/SpringDescription.withDampingRatio.html\">new\nSpringDescription.withDampingRatio<\/a> constructor.<\/p>\n<p>The units of the damping coefficient are M\/T, where M is the mass unit\nused for the value of the <a href=\"physics\/SpringDescription\/mass.html\">mass<\/a> property, and T is the time unit used for\ndriving the <a href=\"physics\/SpringSimulation-class.html\">SpringSimulation<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double damping\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/SpringDescription\/damping.html",
                    "name": "damping",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.SpringDescription",
                    "params": []
                },
                {
                    "desc": "<p>The mass of the spring (m). The units are arbitrary, but all springs\nwithin a system should use the same mass units.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double mass\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/SpringDescription\/mass.html",
                    "name": "mass",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.SpringDescription",
                    "params": []
                },
                {
                    "desc": "<p>The spring constant (k). The units of stiffness are M\/T\u00b2, where M is the\nmass unit used for the value of the <a href=\"physics\/SpringDescription\/mass.html\">mass<\/a> property, and T is the time\nunit used for driving the <a href=\"physics\/SpringSimulation-class.html\">SpringSimulation<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double stiffness\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/SpringDescription\/stiffness.html",
                    "name": "stiffness",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.SpringDescription",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A spring simulation.<\/p>\n<p>Models a particle attached to a spring that follows Hooke's law.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/SpringSimulation-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.SpringSimulation",
            "shortname": "SpringSimulation",
            "extends": [
                "physics.Simulation",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "physics.ScrollSpringSimulation"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a spring simulation from the provided spring description, start\ndistance, end distance, and initial velocity.<\/p>\n<p>The units for the start and end distance arguments are arbitrary, but must\nbe consistent with the units used for other lengths in the system.<\/p>\n<p>The units for the velocity are L\/T, where L is the aforementioned\narbitrary unit of length, and T is the time unit used for driving the\n<a href=\"physics\/SpringSimulation-class.html\">SpringSimulation<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SpringSimulation(\n  SpringDescription spring,\n  double start,\n  double end,\n  double velocity, {\n  Tolerance tolerance = Tolerance.defaultTolerance,\n}) : _endPosition = end,\n     _solution = _SpringSolution(spring, start - end, velocity),\n     super(tolerance: tolerance);<\/code><\/pre>\n    ",
                    "href": "physics\/SpringSimulation\/SpringSimulation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SpringSimulation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "spring",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.SpringDescription"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tolerance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "physics.Tolerance"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble dx(double time) =&gt; _solution.dx(time);<\/code><\/pre>\n    ",
                    "href": "physics\/SpringSimulation\/dx.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "dx",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isDone(double time) {\n  return nearZero(_solution.x(time), tolerance.distance) &amp;&amp;\n         nearZero(_solution.dx(time), tolerance.velocity);\n}<\/code><\/pre>\n    ",
                    "href": "physics\/SpringSimulation\/isDone.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isDone",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(end: $_endPosition, $type)';<\/code><\/pre>\n    ",
                    "href": "physics\/SpringSimulation\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": []
                },
                {
                    "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble x(double time) =&gt; _endPosition + _solution.x(time);<\/code><\/pre>\n    ",
                    "href": "physics\/SpringSimulation\/x.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "x",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": [
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The kind of spring being simulated, for debugging purposes.<\/p>\n<p>This is derived from the <a href=\"physics\/SpringDescription-class.html\">SpringDescription<\/a> provided to the <a href=\"physics\/SpringSimulation\/SpringSimulation.html\">new\nSpringSimulation<\/a> constructor.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SpringType get type =&gt; _solution.type;<\/code><\/pre>\n        ",
                    "href": "physics\/SpringSimulation\/type.html",
                    "name": "type",
                    "isDeprecated": false,
                    "type": "physics.SpringType",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.SpringSimulation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Structure that specifies maximum allowable magnitudes for distances,\ndurations, and velocity differences to be considered equal.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "physics\/Tolerance-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.Tolerance",
            "shortname": "Tolerance",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"physics\/Tolerance-class.html\">Tolerance<\/a> object. By default, the distance, time, and velocity\ntolerances are all \u00b10.001; the constructor arguments override this.<\/p>\n<p>The arguments should all be positive values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Tolerance({\n  this.distance = _epsilonDefault,\n  this.time = _epsilonDefault,\n  this.velocity = _epsilonDefault,\n});<\/code><\/pre>\n    ",
                    "href": "physics\/Tolerance\/Tolerance.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Tolerance",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "physics.Tolerance",
                    "params": [
                        {
                            "name": "distance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "time",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "velocity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Tolerance(distance: \u00b1$distance, time: \u00b1$time, velocity: \u00b1$velocity)';<\/code><\/pre>\n    ",
                    "href": "physics\/Tolerance\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "physics.Tolerance",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>A default tolerance of 0.001 for all three values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Tolerance defaultTolerance = Tolerance()\n\n<\/code><\/pre>\n    ",
                    "href": "physics\/Tolerance\/defaultTolerance-constant.html",
                    "name": "defaultTolerance",
                    "isDeprecated": false,
                    "type": "physics.Tolerance",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "physics.Tolerance",
                    "params": []
                },
                {
                    "desc": "<p>The magnitude of the maximum distance between two points for them to be\nconsidered within tolerance.<\/p>\n<p>The units for the distance tolerance must be the same as the units used\nfor the distances that are to be compared to this tolerance.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distance\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/Tolerance\/distance.html",
                    "name": "distance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.Tolerance",
                    "params": []
                },
                {
                    "desc": "<p>The magnitude of the maximum duration between two times for them to be\nconsidered within tolerance.<\/p>\n<p>The units for the time tolerance must be the same as the units used\nfor the times that are to be compared to this tolerance.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double time\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/Tolerance\/time.html",
                    "name": "time",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.Tolerance",
                    "params": []
                },
                {
                    "desc": "<p>The magnitude of the maximum difference between two velocities for them to\nbe considered within tolerance.<\/p>\n<p>The units for the velocity tolerance must be the same as the units used\nfor the velocities that are to be compared to this tolerance.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double velocity\n\n<\/code><\/pre>\n        ",
                    "href": "physics\/Tolerance\/velocity.html",
                    "name": "velocity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "physics.Tolerance",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [
        {
            "desc": "<p>The kind of spring solution that the <a href=\"physics\/SpringSimulation-class.html\">SpringSimulation<\/a> is using to simulate the spring.<\/p>\n<p>See <a href=\"physics\/SpringSimulation\/type.html\">SpringSimulation.type<\/a>.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "physics\/SpringType-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "physics",
            "name": "physics.SpringType",
            "shortname": "SpringType",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>A spring that does not bounce and returns to its rest position in the\nshortest possible time.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const SpringType(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "criticallyDamped",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "physics.SpringType",
                    "params": []
                },
                {
                    "desc": "\n          <p>A spring that does not bounce but takes longer to return to its rest\nposition than a <a href=\"physics\/SpringType-class.html\">criticallyDamped<\/a> one.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const SpringType(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "overDamped",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "physics.SpringType",
                    "params": []
                },
                {
                    "desc": "\n          <p>A spring that bounces.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const SpringType(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "underDamped",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "physics.SpringType",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">SpringType<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "physics.SpringType",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}