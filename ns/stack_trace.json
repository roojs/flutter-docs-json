{
    "class": [
        {
            "desc": "<p>A chain of stack traces.<\/p>\n<p>A stack chain is a collection of one or more stack traces that collectively\nrepresent the path from <code>main<\/code> through nested function calls to a particular\ncode location, usually where an error was thrown. Multiple stack traces are\nnecessary when using asynchronous functions, since the program's stack is\nreset before each asynchronous callback is run.<\/p>\n<p>Stack chains can be automatically tracked using <a href=\"package-stack_trace_stack_trace\/Chain\/capture.html\">Chain.capture<\/a>. This sets\nup a new <a href=\"dart-async\/Zone-class.html\">Zone<\/a> in which the current stack chain is tracked and can be\naccessed using <a href=\"package-stack_trace_stack_trace\/Chain\/Chain.current.html\">new Chain.current<\/a>. Any errors that would be top-leveled in\nthe zone can be handled, along with their associated chains, with the\n<code>onError<\/code> callback. For example:<\/p>\n<pre class=\"language-dart\"><code>Chain.capture(() {\n  \/\/ ...\n}, onError: (error, stackChain) {\n  print(\"Caught error $error\\n\"\n        \"$stackChain\");\n});\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stack_trace_stack_trace\/Chain-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stack_trace",
            "name": "stack_trace.Chain",
            "shortname": "Chain",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">Chain<\/a> comprised of <code>traces<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Chain(Iterable&lt;Trace&gt; traces) : traces = new List&lt;Trace&gt;.unmodifiable(traces);<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/Chain.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Chain",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": [
                        {
                            "name": "traces",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<stack_trace.Trace>"
                        }
                    ]
                },
                {
                    "desc": "<p>If <code>when<\/code> is <code>true<\/code>, runs <code>callback<\/code> in a <a href=\"dart-async\/Zone-class.html\">Zone<\/a> in which the current\nstack chain is tracked and automatically associated with (most) errors.<\/p>\n<p>If <code>when<\/code> is <code>false<\/code>, this does not track stack chains. Instead, it's\nidentical to <a href=\"dart-async\/runZoned.html\">runZoned<\/a>, except that it wraps any errors in <a href=\"package-stack_trace_stack_trace\/Chain\/Chain.forTrace.html\">new\nChain.forTrace<\/a>\u2014which will only wrap the trace unless there's a different\n<a href=\"package-stack_trace_stack_trace\/Chain\/capture.html\">Chain.capture<\/a> active. This makes it easy for the caller to only capture\nstack chains in debug mode or during development.<\/p>\n<p>If <code>onError<\/code> is passed, any error in the zone that would otherwise go\nunhandled is passed to it, along with the <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">Chain<\/a> associated with that\nerror. Note that if <code>callback<\/code> produces multiple unhandled errors,\n<code>onError<\/code> may be called more than once. If <code>onError<\/code> isn't passed, the\nparent Zone's <code>unhandledErrorHandler<\/code> will be called with the error and\nits chain.<\/p>\n<p>If <code>errorZone<\/code> is <code>true<\/code>, the zone this creates will be an error zone,\neven if <code>onError<\/code> isn't passed. This means that any errors that would\ncross the zone boundary are considered unhandled. If <code>errorZone<\/code> is\n<code>false<\/code>, <code>onError<\/code> must be <code>null<\/code>.<\/p>\n<p>If <code>callback<\/code> returns a value, it will be returned by <a href=\"package-stack_trace_stack_trace\/Chain\/capture.html\">capture<\/a> as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T capture&lt;T&gt;(T callback(),\n    {void onError(error, Chain chain),\n    bool when: true,\n    bool errorZone: true}) {\n  if (!errorZone &amp;&amp; onError != null) {\n    throw new ArgumentError.value(\n        onError, \"onError\", \"must be null if errorZone is false\");\n  }\n\n  if (!when) {\n    var newOnError;\n    if (onError != null) {\n      newOnError = (error, stackTrace) {\n        onError(\n            error,\n            stackTrace == null\n                ? new Chain.current()\n                : new Chain.forTrace(stackTrace));\n      };\n    }\n\n    return runZoned(callback, onError: newOnError);\n  }\n\n  var spec = new StackZoneSpecification(onError, errorZone: errorZone);\n  return runZoned(() {\n    try {\n      return callback();\n    } catch (error, stackTrace) {\n      \/\/ TODO(nweiz): Don't special-case this when issue 19566 is fixed.\n      Zone.current.handleUncaughtError(error, stackTrace);\n      return null;\n    }\n  },\n      zoneSpecification: spec.toSpec(),\n      zoneValues: {_specKey: spec, StackZoneSpecification.disableKey: false});\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/capture.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "capture",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": [
                        {
                            "name": "callback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "chain",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stack_trace.Chain"
                        },
                        {
                            "name": "error",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "errorZone",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "when",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>If <code>when<\/code> is <code>true<\/code> and this is called within a <a href=\"package-stack_trace_stack_trace\/Chain\/capture.html\">Chain.capture<\/a> zone, runs\n<code>callback<\/code> in a <a href=\"dart-async\/Zone-class.html\">Zone<\/a> in which chain capturing is disabled.<\/p>\n<p>If <code>callback<\/code> returns a value, it will be returned by <a href=\"package-stack_trace_stack_trace\/Chain\/disable.html\">disable<\/a> as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T disable&lt;T&gt;(T callback(), {bool when: true}) {\n  var zoneValues =\n      when ? {_specKey: null, StackZoneSpecification.disableKey: true} : null;\n\n  return runZoned(callback, zoneValues: zoneValues);\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/disable.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "disable",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": [
                        {
                            "name": "callback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "when",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">Chain<\/a> based on <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">this<\/a> where multiple stack frames matching\n<code>predicate<\/code> are folded together.<\/p>\n<p>This means that whenever there are multiple frames in a row that match\n<code>predicate<\/code>, only the last one is kept. In addition, traces that are\ncomposed entirely of frames matching <code>predicate<\/code> are omitted.<\/p>\n<p>This is useful for limiting the amount of library code that appears in a\nstack trace by only showing user code and code that's called by user code.<\/p>\n<p>If <code>terse<\/code> is true, this will also fold together frames from the core\nlibrary or from this package, and simplify core library frames as in\n<a href=\"package-stack_trace_stack_trace\/Chain\/terse.html\">Trace.terse<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Chain foldFrames(bool predicate(Frame frame), {bool terse: false}) {\n  var foldedTraces =\n      traces.map((trace) =&gt; trace.foldFrames(predicate, terse: terse));\n  var nonEmptyTraces = foldedTraces.where((trace) {\n    \/\/ Ignore traces that contain only folded frames.\n    if (trace.frames.length &gt; 1) return true;\n    if (trace.frames.isEmpty) return false;\n\n    \/\/ In terse mode, the trace may have removed an outer folded frame,\n    \/\/ leaving a single non-folded frame. We can detect a folded frame because\n    \/\/ it has no line information.\n    if (!terse) return false;\n    return trace.frames.single.line != null;\n  });\n\n  \/\/ If all the traces contain only internal processing, preserve the last\n  \/\/ (top-most) one so that the chain isn't empty.\n  if (nonEmptyTraces.isEmpty &amp;&amp; foldedTraces.isNotEmpty) {\n    return new Chain([foldedTraces.last]);\n  }\n\n  return new Chain(nonEmptyTraces);\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/foldFrames.html",
                    "isDeprecated": false,
                    "type": "stack_trace.Chain",
                    "name": "foldFrames",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": [
                        {
                            "name": "frame",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stack_trace.Frame"
                        },
                        {
                            "name": "terse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  \/\/ Figure out the longest path so we know how much to pad.\n  var longest = traces.map((trace) {\n    return trace.frames\n        .map((frame) =&gt; frame.location.length)\n        .fold(0, math.max);\n  }).fold(0, math.max);\n\n  \/\/ Don't call out to [Trace.toString] here because that doesn't ensure that\n  \/\/ padding is consistent across all traces.\n  return traces.map((trace) {\n    return trace.frames.map((frame) {\n      return '${frame.location.padRight(longest)}  ${frame.member}\\n';\n    }).join();\n  }).join(chainGap);\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": []
                },
                {
                    "desc": "<p>Converts <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">this<\/a> to a <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">Trace<\/a>.<\/p>\n<p>The trace version of a chain is just the concatenation of all the traces\nin the chain.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Trace toTrace() =&gt; new Trace(traces.expand((trace) =&gt; trace.frames));<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/toTrace.html",
                    "isDeprecated": false,
                    "type": "stack_trace.Trace",
                    "name": "toTrace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>futureOrStream<\/code> unmodified.<\/p>\n<p>Prior to Dart 1.7, this was necessary to ensure that stack traces for\nexceptions reported with <a href=\"dart-async\/Completer\/completeError.html\">Completer.completeError<\/a> and\n<a href=\"dart-async\/StreamController\/addError.html\">StreamController.addError<\/a> were tracked correctly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Chain.track is not necessary in Dart 1.7+.\")\nstatic track(futureOrStream) =&gt; futureOrStream;<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Chain\/track.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "track",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Chain",
                    "params": [
                        {
                            "name": "futureOrStream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a terser version of <a href=\"package-stack_trace_stack_trace\/Chain-class.html\">this<\/a>.<\/p>\n<p>This calls <a href=\"package-stack_trace_stack_trace\/Chain\/terse.html\">Trace.terse<\/a> on every trace in <a href=\"package-stack_trace_stack_trace\/Chain\/traces.html\">traces<\/a>, and discards any\ntrace that contain only internal frames.<\/p>\n<p>This won't do anything with a raw JavaScript trace, since there's no way\nto determine which frames come from which Dart libraries. However, the\n<a href=\"https:\/\/pub.dartlang.org\/packages\/source_map_stack_trace\"><code>source_map_stack_trace<\/code><\/a> package can be used to\nconvert JavaScript traces into Dart-style traces.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Chain get terse =&gt; foldFrames((_) =&gt; false, terse: true);<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Chain\/terse.html",
                    "name": "terse",
                    "isDeprecated": false,
                    "type": "stack_trace.Chain",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Chain",
                    "params": []
                },
                {
                    "desc": "<p>The stack traces that make up this chain.<\/p>\n<p>Like the frames in a stack trace, the traces are ordered from most local\nto least local. The first one is the trace where the actual exception was\nraised, the second one is where that callback was scheduled, and so on.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Trace&gt; traces\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Chain\/traces.html",
                    "name": "traces",
                    "isDeprecated": false,
                    "type": "dart:core.List<stack_trace.Trace>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Chain",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A single stack frame. Each frame points to a precise location in Dart code.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stack_trace_stack_trace\/Frame-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stack_trace",
            "name": "stack_trace.Frame",
            "shortname": "Frame",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Frame(this.uri, this.line, this.column, this.member);<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Frame\/Frame.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Frame",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stack_trace.Frame",
                    "params": [
                        {
                            "name": "column",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "line",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "member",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Uri"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '$location in $member';<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Frame\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The column number of the code location.<\/p>\n<p>This can be null, indicating that the column number is unknown or\nunimportant.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int column\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>Whether this stack frame comes from the Dart core libraries.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCore =&gt; uri.scheme == 'dart';<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/isCore.html",
                    "name": "isCore",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>Returns a human-friendly description of the library that this stack frame\ncomes from.<\/p>\n<p>This will usually be the string form of <a href=\"package-stack_trace_stack_trace\/Frame\/uri.html\">uri<\/a>, but a relative URI will be\nused if possible. Data URIs will be truncated.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get library {\n  if (uri.scheme == 'data') return \"data:...\";\n  return path.prettyUri(uri);\n}<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/library.html",
                    "name": "library",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>The line number on which the code location is located.<\/p>\n<p>This can be null, indicating that the line number is unknown or\nunimportant.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int line\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>A human-friendly description of the code location.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get location {\n  if (line == null) return library;\n  if (column == null) return '$library $line';\n  return '$library $line:$column';\n}<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/location.html",
                    "name": "location",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>The name of the member in which the code location occurs.<\/p>\n<p>Anonymous closures are represented as <code>&lt;fn&gt;<\/code> in this member string.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String member\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/member.html",
                    "name": "member",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>Returns the name of the package this stack frame comes from, or <code>null<\/code> if\nthis stack frame doesn't come from a <code>package:<\/code> URL.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get package {\n  if (uri.scheme != 'package') return null;\n  return uri.path.split('\/').first;\n}<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/package.html",
                    "name": "package",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                },
                {
                    "desc": "<p>The URI of the file in which the code is located.<\/p>\n<p>This URI will usually have the scheme <code>dart<\/code>, <code>file<\/code>, <code>http<\/code>, or <code>https<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri uri\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Frame\/uri.html",
                    "name": "uri",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Frame",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A stack trace, comprised of a list of stack frames.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stack_trace_stack_trace\/Trace-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stack_trace",
            "name": "stack_trace.Trace",
            "shortname": "Trace",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">Trace<\/a> comprised of <code>frames<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Trace(Iterable&lt;Frame&gt; frames, {String original})\n    : frames = new List&lt;Frame&gt;.unmodifiable(frames),\n      original = new StackTrace.fromString(original);<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Trace\/Trace.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Trace",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stack_trace.Trace",
                    "params": [
                        {
                            "name": "frames",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<stack_trace.Frame>"
                        },
                        {
                            "name": "original",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">Trace<\/a> based on <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a> where multiple stack frames matching\n<code>predicate<\/code> are folded together.<\/p>\n<p>This means that whenever there are multiple frames in a row that match\n<code>predicate<\/code>, only the last one is kept. This is useful for limiting the\namount of library code that appears in a stack trace by only showing user\ncode and code that's called by user code.<\/p>\n<p>If <code>terse<\/code> is true, this will also fold together frames from the core\nlibrary or from this package, simplify core library frames, and\npotentially remove the outermost frame as in <a href=\"package-stack_trace_stack_trace\/Trace\/terse.html\">Trace.terse<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Trace foldFrames(bool predicate(Frame frame), {bool terse: false}) {\n  if (terse) {\n    var oldPredicate = predicate;\n    predicate = (frame) {\n      if (oldPredicate(frame)) return true;\n\n      if (frame.isCore) return true;\n      if (frame.package == 'stack_trace') return true;\n\n      \/\/ Ignore async stack frames without any line or column information.\n      \/\/ These come from the VM's async\/await implementation and represent\n      \/\/ internal frames. They only ever show up in stack chains and are\n      \/\/ always surrounded by other traces that are actually useful, so we can\n      \/\/ just get rid of them.\n      \/\/ TODO(nweiz): Get rid of this logic some time after issue 22009 is\n      \/\/ fixed.\n      if (!frame.member.contains('&lt;async&gt;')) return false;\n      return frame.line == null;\n    };\n  }\n\n  var newFrames = &lt;Frame&gt;[];\n  for (var frame in frames.reversed) {\n    if (frame is UnparsedFrame || !predicate(frame)) {\n      newFrames.add(frame);\n    } else if (newFrames.isEmpty || !predicate(newFrames.last)) {\n      newFrames\n          .add(new Frame(frame.uri, frame.line, frame.column, frame.member));\n    }\n  }\n\n  if (terse) {\n    newFrames = newFrames.map((frame) {\n      if (frame is UnparsedFrame || !predicate(frame)) return frame;\n      var library = frame.library.replaceAll(_terseRegExp, '');\n      return new Frame(Uri.parse(library), null, null, frame.member);\n    }).toList();\n\n    if (newFrames.length &gt; 1 &amp;&amp; predicate(newFrames.first)) {\n      newFrames.removeAt(0);\n    }\n  }\n\n  return new Trace(newFrames.reversed, original: this.original.toString());\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Trace\/foldFrames.html",
                    "isDeprecated": false,
                    "type": "stack_trace.Trace",
                    "name": "foldFrames",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Trace",
                    "params": [
                        {
                            "name": "frame",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "stack_trace.Frame"
                        },
                        {
                            "name": "terse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a human-readable representation of <code>stackTrace<\/code>. If <code>terse<\/code> is\nset, this folds together multiple stack frames from the Dart core\nlibraries, so that only the core library method directly called from user\ncode is visible (see <a href=\"package-stack_trace_stack_trace\/Trace\/terse.html\">Trace.terse<\/a>).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String format(StackTrace stackTrace, {bool terse: true}) {\n  var trace = new Trace.from(stackTrace);\n  if (terse) trace = trace.terse;\n  return trace.toString();\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Trace\/format.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "format",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Trace",
                    "params": [
                        {
                            "name": "stackTrace",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.StackTrace"
                        },
                        {
                            "name": "terse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a human-readable string representation of <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  \/\/ Figure out the longest path so we know how much to pad.\n  var longest =\n      frames.map((frame) =&gt; frame.location.length).fold(0, math.max);\n\n  \/\/ Print out the stack trace nicely formatted.\n  return frames.map((frame) {\n    if (frame is UnparsedFrame) return \"$frame\\n\";\n    return '${frame.location.padRight(longest)}  ${frame.member}\\n';\n  }).join();\n}<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/Trace\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.Trace",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The stack frames that comprise this stack trace.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Frame&gt; frames\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Trace\/frames.html",
                    "name": "frames",
                    "isDeprecated": false,
                    "type": "dart:core.List<stack_trace.Frame>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Trace",
                    "params": []
                },
                {
                    "desc": "<p>The original stack trace from which this trace was parsed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace original\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Trace\/original.html",
                    "name": "original",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Trace",
                    "params": []
                },
                {
                    "desc": "<p>Returns a terser version of <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a>.<\/p>\n<p>This is accomplished by folding together multiple stack frames from the\ncore library or from this package, as in <a href=\"package-stack_trace_stack_trace\/Trace\/foldFrames.html\">foldFrames<\/a>. Remaining core\nlibrary frames have their libraries, \"-patch\" suffixes, and line numbers\nremoved. If the outermost frame of the stack trace is a core library\nframe, it's removed entirely.<\/p>\n<p>This won't do anything with a raw JavaScript trace, since there's no way\nto determine which frames come from which Dart libraries. However, the\n<a href=\"https:\/\/pub.dartlang.org\/packages\/source_map_stack_trace\"><code>source_map_stack_trace<\/code><\/a> package can be used to\nconvert JavaScript traces into Dart-style traces.<\/p>\n<p>For custom folding, see <a href=\"package-stack_trace_stack_trace\/Trace\/foldFrames.html\">foldFrames<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Trace get terse =&gt; foldFrames((_) =&gt; false, terse: true);<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Trace\/terse.html",
                    "name": "terse",
                    "isDeprecated": false,
                    "type": "stack_trace.Trace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Trace",
                    "params": []
                },
                {
                    "desc": "<p>Returns a VM-style <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> object.<\/p>\n<p>The return value's <a href=\"package-stack_trace_stack_trace\/Trace\/toString.html\">toString<\/a> method will always return a string\nrepresentation in the Dart VM's stack trace format, regardless of what\nplatform is being used.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace get vmTrace =&gt; new VMTrace(frames);<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/Trace\/vmTrace.html",
                    "name": "vmTrace",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.Trace",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A frame that failed to parse.<\/p>\n<p>The <a href=\"package-stack_trace_stack_trace\/UnparsedFrame\/member.html\">member<\/a> property contains the original frame's contents.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-stack_trace_stack_trace\/UnparsedFrame-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "stack_trace",
            "name": "stack_trace.UnparsedFrame",
            "shortname": "UnparsedFrame",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnparsedFrame(this.member);<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/UnparsedFrame.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnparsedFrame",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": [
                        {
                            "name": "member",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; member;<\/code><\/pre>\n    ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The column number of the code location.<\/p>\n<p>This can be null, indicating that the column number is unknown or\nunimportant.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int column = null\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/column.html",
                    "name": "column",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>Whether this stack frame comes from the Dart core libraries.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isCore = false\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/isCore.html",
                    "name": "isCore",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>Returns a human-friendly description of the library that this stack frame\ncomes from.<\/p>\n<p>This will usually be the string form of <a href=\"package-stack_trace_stack_trace\/UnparsedFrame\/uri.html\">uri<\/a>, but a relative URI will be\nused if possible. Data URIs will be truncated.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String library = \"unparsed\"\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/library.html",
                    "name": "library",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>The line number on which the code location is located.<\/p>\n<p>This can be null, indicating that the line number is unknown or\nunimportant.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int line = null\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/line.html",
                    "name": "line",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>A human-friendly description of the code location.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String location = \"unparsed\"\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/location.html",
                    "name": "location",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>The name of the member in which the code location occurs.<\/p>\n<p>Anonymous closures are represented as <code>&lt;fn&gt;<\/code> in this member string.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String member\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/member.html",
                    "name": "member",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>Returns the name of the package this stack frame comes from, or <code>null<\/code> if\nthis stack frame doesn't come from a <code>package:<\/code> URL.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String package = null\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/package.html",
                    "name": "package",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                },
                {
                    "desc": "<p>The URI of the file in which the code is located.<\/p>\n<p>This URI will usually have the scheme <code>dart<\/code>, <code>file<\/code>, <code>http<\/code>, or <code>https<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri uri = new Uri(path: \"unparsed\")\n\n<\/code><\/pre>\n        ",
                    "href": "package-stack_trace_stack_trace\/UnparsedFrame\/uri.html",
                    "name": "uri",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "stack_trace.UnparsedFrame",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}