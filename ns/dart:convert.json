{
    "class": [
        {
            "desc": "<p>An <a href=\"dart-convert\/AsciiCodec-class.html\">AsciiCodec<\/a> allows encoding strings as ASCII bytes\nand decoding ASCII bytes to strings.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/AsciiCodec-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.AsciiCodec",
            "shortname": "AsciiCodec",
            "extends": [
                "dart:convert.Encoding",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Instantiates a new <a href=\"dart-convert\/AsciiCodec-class.html\">AsciiCodec<\/a>.<\/p>\n<p>If <code>allowInvalid<\/code> is true, the <a href=\"dart-convert\/AsciiCodec\/decode.html\">decode<\/a> method and the converter\nreturned by <a href=\"dart-convert\/AsciiCodec\/decoder.html\">decoder<\/a> will default to allowing invalid values.\nIf allowing invalid values, the values will be decoded into the Unicode\nReplacement character (U+FFFD). If not, an exception will be thrown.\nCalls to the <a href=\"dart-convert\/AsciiCodec\/decode.html\">decode<\/a> method can choose to override this default.<\/p>\n<p>Encoders will not accept invalid (non ASCII) characters.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsciiCodec({bool allowInvalid = false}) : _allowInvalid = allowInvalid;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiCodec\/AsciiCodec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AsciiCodec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the ASCII <code>bytes<\/code> (a list of unsigned 7-bit integers) to the\ncorresponding string.<\/p>\n<p>If <code>bytes<\/code> contains values that are not in the range 0 .. 127, the decoder\nwill eventually throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>If <code>allowInvalid<\/code> is not provided, it defaults to the value used to create\nthis <a href=\"dart-convert\/AsciiCodec-class.html\">AsciiCodec<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String decode(List&lt;int&gt; bytes, {bool allowInvalid}) {\n  allowInvalid ??= _allowInvalid;\n  if (allowInvalid) {\n    return const AsciiDecoder(allowInvalid: true).convert(bytes);\n  } else {\n    return const AsciiDecoder(allowInvalid: false).convert(bytes);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiCodec\/decode.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "bytes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Encodes <code>input<\/code>.<\/p>\n<p>The input is encoded as if by <code>encoder.convert<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List encode(String source) =&gt; encoder.convert(source);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiCodec\/encode.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "encode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>List&lt;int&gt;<\/code> to <code>String<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AsciiDecoder get decoder =&gt; _allowInvalid\n    ? const AsciiDecoder(allowInvalid: true)\n    : const AsciiDecoder(allowInvalid: false);<\/code><\/pre>\n        ",
                    "href": "dart-convert\/AsciiCodec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.AsciiDecoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>String<\/code> to <code>List&lt;int&gt;<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AsciiEncoder get encoder =&gt; const AsciiEncoder();<\/code><\/pre>\n        ",
                    "href": "dart-convert\/AsciiCodec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.AsciiEncoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": []
                },
                {
                    "desc": "<p>The name of this codec, \"us-ascii\".<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name =&gt; \"us-ascii\";<\/code><\/pre>\n        ",
                    "href": "dart-convert\/AsciiCodec\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.AsciiCodec",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/AsciiDecoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.AsciiDecoder",
            "shortname": "AsciiDecoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsciiDecoder({bool allowInvalid = false})\n    : super(allowInvalid, _asciiMask);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiDecoder\/AsciiDecoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AsciiDecoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.AsciiDecoder",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiDecoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.String>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiDecoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the <code>bytes<\/code> (a list of unsigned 7- or 8-bit integers) to the\ncorresponding string.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the sub-list of bytes from\n<code>start<\/code> to <code>end<\/code> (<code>end<\/code> not inclusive) is used as input to the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; bytes, [int start = 0, int end]) {\n  var byteCount = bytes.length;\n  RangeError.checkValidRange(start, end, byteCount);\n  end ??= byteCount;\n\n  for (var i = start; i &lt; end; i++) {\n    var byte = bytes[i];\n    if ((byte &amp; ~_subsetMask) != 0) {\n      if (!_allowInvalid) {\n        throw FormatException(\"Invalid value in input: $byte\");\n      }\n      return _convertInvalid(bytes, start, end);\n    }\n  }\n  return String.fromCharCodes(bytes, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiDecoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiDecoder",
                    "params": [
                        {
                            "name": "bytes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  StringConversionSink stringSink;\n  if (sink is StringConversionSink) {\n    stringSink = sink;\n  } else {\n    stringSink = StringConversionSink.from(sink);\n  }\n  \/\/ TODO(lrn): Use asUtf16Sink when it becomes available. It\n  \/\/ works just as well, is likely to have less decoding overhead,\n  \/\/ and make adding U+FFFD easier.\n  \/\/ At that time, merge this with _Latin1DecoderSink;\n  if (_allowInvalid) {\n    return _ErrorHandlingAsciiDecoderSink(stringSink.asUtf8Sink(false));\n  } else {\n    return _SimpleAsciiDecoderSink(stringSink);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiDecoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiDecoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class converts strings of only ASCII characters to bytes.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/AsciiEncoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.AsciiEncoder",
            "shortname": "AsciiEncoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsciiEncoder() : super(_asciiMask);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiEncoder\/AsciiEncoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AsciiEncoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.AsciiEncoder",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiEncoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiEncoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the <a href=\"dart-core\/String-class.html\">String<\/a> into a list of its code units.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the substring\n<code>string.substring(start, end)<\/code> is used as input to the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List convert(String string, [int start = 0, int end]) {\n  var stringLength = string.length;\n  end = RangeError.checkValidRange(start, end, stringLength);\n  var length = end - start;\n  var result = Uint8List(length);\n  for (var i = 0; i &lt; length; i++) {\n    var codeUnit = string.codeUnitAt(start + i);\n    if ((codeUnit &amp; ~_subsetMask) != 0) {\n      throw ArgumentError.value(\n          string, \"string\", \"Contains invalid characters.\");\n    }\n    result[i] = codeUnit;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiEncoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiEncoder",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  return _UnicodeSubsetEncoderSink(_subsetMask,\n      sink is ByteConversionSink ? sink : ByteConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/AsciiEncoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.AsciiEncoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"https:\/\/tools.ietf.org\/html\/rfc4648\">base64<\/a> encoder and decoder.<\/p>\n<p>A <a href=\"dart-convert\/Base64Codec-class.html\">Base64Codec<\/a> allows base64 encoding bytes into ASCII strings and\ndecoding valid encodings back to bytes.<\/p>\n<p>This implementation only handles the simplest RFC 4648 base64 and base64url\nencodings.\nIt does not allow invalid characters when decoding and it requires,\nand generates, padding so that the input is always a multiple of four\ncharacters.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Base64Codec-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Base64Codec",
            "shortname": "Base64Codec",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Base64Codec() : _encoder = const Base64Encoder();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Codec\/Base64Codec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Base64Codec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Base64Codec",
                    "params": []
                },
                {
                    "desc": "<p>Decodes <code>encoded<\/code>.<\/p>\n<p>The input is decoded as if by <code>decoder.convert<\/code>.<\/p>\n<p>The returned <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> contains exactly the decoded bytes,\nso the <a href=\"dart-core\/List\/length.html\">Uint8List.length<\/a> is precisely the number of decoded bytes.\nThe <a href=\"dart-typed_data\/TypedData\/buffer.html\">Uint8List.buffer<\/a> may be larger than the decoded bytes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List decode(String encoded) =&gt; decoder.convert(encoded);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Codec\/decode.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Codec",
                    "params": [
                        {
                            "name": "encoded",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Validates and normalizes the base64 encoded data in <code>source<\/code>.<\/p>\n<p>Only acts on the substring from <code>start<\/code> to <code>end<\/code>, with <code>end<\/code>\ndefaulting to the end of the string.<\/p>\n<p>Normalization will:<\/p>\n<ul>\n<li>Unescape any <code>%<\/code>-escapes.<\/li>\n<li>Only allow valid characters (<code>A<\/code>-<code>Z<\/code>, <code>a<\/code>-<code>z<\/code>, <code>0<\/code>-<code>9<\/code>, <code>\/<\/code> and <code>+<\/code>).<\/li>\n<li>Normalize a <code>_<\/code> or <code>-<\/code> character to <code>\/<\/code> or <code>+<\/code>.<\/li>\n<li>Validate that existing padding (trailing <code>=<\/code> characters) is correct.<\/li>\n<li>If no padding exists, add correct padding if necessary and possible.<\/li>\n<li>Validate that the length is correct (a multiple of four).<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String normalize(String source, [int start = 0, int end]) {\n  end = RangeError.checkValidRange(start, end, source.length);\n  const percent = 0x25;\n  const equals = 0x3d;\n  StringBuffer buffer;\n  var sliceStart = start;\n  var alphabet = _Base64Encoder._base64Alphabet;\n  var inverseAlphabet = _Base64Decoder._inverseAlphabet;\n  var firstPadding = -1;\n  var firstPaddingSourceIndex = -1;\n  var paddingCount = 0;\n  for (var i = start; i &lt; end;) {\n    var sliceEnd = i;\n    var char = source.codeUnitAt(i++);\n    var originalChar = char;\n    \/\/ Normalize char, keep originalChar to see if it matches the source.\n    if (char == percent) {\n      if (i + 2 &lt;= end) {\n        char = parseHexByte(source, i); \/\/ May be negative.\n        i += 2;\n        \/\/ We know that %25 isn't valid, but our table considers it\n        \/\/ a potential padding start, so skip the checks.\n        if (char == percent) char = -1;\n      } else {\n        \/\/ An invalid HEX escape (too short).\n        \/\/ Just skip past the handling and reach the throw below.\n        char = -1;\n      }\n    }\n    \/\/ If char is negative here, hex-decoding failed in some way.\n    if (0 &lt;= char &amp;&amp; char &lt;= 127) {\n      var value = inverseAlphabet[char];\n      if (value &gt;= 0) {\n        char = alphabet.codeUnitAt(value);\n        if (char == originalChar) continue;\n      } else if (value == _Base64Decoder._padding) {\n        \/\/ We have ruled out percent, so char is '='.\n        if (firstPadding &lt; 0) {\n          \/\/ Mark position in normalized output where padding occurs.\n          firstPadding = (buffer?.length ?? 0) + (sliceEnd - sliceStart);\n          firstPaddingSourceIndex = sliceEnd;\n        }\n        paddingCount++;\n        \/\/ It could have been an escaped equals (%3D).\n        if (originalChar == equals) continue;\n      }\n      if (value != _Base64Decoder._invalid) {\n        buffer ??= StringBuffer();\n        buffer.write(source.substring(sliceStart, sliceEnd));\n        buffer.writeCharCode(char);\n        sliceStart = i;\n        continue;\n      }\n    }\n    throw FormatException(\"Invalid base64 data\", source, sliceEnd);\n  }\n  if (buffer != null) {\n    buffer.write(source.substring(sliceStart, end));\n    if (firstPadding &gt;= 0) {\n      \/\/ There was padding in the source. Check that it is valid:\n      \/\/ * result length a multiple of four\n      \/\/ * one or two padding characters at the end.\n      _checkPadding(source, firstPaddingSourceIndex, end, firstPadding,\n          paddingCount, buffer.length);\n    } else {\n      \/\/ Length of last chunk (1-4 chars) in the encoding.\n      var endLength = ((buffer.length - 1) % 4) + 1;\n      if (endLength == 1) {\n        \/\/ The data must have length 0, 2 or 3 modulo 4.\n        throw FormatException(\"Invalid base64 encoding length \", source, end);\n      }\n      while (endLength &lt; 4) {\n        buffer.write(\"=\");\n        endLength++;\n      }\n    }\n    return source.replaceRange(start, end, buffer.toString());\n  }\n  \/\/ Original was already normalized, only check padding.\n  var length = end - start;\n  if (firstPadding &gt;= 0) {\n    _checkPadding(source, firstPaddingSourceIndex, end, firstPadding,\n        paddingCount, length);\n  } else {\n    \/\/ No padding given, so add some if needed it.\n    var endLength = length % 4;\n    if (endLength == 1) {\n      \/\/ The data must have length 0, 2 or 3 modulo 4.\n      throw FormatException(\"Invalid base64 encoding length \", source, end);\n    }\n    if (endLength &gt; 1) {\n      \/\/ There is no \"insertAt\" on String, but this works as well.\n      source = source.replaceRange(end, end, (endLength == 2) ? \"==\" : \"=\");\n    }\n  }\n  return source;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Codec\/normalize.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "normalize",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Codec",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Base64Decoder get decoder =&gt; const Base64Decoder();<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Base64Codec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Base64Decoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Base64Codec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Base64Encoder get encoder =&gt; _encoder;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Base64Codec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Base64Encoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Base64Codec",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Decoder for base64 encoded data.<\/p>\n<p>This decoder accepts both base64 and base64url (\"url-safe\") encodings.<\/p>\n<p>The encoding is required to be properly padded.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Base64Decoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Base64Decoder",
            "shortname": "Base64Decoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Base64Decoder();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Decoder\/Base64Decoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Base64Decoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Base64Decoder",
                    "params": []
                },
                {
                    "desc": "<p>Decodes the characters of <code>input<\/code> from <code>start<\/code> to <code>end<\/code> as base64.<\/p>\n<p>If <code>start<\/code> is omitted, it defaults to the start of <code>input<\/code>.\nIf <code>end<\/code> is omitted, it defaults to the end of <code>input<\/code>.<\/p>\n<p>The returned <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> contains exactly the decoded bytes,\nso the <a href=\"dart-core\/List\/length.html\">Uint8List.length<\/a> is precisely the number of decoded bytes.\nThe <a href=\"dart-typed_data\/TypedData\/buffer.html\">Uint8List.buffer<\/a> may be larger than the decoded bytes.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List convert(String input, [int start = 0, int end]) {\n  end = RangeError.checkValidRange(start, end, input.length);\n  if (start == end) return Uint8List(0);\n  var decoder = _Base64Decoder();\n  var buffer = decoder.decode(input, start, end);\n  decoder.close(input, end);\n  return buffer;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Decoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Decoder",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  return _Base64DecoderSink(sink);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Decoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Decoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Base64 and base64url encoding converter.<\/p>\n<p>Encodes lists of bytes using base64 or base64url encoding.<\/p>\n<p>The results are ASCII strings using a restricted alphabet.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Base64Encoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Base64Encoder",
            "shortname": "Base64Encoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Base64Encoder() : _urlSafe = false;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Encoder\/Base64Encoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Base64Encoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Base64Encoder",
                    "params": []
                },
                {
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; input) {\n  if (input.isEmpty) return \"\";\n  var encoder = _Base64Encoder(_urlSafe);\n  var buffer = encoder.encode(input, 0, input.length, true);\n  return String.fromCharCodes(buffer);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Encoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Encoder",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  if (sink is StringConversionSink) {\n    return _Utf8Base64EncoderSink(sink.asUtf8Sink(false), _urlSafe);\n  }\n  return _AsciiBase64EncoderSink(sink, _urlSafe);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Base64Encoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Base64Encoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The <a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a> provides an interface for converters to\nefficiently transmit byte data.<\/p>\n<p>Instead of limiting the interface to one non-chunked list of bytes it\naccepts its input in chunks (themselves being lists of bytes).<\/p>\n<p>This abstract class will likely get more methods over time. Implementers are\nurged to extend or mix in <a href=\"dart-convert\/ByteConversionSinkBase-class.html\">ByteConversionSinkBase<\/a> to ensure that their\nclass covers the newly added methods.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/ByteConversionSink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.ByteConversionSink",
            "shortname": "ByteConversionSink",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.ByteAccumulatorSink"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ByteConversionSink\/ByteConversionSink.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ByteConversionSink",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSink",
                    "params": []
                },
                {
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the bytes defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n<p>Contrary to <code>add<\/code> the given <code>chunk<\/code> must not be held onto. Once the method\nreturns, it is safe to overwrite the data in it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(List&lt;int&gt; chunk, int start, int end, bool isLast);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ByteConversionSink\/addSlice.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addSlice",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSink",
                    "params": [
                        {
                            "name": "chunk",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "isLast",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class provides a base-class for converters that need to accept byte\ninputs.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/ByteConversionSinkBase-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.ByteConversionSinkBase",
            "shortname": "ByteConversionSinkBase",
            "extends": [
                "dart:convert.ByteConversionSink",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.ByteAccumulatorSink"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-convert\/ByteConversionSinkBase\/ByteConversionSinkBase.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ByteConversionSinkBase",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSinkBase",
                    "params": []
                },
                {
                    "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; chunk);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ByteConversionSinkBase\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSinkBase",
                    "params": [
                        {
                            "name": "chunk",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the bytes defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n<p>Contrary to <code>add<\/code> the given <code>chunk<\/code> must not be held onto. Once the method\nreturns, it is safe to overwrite the data in it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(List&lt;int&gt; chunk, int start, int end, bool isLast) {\n  add(chunk.sublist(start, end));\n  if (isLast) close();\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ByteConversionSinkBase\/addSlice.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addSlice",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSinkBase",
                    "params": [
                        {
                            "name": "chunk",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "isLast",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ByteConversionSinkBase\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ByteConversionSinkBase",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/ChunkedConversionSink-class.html\">ChunkedConversionSink<\/a> is used to transmit data more efficiently between\ntwo converters during chunked conversions.<\/p>\n<p>The basic <code>ChunkedConversionSink<\/code> is just a <a href=\"dart-core\/Sink-class.html\">Sink<\/a>, and converters should\nwork with a plain <code>Sink<\/code>, but may work more efficiently with certain\nspecialized types of <code>ChunkedConversionSink<\/code>.<\/p>\n<p>It is recommended that implementations of <code>ChunkedConversionSink<\/code> extend\nthis class, to inherit any further methods that may be added to the class.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/ChunkedConversionSink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.ChunkedConversionSink",
            "shortname": "ChunkedConversionSink",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.ByteAccumulatorSink"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChunkedConversionSink();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ChunkedConversionSink\/ChunkedConversionSink.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ChunkedConversionSink",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.ChunkedConversionSink",
                    "params": []
                },
                {
                    "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T chunk);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ChunkedConversionSink\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ChunkedConversionSink",
                    "params": [
                        {
                            "name": "chunk",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ChunkedConversionSink\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ChunkedConversionSink",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/ClosableStringSink-class.html\">ClosableStringSink<\/a> extends the <a href=\"dart-core\/StringSink-class.html\">StringSink<\/a> interface by adding a\n<code>close<\/code> method.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/ClosableStringSink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.ClosableStringSink",
            "shortname": "ClosableStringSink",
            "extends": [
                "dart:core.StringSink",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Closes <code>this<\/code> and flushes any outstanding data.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/ClosableStringSink\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.ClosableStringSink",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/Codec-class.html\">Codec<\/a> encodes and (if supported) decodes data.<\/p>\n<p>Codecs can be fused. For example fusing <a href=\"dart-convert\/json-constant.html\">json<\/a> and <a href=\"dart-convert\/utf8-constant.html\">utf8<\/a> produces\nan encoder that can convert Json objects directly to bytes, or can decode\nbytes directly to json objects.<\/p>\n<p>Fused codecs generally attempt to optimize the operations and can be faster\nthan executing each step of an encoding separately.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Codec-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Codec",
            "shortname": "Codec",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.HexCodec",
                "convert.IdentityCodec",
                "convert.PercentCodec",
                "dart:convert.AsciiCodec",
                "dart:convert.Base64Codec",
                "dart:convert.JsonCodec",
                "dart:convert.Latin1Codec",
                "dart:convert.Utf8Codec",
                "dart:io.GZipCodec",
                "dart:io.SystemEncoding",
                "dart:io.ZLibCodec"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Codec();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Codec\/Codec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Codec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Codec",
                    "params": []
                },
                {
                    "desc": "<p>Decodes <code>encoded<\/code> data.<\/p>\n<p>The input is decoded as if by <code>decoder.convert<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S decode(T encoded) =&gt; decoder.convert(encoded);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Codec\/decode.html",
                    "isDeprecated": false,
                    "type": "<S>",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Codec",
                    "params": [
                        {
                            "name": "encoded",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Encodes <code>input<\/code>.<\/p>\n<p>The input is encoded as if by <code>encoder.convert<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T encode(S input) =&gt; encoder.convert(input);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Codec\/encode.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "encode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Codec",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<S>"
                        }
                    ]
                },
                {
                    "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>When encoding, the resulting codec encodes with <code>this<\/code> before\nencoding with <code>other<\/code>.<\/p>\n<p>When decoding, the resulting codec decodes with <code>other<\/code> before decoding\nwith <code>this<\/code>.<\/p>\n<p>In some cases one needs to use the <a href=\"dart-convert\/Codec\/inverted.html\">inverted<\/a> codecs to be able to fuse\nthem correctly. That is, the output type of <code>this<\/code> (<code>T<\/code>) must match the\ninput type of the second codec <code>other<\/code>.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">final jsonToBytes = json.fuse(utf8);\nList&lt;int&gt; bytes = jsonToBytes.encode([\"json-object\"]);\nvar decoded = jsonToBytes.decode(bytes);\nassert(decoded is List &amp;&amp; decoded[0] == \"json-object\");\n\nvar inverted = json.inverted;\nvar jsonIdentity = json.fuse(inverted);\nvar jsonObject = jsonIdentity.encode([\"1\", 2]);\nassert(jsonObject is List &amp;&amp; jsonObject[0] == \"1\" &amp;&amp; jsonObject[1] == 2);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(floitsch): use better example with line-splitter once that one is\n\/\/ in this library.\nCodec&lt;S, R&gt; fuse&lt;R&gt;(Codec&lt;T, R&gt; other) {\n  return _FusedCodec&lt;S, T, R&gt;(this, other);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Codec\/fuse.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Codec",
                    "name": "fuse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Codec",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Codec"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;T, S&gt; get decoder;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Codec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Codec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;S, T&gt; get encoder;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Codec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Codec",
                    "params": []
                },
                {
                    "desc": "<p>Inverts <code>this<\/code>.<\/p>\n<p>The <a href=\"dart-convert\/Codec\/encoder.html\">encoder<\/a> and <a href=\"dart-convert\/Codec\/decoder.html\">decoder<\/a> of the resulting codec are swapped.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Codec&lt;T, S&gt; get inverted =&gt; _InvertedCodec&lt;T, S&gt;(this);<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Codec\/inverted.html",
                    "name": "inverted",
                    "isDeprecated": false,
                    "type": "dart:convert.Codec",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Codec",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/Converter-class.html\">Converter<\/a> converts data from one representation into another.<\/p>\n<p>It is recommended that implementations of <code>Converter<\/code> extend this class,\nto inherit any further methods that may be added to the class.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Converter-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Converter",
            "shortname": "Converter",
            "extends": [
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.HexDecoder",
                "convert.HexEncoder",
                "convert.PercentDecoder",
                "convert.PercentEncoder",
                "crypto.Hmac",
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256",
                "dart:convert.AsciiDecoder",
                "dart:convert.AsciiEncoder",
                "dart:convert.Base64Decoder",
                "dart:convert.Base64Encoder",
                "dart:convert.HtmlEscape",
                "dart:convert.JsonDecoder",
                "dart:convert.JsonEncoder",
                "dart:convert.JsonUtf8Encoder",
                "dart:convert.Latin1Decoder",
                "dart:convert.Latin1Encoder",
                "dart:convert.Utf8Decoder",
                "dart:convert.Utf8Encoder",
                "dart:io.ZLibDecoder",
                "dart:io.ZLibEncoder"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Converter();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/Converter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Converter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; bind(Stream&lt;S&gt; stream) {\n  return Stream&lt;T&gt;.eventTransformed(\n      stream, (EventSink sink) =&gt; _ConverterStreamEventSink(this, sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a <code>Converter&lt;RS, RT&gt;<\/code> view of this stream transformer.<\/p>\n<p>The resulting transformer will check at run-time that all conversion\ninputs are actually instances of <code>S<\/code>,\nand it will check that all conversion output produced by this converter\nare actually instances of <code>RT<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;RS, RT&gt; cast&lt;RS, RT&gt;() =&gt; Converter.castFrom&lt;S, T, RS, RT&gt;(this);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": []
                },
                {
                    "desc": "<p>Adapts <code>source<\/code> to be a <code>Converter&lt;TS, TT&gt;<\/code>.<\/p>\n<p>This allows <code>source<\/code> to be used at the new type, but at run-time it\nmust satisfy the requirements of both the new type and its original type.<\/p>\n<p>Conversion input must be both <code>SS<\/code> and <code>TS<\/code> and the output created by\n<code>source<\/code> for those input must be both <code>ST<\/code> and <code>TT<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Converter&lt;TS, TT&gt; castFrom&lt;SS, ST, TS, TT&gt;(Converter&lt;SS, ST&gt; source) =&gt;\n    CastConverter&lt;SS, ST, TS, TT&gt;(source);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/castFrom.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter",
                    "name": "castFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Converter"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T convert(S input);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/convert.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<S>"
                        }
                    ]
                },
                {
                    "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;S, TT&gt; fuse&lt;TT&gt;(Converter&lt;T, TT&gt; other) {\n  return _FusedConverter&lt;S, T, TT&gt;(this, other);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/fuse.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter",
                    "name": "fuse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Converter"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Sink&lt;S&gt; startChunkedConversion(Sink&lt;T&gt; sink) {\n  throw UnsupportedError(\n      \"This converter does not support chunked conversions: $this\");\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Converter\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:core.Sink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Converter",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Open-ended Encoding enum.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Encoding-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Encoding",
            "shortname": "Encoding",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:convert.AsciiCodec",
                "dart:convert.Latin1Codec",
                "dart:convert.Utf8Codec",
                "dart:io.SystemEncoding"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Encoding();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Encoding\/Encoding.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Encoding",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; decodeStream(Stream&lt;List&lt;int&gt;&gt; byteStream) {\n  return byteStream\n      .transform&lt;String&gt;(decoder)\n      .fold(StringBuffer(),\n          (StringBuffer buffer, String string) =&gt; buffer..write(string))\n      .then((StringBuffer buffer) =&gt; buffer.toString());\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Encoding\/decodeStream.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:core.String>",
                    "name": "decodeStream",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": [
                        {
                            "name": "byteStream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                        }
                    ]
                },
                {
                    "desc": "<p>Gets an <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> object from the name of the character set\nname. The names used are the IANA official names for the\ncharacter set (see\n<a href=\"http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml)\">http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml)<\/a>.<\/p>\n<p>The <code>name<\/code> passed is case insensitive.<\/p>\n<p>If character set is not supported <code>null<\/code> is returned.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Encoding getByName(String name) {\n  if (name == null) return null;\n  name = name.toLowerCase();\n  return _nameToEncoding[name];\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Encoding\/getByName.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Encoding",
                    "name": "getByName",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>List&lt;int&gt;<\/code> to <code>String<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;List&lt;int&gt;, String&gt; get decoder;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Encoding\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter<dart:core.List<dart:core.int<dart:core.String>>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>String<\/code> to <code>List&lt;int&gt;<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;String, List&lt;int&gt;&gt; get encoder;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Encoding\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter<dart:core.String<dart:core.List<dart:core.int>>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": []
                },
                {
                    "desc": "<p>Name of the encoding.<\/p>\n<p>If the encoding is standardized, this is the lower-case version of one of\nthe IANA official names for the character set (see\n<a href=\"http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml\">http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml<\/a>)<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name;<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Encoding\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Encoding",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Converter which escapes characters with special meaning in HTML.<\/p>\n<p>The converter finds characters that are significant in HTML source and\nreplaces them with corresponding HTML entities.<\/p>\n<p>The characters that need escaping in HTML are:<\/p>\n<ul>\n<li>\n<code>&amp;<\/code> (ampersand) always need to be escaped.<\/li>\n<li>\n<code>&lt;<\/code> (less than) and '&gt;' (greater than) when inside an element.<\/li>\n<li>\n<code>\"<\/code> (quote) when inside a double-quoted attribute value.<\/li>\n<li>\n<code>'<\/code> (apostrophe) when inside a single-quoted attribute value.\n    Apostrophe is escaped as <code>&amp;#39;<\/code> instead of <code>&amp;apos;<\/code> since\n    not all browsers understand <code>&amp;apos;<\/code>.<\/li>\n<li>\n<code>\/<\/code> (slash) is recommended to be escaped because it may be used\n    to terminate an element in some HTML dialects.<\/li>\n<\/ul>\n<p>Escaping <code>&gt;<\/code> (greater than) isn't necessary, but the result is often\nfound to be easier to read if greater-than is also escaped whenever\nless-than is.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/HtmlEscape-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.HtmlEscape",
            "shortname": "HtmlEscape",
            "extends": [
                "dart:core.String",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create converter that escapes HTML characters.<\/p>\n<p>If <code>mode<\/code> is provided as either <a href=\"dart-convert\/HtmlEscapeMode\/attribute-constant.html\">HtmlEscapeMode.attribute<\/a> or\n<a href=\"dart-convert\/HtmlEscapeMode\/element-constant.html\">HtmlEscapeMode.element<\/a>, only the corresponding subset of HTML\ncharacters are escaped.\nThe default is to escape all HTML characters.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HtmlEscape([this.mode = HtmlEscapeMode.unknown]);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscape\/HtmlEscape.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HtmlEscape",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.HtmlEscape",
                    "params": [
                        {
                            "name": "mode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:convert.HtmlEscapeMode"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(String text) {\n  var val = _convert(text, 0, text.length);\n  return val == null ? text : val;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscape\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.HtmlEscape",
                    "params": [
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  return _HtmlEscapeSink(this,\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscape\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.HtmlEscape",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"dart-convert\/HtmlEscapeMode-class.html\">HtmlEscapeMode<\/a> used by the converter.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HtmlEscapeMode mode\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/HtmlEscape\/mode.html",
                    "name": "mode",
                    "isDeprecated": false,
                    "type": "dart:convert.HtmlEscapeMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.HtmlEscape",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>HTML escape modes.<\/p>\n<p>Allows specifying a mode for HTML escaping that depend on the context\nwhere the escaped result is going to be used.\nThe relevant contexts are:<\/p>\n<ul>\n<li>as text content of an HTML element.<\/li>\n<li>as value of a (single- or double-) quoted attribute value.<\/li>\n<\/ul>\n<p>All modes require escaping of <code>&amp;<\/code> (ampersand) characters, and may\nenable escaping of more characters.<\/p>\n<p>Custom escape modes can be created using the <a href=\"dart-convert\/HtmlEscapeMode\/HtmlEscapeMode.html\">HtmlEscapeMode.HtmlEscapeMode<\/a>\nconstructor.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/HtmlEscapeMode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.HtmlEscapeMode",
            "shortname": "HtmlEscapeMode",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a custom escaping mode.<\/p>\n<p>All modes escape <code>&amp;<\/code>.\nThe mode can further be set to escape <code>&lt;<\/code> and <code>&gt;<\/code> (<code>escapeLtGt<\/code>),\n<code>\"<\/code> (<code>escapeQuot<\/code>), <code>'<\/code> (<code>escapeApos<\/code>), and\/or <code>\/<\/code> (<code>escapeSlash<\/code>).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HtmlEscapeMode(\n    {String name = \"custom\",\n    this.escapeLtGt = false,\n    this.escapeQuot = false,\n    this.escapeApos = false,\n    this.escapeSlash = false})\n    : _name = name;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/HtmlEscapeMode.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HtmlEscapeMode",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": [
                        {
                            "name": "escapeApos",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "escapeLtGt",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "escapeQuot",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "escapeSlash",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _name;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Escaping mode for text going into double-quoted HTML attribute values.<\/p>\n<p>The result should not be used as the content of an unquoted\nor single-quoted attribute value.<\/p>\n<p>Escapes double quotes (<code>\"<\/code>) but not single quotes (<code>'<\/code>),\nand escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters because they are not allowed\nin strict XHTML attributes<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode attribute =\n    HtmlEscapeMode._('attribute', true, true, false, false)\n\n<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/attribute-constant.html",
                    "name": "attribute",
                    "isDeprecated": false,
                    "type": "dart:convert.HtmlEscapeMode",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Escaping mode for text going into HTML element content.<\/p>\n<p>The escaping only works for elements with normal HTML content,\nand not for, for example, script or style element content,\nwhich require escapes matching their particular content syntax.<\/p>\n<p>Escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode element =\n    HtmlEscapeMode._('element', true, false, false, false)\n\n<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/element-constant.html",
                    "name": "element",
                    "isDeprecated": false,
                    "type": "dart:convert.HtmlEscapeMode",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Whether to escape \"'\" (apostrophe).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeApos\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/HtmlEscapeMode\/escapeApos.html",
                    "name": "escapeApos",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Whether to escape '&lt;' and '&gt;'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeLtGt\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/HtmlEscapeMode\/escapeLtGt.html",
                    "name": "escapeLtGt",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Whether to escape '\"' (quote).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeQuot\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/HtmlEscapeMode\/escapeQuot.html",
                    "name": "escapeQuot",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Whether to escape \"\/\" (forward slash, solidus).<\/p>\n<p>Escaping a slash is recommended to avoid cross-site scripting attacks by\n<a href=\"https:\/\/www.owasp.org\/index.php\/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content\">the Open Web Application Security Project<\/a><\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeSlash\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/HtmlEscapeMode\/escapeSlash.html",
                    "name": "escapeSlash",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Escaping mode for text going into single-quoted HTML attribute values.<\/p>\n<p>The result should not be used as the content of an unquoted\nor double-quoted attribute value.<\/p>\n<p>Escapes single quotes (<code>'<\/code>) but not double quotes (<code>\"<\/code>),\nand escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters because they are not allowed\nin strict XHTML attributes<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode sqAttribute =\n    HtmlEscapeMode._('attribute', true, false, true, false)\n\n<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/sqAttribute-constant.html",
                    "name": "sqAttribute",
                    "isDeprecated": false,
                    "type": "dart:convert.HtmlEscapeMode",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                },
                {
                    "desc": "<p>Default escaping mode which escape all characters.<\/p>\n<p>The result of such an escaping is usable both in element content and\nin any attribute value.<\/p>\n<p>The escaping only works for elements with normal HTML content,\nand not for, for example, script or style element content,\nwhich require escapes matching their particular content syntax.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode unknown =\n    HtmlEscapeMode._('unknown', true, true, true, true)\n\n<\/code><\/pre>\n    ",
                    "href": "dart-convert\/HtmlEscapeMode\/unknown-constant.html",
                    "name": "unknown",
                    "isDeprecated": false,
                    "type": "dart:convert.HtmlEscapeMode",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:convert.HtmlEscapeMode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/JsonCodec-class.html\">JsonCodec<\/a> encodes JSON objects to strings and decodes strings to\nJSON objects.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>var encoded = json.encode([1, 2, { \"a\": null }]);\nvar decoded = json.decode('[\"foo\", { \"bar\": 499 }]');\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonCodec-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonCodec",
            "shortname": "JsonCodec",
            "extends": [
                "dart:core.String",
                "dart:core.Object",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <code>JsonCodec<\/code> with the given reviver and encoding function.<\/p>\n<p>The <code>reviver<\/code> function is called during decoding. It is invoked once for\neach object or list property that has been parsed.\nThe <code>key<\/code> argument is either the integer list index for a list property,\nthe string map key for object properties, or <code>null<\/code> for the final result.<\/p>\n<p>If <code>reviver<\/code> is omitted, it defaults to returning the value argument.<\/p>\n<p>The <code>toEncodable<\/code> function is used during encoding. It is invoked for\nvalues that are not directly encodable to a string (a value that is not a\nnumber, boolean, string, null, list or a map with string keys). The\nfunction must return an object that is directly encodable. The elements of\na returned list and values of a returned map do not need to be directly\nencodable, and if they aren't, <code>toEncodable<\/code> will be used on them as well.\nPlease notice that it is possible to cause an infinite recursive regress\nin this way, by effectively creating an infinite data structure through\nrepeated call to <code>toEncodable<\/code>.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()<\/code> on the unencodable object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonCodec({reviver(Object key, Object value), toEncodable(var object)})\n    : _reviver = reviver,\n      _toEncodable = toEncodable;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonCodec\/JsonCodec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonCodec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonCodec",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Parses the string and returns the resulting Json object.<\/p>\n<p>The optional <code>reviver<\/code> function is called once for each object or list\nproperty that has been parsed during decoding. The <code>key<\/code> argument is either\nthe integer list index for a list property, the string map key for object\nproperties, or <code>null<\/code> for the final result.<\/p>\n<p>The default <code>reviver<\/code> (when not provided) is the identity function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic decode(String source, {reviver(Object key, Object value)}) {\n  reviver ??= _reviver;\n  if (reviver == null) return decoder.convert(source);\n  return JsonDecoder(reviver).convert(source);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonCodec\/decode.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonCodec",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>value<\/code> to a JSON string.<\/p>\n<p>If value contains objects that are not directly encodable to a JSON\nstring (a value that is not a number, boolean, string, null, list or a map\nwith string keys), the <code>toEncodable<\/code> function is used to convert it to an\nobject that must be directly encodable.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()<\/code> on the unencodable object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String encode(Object value, {toEncodable(object)}) {\n  toEncodable ??= _toEncodable;\n  if (toEncodable == null) return encoder.convert(value);\n  return JsonEncoder(toEncodable).convert(value);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonCodec\/encode.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "encode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonCodec",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">JsonDecoder get decoder {\n  if (_reviver == null) return const JsonDecoder();\n  return JsonDecoder(_reviver);\n}<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonCodec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.JsonDecoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonCodec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">JsonEncoder get encoder {\n  if (_toEncodable == null) return const JsonEncoder();\n  return JsonEncoder(_toEncodable);\n}<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonCodec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.JsonEncoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonCodec",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Reports that an object could not be stringified due to cyclic references.<\/p>\n<p>An object that references itself cannot be serialized by\n<a href=\"dart-convert\/JsonCodec\/encode.html\">JsonCodec.encode<\/a>\/<a href=\"dart-convert\/JsonEncoder\/convert.html\">JsonEncoder.convert<\/a>.\nWhen the cycle is detected, a <a href=\"dart-convert\/JsonCyclicError-class.html\">JsonCyclicError<\/a> is thrown.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonCyclicError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonCyclicError",
            "shortname": "JsonCyclicError",
            "extends": [
                "dart:convert.JsonUnsupportedObjectError",
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>The first object that was detected as part of a cycle.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">JsonCyclicError(Object object) : super(object);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonCyclicError\/JsonCyclicError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonCyclicError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonCyclicError",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Cyclic error in JSON stringify\";<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonCyclicError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonCyclicError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class parses JSON strings and builds the corresponding objects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonDecoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonDecoder",
            "shortname": "JsonDecoder",
            "extends": [
                "dart:core.Object",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.Object",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs a new JsonDecoder.<\/p>\n<p>The <code>reviver<\/code> may be <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonDecoder([reviver(Object key, Object value)]) : _reviver = reviver;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonDecoder\/JsonDecoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonDecoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonDecoder",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;Object&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonDecoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.Object>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonDecoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the given JSON-string <code>input<\/code> to its corresponding object.<\/p>\n<p>Parsed JSON values are of the types <a href=\"dart-core\/num-class.html\">num<\/a>, <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-core\/bool-class.html\">bool<\/a>, <a href=\"dart-core\/Null-class.html\">Null<\/a>,\n<a href=\"dart-core\/List-class.html\">List<\/a>s of parsed JSON values or <a href=\"dart-core\/Map-class.html\">Map<\/a>s from <a href=\"dart-core\/String-class.html\">String<\/a> to parsed JSON\nvalues.<\/p>\n<p>If <code>this<\/code> was initialized with a reviver, then the parsing operation\ninvokes the reviver on every object or list property that has been parsed.\nThe arguments are the property name (<a href=\"dart-core\/String-class.html\">String<\/a>) or list index (<a href=\"dart-core\/int-class.html\">int<\/a>), and\nthe value is the parsed value. The return value of the reviver is used as\nthe value of that property instead the parsed value.<\/p>\n<p>Throws <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the input is not valid JSON text.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic convert(String input) =&gt; _parseJson(input, _reviver);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonDecoder\/convert.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonDecoder",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a conversion from a chunked JSON string to its corresponding object.<\/p>\n<p>The output <code>sink<\/code> receives exactly one decoded element through <code>add<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external StringConversionSink startChunkedConversion(Sink&lt;Object&gt; sink);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonDecoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonDecoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.Object>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class converts JSON objects to strings.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonEncoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonEncoder",
            "shortname": "JsonEncoder",
            "extends": [
                "dart:core.String",
                "dart:core.Object",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.Object",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a JSON encoder.<\/p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and\nmaps with string keys directly.<\/p>\n<p>Any other object is attempted converted by <code>toEncodable<\/code> to an\nobject that is of one of the convertible types.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to calling <code>.toJson()<\/code> on\nthe object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonEncoder([toEncodable(object)])\n    : indent = null,\n      _toEncodable = toEncodable;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonEncoder\/JsonEncoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonEncoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;Object&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonEncoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.String>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>object<\/code> to a JSON <a href=\"dart-core\/String-class.html\">String<\/a>.<\/p>\n<p>Directly serializable values are <a href=\"dart-core\/num-class.html\">num<\/a>, <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-core\/bool-class.html\">bool<\/a>, and <a href=\"dart-core\/Null-class.html\">Null<\/a>, as\nwell as some <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"dart-core\/Map-class.html\">Map<\/a> values. For <a href=\"dart-core\/List-class.html\">List<\/a>, the elements must all be\nserializable. For <a href=\"dart-core\/Map-class.html\">Map<\/a>, the keys must be <a href=\"dart-core\/String-class.html\">String<\/a> and the values must be\nserializable.<\/p>\n<p>If a value of any other type is attempted to be serialized, the\n<code>toEncodable<\/code> function provided in the constructor is called with the value\nas argument. The result, which must be a directly serializable value, is\nserialized instead of the original value.<\/p>\n<p>If the conversion throws, or returns a value that is not directly\nserializable, a <a href=\"dart-convert\/JsonUnsupportedObjectError-class.html\">JsonUnsupportedObjectError<\/a> exception is thrown.\nIf the call throws, the error is caught and stored in the\n<a href=\"dart-convert\/JsonUnsupportedObjectError-class.html\">JsonUnsupportedObjectError<\/a>'s <code>cause<\/code> field.<\/p>\n<p>If a <a href=\"dart-core\/List-class.html\">List<\/a> or <a href=\"dart-core\/Map-class.html\">Map<\/a> contains a reference to itself, directly or through\nother lists or maps, it cannot be serialized and a <a href=\"dart-convert\/JsonCyclicError-class.html\">JsonCyclicError<\/a> is\nthrown.<\/p>\n<p><code>object<\/code> should not change during serialization.<\/p>\n<p>If an object is serialized more than once, <a href=\"dart-convert\/JsonEncoder\/convert.html\">convert<\/a> may cache the text\nfor it. In other words, if the content of an object changes after it is\nfirst serialized, the new values may not be reflected in the result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(Object object) =&gt;\n    _JsonStringStringifier.stringify(object, _toEncodable, indent);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonEncoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;Object, T&gt; fuse&lt;T&gt;(Converter&lt;String, T&gt; other) {\n  if (other is Utf8Encoder &amp;&amp; T is List&lt;int&gt;) {\n    \/\/ The instance check guarantees that `T` is (a subtype of) List&lt;int&gt;,\n    \/\/ but the static type system doesn't know that, and so we cast.\n    \/\/ Cast through dynamic to keep the cast implicit for builds using\n    \/\/ unchecked implicit casts.\n    return JsonUtf8Encoder(indent, _toEncodable) as dynamic;\n  }\n  return super.fuse&lt;T&gt;(other);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonEncoder\/fuse.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter<dart:core.Object>",
                    "name": "fuse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Converter<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n<p>Returns a chunked-conversion sink that accepts at most one object. It is\nan error to invoke <code>add<\/code> more than once on the returned sink.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChunkedConversionSink&lt;Object&gt; startChunkedConversion(Sink&lt;String&gt; sink) {\n  if (sink is _Utf8EncoderSink) {\n    return _JsonUtf8EncoderSink(\n        sink._sink,\n        _toEncodable,\n        JsonUtf8Encoder._utf8Encode(indent),\n        JsonUtf8Encoder._defaultBufferSize);\n  }\n  return _JsonEncoderSink(\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink),\n      _toEncodable,\n      indent);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonEncoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ChunkedConversionSink<dart:core.Object>",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The string used for indention.<\/p>\n<p>When generating multi-line output, this string is inserted once at the\nbeginning of each indented line for each level of indentation.<\/p>\n<p>If <code>null<\/code>, the output is encoded as a single line.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String indent\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonEncoder\/indent.html",
                    "name": "indent",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonEncoder",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown by JSON serialization if an object cannot be serialized.<\/p>\n<p>The <a href=\"dart-convert\/JsonUnsupportedObjectError\/unsupportedObject.html\">unsupportedObject<\/a> field holds that object that failed to be serialized.<\/p>\n<p>If an object isn't directly serializable, the serializer calls the <code>toJson<\/code>\nmethod on the object. If that call fails, the error will be stored in the\n<a href=\"dart-convert\/JsonUnsupportedObjectError\/cause.html\">cause<\/a> field. If the call returns an object that isn't directly\nserializable, the <a href=\"dart-convert\/JsonUnsupportedObjectError\/cause.html\">cause<\/a> is null.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonUnsupportedObjectError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonUnsupportedObjectError",
            "shortname": "JsonUnsupportedObjectError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:convert.JsonCyclicError"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">JsonUnsupportedObjectError(this.unsupportedObject,\n    {this.cause, this.partialResult});<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUnsupportedObjectError\/JsonUnsupportedObjectError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonUnsupportedObjectError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonUnsupportedObjectError",
                    "params": [
                        {
                            "name": "cause",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "partialResult",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "unsupportedObject",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var safeString = Error.safeToString(unsupportedObject);\n  String prefix;\n  if (cause != null) {\n    prefix = \"Converting object to an encodable object failed:\";\n  } else {\n    prefix = \"Converting object did not return an encodable object:\";\n  }\n  return \"$prefix $safeString\";\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUnsupportedObjectError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonUnsupportedObjectError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The exception thrown when trying to convert the object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object cause\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonUnsupportedObjectError\/cause.html",
                    "name": "cause",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonUnsupportedObjectError",
                    "params": []
                },
                {
                    "desc": "<p>The partial result of the conversion, up until the error happened.<\/p>\n<p>May be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String partialResult\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonUnsupportedObjectError\/partialResult.html",
                    "name": "partialResult",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonUnsupportedObjectError",
                    "params": []
                },
                {
                    "desc": "<p>The object that could not be serialized.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object unsupportedObject\n\n<\/code><\/pre>\n        ",
                    "href": "dart-convert\/JsonUnsupportedObjectError\/unsupportedObject.html",
                    "name": "unsupportedObject",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.JsonUnsupportedObjectError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Encoder that encodes a single object as a UTF-8 encoded JSON string.<\/p>\n<p>This encoder works equivalently to first converting the object to\na JSON string, and then UTF-8 encoding the string, but without\ncreating an intermediate string.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/JsonUtf8Encoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.JsonUtf8Encoder",
            "shortname": "JsonUtf8Encoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.Object",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.Object",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create converter.<\/p>\n<p>If <code>indent<\/code> is non-<code>null<\/code>, the converter attempts to \"pretty-print\" the\nJSON, and uses <code>indent<\/code> as the indentation. Otherwise the result has no\nwhitespace outside of string literals.\nIf <code>indent<\/code> contains characters that are not valid JSON whitespace\ncharacters, the result will not be valid JSON. JSON whitespace characters\nare space (U+0020), tab (U+0009), line feed (U+000a) and carriage return\n(U+000d) (<a href=\"http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-404.htm\">ECMA\n404<\/a>).<\/p>\n<p>The <code>bufferSize<\/code> is the size of the internal buffers used to collect\nUTF-8 code units.\nIf using <a href=\"dart-convert\/JsonUtf8Encoder\/startChunkedConversion.html\">startChunkedConversion<\/a>, it will be the size of the chunks.<\/p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and maps\ndirectly.<\/p>\n<p>Any other object is attempted converted by <code>toEncodable<\/code> to an object that\nis of one of the convertible types.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to calling <code>.toJson()<\/code> on the\nobject.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">JsonUtf8Encoder(\n    [String indent, toEncodable(object), int bufferSize = _defaultBufferSize])\n    : _indent = _utf8Encode(indent),\n      _toEncodable = toEncodable,\n      _bufferSize = bufferSize;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUtf8Encoder\/JsonUtf8Encoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "JsonUtf8Encoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.JsonUtf8Encoder",
                    "params": [
                        {
                            "name": "bufferSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "indent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;Object&gt; stream) {\n  return super.bind(stream);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUtf8Encoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonUtf8Encoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Convert <code>object<\/code> into UTF-8 encoded JSON.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(Object object) {\n  var bytes = &lt;List&lt;int&gt;&gt;[];\n  \/\/ The `stringify` function always converts into chunks.\n  \/\/ Collect the chunks into the `bytes` list, then combine them afterwards.\n  void addChunk(Uint8List chunk, int start, int end) {\n    if (start &gt; 0 || end &lt; chunk.length) {\n      var length = end - start;\n      chunk =\n          Uint8List.view(chunk.buffer, chunk.offsetInBytes + start, length);\n    }\n    bytes.add(chunk);\n  }\n\n  _JsonUtf8Stringifier.stringify(\n      object, _indent, _toEncodable, _bufferSize, addChunk);\n  if (bytes.length == 1) return bytes[0];\n  var length = 0;\n  for (var i = 0; i &lt; bytes.length; i++) {\n    length += bytes[i].length;\n  }\n  var result = Uint8List(length);\n  for (var i = 0, offset = 0; i &lt; bytes.length; i++) {\n    var byteList = bytes[i];\n    int end = offset + byteList.length;\n    result.setRange(offset, end, byteList);\n    offset = end;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUtf8Encoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonUtf8Encoder",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Start a chunked conversion.<\/p>\n<p>Only one object can be passed into the returned sink.<\/p>\n<p>The argument <code>sink<\/code> will receive byte lists in sizes depending on the\n<code>bufferSize<\/code> passed to the constructor when creating this encoder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChunkedConversionSink&lt;Object&gt; startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  ByteConversionSink byteSink;\n  if (sink is ByteConversionSink) {\n    byteSink = sink;\n  } else {\n    byteSink = ByteConversionSink.from(sink);\n  }\n  return _JsonUtf8EncoderSink(byteSink, _toEncodable, _indent, _bufferSize);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUtf8Encoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ChunkedConversionSink<dart:core.Object>",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.JsonUtf8Encoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_BUFFER_SIZE = _defaultBufferSize\n\n<\/code><\/pre>\n    ",
                    "href": "dart-convert\/JsonUtf8Encoder\/DEFAULT_BUFFER_SIZE-constant.html",
                    "name": "DEFAULT_BUFFER_SIZE",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:convert.JsonUtf8Encoder",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/Latin1Codec-class.html\">Latin1Codec<\/a> encodes strings to ISO Latin-1 (aka ISO-8859-1) bytes\nand decodes Latin-1 bytes to strings.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Latin1Codec-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Latin1Codec",
            "shortname": "Latin1Codec",
            "extends": [
                "dart:convert.Encoding",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Instantiates a new <a href=\"dart-convert\/Latin1Codec-class.html\">Latin1Codec<\/a>.<\/p>\n<p>If <code>allowInvalid<\/code> is true, the <a href=\"dart-convert\/Latin1Codec\/decode.html\">decode<\/a> method and the converter\nreturned by <a href=\"dart-convert\/Latin1Codec\/decoder.html\">decoder<\/a> will default to allowing invalid values. Invalid\nvalues are decoded into the Unicode Replacement character (U+FFFD).\nCalls to the <a href=\"dart-convert\/Latin1Codec\/decode.html\">decode<\/a> method can override this default.<\/p>\n<p>Encoders will not accept invalid (non Latin-1) characters.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Latin1Codec({bool allowInvalid = false}) : _allowInvalid = allowInvalid;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Codec\/Latin1Codec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Latin1Codec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the Latin-1 <code>bytes<\/code> (a list of unsigned 8-bit integers) to the\ncorresponding string.<\/p>\n<p>If <code>bytes<\/code> contains values that are not in the range 0 .. 255, the decoder\nwill eventually throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>If <code>allowInvalid<\/code> is not provided, it defaults to the value used to create\nthis <a href=\"dart-convert\/Latin1Codec-class.html\">Latin1Codec<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String decode(List&lt;int&gt; bytes, {bool allowInvalid}) {\n  allowInvalid ??= _allowInvalid;\n  if (allowInvalid) {\n    return const Latin1Decoder(allowInvalid: true).convert(bytes);\n  } else {\n    return const Latin1Decoder(allowInvalid: false).convert(bytes);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Codec\/decode.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "bytes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Encodes <code>input<\/code>.<\/p>\n<p>The input is encoded as if by <code>encoder.convert<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List encode(String source) =&gt; encoder.convert(source);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Codec\/encode.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "encode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>List&lt;int&gt;<\/code> to <code>String<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Latin1Decoder get decoder =&gt; _allowInvalid\n    ? const Latin1Decoder(allowInvalid: true)\n    : const Latin1Decoder(allowInvalid: false);<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Latin1Codec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Latin1Decoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>String<\/code> to <code>List&lt;int&gt;<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Latin1Encoder get encoder =&gt; const Latin1Encoder();<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Latin1Codec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Latin1Encoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": []
                },
                {
                    "desc": "<p>The name of this codec, \"iso-8859-1\".<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name =&gt; \"iso-8859-1\";<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Latin1Codec\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Latin1Codec",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>This class converts Latin-1 bytes (lists of unsigned 8-bit integers)\nto a string.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Latin1Decoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Latin1Decoder",
            "shortname": "Latin1Decoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Instantiates a new <a href=\"dart-convert\/Latin1Decoder-class.html\">Latin1Decoder<\/a>.<\/p>\n<p>The optional <code>allowInvalid<\/code> argument defines how <a href=\"dart-convert\/Latin1Decoder\/convert.html\">convert<\/a> deals\nwith invalid bytes.<\/p>\n<p>If it is <code>true<\/code>, <a href=\"dart-convert\/Latin1Decoder\/convert.html\">convert<\/a> replaces invalid bytes with the Unicode\nReplacement character <code>U+FFFD<\/code> (\ufffd).\nOtherwise it throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Latin1Decoder({bool allowInvalid = false})\n    : super(allowInvalid, _latin1Mask);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Decoder\/Latin1Decoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Latin1Decoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Decoder",
                    "params": [
                        {
                            "name": "allowInvalid",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Decoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.String>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Decoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the <code>bytes<\/code> (a list of unsigned 7- or 8-bit integers) to the\ncorresponding string.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the sub-list of bytes from\n<code>start<\/code> to <code>end<\/code> (<code>end<\/code> not inclusive) is used as input to the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; bytes, [int start = 0, int end]) {\n  var byteCount = bytes.length;\n  RangeError.checkValidRange(start, end, byteCount);\n  end ??= byteCount;\n\n  for (var i = start; i &lt; end; i++) {\n    var byte = bytes[i];\n    if ((byte &amp; ~_subsetMask) != 0) {\n      if (!_allowInvalid) {\n        throw FormatException(\"Invalid value in input: $byte\");\n      }\n      return _convertInvalid(bytes, start, end);\n    }\n  }\n  return String.fromCharCodes(bytes, start, end);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Decoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Decoder",
                    "params": [
                        {
                            "name": "bytes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  StringConversionSink stringSink;\n  if (sink is StringConversionSink) {\n    stringSink = sink;\n  } else {\n    stringSink = StringConversionSink.from(sink);\n  }\n  \/\/ TODO(lrn): Use stringSink.asUtf16Sink() if it becomes available.\n  if (!_allowInvalid) return _Latin1DecoderSink(stringSink);\n  return _Latin1AllowInvalidDecoderSink(stringSink);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Decoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Decoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class converts strings of only ISO Latin-1 characters to bytes.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Latin1Encoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Latin1Encoder",
            "shortname": "Latin1Encoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Latin1Encoder() : super(_latin1Mask);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Encoder\/Latin1Encoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Latin1Encoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Encoder",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Encoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Encoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the <a href=\"dart-core\/String-class.html\">String<\/a> into a list of its code units.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the substring\n<code>string.substring(start, end)<\/code> is used as input to the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List convert(String string, [int start = 0, int end]) {\n  var stringLength = string.length;\n  end = RangeError.checkValidRange(start, end, stringLength);\n  var length = end - start;\n  var result = Uint8List(length);\n  for (var i = 0; i &lt; length; i++) {\n    var codeUnit = string.codeUnitAt(start + i);\n    if ((codeUnit &amp; ~_subsetMask) != 0) {\n      throw ArgumentError.value(\n          string, \"string\", \"Contains invalid characters.\");\n    }\n    result[i] = codeUnit;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Encoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Encoder",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  return _UnicodeSubsetEncoderSink(_subsetMask,\n      sink is ByteConversionSink ? sink : ByteConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Latin1Encoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Latin1Encoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> that splits a <a href=\"dart-core\/String-class.html\">String<\/a> into individual lines.<\/p>\n<p>A line is terminated by either a CR (U+000D), a LF (U+000A), a\nCR+LF sequence (DOS line ending),\nand a final non-empty line can be ended by the end of the string.<\/p>\n<p>The returned lines do not contain the line terminators.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/LineSplitter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.LineSplitter",
            "shortname": "LineSplitter",
            "extends": [
                "dart:core.String",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LineSplitter();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/LineSplitter\/LineSplitter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LineSplitter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.LineSplitter",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;String&gt; stream) {\n  return Stream&lt;String&gt;.eventTransformed(\n      stream, (EventSink&lt;String&gt; sink) =&gt; _LineSplitterEventSink(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/LineSplitter\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.String>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.LineSplitter",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; convert(String data) {\n  var lines = &lt;String&gt;[];\n  var end = data.length;\n  var sliceStart = 0;\n  var char = 0;\n  for (var i = 0; i &lt; end; i++) {\n    var previousChar = char;\n    char = data.codeUnitAt(i);\n    if (char != _CR) {\n      if (char != _LF) continue;\n      if (previousChar == _CR) {\n        sliceStart = i + 1;\n        continue;\n      }\n    }\n    lines.add(data.substring(sliceStart, i));\n    sliceStart = i + 1;\n  }\n  if (sliceStart &lt; end) {\n    lines.add(data.substring(sliceStart, end));\n  }\n  return lines;\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/LineSplitter\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.String>",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.LineSplitter",
                    "params": [
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Split <code>lines<\/code> into individual lines.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only split the contents of\n<code>lines.substring(start, end)<\/code>. The <code>start<\/code> and <code>end<\/code> values must\nspecify a valid sub-range of <code>lines<\/code>\n(<code>0 &lt;= start &lt;= end &lt;= lines.length<\/code>).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;String&gt; split(String lines, [int start = 0, int end]) sync* {\n  end = RangeError.checkValidRange(start, end, lines.length);\n  var sliceStart = start;\n  var char = 0;\n  for (var i = start; i &lt; end; i++) {\n    var previousChar = char;\n    char = lines.codeUnitAt(i);\n    if (char != _CR) {\n      if (char != _LF) continue;\n      if (previousChar == _CR) {\n        sliceStart = i + 1;\n        continue;\n      }\n    }\n    yield lines.substring(sliceStart, i);\n    sliceStart = i + 1;\n  }\n  if (sliceStart &lt; end) {\n    yield lines.substring(sliceStart, end);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/LineSplitter\/split.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.String>",
                    "name": "split",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.LineSplitter",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "lines",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  return _LineSplitterSink(\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/LineSplitter\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.LineSplitter",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class provides an interface for converters to\nefficiently transmit String data.<\/p>\n<p>Instead of limiting the interface to one non-chunked String it accepts\npartial strings or can be transformed into a byte sink that\naccepts UTF-8 code units.<\/p>\n<p>This abstract class will likely get more methods over time. Implementers are\nurged to extend <a href=\"dart-convert\/StringConversionSinkBase-class.html\">StringConversionSinkBase<\/a> or to mix in\n<a href=\"dart-convert\/StringConversionSinkMixin-class.html\">StringConversionSinkMixin<\/a>, to ensure that their class covers the newly\nadded methods.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/StringConversionSink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.StringConversionSink",
            "shortname": "StringConversionSink",
            "extends": [
                "dart:core.String",
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSink\/StringConversionSink.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringConversionSink",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSink",
                    "params": []
                },
                {
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the substring defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(String chunk, int start, int end, bool isLast);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSink\/addSlice.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addSlice",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSink",
                    "params": [
                        {
                            "name": "chunk",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "isLast",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>this<\/code> as a <a href=\"dart-convert\/ClosableStringSink-class.html\">ClosableStringSink<\/a>.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ClosableStringSink asStringSink();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSink\/asStringSink.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ClosableStringSink",
                    "name": "asStringSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSink",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this<\/code> as a sink that accepts UTF-8 input.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink asUtf8Sink(bool allowMalformed);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSink\/asUtf8Sink.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "asUtf8Sink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSink",
                    "params": [
                        {
                            "name": "allowMalformed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class provides a base-class for converters that need to accept String\ninputs.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/StringConversionSinkBase-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.StringConversionSinkBase",
            "shortname": "StringConversionSinkBase",
            "extends": [
                "dart:convert.StringConversionSinkMixin",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.StringAccumulatorSink"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-convert\/StringConversionSinkBase\/StringConversionSinkBase.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringConversionSinkBase",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkBase",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class provides a mixin for converters that need to accept String\ninputs.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/StringConversionSinkMixin-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.StringConversionSinkMixin",
            "shortname": "StringConversionSinkMixin",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.StringAccumulatorSink"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-convert\/StringConversionSinkMixin\/StringConversionSinkMixin.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringConversionSinkMixin",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": []
                },
                {
                    "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(String str) {\n  addSlice(str, 0, str.length, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSinkMixin\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": [
                        {
                            "name": "str",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the substring defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(String str, int start, int end, bool isLast);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSinkMixin\/addSlice.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addSlice",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "isLast",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "str",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>this<\/code> as a <a href=\"dart-convert\/ClosableStringSink-class.html\">ClosableStringSink<\/a>.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ClosableStringSink asStringSink() {\n  return _StringConversionSinkAsStringSinkAdapter(this);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSinkMixin\/asStringSink.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ClosableStringSink",
                    "name": "asStringSink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this<\/code> as a sink that accepts UTF-8 input.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink asUtf8Sink(bool allowMalformed) {\n  return _Utf8ConversionSink(this, allowMalformed);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSinkMixin\/asUtf8Sink.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "asUtf8Sink",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": [
                        {
                            "name": "allowMalformed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/StringConversionSinkMixin\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.StringConversionSinkMixin",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"dart-convert\/Utf8Codec-class.html\">Utf8Codec<\/a> encodes strings to utf-8 code units (bytes) and decodes\nUTF-8 code units to strings.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Utf8Codec-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Utf8Codec",
            "shortname": "Utf8Codec",
            "extends": [
                "dart:convert.Encoding",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Instantiates a new <a href=\"dart-convert\/Utf8Codec-class.html\">Utf8Codec<\/a>.<\/p>\n<p>The optional <code>allowMalformed<\/code> argument defines how <a href=\"dart-convert\/Utf8Codec\/decoder.html\">decoder<\/a> (and <a href=\"dart-convert\/Utf8Codec\/decode.html\">decode<\/a>)\ndeal with invalid or unterminated character sequences.<\/p>\n<p>If it is <code>true<\/code> (and not overridden at the method invocation) <a href=\"dart-convert\/Utf8Codec\/decode.html\">decode<\/a> and\nthe <a href=\"dart-convert\/Utf8Codec\/decoder.html\">decoder<\/a> replace invalid (or unterminated) octet\nsequences with the Unicode Replacement character <code>U+FFFD<\/code> (\ufffd). Otherwise\nthey throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Utf8Codec({bool allowMalformed = false})\n    : _allowMalformed = allowMalformed;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Codec\/Utf8Codec.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Utf8Codec",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Codec",
                    "params": [
                        {
                            "name": "allowMalformed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the UTF-8 <code>codeUnits<\/code> (a list of unsigned 8-bit integers) to the\ncorresponding string.<\/p>\n<p>If the <code>codeUnits<\/code> start with the encoding of a\n<a href=\"dart-convert\/unicodeBomCharacterRune-constant.html\">unicodeBomCharacterRune<\/a>, that character is discarded.<\/p>\n<p>If <code>allowMalformed<\/code> is <code>true<\/code> the decoder replaces invalid (or\nunterminated) character sequences with the Unicode Replacement character\n<code>U+FFFD<\/code> (\ufffd). Otherwise it throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>If <code>allowMalformed<\/code> is not given, it defaults to the <code>allowMalformed<\/code> that\nwas used to instantiate <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String decode(List&lt;int&gt; codeUnits, {bool allowMalformed}) {\n  allowMalformed ??= _allowMalformed;\n  return Utf8Decoder(allowMalformed: allowMalformed).convert(codeUnits);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Codec\/decode.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Codec",
                    "params": [
                        {
                            "name": "allowMalformed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "codeUnits",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>List&lt;int&gt;<\/code> to <code>String<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Utf8Decoder get decoder {\n  return Utf8Decoder(allowMalformed: _allowMalformed);\n}<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Utf8Codec\/decoder.html",
                    "name": "decoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Utf8Decoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Utf8Codec",
                    "params": []
                },
                {
                    "desc": "<p>Returns the encoder from <code>String<\/code> to <code>List&lt;int&gt;<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Utf8Encoder get encoder =&gt; const Utf8Encoder();<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Utf8Codec\/encoder.html",
                    "name": "encoder",
                    "isDeprecated": false,
                    "type": "dart:convert.Utf8Encoder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Utf8Codec",
                    "params": []
                },
                {
                    "desc": "<p>The name of this codec, \"utf-8\".<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name =&gt; \"utf-8\";<\/code><\/pre>\n        ",
                    "href": "dart-convert\/Utf8Codec\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:convert.Utf8Codec",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>This class converts UTF-8 code units (lists of unsigned 8-bit integers)\nto a string.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Utf8Decoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Utf8Decoder",
            "shortname": "Utf8Decoder",
            "extends": [
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.String",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Instantiates a new <a href=\"dart-convert\/Utf8Decoder-class.html\">Utf8Decoder<\/a>.<\/p>\n<p>The optional <code>allowMalformed<\/code> argument defines how <a href=\"dart-convert\/Utf8Decoder\/convert.html\">convert<\/a> deals\nwith invalid or unterminated character sequences.<\/p>\n<p>If it is <code>true<\/code> <a href=\"dart-convert\/Utf8Decoder\/convert.html\">convert<\/a> replaces invalid (or unterminated) character\nsequences with the Unicode Replacement character <code>U+FFFD<\/code> (\ufffd). Otherwise\nit throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Utf8Decoder({bool allowMalformed = false})\n    : _allowMalformed = allowMalformed;<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Decoder\/Utf8Decoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Utf8Decoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Decoder",
                    "params": [
                        {
                            "name": "allowMalformed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Decoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.String>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Decoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts the UTF-8 <code>codeUnits<\/code> (a list of unsigned 8-bit integers) to the\ncorresponding string.<\/p>\n<p>Uses the code units from <code>start<\/code> to, but no including, <code>end<\/code>.\nIf <code>end<\/code> is omitted, it defaults to <code>codeUnits.length<\/code>.<\/p>\n<p>If the <code>codeUnits<\/code> start with the encoding of a\n<a href=\"dart-convert\/unicodeBomCharacterRune-constant.html\">unicodeBomCharacterRune<\/a>, that character is discarded.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; codeUnits, [int start = 0, int end]) {\n  \/\/ Allow the implementation to intercept and specialize based on the type\n  \/\/ of codeUnits.\n  var result = _convertIntercepted(_allowMalformed, codeUnits, start, end);\n  if (result != null) {\n    return result;\n  }\n\n  var length = codeUnits.length;\n  end = RangeError.checkValidRange(start, end, length);\n\n  \/\/ Fast case for ASCII strings avoids StringBuffer\/_Utf8Decoder.\n  int oneBytes = _scanOneByteCharacters(codeUnits, start, end);\n  StringBuffer buffer;\n  bool isFirstCharacter = true;\n  if (oneBytes &gt; 0) {\n    var firstPart = String.fromCharCodes(codeUnits, start, start + oneBytes);\n    start += oneBytes;\n    if (start == end) {\n      return firstPart;\n    }\n    buffer = StringBuffer(firstPart);\n    isFirstCharacter = false;\n  }\n\n  buffer ??= StringBuffer();\n  var decoder = _Utf8Decoder(buffer, _allowMalformed);\n  decoder._isFirstCharacter = isFirstCharacter;\n  decoder.convert(codeUnits, start, end);\n  decoder.flush(codeUnits, end);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Decoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Decoder",
                    "params": [
                        {
                            "name": "codeUnits",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Converter&lt;List&lt;int&gt;, T&gt; fuse&lt;T&gt;(Converter&lt;String, T&gt; next);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Decoder\/fuse.html",
                    "isDeprecated": false,
                    "type": "dart:convert.Converter<dart:core.List<dart:core.int>>",
                    "name": "fuse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Decoder",
                    "params": [
                        {
                            "name": "next",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Converter<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  StringConversionSink stringSink;\n  if (sink is StringConversionSink) {\n    stringSink = sink;\n  } else {\n    stringSink = StringConversionSink.from(sink);\n  }\n  return stringSink.asUtf8Sink(_allowMalformed);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Decoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Decoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.String>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>This class converts strings to their UTF-8 code units (a list of\nunsigned 8-bit integers).<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-convert\/Utf8Encoder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:convert",
            "name": "dart:convert.Utf8Encoder",
            "shortname": "Utf8Encoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Utf8Encoder();<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Encoder\/Utf8Encoder.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Utf8Encoder",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Encoder",
                    "params": []
                },
                {
                    "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Encoder\/bind.html",
                    "isDeprecated": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "name": "bind",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Encoder",
                    "params": [
                        {
                            "name": "stream",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:async.Stream<dart:core.String>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>string<\/code> to its UTF-8 code units (a list of\nunsigned 8-bit integers).<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the substring\n<code>string.substring(start, end)<\/code> is converted.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(String string, [int start = 0, int end]) {\n  var stringLength = string.length;\n  end = RangeError.checkValidRange(start, end, stringLength);\n  var length = end - start;\n  if (length == 0) return Uint8List(0);\n  \/\/ Create a new encoder with a length that is guaranteed to be big enough.\n  \/\/ A single code unit uses at most 3 bytes, a surrogate pair at most 4.\n  var encoder = _Utf8Encoder.withBufferSize(length * 3);\n  var endPosition = encoder._fillBuffer(string, start, end);\n  assert(endPosition &gt;= end - 1);\n  if (endPosition != end) {\n    \/\/ Encoding skipped the last code unit.\n    \/\/ That can only happen if the last code unit is a leadsurrogate.\n    \/\/ Force encoding of the lead surrogate by itself.\n    var lastCodeUnit = string.codeUnitAt(end - 1);\n    assert(_isLeadSurrogate(lastCodeUnit));\n    \/\/ We use a non-surrogate as `nextUnit` so that _writeSurrogate just\n    \/\/ writes the lead-surrogate.\n    var wasCombined = encoder._writeSurrogate(lastCodeUnit, 0);\n    assert(!wasCombined);\n  }\n  return encoder._buffer.sublist(0, encoder._bufferIndex);\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Encoder\/convert.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Encoder",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  return _Utf8EncoderSink(\n      sink is ByteConversionSink ? sink : ByteConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
                    "href": "dart-convert\/Utf8Encoder\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.StringConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:convert.Utf8Encoder",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                        }
                    ]
                }
            ],
            "props": []
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}